--- kwin-5.8.2/orig.CMakeLists.txt	2016-10-18 13:38:30.000000000 +0200
+++ kwin-5.8.2/CMakeLists.txt	2016-10-27 15:51:27.001026812 +0200
@@ -158,7 +158,7 @@
     set(HAVE_WAYLAND_EGL TRUE)
 endif()
 
-find_package(XKB 0.5.0)
+find_package(XKB 0.4.1)
 set_package_properties(XKB PROPERTIES
                        TYPE REQUIRED
                        PURPOSE "Required for building KWin with Wayland support"
--- kwin-5.8.2/orig.keyboard_input.cpp	2016-10-18 13:37:30.000000000 +0200
+++ kwin-5.8.2/keyboard_input.cpp	2016-10-27 16:21:47.099986761 +0200
@@ -42,7 +42,7 @@
 #include <QTemporaryFile>
 // xkbcommon
 #include <xkbcommon/xkbcommon.h>
-#include <xkbcommon/xkbcommon-compose.h>
+// #include <xkbcommon/xkbcommon-compose.h>
 #include <xkbcommon/xkbcommon-keysyms.h>
 // system
 #include <sys/mman.h>
@@ -118,10 +118,10 @@
             locale = QByteArrayLiteral("C");
         }
 
-        m_compose.table = xkb_compose_table_new_from_locale(m_context, locale.constData(), XKB_COMPOSE_COMPILE_NO_FLAGS);
-        if (m_compose.table) {
-            m_compose.state = xkb_compose_state_new(m_compose.table, XKB_COMPOSE_STATE_NO_FLAGS);
-        }
+//         m_compose.table = xkb_compose_table_new_from_locale(m_context, locale.constData(), XKB_COMPOSE_COMPILE_NO_FLAGS);
+//         if (m_compose.table) {
+//             m_compose.state = xkb_compose_state_new(m_compose.table, XKB_COMPOSE_STATE_NO_FLAGS);
+//         }
     }
 
     auto resetModOnlyShortcut = [this] {
@@ -134,8 +134,8 @@
 
 Xkb::~Xkb()
 {
-    xkb_compose_state_unref(m_compose.state);
-    xkb_compose_table_unref(m_compose.table);
+//     xkb_compose_state_unref(m_compose.state);
+//     xkb_compose_table_unref(m_compose.table);
     xkb_state_unref(m_state);
     xkb_keymap_unref(m_keymap);
     xkb_context_unref(m_context);
@@ -289,21 +289,21 @@
     xkb_state_update_key(m_state, key + 8, static_cast<xkb_key_direction>(state));
     if (state == InputRedirection::KeyboardKeyPressed) {
         const auto sym = toKeysym(key);
-        if (m_compose.state && xkb_compose_state_feed(m_compose.state, sym) == XKB_COMPOSE_FEED_ACCEPTED) {
-            switch (xkb_compose_state_get_status(m_compose.state)) {
-            case XKB_COMPOSE_NOTHING:
-                m_keysym = sym;
-                break;
-            case XKB_COMPOSE_COMPOSED:
-                m_keysym = xkb_compose_state_get_one_sym(m_compose.state);
-                break;
-            default:
-                m_keysym = XKB_KEY_NoSymbol;
-                break;
-            }
-        } else {
+//         if (m_compose.state && xkb_compose_state_feed(m_compose.state, sym) == XKB_COMPOSE_FEED_ACCEPTED) {
+//             switch (xkb_compose_state_get_status(m_compose.state)) {
+//             case XKB_COMPOSE_NOTHING:
+//                 m_keysym = sym;
+//                 break;
+//             case XKB_COMPOSE_COMPOSED:
+//                 m_keysym = xkb_compose_state_get_one_sym(m_compose.state);
+//                 break;
+//             default:
+//                 m_keysym = XKB_KEY_NoSymbol;
+//                 break;
+//             }
+//         } else {
             m_keysym = sym;
-        }
+//         }
     }
     updateModifiers();
     updateConsumedModifiers(key);
