diff --git a/qtbase/src/corelib/io/qstandardpaths.cpp b/qtbase/src/corelib/io/qstandardpaths.cpp
index 74252d1..6f796f1 100644
--- a/qtbase/src/corelib/io/qstandardpaths.cpp
+++ b/qtbase/src/corelib/io/qstandardpaths.cpp
@@ -367,6 +367,11 @@ QT_BEGIN_NAMESPACE
 
     \note The storage location returned can be a directory that does not exist; i.e., it
     may need to be created by the system or the user.
+    \note On Mac OS X, Qt can be built to support the native conventions or the XDG-style
+    conventions in use in a regular Unix/Linux build. In this case, the method accepts a
+    second \a QStandardPaths::LocationConvention \a mode argument with its default value set to either
+    \a NativeLocations or \a XDGLocations depending on whether the \a QT_QSP_XDG_LOCATIONS
+    or \a QT_QSP_NATIVE_LOCATIONS preprocessor token is defined.
 */
 
 
@@ -379,6 +384,12 @@ QT_BEGIN_NAMESPACE
    writableLocation() if it can be determined. This list is empty if no locations
    for \a type are defined.
 
+   \note On Mac OS X, Qt can be built to support the native conventions or the XDG-style
+    conventions in use in a regular Unix/Linux build. In this case, the method accepts a
+    second \a QStandardPaths::LocationConvention \a mode argument with its default value set to either
+    \a NativeLocations or \a XDGLocations depending on whether the \a QT_QSP_XDG_LOCATIONS
+    or \a QT_QSP_NATIVE_LOCATIONS preprocessor token is defined.
+
    \sa writableLocation()
  */
 
@@ -393,6 +404,35 @@ QT_BEGIN_NAMESPACE
     \value LocateDirectory return only directories
 */
 
+/*!
+   \fn bool QStandardPaths::isLocationConventionSwitchable()
+
+   Returns true if Qt has been built with support for multiple location conventions,
+   i.e. with either the \a QT_QSP_XDG_LOCATIONS or \a QT_QSP_NATIVE_LOCATIONS
+   preprocessor token.
+
+   \sa QStandardPaths::LocationConvention
+*/
+
+/*!
+   \fn LocationConvention QStandardPaths::defaultLocationConvention()
+
+   Returns the default location convention with which Qt was built
+*/
+
+/*!
+    \enum QStandardPaths::LocationConvention
+
+    On OS X, this enum describes the different conventions to which the returned
+    locations can conform.
+
+    \value NativeLocations locations follow the native Mac OS X convention
+    \value XDGLocations locations follow XDG/Freedesktop conventions (defined only
+    when Qt was built with support for multiple conventions)
+
+    \sa QStandardPaths::isLocationConventionSwitchable()
+*/
+
 static bool existsAsSpecified(const QString &path, QStandardPaths::LocateOptions options)
 {
     if (options & QStandardPaths::LocateDirectory)
@@ -406,10 +446,24 @@ static bool existsAsSpecified(const QString &path, QStandardPaths::LocateOptions
 
    The full path to the first file or directory (depending on \a options) found is returned.
    If no such file or directory can be found, an empty string is returned.
+
+   \note On Mac OS X, Qt can be built to support the native conventions or the XDG-style
+    conventions in use in a regular Unix/Linux build. In this case, the method accepts a
+    second \a QStandardPaths::LocationConvention \a mode argument with its default value set to either
+    \a NativeLocations or \a XDGLocations depending on whether the \a QT_QSP_XDG_LOCATIONS
+    or \a QT_QSP_NATIVE_LOCATIONS preprocessor token is defined.
  */
+#ifdef QT_QSP_LOCATION_CONVENTION
+QString QStandardPaths::locate(StandardLocation type, const QString &fileName, LocateOptions options, LocationConvention mode)
+#else
 QString QStandardPaths::locate(StandardLocation type, const QString &fileName, LocateOptions options)
+#endif
 {
+#ifdef QT_QSP_LOCATION_CONVENTION
+    const QStringList &dirs = standardLocations(type, mode);
+#else
     const QStringList &dirs = standardLocations(type);
+#endif
     for (QStringList::const_iterator dir = dirs.constBegin(); dir != dirs.constEnd(); ++dir) {
         const QString path = *dir + QLatin1Char('/') + fileName;
         if (existsAsSpecified(path, options))
@@ -425,10 +479,24 @@ QString QStandardPaths::locate(StandardLocation type, const QString &fileName, L
    The \a options flag allows to specify whether to look for files or directories.
 
    Returns the list of all the files that were found.
+
+   \note On Mac OS X, Qt can be built to support the native conventions or the XDG-style
+    conventions in use in a regular Unix/Linux build. In this case, the method accepts a
+    second \a QStandardPaths::LocationConvention \a mode argument with its default value set to either
+    \a NativeLocations or \a XDGLocations depending on whether the \a QT_QSP_XDG_LOCATIONS
+    or \a QT_QSP_NATIVE_LOCATIONS preprocessor token is defined.
  */
+#ifdef QT_QSP_LOCATION_CONVENTION
+QStringList QStandardPaths::locateAll(StandardLocation type, const QString &fileName, LocateOptions options, LocationConvention mode)
+#else
 QStringList QStandardPaths::locateAll(StandardLocation type, const QString &fileName, LocateOptions options)
+#endif
 {
+#ifdef QT_QSP_LOCATION_CONVENTION
+    const QStringList &dirs = standardLocations(type, mode);
+#else
     const QStringList &dirs = standardLocations(type);
+#endif
     QStringList result;
     for (QStringList::const_iterator dir = dirs.constBegin(); dir != dirs.constEnd(); ++dir) {
         const QString path = *dir + QLatin1Char('/') + fileName;
diff --git a/qtbase/src/corelib/io/qstandardpaths.h b/qtbase/src/corelib/io/qstandardpaths.h
index 5c0e08b..acd3fbc 100644
--- a/qtbase/src/corelib/io/qstandardpaths.h
+++ b/qtbase/src/corelib/io/qstandardpaths.h
@@ -41,6 +41,8 @@ QT_BEGIN_NAMESPACE
 
 #ifndef QT_NO_STANDARDPATHS
 
+class Q_CORE_EXPORT QStandardPathsConfiguration;
+
 class Q_CORE_EXPORT QStandardPaths
 {
 public:
@@ -68,8 +70,40 @@ public:
         AppLocalDataLocation = DataLocation
     };
 
+#if defined(Q_OS_OSX) 
+#if defined(QT_QSP_XDG_LOCATIONS) || defined(QT_QSP_NATIVE_LOCATIONS)
+
+#if defined(QT_QSP_NATIVE_LOCATIONS) && defined(QT_QSP_XDG_LOCATIONS)
+#   error "Define either QT_QSP_NATIVE_LOCATIONS or QT_QSP_XDG_LOCATIONS but not both!"
+#endif
+
+    enum LocationConvention {
+        NativeLocations = 0x0,
+        XDGLocations = 0x1
+    };
+
+#ifdef QT_QSP_XDG_LOCATIONS
+#   define QT_QSP_LOCATION_CONVENTION QStandardPaths::XDGLocations
+#else
+#   define QT_QSP_LOCATION_CONVENTION QStandardPaths::NativeLocations
+#endif // location conventions
+
+#else  // support only native locations
+
+    enum LocationConvention {
+        NativeLocations = 0x0
+    };
+
+#endif // multiple conventions or not
+#endif // OSX
+
+#if defined(QT_QSP_LOCATION_CONVENTION)
+    static QString writableLocation(StandardLocation type, LocationConvention mode = QT_QSP_LOCATION_CONVENTION);
+    static QStringList standardLocations(StandardLocation type, LocationConvention mode = QT_QSP_LOCATION_CONVENTION);
+#else
     static QString writableLocation(StandardLocation type);
     static QStringList standardLocations(StandardLocation type);
+#endif
 
     enum LocateOption {
         LocateFile = 0x0,
@@ -77,8 +111,15 @@ public:
     };
     Q_DECLARE_FLAGS(LocateOptions, LocateOption)
 
+#if defined(QT_QSP_LOCATION_CONVENTION)
+    static QString locate(StandardLocation type, const QString &fileName, LocateOptions options = LocateFile,
+                          LocationConvention mode = QT_QSP_LOCATION_CONVENTION);
+    static QStringList locateAll(StandardLocation type, const QString &fileName, LocateOptions options = LocateFile,
+                                 LocationConvention mode = QT_QSP_LOCATION_CONVENTION);
+#else
     static QString locate(StandardLocation type, const QString &fileName, LocateOptions options = LocateFile);
     static QStringList locateAll(StandardLocation type, const QString &fileName, LocateOptions options = LocateFile);
+#endif
 #ifndef QT_BOOTSTRAPPED
     static QString displayName(StandardLocation type);
 #endif
@@ -91,6 +132,10 @@ public:
     static void setTestModeEnabled(bool testMode);
     static bool isTestModeEnabled();
 
+#ifdef Q_OS_OSX
+    static bool isLocationConventionSwitchable();
+    static LocationConvention defaultLocationConvention();
+#endif
 private:
     // prevent construction
     QStandardPaths();
diff --git a/qtbase/src/corelib/io/qstandardpaths_mac.mm b/qtbase/src/corelib/io/qstandardpaths_mac.mm
index d6126ce..0316e1e 100644
--- a/qtbase/src/corelib/io/qstandardpaths_mac.mm
+++ b/qtbase/src/corelib/io/qstandardpaths_mac.mm
@@ -38,6 +38,7 @@
 
 #ifndef QT_BOOTSTRAPPED
 #include <qcoreapplication.h>
+#include <qlibraryinfo.h>
 #endif
 
 #include <CoreFoundation/CoreFoundation.h>
@@ -136,8 +137,113 @@ static QString macLocation(QStandardPaths::StandardLocation type, short domain)
     return path;
 }
 
+static void normaliseDirs(QStringList &dirs)
+{
+    // Normalise paths, skip relative paths
+    QMutableListIterator<QString> it(dirs);
+    while (it.hasNext()) {
+        const QString dir = it.next();
+        if (!dir.startsWith(QLatin1Char('/')))
+            it.remove();
+        else
+            it.setValue(QDir::cleanPath(dir));
+    }
+
+    // Remove duplicates from the list, there's no use for duplicated
+    // paths in XDG_CONFIG_DIRS - if it's not found in the given
+    // directory the first time, it won't be there the second time.
+    // Plus duplicate paths causes problems for example for mimetypes,
+    // where duplicate paths here lead to duplicated mime types returned
+    // for a file, eg "text/plain,text/plain" instead of "text/plain"
+    dirs.removeDuplicates();
+}
+
+#if defined(QT_QSP_LOCATION_CONVENTION)
+static QStringList xdgCacheDirs()
+{
+    QStringList dirs;
+    // http://standards.freedesktop.org/basedir-spec/latest/
+    QString xdgConfigDirsEnv = QFile::decodeName(qgetenv("XDG_CACHE_HOME"));
+    if (xdgConfigDirsEnv.isEmpty()) {
+#ifndef QT_BOOTSTRAPPED
+        dirs.append(QDir::homePath() + QString::fromLatin1("/.cache"));
+#endif
+    } else {
+        dirs = xdgConfigDirsEnv.split(QLatin1Char(':'), QString::SkipEmptyParts);
+
+        normaliseDirs(dirs);
+    }
+    return dirs;
+}
+
+static QStringList xdgConfigDirs()
+{
+    QStringList dirs;
+    // http://standards.freedesktop.org/basedir-spec/latest/
+    QString xdgConfigDirsEnv = QFile::decodeName(qgetenv("XDG_CONFIG_DIRS"));
+    if (xdgConfigDirsEnv.isEmpty()) {
+#ifndef QT_BOOTSTRAPPED
+        dirs.append(QLibraryInfo::location(QLibraryInfo::PrefixPath) + QString::fromLatin1("/etc/xdg"));
+#endif
+    } else {
+        dirs = xdgConfigDirsEnv.split(QLatin1Char(':'), QString::SkipEmptyParts);
+
+        normaliseDirs(dirs);
+    }
+    return dirs;
+}
+
+static QStringList xdgDataDirs()
+{
+    QStringList dirs;
+    // http://standards.freedesktop.org/basedir-spec/latest/
+    QString xdgDataDirsEnv = QFile::decodeName(qgetenv("XDG_DATA_DIRS"));
+    if (xdgDataDirsEnv.isEmpty()) {
+#ifndef QT_BOOTSTRAPPED
+        dirs.append(QLibraryInfo::location(QLibraryInfo::PrefixPath) + QString::fromLatin1("/share"));
+#endif
+    } else {
+        dirs = xdgDataDirsEnv.split(QLatin1Char(':'), QString::SkipEmptyParts);
+
+        normaliseDirs(dirs);
+    }
+    return dirs;
+}
+#endif
+
+#if defined(QT_QSP_LOCATION_CONVENTION)
+QString QStandardPaths::writableLocation(StandardLocation type, LocationConvention mode)
+#else
 QString QStandardPaths::writableLocation(StandardLocation type)
+#endif
 {
+#if defined(QT_QSP_LOCATION_CONVENTION)
+    if (mode == XDGLocations) {
+        const QString prefix = (isTestModeEnabled())? QDir::homePath() + QLatin1String("/.qttest") : QDir::homePath();
+        QString path;
+        switch (type) {
+        case GenericDataLocation:
+        case AppDataLocation:
+        case AppLocalDataLocation:
+            path = prefix + QLatin1String("/.local/share");
+            if (type != GenericDataLocation)
+                appendOrganizationAndApp(path);
+            return path;
+        case GenericCacheLocation:
+        case CacheLocation:
+            path = prefix + QLatin1String("/.cache");
+            if (type == CacheLocation)
+                appendOrganizationAndApp(path);
+            return path;
+        case GenericConfigLocation:
+        case ConfigLocation:
+            return prefix + QLatin1String("/.config");
+        default:
+            break;
+        }
+    }
+#endif
+
     if (isTestModeEnabled()) {
         const QString qttestDir = QDir::homePath() + QLatin1String("/.qttest");
         QString path;
@@ -184,10 +290,31 @@ QString QStandardPaths::writableLocation(StandardLocation type)
     }
 }
 
+#if defined(QT_QSP_LOCATION_CONVENTION)
+QStringList QStandardPaths::standardLocations(StandardLocation type, LocationConvention mode)
+#else
 QStringList QStandardPaths::standardLocations(StandardLocation type)
+#endif
 {
     QStringList dirs;
 
+#if defined(QT_QSP_LOCATION_CONVENTION)
+    if (mode == XDGLocations ) {
+        switch (type) {
+        case GenericDataLocation:
+            dirs.append(xdgDataDirs());
+            break;
+        case GenericConfigLocation:
+        case ConfigLocation:
+            dirs.append(xdgConfigDirs());
+            break;
+        case GenericCacheLocation:
+        case CacheLocation:
+            dirs.append(xdgCacheDirs());
+            break;
+        }
+    }
+#endif
     if (type == GenericDataLocation || type == AppDataLocation || type == AppLocalDataLocation || type == GenericCacheLocation || type == CacheLocation) {
         const QString path = macLocation(type, kOnAppropriateDisk);
         if (!path.isEmpty())
@@ -195,6 +322,16 @@ QStringList QStandardPaths::standardLocations(StandardLocation type)
     }
 
     if (type == AppDataLocation || type == AppLocalDataLocation) {
+#if defined(QT_QSP_LOCATION_CONVENTION)
+        if (mode == XDGLocations) {
+            QStringList xdgDirs = xdgDataDirs();
+            for (int i = 0; i < xdgDirs.count(); ++i) {
+                appendOrganizationAndApp(xdgDirs[i]);
+            }
+            dirs.append(xdgDirs);
+        }
+#endif
+
         CFBundleRef mainBundle = CFBundleGetMainBundle();
         if (mainBundle) {
             CFURLRef bundleUrl = CFBundleCopyBundleURL(mainBundle);
@@ -218,7 +355,11 @@ QStringList QStandardPaths::standardLocations(StandardLocation type)
                 dirs.append(bundlePath + resourcesPath);
         }
     }
+#if defined(QT_QSP_LOCATION_CONVENTION)
+    const QString localDir = writableLocation(type, mode);
+#else
     const QString localDir = writableLocation(type);
+#endif
     dirs.prepend(localDir);
     return dirs;
 }
@@ -243,4 +384,22 @@ QString QStandardPaths::displayName(StandardLocation type)
 }
 #endif
 
+bool QStandardPaths::isLocationConventionSwitchable()
+{
+#if defined(QT_QSP_LOCATION_CONVENTION)
+    return true;
+#else
+    return false;
+#endif
+}
+
+QStandardPaths::LocationConvention QStandardPaths::defaultLocationConvention()
+{
+#if defined(QT_QSP_LOCATION_CONVENTION)
+    return QT_QSP_LOCATION_CONVENTION;
+#else
+    return NativeLocations;
+#endif
+}
+
 QT_END_NAMESPACE
