# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id: port=qt5 1 2014-12-08 18:51:13Z rjvbertin@gmail.com, mcalhoun@macports.org $

# set building_qt5 immediately!
set building_qt5    1

PortGroup           qt5 1.0
set branch          [join [lrange [split ${version} .] 0 1] .]

categories          aqua
platforms           macosx
maintainers         mcalhoun openmaintainer
license             {LGPL-2.1 GPL-3}

homepage            http://qt.io
description         Qt Tool Kit 5.4
long_description    Qt Tool Kit: A cross-platform framework \
                    (headers, data, and libraries) for writing \
                    cross-platform GUI-based applications. \
                    Installs to ${qt_dir}.

distname            qt-everywhere-opensource-src-${version}

master_sites        http://download.qt-project.org/official_releases/qt/${branch}/${version}/single/

use_xz			    yes
checksums           rmd160  5c6b5a0e3ea6a7d3d9754b87fc502af7a4ff7a85 \
                    sha256  b2d9df47b9fd2fcfa5ebd162e1373b7eddf4759e6ba148c4589f3d8b6628c39c

if { ${os.platform} ne "darwin" } {
    pre-fetch {
        ui_msg "You're on your own on \"${os.platform}\"!!"
    }
} elseif { ${os.major} < 10 } {
    pre-fetch {
        ui_error "OS X prior to 10.7 (Lion) is not a Reference Configuration for Qt."
            ui_error "OS X prior to 10.6 (Snow Leopard) is not even tested."
            ui_error "See http://qt-project.org/doc/qt-5/supported-platforms.html#reference-configurations"
            return -code error "unsupported OS"
    }
} elseif { ${os.major} == 10 } {
    pre-fetch {
        ui_warn "OS X prior to 10.7 (Lion) is not a Reference Configuration for Qt."
        if { [variant_isset universal] } {
            ui_warn "OS X 10.6 (Snow Leopard) is \"occasionally tested\" but ONLY in 32-bit mode."
                ui_warn "OS X 10.6 (Snow Leopard) is deprecated and scheduled for removal in Qt 5.4."
        } else {
            if { ${build_arch} eq "i386" } {
                ui_warn "OS X 10.6 (Snow Leopard) is \"occasionally tested\"."
                    ui_warn "OS X 10.6 (Snow Leopard) is deprecated and scheduled for removal in Qt 5.4."
            } else {
                ui_warn "OS X 10.6 (Snow Leopard) is \"occasionally tested\" but ONLY in 32-bit mode."
                    ui_warn "OS X 10.6 (Snow Leopard) is deprecated and scheduled for removal in Qt 5.4."
            }
        }
        ui_warn "See http://qt-project.org/doc/qt-5/supported-platforms.html#reference-configurations"
    }
} elseif { ${os.major} > 13 } {
    pre-fetch {
        ui_warn "OS X subsequent to 10.9 (Mavericks) is not a Reference Configuration for Qt."
            ui_warn "See http://qt-project.org/doc/qt-5/supported-platforms.html#reference-configurations"
    }
} else {
    # 11 <= ${os.major} <= 13
    if { [variant_isset universal] } {
        pre-fetch {
            ui_warn "Multiple architectures is not a Reference Configuration for Qt."
                ui_warn "See http://qt-project.org/doc/qt-5/supported-platforms.html#reference-configurations"
        }
    } else {
        if { ${build_arch} eq "i386" } {
            pre-fetch {
                ui_warn "32-bit mode is not a Reference Configuration for Qt."
                    ui_warn "See http://qt-project.org/doc/qt-5/supported-platforms.html#reference-configurations"
            }
        }
    }
}

if { ${subport} eq "${name}-docs"  } {
    universal_variant no
}

if {[info exists env(QTDIR)]} {
    ui_msg "unsetting \$QTDIR"
    unset env(QTDIR)
}

if { ${subport} eq ${name} || ${subport} eq "${name}-docs" || ${subport} eq "${name}-x11"} {
    # use the qt5 group; set 'building_qt5' so that the portgroup
    # does not include certain parts
    PortGroup           conflicts_build 1.0
    conflicts           qt3 qt3-mac
    PortGroup           xcodeversion 1.0

    minimum_xcodeversions   {10 3.2}

    # From 5.4.0, qt5-mac ought to be able to co-exist with any qt4-mac version.

    # Kuba states in https://trac.macports.org/ticket/44207#comment:7 
    #  "There's no reason to have parallel building disabled. Really."
    #use_parallel_build no 

    # header file QtCore/private/qmachparser_p.h is included only if "defined(QT_BUILD_INTERNAL) && defined(Q_OF_MACH_O)"
    #     code from header is used only "ifdef Q_OF_MACH_O"
    #     the two must be consistent
    #     assume the header include code is correct
    patchfiles-append patch-tst_qpluginloader.diff

    # When testing, ensure that a universal object file is not inadvertently created.
    patchfiles-append patch-machtest.diff

    # On testing of 32-bit systems,
    #  Pre-patch: QCOMPARE(unsigned long const&, unsigned int const&
    # Post-patch: QCOMPARE(unsigned int  const&, unsigned int const&
    # Function template is only instantiated for same first and second arguments.
    patchfiles-append patch-tst_qarraydata.diff

    # see http://stackoverflow.com/questions/14506151/invalid-symbol-redefinition-in-inline-asm-on-llvm
    patchfiles-append patch-tst_benchlibcallgrind.diff

    # During testing, NSStringFromRect requires NSRect.
    patchfiles-append patch-tst_qaccessibilitymac_helpers.diff

    if {${subport} ne "${name}-x11"} {
        # see #44934 (and #35067 for the qt4-mac version)
        patchfiles-append patch-shared.diff
    }

    # avoid leaving zombies when starting an inexisting executable through QProcess
    patchfiles-append qprocess-nozombies.patch

    # add (prepend) ${prefix}/share to the standard search paths so they become XDG-compliant
    patchfiles-append fix-qstandardpaths.patch

    # make sure the private headers are always found through the CMake files,
    # even in an out-of-tree build
    patchfiles-append always_include_private_headers.diff

    # print out some more info when warning about a menu item already added somewhere else
    patchfiles-append debug-menuItem-already-in-menu.patch

    # it's not Qt's role to inform the user constantly if s/he removed fonts that are in Apple's fallback font list
    patchfiles-append dont-warn-missing-fallback-fonts.patch

    variant KDE description {Include a number of patches tailoring Qt5 for use with KDE, and enable useful backtraces into Qt code for debugging} {
        patchfiles-append       deactivate-menurole-heuristics.patch \
            debug-negative-qtimerint.patch
            configure.args-append   -force-debug-info -no-strip -no-separate-debug-info
    }

    # patches from Ubuntu 5.3.2+dfsg-4ubuntu8 (from Vivid Velvet)
    # TODO : check Report-the-system-error-on-why-chmod-2-failed-in-XDG.patch and Don-t-always-chmod-the-XDG_RUNTIME_DIR.patch
    # for relevance for qstandard_mac.?
    patchfiles-append           remove_icon_from_example.patch \
        remove_google_adsense.patch \
        load_testability_from_env_var.patch \
        Add-workaround-for-GL-on-Android-emulator.patch \
        disable-generic-plugin-when-others-available.patch \
        QtBearer-networkmanager-make-sure-to-set-flag-Active.patch \
        Break-after-handling-the-read-write.patch

    # https://bugreports.qt.io/browse/QTBUG-43279
    patchfiles-append   patch-qcompilerdetection_h.diff

#    if {${subport} ne "${name}-x11"} {
#        # allow building without first uninstalling a previous Qt5 version (bug in QtWebEngine 5.4.0)
#        patchfiles-append           ignore-installed-headers.diff
#    }

    # --prefix is not recognised.
    configure.pre_args-delete       --prefix=${prefix}

    # --disable-dependency-tracking is not recognised.
    configure.universal_args-delete --disable-dependency-tracking

    if {${configure.sdkroot} ne ""} {
        configure.args-append \
            -sdk [string tolower [join [lrange [split [lindex [split ${configure.sdkroot} "/"] end] "."] 0 end-1] "."]]
    }

    # NB: -prefix->${prefix} !
    configure.args-append                      \
        -prefix         ${prefix}              \
        -archdatadir    ${qt_dir}              \
        -docdir         ${qt_docs_dir}         \
        -headerdir      ${qt_includes_dir}     \
        -plugindir      ${qt_plugins_dir}      \
        -importdir      ${qt_imports_dir}      \
        -qmldir         ${qt_qml_dir}          \
        -datadir        ${qt_data_dir}         \
        -libdir         ${qt_frameworks_dir}   \
        -bindir         ${qt_bins_dir}         \
        -libexecdir     ${qt_dir}/libexec      \
        -translationdir ${qt_translations_dir} \
        -sysconfdir     ${qt_sysconf_dir}      \
        -examplesdir    ${qt_examples_dir}     \
        -testsdir       ${qt_tests_dir}        \
        -hostbindir     ${qt_bins_dir}         \
        -hostlibdir     ${qt_frameworks_dir}   \
        -hostdatadir    ${qt_host_data_dir}

# Configure options:
    configure.args-append \
        -v                \
        -release          \
        -opensource       \
        -confirm-license  \
        -shared           \
        -force-pkg-config

# Third Party Libraries:
        configure.args-append \
        -no-mtdev         \
        -no-harfbuzz      \
        -openssl-linked   \
        -no-xinput2       \
        -no-xcb              \
        -no-xcb-xlib

# configure options that don't show up in configure --help
        configure.args-append \
        -no-libudev       \
        -no-egl

# Additional options:
        configure.args-append    \
        {-make libs}         \
    {-make tools}        \
    {-nomake examples}   \
    {-nomake tests}      \
    -verbose             \
        -nis                 \
        -cups                \
        -iconv               \
        -no-evdev            \
        -icu                 \
        -fontconfig          \
        -no-pch              \
        -dbus-linked         \
        -glib                \
        -directfb            \
        -no-linuxfb          \
        -no-kms              \
        -framework

        configure.args-append   -optimized-qmake

        foreach driver { db2 ibase mysql oci odbc psql sqlite sqlite2 tds } {
            configure.args-append -no-sql-${driver}
        }

    if { ![variant_isset universal] } {
        configure.args-append "-platform ${qt_qmake_spec}"
    } else {
        set merger_configure_args(i386)   "-platform ${qt_qmake_spec_32}"
            set merger_configure_args(x86_64) "-platform ${qt_qmake_spec_64}"
    }


    if {${subport} eq "${name}-x11"} {
        patchfiles-append       patch-to-build-xcb.diff
            configure.args-delete   -no-xinput2     \
            -no-xcb         \
            -no-xcb-xlib
            configure.args-append   -qt-xcb -xcb-xlib -openvg
    } else {
# configure options that don't show up in configure --help
# openvg makes sense only when using X11 ...
        configure.args-append   -no-openvg
    }

# Qt builds part of the system using environment provided by MacPorts.
# It builds the rest using its own internal environment.
# For consistency, clear MacPorts environment.
    configure.cxx_stdlib
        configure.sdkroot
        configure.cc_archflags
        configure.cxx_archflags
        configure.objc_archflags
        configure.objcxx_archflags
        configure.ld_archflags
        configure.cppflags
#    configure.cflags
#    configure.cxxflags
#    configure.objcflags
#    configure.objcxxflags
#    configure.ldflags
        configure.objcflags-append  "-g"
        configure.objcxxflags-append  "-g"
        configure.pipe  no
        if { [variant_isset universal] } {
            set merger_arch_flag no
        }
    configure.march
        configure.mtune
        configure.universal_ldflags
        configure.universal_cflags
        configure.universal_cxxflags
        configure.universal_cppflags
}

# Qt5 is huge. Enable HFS compression.
depends_extract-append      port:libarchive
extract.post_args           "| bsdtar -x --hfsCompression"

# the QtWebengine components is built using ninja
depends_build               port:ninja

if { ${subport} eq ${name} || ${subport} eq "${name}-x11" || ${subport} eq "${name}-qtwebengine" } {
    depends_lib                              \
        port:zlib                            \
        port:libpng                          \
        port:jpeg                            \
        port:freetype                        \
        path:bin/dbus-daemon:dbus            \
        port:openssl                         \
        port:tiff                            \
        port:libmng                          \
        path:lib/pkgconfig/glib-2.0.pc:glib2 \
        port:icu                             \
        port:pcre                            \
        port:libiconv

    post-extract {
        file mkdir ${workpath}/build
        if {${subport} ne "${name}-qtwebengine"} {
            file delete -force ${worksrcdir}/qtwebengine
            patchfiles-append       patch-disable-qtwebengine.diff
        }
    }

    if {${subport} eq "${name}-x11"} {
        default configure.cmd	{../${worksrcdir}/qtbase/configure}
        destroot.destdir        DESTDIR=${destroot}/tmp
        destroot.env-replace    INSTALL_ROOT=${destroot} INSTALL_ROOT=${destroot}/tmp
    } elseif {${subport} eq "${name}-qtwebengine"} {
        configure.args          -r ../${worksrcdir}/qtwebengine/qtwebengine.pro
    } else {
        default configure.cmd	{../${worksrcdir}/configure}
    }
    default configure.dir   {${workpath}/build}
    default build.dir       {${workpath}/build}

    # see https://bugreports.qt-project.org/browse/QTBUG-35514
    build.target

    post-patch {
        #reinplace "s|//opt//local//|${prefix}/|g" ${worksrcpath}/qtbase/src/corelib/io/qstandardpaths_mac.cpp
    }

#    if {${subport} ne "${name}-x11"} {
#        pre-build {
#            if {[file exists ${workpath}/build/qtwebengine/src/core/Release/obj/src/core/QtWebEngineCore.ninja] \
#                && [file exists ${workpath}/build/qtwebengine/src/core/Debug/obj/src/core/QtWebEngineCore.ninja]} {
#                # this is a kludge; should the build system regenerate the ninja files we edited
#                # we reinplace them again restarting the `port build` step after the inevitable failure...
#                # Should no longer be an issue with the ignore-installed-headers.diff patch file...
#                reinplace "s|-I${qt_includes_dir}||g" \
#                    ${workpath}/build/qtwebengine/src/core/Release/obj/src/core/QtWebEngineCore.ninja \
#                    ${workpath}/build/qtwebengine/src/core/Debug/obj/src/core/QtWebEngineCore.ninja
#            }
#        }
#    }

    if { [variant_isset universal] } {
        merger-post-destroot {
            foreach arch ${universal_archs_to_use} {
                set dir ${destroot}-${arch}

                reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${dir}${qt_frameworks_dir}/pkgconfig/Qt5WebKit.pc

                foreach prlfl [glob ${dir}${qt_frameworks_dir}/*.framework/*.prl] {
                    reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${prlfl}
                }

                foreach prlfl [glob ${dir}${qt_frameworks_dir}/*.prl] {
                    reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${prlfl}
                }

                foreach prlfl [glob ${dir}${qt_frameworks_dir}/*.framework/*.prl] {
                    reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${prlfl}
                }

                reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${dir}${qt_mkspecs_dir}/modules/qt_lib_bootstrap_private.pri

                reinplace \
                    "s|^set(_qt5_corelib_extra_includes \"\${_qt5Core_install_prefix}/share/qt5//mkspecs/macx-clang.*\")$|set(_qt5_corelib_extra_includes \"\${_qt5Core_install_prefix}/share/qt5//mkspecs/macx-clang-32\" \"\${_qt5Core_install_prefix}/share/qt5//mkspecs/macx-clang\")|" \
                    ${dir}${qt_frameworks_dir}/cmake/Qt5Core/Qt5CoreConfigExtrasMkspecDir.cmake
            }
        }

        post-destroot {
            # delete preprocessor comments surrounding QT_CPU_FEATURES.i386 and QT_CPU_FEATURES.x86_64
            reinplace "/^#ifndef.*$/d" ${destroot}${qt_mkspecs_dir}/qmodule.pri
            reinplace "/^#else.*$/d"   ${destroot}${qt_mkspecs_dir}/qmodule.pri
            reinplace "/^#endif.*$/d"  ${destroot}${qt_mkspecs_dir}/qmodule.pri
        }

        # The file ${prefix}/share/qt5/mkspecs/qconfig.pri is still not properly merged
        # The solution is ???.
    }

    post-destroot {

        if {${subport} ne "${name}-x11"} {

            # move items out of the Frameworks directory that are more appropriate to lib directory
            xinstall -m 775 -d ${destroot}${qt_cmake_module_dir}
            foreach d [glob -tails -nocomplain -directory ${destroot}${qt_frameworks_dir}/cmake *] {
                xinstall -m 775 -d ${destroot}${qt_cmake_module_dir}/${d}
                foreach f [glob -nocomplain -directory ${destroot}${qt_frameworks_dir}/cmake/${d} *.cmake] {
                    # ${qt_frameworks_dir} is  ${qt_dir}/Library/Frameworks while
                    # ${qt_libs_dir}       is  ${qt_dir}/lib
                    # unless modified, cmake files will point to a directory that is too high in the directory hierarchy
                    reinplace "s|/../../../../|/../../../${qt_dir_rel}/|g" ${f}
                    file rename ${f} ${destroot}${qt_cmake_module_dir}/${d}/
                }
            }

            # get Qt's version numbers

            set qt_vers [split ${version} "."]
            set qt_major [lindex ${qt_vers} 0]
            set qt_minor [lindex ${qt_vers} 1]
            set qt_patch [lindex ${qt_vers} 2]

            # link includes and libraries for each actual installed framework

            # make sure that the target directories exist
            exec mkdir -p ${destroot}${qt_includes_dir} ${destroot}${qt_libs_dir}
            foreach fixfile [exec find ${destroot}${qt_frameworks_dir} \
                                 -name "*.framework" | \
                                 sed -e "s@${destroot}@@g"] {

                set tf_full [strsed ${fixfile} {s@\\.framework@@}]
                set tf [strsed ${tf_full} {g@.*\/@@}]

                # special for QtWebKit entries

                set t_minor ${qt_minor}
                set is_QtWebKit 0
                if {[string compare ${tf} QtWebKit] == 0} {
                    set t_minor 9
                    set is_QtWebKit 1
                }

                # link headers into ${qt_includes_dir}, removing directories
                # if they are already there first

                set inc_file ${destroot}${qt_includes_dir}/${tf}
                if {[file exists ${inc_file}]} {
                    ui_msg "*Warning* replacing directory ${inc_file} with a symlink to ${tf_full}.framework/Headers!"
                    file delete -force ${inc_file}
                }
                ln -s ${tf_full}.framework/Headers ${inc_file}

                # link libraries into ${qt_libs_dir}, all 4 number variants

                set dr_qt_libs_dir ${destroot}${qt_libs_dir}

                ln -s ${tf_full}.framework/${tf} ${dr_qt_libs_dir}/lib${tf}.dylib
                ln -s ${tf_full}.framework/${tf} ${dr_qt_libs_dir}/lib${tf}.${qt_major}.dylib
                ln -s ${tf_full}.framework/${tf} ${dr_qt_libs_dir}/lib${tf}.${qt_major}.${t_minor}.dylib
                ln -s ${tf_full}.framework/${tf} ${dr_qt_libs_dir}/lib${tf}.${qt_major}.${t_minor}.${qt_patch}.dylib

                # copy .prl file, then correct it for library usage

                copy ${destroot}${tf_full}.framework/${tf}.prl ${dr_qt_libs_dir}/lib${tf}.prl

                # fix TARGET in .prl file

                reinplace "/QMAKE_PRL_TARGET/s|Qt\\(\[^ \]*\\)|libQt\\1.${qt_major}.${t_minor}.${qt_patch}.dylib|" ${dr_qt_libs_dir}/lib${tf}.prl

                # fix PRL_LIBS -F -> -L in .prl file

                reinplace "/QMAKE_PRL_LIBS/s|-F${qt_frameworks_dir}|-L${qt_libs_dir}|" ${dr_qt_libs_dir}/lib${tf}.prl

                # fix "-framework Qt*" -> "-lQt*" in .prl file

                reinplace "/QMAKE_PRL_LIBS/s|-framework Qt|-lQt|g" \
                    ${dr_qt_libs_dir}/lib${tf}.prl

                # remove the QMAKE_PRL_BUILD_DIR line from the .prl file
                reinplace "/QMAKE_PRL_BUILD_DIR/d" ${dr_qt_libs_dir}/lib${tf}.prl

                # deal with debug files

                # RJVB: I have *not* tested the block below!
                if {[variant_isset debug]} {

                    # but not if QtWebKit and +universal, since that one does
                    # not exist (the 32-bit version of the debug library is
                    # larger than fits into the 32-bit filespace).

                    if {[variant_isset debug] && ${is_QtWebKit}} {
                        continue
                    }

                    # link libraries into ${qt_libs_dir}, all 4 number variants

                    ln -s ${tf_full}.framework/${tf}_debug ${dr_qt_libs_dir}/lib${tf}_debug.dylib
                    ln -s ${tf_full}.framework/${tf}_debug ${dr_qt_libs_dir}/lib${tf}_debug.${qt_major}.dylib
                    ln -s ${tf_full}.framework/${tf}_debug ${dr_qt_libs_dir}/lib${tf}_debug.${qt_major}.${t_minor}.dylib
                    ln -s ${tf_full}.framework/${tf}_debug ${dr_qt_libs_dir}/lib${tf}_debug.${qt_major}.${t_minor}.${qt_patch}.dylib

                    # copy .prl file, then correct it for library usage

                    copy ${destroot}${tf_full}.framework/${tf}_debug.prl ${dr_qt_libs_dir}/lib${tf}_debug.prl

                    # fix TARGET in .prl file

                    reinplace "/QMAKE_PRL_TARGET/s|Qt\\(\[^ \]*\\)|libQt\\1.${qt_major}.${t_minor}.${qt_patch}.dylib|" ${dr_qt_libs_dir}/lib${tf}_debug.prl

                    # fix PRL_LIBS -F -> -L in .prl file

                    reinplace "/QMAKE_PRL_LIBS/s|-F${qt_frameworks_dir}|-L${qt_libs_dir}|" ${dr_qt_libs_dir}/lib${tf}_debug.prl

                    # fix "-framework Qt*" -> "-lQt*_debug" in .prl file

                    reinplace "/QMAKE_PRL_LIBS/s|-framework Qt\\(\[^ \]*\\)|-lQt\\1_debug|g" ${dr_qt_libs_dir}/lib${tf}_debug.prl
                }
            }

            ln -s ${qt_qmake_cmd} ${destroot}/${prefix}/bin/qmake-qt${qt_major}
            ln -s ${qt_moc_cmd} ${destroot}/${prefix}/bin/moc-qt${qt_major}
            ln -s ${qt_uic_cmd} ${destroot}/${prefix}/bin/uic-qt${qt_major}
            ln -s ${qt_lrelease_cmd} ${destroot}/${prefix}/bin/lrelease-qt${qt_major}

            xinstall -m 775 -d ${destroot}${qt_pkg_config_dir}
            foreach f [glob -nocomplain -directory ${destroot}${qt_frameworks_dir}/pkgconfig *.pc] {
                file rename ${f} ${destroot}${qt_pkg_config_dir}
            }
            xinstall -m 775 -d ${destroot}${qt_libs_dir}/
            foreach f [glob -nocomplain -directory ${destroot}${qt_frameworks_dir} *.{a,prl,la}] {
                file rename ${f} ${destroot}${qt_libs_dir}/
            }

            # link back the static libraries to where some Qt components expect them:
            foreach f [exec find ${destroot}${qt_libs_dir} \
                                 -name "*.a" | \
                                 sed -e "s@${destroot}@@g"] {
                ln -s ${f} ${destroot}${qt_frameworks_dir}/
            }
            # certain applications might expect to find the following .prl files in ${qt_frameworks_dir}
            foreach fixfile { libQt5OpenGLExtensions_debug.prl libQt5PlatformSupport_debug.prl \
                                libQt5QmlDevTools.prl libQt5UiTools.prl libQt5UiTools_debug.prl } {
                if {[file exists ${destroot}${qt_libs_dir}/${fixfile}]} {
                    ln -s ${qt_libs_dir}/${fixfile} ${destroot}${qt_frameworks_dir}/${fixfile}
                }
            }

            # move items out of the bin directory that are more appropriate to the Applications directory
            xinstall -m 775 -d ${destroot}${qt_apps_dir}
            foreach f [glob -nocomplain -directory ${destroot}${qt_bins_dir} *.app] {
                file rename ${f} ${destroot}${qt_apps_dir}/
            }

            if {[variant_isset KDE]} {
                # expose KF5 styles to Qt5 ... once we know where those styles are stored and if it's still required.
                #ln -s ${prefix}/lib/kf5??/plugins/styles ${destroot}${qt_plugins_dir}/
            }
        } else {
            # everything was installed into ${destroot}/tmp; now cherry-pick the things we want which aren't yet
            # installed through the main port:
            xinstall -d -m 755 ${destroot}${qt_plugins_dir}/platforminputcontexts
            file rename ${destroot}/tmp/${qt_plugins_dir}/platforminputcontexts/libcomposeplatforminputcontextplugin.dylib ${destroot}${qt_plugins_dir}/platforminputcontexts
            xinstall -d -m 755 ${destroot}${qt_plugins_dir}/platforms
            file rename ${destroot}/tmp/${qt_plugins_dir}/platforms/libqxcb.dylib ${destroot}${qt_plugins_dir}/platforms
            xinstall -d -m 755 ${destroot}${qt_cmake_module_dir}/Qt5Gui
            file rename ${destroot}/tmp/${qt_frameworks_dir}/cmake/Qt5Gui/Qt5Gui_QComposePlatformInputContextPlugin.cmake \
                ${destroot}${qt_cmake_module_dir}/Qt5Gui
            file rename ${destroot}/tmp/${qt_frameworks_dir}/cmake/Qt5Gui/Qt5Gui_QXcbIntegrationPlugin.cmake \
                ${destroot}${qt_cmake_module_dir}/Qt5Gui
            file delete -force ${destroot}/tmp
        }

    }

    variant harfbuzz description {(experimental) Use HarfBuzz-NG to do text shaping} {
        depends_lib-append port:harfbuzz
        configure.args-replace \
            -no-harfbuzz       \
            -system-harfbuzz
    }

    variant tests description {Enable tests} {
        configure.args-replace {-nomake tests} {-make tests}
    }

    variant examples description {Build examples} {
        configure.args-replace {-nomake examples} {-make examples}
    }

    variant debug description {Build both release and debug library} {
        configure.args-replace -release -debug-and-release
    }
}

subport ${name}-x11 {
    depends_lib-append  port:xorg-xcb-util port:xorg-inputproto \
                        port:xrender port:mesa port:${name}
    description         ${description} - the xcb (X11) platform plugin
    long_description    ${long_description} This port installs just the xcb \
                        platform plugin, which allows rendering to (remote) X11 servers.

    # extract only the qtbase component
    extract.post_args-append    ${distname}/qtbase
}

subport ${name}-docs {
    depends_lib-append \
        path:${prefix}/bin/qdoc:${name} \
        path:${qt_plugins_dir}/sqldrivers/libqsqlite.dylib:${name}-sqlite3-plugin

    supported_archs   noarch

    build.target      docs
    destroot.target   install_docs

    post-extract {
        # For the most part, generated makefiles use ${prefix}/bin/qdoc.
        # There are a couple of places that look in ${worksrcpath}/qtbase/src/tools/qdoc/.
        ln -s ${prefix}/bin/qdoc ${worksrcpath}/qtbase/src/tools/qdoc/
        ln -s ${prefix}/bin/qdoc ${worksrcpath}/qtbase/bin

        # Similarly, location of qhelpgenerator is expected in ${worksrcpath}
        xinstall -d -m 755 ${worksrcpath}/qttools/bin/
        ln -s ${prefix}/bin/qhelpgenerator ${worksrcpath}/qttools/bin/

        # Without this file, the makefile ${worksrcpath}/qtwebkit/Source/WebCore/Makefile.WebCore.Target
        #    keeps generating itself over and over again.
        # This file is only created when the library is being built, however.
        xinstall -d -m 755 ${worksrcpath}/qtwebkit/Source/WebCore/generated
        touch ${worksrcpath}/qtwebkit/Source/WebCore/generated/InspectorBackendCommands.qrc
    }
}

# See http://qt-project.org/doc/qt-5/sql-driver.html for info on building SQL Database Drivers

subport ${name}-qtwebengine {
    description         ${description} - the QtWebEngine component
    long_description    ${long_description} This port installs the  \
                        QtWebEngine component.
    PortGroup           qmake5 1.0

    # extract only the qtwebengine component
    extract.post_args-append    ${distname}/qtwebengine
}

subport ${name}-sqlite3-plugin {
    PortGroup           qmake5 1.0

    depends_lib-append port:sqlite3

    # extract only the qtbase component
    extract.post_args-append    ${distname}/qtbase ${distname}/configure
    # for single architecture, easier to use
    #    worksrcdir ${worksrcdir}/qtbase/src/plugins/sqldrivers/sqlite,
    #    but doesn't work for universal build
    configure.dir ${worksrcpath}/qtbase/src/plugins/sqldrivers/sqlite
    build.dir     ${configure.dir}
    destroot.dir  ${configure.dir}

    configure.args-append "INCLUDEPATH+=${prefix}/include" "LIBS+=\"-L${prefix}/lib -lsqlite3\""
    post-destroot {
        xinstall -m 775 -d ${destroot}${qt_cmake_module_dir}
        foreach f [glob -nocomplain -directory ${destroot}${qt_frameworks_dir}/cmake/ *] {
            file rename ${f} ${destroot}${qt_cmake_module_dir}/
        }
    }
}

subport ${name}-psql84-plugin {
    PortGroup           qmake5 1.0

    depends_lib-append port:postgresql84

    # extract only the qtbase component
    extract.post_args-append    ${distname}/qtbase ${distname}/configure
    # for single architecture, easier to use
    #    worksrcdir ${worksrcdir}/qtbase/src/plugins/sqldrivers/psql,
    #    but doesn't work for universal build
    configure.dir ${worksrcpath}/qtbase/src/plugins/sqldrivers/psql
    build.dir     ${configure.dir}
    destroot.dir  ${configure.dir}

    configure.args-append "INCLUDEPATH+=${prefix}/include/postgresql84" "LIBS+=\"-L${prefix}/lib/postgresql84 -lpq\""
}

subport ${name}-mysql56-plugin {
    PortGroup           qmake5 1.0

    depends_lib-append port:mysql56

    # extract only the qtbase component
    extract.post_args-append    ${distname}/qtbase ${distname}/configure
    # for single architecture, easier to use
    #    worksrcdir ${worksrcdir}/qtbase/src/plugins/sqldrivers/mysql,
    #    but doesn't work for universal build
    configure.dir ${worksrcpath}/qtbase/src/plugins/sqldrivers/mysql
    build.dir     ${configure.dir}
    destroot.dir  ${configure.dir}

    configure.args-append "INCLUDEPATH+=${prefix}/include/mysql56/mysql" "LIBS+=\"-L${prefix}/lib/mysql56/mysql -lmysqlclient_r\""
}

subport ${name}-examples {
    PortGroup                   qmake5 1.0

    depends_lib-append          port:${name}

    description                 ${description} - the examples

    # extract only the examples
    extract.post_args-append    ${distname}/qtbase/examples/            \
                                ${distname}/qtconnectivity/examples/    \
                                ${distname}/qtdeclarative/examples/     \
                                ${distname}/qtenginio/examples/         \
                                ${distname}/qtlocation/examples/        \
                                ${distname}/qtmacextras/examples/       \
                                ${distname}/qtmultimedia/examples/      \
                                ${distname}/qtquick1/examples/          \
                                ${distname}/qtquickcontrols/examples/   \
                                ${distname}/qtscript/examples/          \
                                ${distname}/qtsensors/examples/         \
                                ${distname}/qtsvg/examples/             \
                                ${distname}/qttools/examples/           \
                                ${distname}/qtwebengine/examples/       \
                                ${distname}/qtwebkit-examples/examples/ \
                                ${distname}/qtxmlpatterns/examples/

    post-extract {
        copy ${filespath}/all-examples.pro ${workpath}/${worksrcdir}/all-examples.pro
        file mkdir ${workpath}/build
    }
    default configure.dir       {${workpath}/build}
    configure.pre_args-append   ../${worksrcdir}/all-examples.pro
    default build.dir           {${workpath}/build}
}

livecheck.type      regex
livecheck.url       http://download.qt.io/archive/qt/5.4/
livecheck.regex     (\\d+(\\.\\d+)+)
