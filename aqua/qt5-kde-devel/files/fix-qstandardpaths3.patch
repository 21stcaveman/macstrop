diff --git a/qtbase/src/corelib/io/io.pri b/qtbase/src/corelib/io/io.pri
index 207de2a..330eaf5 100644
--- a/qtbase/src/corelib/io/io.pri
+++ b/qtbase/src/corelib/io/io.pri
@@ -33,6 +33,7 @@ HEADERS +=  \
         io/qresource_iterator_p.h \
         io/qsavefile.h \
         io/qstandardpaths.h \
+        io/qstandardpaths_p.h \
         io/qstorageinfo.h \
         io/qstorageinfo_p.h \
         io/qurl.h \
diff --git a/qtbase/src/corelib/io/qstandardpaths.cpp b/qtbase/src/corelib/io/qstandardpaths.cpp
index 74252d1..879a697 100644
--- a/qtbase/src/corelib/io/qstandardpaths.cpp
+++ b/qtbase/src/corelib/io/qstandardpaths.cpp
@@ -400,6 +400,32 @@ static bool existsAsSpecified(const QString &path, QStandardPaths::LocateOptions
     return QFileInfo(path).isFile();
 }
 
+#if defined(Q_OS_OSX)
+/*!
+    This function enables or disables XDG locations on platforms where Qt can be configured
+    to use this kind of locations instead of locations following OS guidelines. This is a
+    feature that shouldn't be changed back and forth, so setXDGLocationsEnabled() has effect
+    only the first time it is called.
+    Currently this concerns only Mac OS X //and Cygwin?//
+ */
+void QStandardPaths::setXDGLocationsEnabled(bool xdgMode)
+{
+    static bool xdgSet = false;
+    if (!xdgSet) {
+        usingXDGLocations = xdgMode;
+        xdgSet = true;
+    }
+}
+
+/*!
+    This function returns true when XDG locations are used.
+ */
+bool QStandardPaths::isXDGLocationsEnabled()
+{
+    return usingXDGLocations;
+}
+#endif // Q_OS_OSX
+
 /*!
    Tries to find a file or directory called \a fileName in the standard locations
    for \a type.
diff --git a/qtbase/src/corelib/io/qstandardpaths.h b/qtbase/src/corelib/io/qstandardpaths.h
index 5c0e08b..a39d414 100644
--- a/qtbase/src/corelib/io/qstandardpaths.h
+++ b/qtbase/src/corelib/io/qstandardpaths.h
@@ -41,6 +41,8 @@ QT_BEGIN_NAMESPACE
 
 #ifndef QT_NO_STANDARDPATHS
 
+class Q_CORE_EXPORT QStandardPathsConfiguration;
+
 class Q_CORE_EXPORT QStandardPaths
 {
 public:
@@ -68,6 +70,10 @@ public:
         AppLocalDataLocation = DataLocation
     };
 
+#if defined(Q_OS_OSX)
+    static bool isXDGLocationsEnabled();
+#endif // Q_OS_OSX
+
     static QString writableLocation(StandardLocation type);
     static QStringList standardLocations(StandardLocation type);
 
@@ -91,10 +97,20 @@ public:
     static void setTestModeEnabled(bool testMode);
     static bool isTestModeEnabled();
 
+#if defined(Q_OS_OSX)
+protected:
+    static void setXDGLocationsEnabled(bool xdgMode);
+#endif // Q_OS_OSX
+
 private:
     // prevent construction
     QStandardPaths();
     ~QStandardPaths();
+#if defined(Q_OS_OSX)
+    static bool usingXDGLocations;
+
+    friend class QStandardPathsConfiguration;
+#endif // Q_OS_OSX
 };
 
 #endif // QT_NO_STANDARDPATHS
diff --git a/qtbase/src/corelib/io/qstandardpaths_mac.mm b/qtbase/src/corelib/io/qstandardpaths_mac.mm
index d6126ce..4c06ddb 100644
--- a/qtbase/src/corelib/io/qstandardpaths_mac.mm
+++ b/qtbase/src/corelib/io/qstandardpaths_mac.mm
@@ -35,9 +35,11 @@
 #include <qdir.h>
 #include <qurl.h>
 #include <private/qcore_mac_p.h>
+#include <private/qfilesystemengine_p.h>
 
 #ifndef QT_BOOTSTRAPPED
 #include <qcoreapplication.h>
+#include <qlibraryinfo.h>
 #endif
 
 #include <CoreFoundation/CoreFoundation.h>
@@ -136,8 +138,154 @@ static QString macLocation(QStandardPaths::StandardLocation type, short domain)
     return path;
 }
 
+bool QStandardPaths::usingXDGLocations = false;
+
+static void normaliseDirs(QStringList &dirs)
+{
+    // Normalise paths, skip relative paths
+    QMutableListIterator<QString> it(dirs);
+    while (it.hasNext()) {
+        const QString dir = it.next();
+        if (!dir.startsWith(QLatin1Char('/')))
+            it.remove();
+        else
+            it.setValue(QDir::cleanPath(dir));
+    }
+
+    // Remove duplicates from the list, there's no use for duplicated
+    // paths in XDG_CONFIG_DIRS - if it's not found in the given
+    // directory the first time, it won't be there the second time.
+    // Plus duplicate paths causes problems for example for mimetypes,
+    // where duplicate paths here lead to duplicated mime types returned
+    // for a file, eg "text/plain,text/plain" instead of "text/plain"
+    dirs.removeDuplicates();
+}
+
+static QStringList xdgCacheDirs()
+{
+    QStringList dirs;
+    // http://standards.freedesktop.org/basedir-spec/latest/
+    QString xdgConfigDirsEnv = QFile::decodeName(qgetenv("XDG_CACHE_HOME"));
+    if (xdgConfigDirsEnv.isEmpty()) {
+#ifndef QT_BOOTSTRAPPED
+        dirs.append(QDir::homePath() + QString::fromLatin1("/.cache"));
+#endif
+    } else {
+        dirs = xdgConfigDirsEnv.split(QLatin1Char(':'), QString::SkipEmptyParts);
+
+        normaliseDirs(dirs);
+    }
+    return dirs;
+}
+
+static QStringList xdgConfigDirs()
+{
+    QStringList dirs;
+    // http://standards.freedesktop.org/basedir-spec/latest/
+    QString xdgConfigDirsEnv = QFile::decodeName(qgetenv("XDG_CONFIG_DIRS"));
+    if (xdgConfigDirsEnv.isEmpty()) {
+#ifndef QT_BOOTSTRAPPED
+        dirs.append(QLibraryInfo::location(QLibraryInfo::PrefixPath) + QString::fromLatin1("/etc/xdg"));
+#endif
+    } else {
+        dirs = xdgConfigDirsEnv.split(QLatin1Char(':'), QString::SkipEmptyParts);
+
+        normaliseDirs(dirs);
+    }
+    return dirs;
+}
+
+static QStringList xdgDataDirs()
+{
+    QStringList dirs;
+    // http://standards.freedesktop.org/basedir-spec/latest/
+    QString xdgDataDirsEnv = QFile::decodeName(qgetenv("XDG_DATA_DIRS"));
+    if (xdgDataDirsEnv.isEmpty()) {
+#ifndef QT_BOOTSTRAPPED
+        dirs.append(QLibraryInfo::location(QLibraryInfo::PrefixPath) + QString::fromLatin1("/share"));
+#endif
+    } else {
+        dirs = xdgDataDirsEnv.split(QLatin1Char(':'), QString::SkipEmptyParts);
+
+        normaliseDirs(dirs);
+    }
+    return dirs;
+}
+
+static QString xdgRuntimeDir()
+{
+    const uid_t myUid = geteuid();
+    // http://standards.freedesktop.org/basedir-spec/latest/
+    QString xdgRTDir = QFile::decodeName(qgetenv("XDG_RUNTIME_DIR"));
+    if (xdgRTDir.isEmpty()) {
+        const QString userName = QFileSystemEngine::resolveUserName(myUid);
+//         xdgRTDir = QDir::tempPath() + QLatin1String("/runtime-") + userName;
+        // NSTemporaryDirectory() returns the default $TMPDIR value, regardless of its current setting,
+        // which is more in line with XDG_RUNTIME_DIR requirements.
+        xdgRTDir = QString::fromNSString(NSTemporaryDirectory()) + QLatin1String("runtime-") + userName;
+        QDir dir(xdgRTDir);
+        if (!dir.exists()) {
+            if (!QDir().mkdir(xdgRTDir)) {
+                qWarning("QStandardPaths: error creating runtime directory %s: %s",
+                         qPrintable(xdgRTDir), qPrintable(qt_error_string(errno)));
+                return QString();
+            }
+        }
+    } else {
+        qWarning("QStandardPaths: XDG_RUNTIME_DIR is set, using '%s'", qPrintable(xdgRTDir));
+    }
+    // "The directory MUST be owned by the user"
+    QFileInfo fileInfo(xdgRTDir);
+    if (fileInfo.ownerId() != myUid) {
+        qWarning("QStandardPaths: wrong ownership on runtime directory %s, %d instead of %d", qPrintable(xdgRTDir),
+                 fileInfo.ownerId(), myUid);
+        return QString();
+    }
+    // "and he MUST be the only one having read and write access to it. Its Unix access mode MUST be 0700."
+    // since the current user is the owner, set both xxxUser and xxxOwner
+    QFile file(xdgRTDir);
+    const QFile::Permissions wantedPerms = QFile::ReadUser | QFile::WriteUser | QFile::ExeUser
+                                           | QFile::ReadOwner | QFile::WriteOwner | QFile::ExeOwner;
+    if (file.permissions() != wantedPerms && !file.setPermissions(wantedPerms)) {
+        qWarning("QStandardPaths: could not set correct permissions on runtime directory %s: %s",
+                 qPrintable(xdgRTDir), qPrintable(file.errorString()));
+        return QString();
+    }
+    return xdgRTDir;
+}
+
 QString QStandardPaths::writableLocation(StandardLocation type)
 {
+    if (usingXDGLocations) {
+        const QString prefix = (isTestModeEnabled())? QDir::homePath() + QLatin1String("/.qttest") : QDir::homePath();
+        QString path;
+        switch (type) {
+        case GenericDataLocation:
+        case AppDataLocation:
+        case AppLocalDataLocation:
+            path = prefix + QLatin1String("/.local/share");
+            if (type != GenericDataLocation)
+                appendOrganizationAndApp(path);
+            return path;
+        case GenericCacheLocation:
+        case CacheLocation:
+            path = prefix + QLatin1String("/.cache");
+            if (type == CacheLocation)
+                appendOrganizationAndApp(path);
+            return path;
+        case GenericConfigLocation:
+        case ConfigLocation:
+            return prefix + QLatin1String("/.config");
+        case ApplicationsLocation:
+            path = writableLocation(GenericDataLocation) + QLatin1String("/applications");
+            return path;
+        case RuntimeLocation:
+            return xdgRuntimeDir();
+        default:
+            break;
+        }
+    }
+
     if (isTestModeEnabled()) {
         const QString qttestDir = QDir::homePath() + QLatin1String("/.qttest");
         QString path;
@@ -162,6 +310,9 @@ QString QStandardPaths::writableLocation(StandardLocation type)
             if (type == AppConfigLocation)
                 appendOrganizationAndApp(path);
             return path;
+        case ApplicationsLocation:
+            path = qttestDir + QLatin1String("/Applications");
+            return path;
         default:
             break;
         }
@@ -188,6 +341,28 @@ QStringList QStandardPaths::standardLocations(StandardLocation type)
 {
     QStringList dirs;
 
+    if (usingXDGLocations ) {
+        switch (type) {
+        case GenericDataLocation:
+            dirs.append(xdgDataDirs());
+            break;
+        case GenericConfigLocation:
+        case ConfigLocation:
+            dirs.append(xdgConfigDirs());
+            break;
+        case GenericCacheLocation:
+        case CacheLocation:
+            dirs.append(xdgCacheDirs());
+            break;
+        case ApplicationsLocation:
+            QStringList xdgDirs = xdgDataDirs();
+            for (int i = 0; i < xdgDirs.count(); ++i)
+                xdgDirs[i].append(QLatin1String("/applications"));
+            dirs.append(xdgDirs);
+            break;
+        }
+    }
+
     if (type == GenericDataLocation || type == AppDataLocation || type == AppLocalDataLocation || type == GenericCacheLocation || type == CacheLocation) {
         const QString path = macLocation(type, kOnAppropriateDisk);
         if (!path.isEmpty())
@@ -195,6 +370,14 @@ QStringList QStandardPaths::standardLocations(StandardLocation type)
     }
 
     if (type == AppDataLocation || type == AppLocalDataLocation) {
+        if (usingXDGLocations) {
+            QStringList xdgDirs = xdgDataDirs();
+            for (int i = 0; i < xdgDirs.count(); ++i) {
+                appendOrganizationAndApp(xdgDirs[i]);
+            }
+            dirs.append(xdgDirs);
+        }
+
         CFBundleRef mainBundle = CFBundleGetMainBundle();
         if (mainBundle) {
             CFURLRef bundleUrl = CFBundleCopyBundleURL(mainBundle);
diff --git a/qtbase/src/corelib/io/qstandardpaths_p.h b/qtbase/src/corelib/io/qstandardpaths_p.h
new file mode 100644
index 0000000..69f88ab
--- /dev/null
+++ b/qtbase/src/corelib/io/qstandardpaths_p.h
@@ -0,0 +1,71 @@
+/****************************************************************************
+**
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the QtCore module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights. These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QSTANDARDPATHS_P_H
+#define QSTANDARDPATHS_P_H
+
+#include <QtCore/QtGlobal>
+
+#if defined(Q_OS_OSX)
+
+#include <QtCore/qstandardpaths.h>
+
+QT_BEGIN_NAMESPACE
+
+
+#ifndef QT_NO_STANDARDPATHS
+
+class Q_CORE_EXPORT QStandardPathsConfiguration
+{
+public:
+    QStandardPathsConfiguration(const bool useXDGLocations)
+        : usingXDGLocations(useXDGLocations)
+    {
+        QStandardPaths::setXDGLocationsEnabled(useXDGLocations);
+    }
+    inline bool usesXDGLocations() const
+    {
+        return usingXDGLocations;
+    }
+protected:
+    const bool usingXDGLocations;
+};
+
+bool Q_CORE_EXPORT setXDGLocationsEnabled(bool useXDGLocations);
+
+#endif // QT_NO_STANDARDPATHS
+
+QT_END_NAMESPACE
+
+#endif // Q_OS_OSX
+#endif // QSTANDARDPATHS_P_H
diff --git a/qtbase/include/QtCore/qstandardpaths_p.h b/qtbase/include/QtCore/qstandardpaths_p.h
new file mode 100644
index 0000000..449b827
--- /dev/null
+++ b/qtbase/include/QtCore/qstandardpaths_p.h
@@ -0,0 +1 @@
+#include "../../src/corelib/io/qstandardpaths_p.h"
diff --git a/qtbase/mkspecs/features/mac/data/qstandardpaths_use_xdg.cpp b/qtbase/mkspecs/features/mac/data/qstandardpaths_use_xdg.cpp
new file mode 100644
index 0000000..5626461
--- /dev/null
+++ b/qtbase/mkspecs/features/mac/data/qstandardpaths_use_xdg.cpp
@@ -0,0 +1,55 @@
+/****************************************************************************
+**
+** Copyright (C) 2015 RJV Bertin
+** More appropriate legalese here.
+**
+** This file is part of the QtCore module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights. These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include <QtCore/QtGlobal>
+#if defined(Q_OS_OSX)
+
+#include <qstandardpaths_p.h>
+
+#ifndef QT_NO_STANDARDPATHS
+
+const QString qspUsesXDGLocationsTag = "$Id: @(#) " __FILE__ " - " __DATE__ " $";
+
+// defining a static instance works for now, but see
+// https://wiki.qt.io/Coding_Conventions#Compiler.2FPlatform_specific_issues
+static QStandardPathsConfiguration qspUsesXDGLocations(true);
+
+bool setXDGLocationsEnabled(bool useXDGLocations)
+{
+    QStandardPathsConfiguration dummy(useXDGLocations);
+    // this should force even clever linkers to preserve qspUsesXDGLocations
+    return qspUsesXDGLocations.usesXDGLocations() != useXDGLocations;
+}
+
+#endif //Q_NO_STANDARDPATHS
+#endif //Q_OS_OSX
\ No newline at end of file
diff --git a/qtbase/mkspecs/features/mac/qsp_xdg.prf b/qtbase/mkspecs/features/mac/qsp_xdg.prf
new file mode 100644
index 0000000..9da55d0
--- /dev/null
+++ b/qtbase/mkspecs/features/mac/qsp_xdg.prf
@@ -0,0 +1,2 @@
+qsp_use_xdg: DEFINES += QSP_USE_XDG
+SOURCES += $$PWD/data/qstandardpaths_use_xdg.cpp
\ No newline at end of file
diff --git a/qtbase/src/qsp_xdg/qsp_xdg.pro b/qtbase/src/qsp_xdg/qsp_xdg.pro
new file mode 100644
index 0000000..a6ae459
--- /dev/null
+++ b/qtbase/src/qsp_xdg/qsp_xdg.pro
@@ -0,0 +1,9 @@
+TARGET     = QtQspXDG
+QT = core
+
+QMAKE_LIBS += $$QMAKE_LIBS_QSP_XDG
+
+HEADERS =
+SOURCES = qstandardpaths_use_xdg.cpp
+
+load(qt_module)
\ No newline at end of file
diff --git a/qtbase/src/qsp_xdg/qstandardpaths_use_xdg.cpp b/qtbase/src/qsp_xdg/qstandardpaths_use_xdg.cpp
new file mode 100644
index 0000000..6359267
--- /dev/null
+++ b/qtbase/src/qsp_xdg/qstandardpaths_use_xdg.cpp
@@ -0,0 +1,53 @@
+/****************************************************************************
+**
+** Copyright (C) 2015 RJV Bertin
+** More appropriate legalese here.
+**
+** This file is part of the QtCore module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights. These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include <QtCore/QtGlobal>
+#if defined(Q_OS_OSX)
+
+#include <qstandardpaths_p.h>
+
+#ifndef QT_NO_STANDARDPATHS
+
+const QString qspUsesXDGLocationsTag("$Id: @(#) " __FILE__ " - " __DATE__ " $");
+
+static QStandardPathsConfiguration qspUsesXDGLocations(true);
+
+bool setXDGLocationsEnabled(bool useXDGLocations)
+{
+    QStandardPathsConfiguration dummy(useXDGLocations);
+    // this should force even clever linkers to preserve qspUsesXDGLocations
+    return qspUsesXDGLocations.usesXDGLocations() != useXDGLocations;
+}
+
+#endif //Q_NO_STANDARDPATHS
+#endif //Q_OS_OSX
\ No newline at end of file
diff --git a/qtbase/src/src.pro b/qtbase/src/src.pro
index b4d62aa..5916a47 100644
--- a/qtbase/src/src.pro
+++ b/qtbase/src/src.pro
@@ -124,6 +124,10 @@ src_printsupport.subdir = $$PWD/printsupport
 src_printsupport.target = sub-printsupport
 src_printsupport.depends = src_corelib src_gui src_widgets src_tools_uic
 
+src_qsp_xdg.subdir = $$PWD/qsp_xdg
+src_qsp_xdg.target = sub-qsp_xdg
+src_qsp_xdg.depends = src_corelib
+
 src_plugins.subdir = $$PWD/plugins
 src_plugins.target = sub-plugins
 src_plugins.depends = src_sql src_xml src_network
@@ -184,6 +188,8 @@ contains(QT_CONFIG, concurrent):SUBDIRS += src_concurrent
 }
 SUBDIRS += src_plugins src_tools_qdoc
 
+mac : SUBDIRS += src_qsp_xdg
+
 nacl: SUBDIRS -= src_network src_testlib
 
 android:!android-no-sdk: SUBDIRS += src_android
