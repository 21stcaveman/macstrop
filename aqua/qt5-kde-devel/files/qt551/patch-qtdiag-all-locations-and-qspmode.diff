diff --git a/qttools/src/qtdiag/main.cpp b/qttools/src/qtdiag/main.cpp
index cefa669..f3b7606 100644
--- a/qttools/src/qtdiag/main.cpp
+++ b/qttools/src/qtdiag/main.cpp
@@ -32,6 +32,7 @@
 ****************************************************************************/
 
 #include "qtdiag.h"
+#include <QtCore/qstandardpaths_p.h>
 
 #include <QtGui/QGuiApplication>
 #include <QtCore/QCommandLineParser>
@@ -52,13 +53,29 @@ int main(int argc, char **argv)
 
     QCommandLineParser commandLineParser;
     const QCommandLineOption glExtensionOption(QStringLiteral("gl-extensions"), QStringLiteral("List GL extensions"));
+    const QCommandLineOption qspTestModeOption(QStringLiteral("qsp-testmode"), QStringLiteral("output the QStandardPaths locations in testing mode"));
+#ifdef Q_OS_OSX
+    const QCommandLineOption qspXDGModeOption(QStringLiteral("qsp-xdgmode"), QStringLiteral("output the QStandardPaths locations in XDG/Freedesktop compliant mode"));
+#endif
     commandLineParser.setApplicationDescription(QStringLiteral("Prints diagnostic output about the Qt library."));
     commandLineParser.addOption(glExtensionOption);
+    commandLineParser.addOption(qspTestModeOption);
+#ifdef Q_OS_OSX
+    commandLineParser.addOption(qspXDGModeOption);
+#endif
     commandLineParser.addHelpOption();
     commandLineParser.process(app);
     unsigned flags = 0;
     if (commandLineParser.isSet(glExtensionOption))
         flags |= QtDiagGlExtensions;
+    if (commandLineParser.isSet(qspTestModeOption))
+        flags |= QtDiagQSPTestMode;
+#ifdef Q_OS_OSX
+    if (commandLineParser.isSet(qspXDGModeOption)) {
+        flags |= QtDiagQSPXDGMode;
+        QStandardPathsConfiguration qspUsesXDGLocations(true);
+    }
+#endif
 
     std::wcout << qtDiag(flags).toStdWString();
     return 0;
diff --git a/qttools/src/qtdiag/qtdiag.cpp b/qttools/src/qtdiag/qtdiag.cpp
index 6af3ecc..4a159d1 100644
--- a/qttools/src/qtdiag/qtdiag.cpp
+++ b/qttools/src/qtdiag/qtdiag.cpp
@@ -176,17 +176,23 @@ void dumpGlInfo(QTextStream &str, bool listExtensions)
 // Dump values of QStandardPaths, indicate writable locations by asterisk.
 static void dumpStandardLocation(QTextStream &str, QStandardPaths::StandardLocation location)
 {
-    str << '"' << QStandardPaths::displayName(location) << '"';
+    str << '"' << QStandardPaths::displayName(location) << "\" =";
     const QStringList directories = QStandardPaths::standardLocations(location);
     const QString writableDirectory = QStandardPaths::writableLocation(location);
     const int writableIndex = directories.indexOf(writableDirectory);
     for (int i = 0; i < directories.size(); ++i) {
         str << ' ';
+        if (i > 0)
+            str << "; ";
         if (i == writableIndex)
             str << '*';
+        else
+            str << "'";
         str << QDir::toNativeSeparators(directories.at(i));
         if (i == writableIndex)
             str << '*';
+        else
+            str << "'";
     }
     if (!writableDirectory.isEmpty() && writableIndex < 0)
         str << " *" << QDir::toNativeSeparators(writableDirectory) << '*';
@@ -260,7 +266,15 @@ QString qtDiag(unsigned flags)
     DUMP_LIBRARYPATH(str, TestsPath)
     DUMP_LIBRARYPATH(str, SettingsPath)
 
-    str << "\nStandard paths [*...* denote writable entry]:\n";
+    if (flags & QtDiagQSPTestMode) {
+        QStandardPaths::enableTestMode(true);
+        str << "\nStandard paths, testing mode [*...* denote writable entry]:\n";
+    } else {
+        str << "\nStandard paths [*...* denote writable entry]:\n";
+    }
+    if ((flags & QtDiagQSPXDGMode) || QStandardPaths::isXDGLocationsEnabled()) {
+        str << "\t- QStandardPaths is in XDG/Freedesktop compliant mode -\n";
+    }
     DUMP_STANDARDPATH(str, DesktopLocation)
     DUMP_STANDARDPATH(str, DocumentsLocation)
     DUMP_STANDARDPATH(str, FontsLocation)
@@ -270,6 +284,7 @@ QString qtDiag(unsigned flags)
     DUMP_STANDARDPATH(str, PicturesLocation)
     DUMP_STANDARDPATH(str, TempLocation)
     DUMP_STANDARDPATH(str, HomeLocation)
+    DUMP_STANDARDPATH(str, DataLocation)
     DUMP_STANDARDPATH(str, AppLocalDataLocation)
     DUMP_STANDARDPATH(str, CacheLocation)
     DUMP_STANDARDPATH(str, GenericDataLocation)
@@ -428,8 +443,6 @@ QString qtDiag(unsigned flags)
 #ifndef QT_NO_OPENGL
     dumpGlInfo(str, flags & QtDiagGlExtensions);
     str << "\n\n";
-#else
-    Q_UNUSED(flags)
 #endif // !QT_NO_OPENGL
 
     // On Windows, this will provide addition GPU info similar to the output of dxdiag.
diff --git a/qttools/src/qtdiag/qtdiag.h b/qttools/src/qtdiag/qtdiag.h
index eca715e..b924681 100644
--- a/qttools/src/qtdiag/qtdiag.h
+++ b/qttools/src/qtdiag/qtdiag.h
@@ -39,7 +39,9 @@
 QT_BEGIN_NAMESPACE
 
 enum QtDiagFlags {
-    QtDiagGlExtensions = 0x1
+    QtDiagGlExtensions = 0x1,
+    QtDiagQSPTestMode = (1<<1),
+    QtDiagQSPXDGMode = (1<<2),
 };
 
 QString qtDiag(unsigned flags = 0);
