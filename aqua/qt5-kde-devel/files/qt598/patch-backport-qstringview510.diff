diff --git a/qtbase/src/corelib/tools/qdatetime.h b/qtbase/src/corelib/tools/qdatetime.h
index 2518dc73014f815cbe9e6b36c3e96bc10413b238..3d69264023bb61d20f25e8498321a1f2ca3395d8 100644
--- a/qtbase/src/corelib/tools/qdatetime.h
+++ b/qtbase/src/corelib/tools/qdatetime.h
@@ -55,6 +55,7 @@ Q_FORWARD_DECLARE_OBJC_CLASS(NSDate);
 QT_BEGIN_NAMESPACE
 
 class QTimeZone;
+class QStringView;
 
 class Q_CORE_EXPORT QDate
 {
@@ -127,6 +128,9 @@ QT_DEPRECATED inline bool setYMD(int y, int m, int d)
     { return jd_ >= minJd() && jd_ <= maxJd() ? QDate(jd_) : QDate() ; }
     Q_DECL_CONSTEXPR inline qint64 toJulianDay() const { return jd; }
 
+    // RJVB backported QStringView from 5.10
+    QString toString(QStringView format) const;
+
 private:
     // using extra parentheses around min to avoid expanding it if it is a macro
     static Q_DECL_CONSTEXPR inline qint64 nullJd() { return (std::numeric_limits<qint64>::min)(); }
@@ -191,6 +195,10 @@ public:
     void start();
     int restart();
     int elapsed() const;
+
+    // RJVB backported QStringView from 5.10
+    QString toString(QStringView format) const;
+
 private:
     enum TimeFlag { NullTime = -1 };
     Q_DECL_CONSTEXPR inline int ds() const { return mds == -1 ? 0 : mds; }
@@ -363,6 +371,9 @@ public:
     NSDate *toNSDate() const Q_DECL_NS_RETURNS_AUTORELEASED;
 #endif
 
+    // RJVB backported QStringView from 5.10
+    QString toString(QStringView format) const;
+
 private:
     friend class QDateTimePrivate;
 
diff --git a/qtbase/src/corelib/tools/qstring.h b/qtbase/src/corelib/tools/qstring.h
index 8f957a7b22bb6ffeabb90370b769eff552a084f6..703e1b2f861f83c2e7605784b82dbfb1ac5a8d97 100644
--- a/qtbase/src/corelib/tools/qstring.h
+++ b/qtbase/src/corelib/tools/qstring.h
@@ -83,6 +83,8 @@ class QString;
 class QStringList;
 class QTextCodec;
 class QStringRef;
+class QStringView;
+
 template <typename T> class QVector;
 
 class QLatin1String
@@ -132,6 +138,17 @@ public:
     inline QT_ASCII_CAST_WARN bool operator>=(const QByteArray &s) const;
 #endif // !defined(QT_NO_CAST_FROM_ASCII) && !defined(QT_RESTRICTED_CAST_FROM_ASCII)
 
+    // RJVB backported QStringView from Qt 5.10
+    Q_REQUIRED_RESULT bool startsWith(QStringView s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const Q_DECL_NOTHROW;
+    Q_REQUIRED_RESULT bool startsWith(QLatin1String s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const Q_DECL_NOTHROW;
+    Q_REQUIRED_RESULT Q_DECL_CONSTEXPR bool startsWith(QChar c) const Q_DECL_NOTHROW;
+    Q_REQUIRED_RESULT inline bool startsWith(QChar c, Qt::CaseSensitivity cs) const Q_DECL_NOTHROW;
+
+    Q_REQUIRED_RESULT bool endsWith(QStringView s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const Q_DECL_NOTHROW;
+    Q_REQUIRED_RESULT bool endsWith(QLatin1String s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const Q_DECL_NOTHROW;
+    Q_REQUIRED_RESULT Q_DECL_CONSTEXPR bool endsWith(QChar c) const Q_DECL_NOTHROW;
+    Q_REQUIRED_RESULT inline bool endsWith(QChar c, Qt::CaseSensitivity cs) const Q_DECL_NOTHROW;
+
 private:
     int m_size;
     const char *m_data;
@@ -875,6 +898,12 @@ private:
 public:
     typedef Data * DataPtr;
     inline DataPtr &data_ptr() { return d; }
+
+    // RJVB backported QStringView from 5.10
+    Q_REQUIRED_RESULT QString arg(QStringView a, int fieldWidth = 0,
+                QChar fillChar = QLatin1Char(' ')) const;
+    Q_REQUIRED_RESULT bool startsWith(QStringView s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const Q_DECL_NOTHROW;
+    Q_REQUIRED_RESULT bool endsWith(QStringView s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const Q_DECL_NOTHROW;
 };
 
 inline QString::QString(QLatin1String aLatin1) : d(fromLatin1_helper(aLatin1.latin1(), aLatin1.size()))
 inline QString::const_iterator QString::begin() const
@@ -1537,6 +1569,10 @@ public:
     qulonglong toULongLong(bool *ok = Q_NULLPTR, int base = 10) const;
     float toFloat(bool *ok = Q_NULLPTR) const;
     double toDouble(bool *ok = Q_NULLPTR) const;
+
+    // RJVB backported QStringView from 5.10
+    Q_REQUIRED_RESULT bool startsWith(QStringView s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const Q_DECL_NOTHROW;
+    Q_REQUIRED_RESULT bool endsWith(QStringView s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const Q_DECL_NOTHROW;
 };
 Q_DECLARE_TYPEINFO(QStringRef, Q_PRIMITIVE_TYPE);
 
diff --git a/qtbase/src/corelib/tools/qstringalgorithms.h b/qtbase/src/corelib/tools/qstringalgorithms.h
new file mode 100644
index 0000000000000000000000000000000000000000..aaa702301ed49db6a1c9a2edbad227a2f57acaa7
--- /dev/null
+++ b/qtbase/src/corelib/tools/qstringalgorithms.h
@@ -0,0 +1,88 @@
+/****************************************************************************
+**
+** Copyright (C) 2017 Klar√§lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Marc Mutz <marc.mutz@kdab.com>
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the QtCore module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QSTRINGALGORITHMS_H
+#define QSTRINGALGORITHMS_H
+
+#include <QtCore/qnamespace.h>
+
+#if 0
+#pragma qt_class(QStringAlgorithms)
+#endif
+
+QT_BEGIN_NAMESPACE
+
+class QByteArray;
+class QLatin1String;
+class QStringView;
+template <typename T> class QVector;
+
+namespace QtPrivate {
+
+Q_REQUIRED_RESULT Q_CORE_EXPORT Q_DECL_PURE_FUNCTION qsizetype qustrlen(const ushort *str) Q_DECL_NOTHROW;
+
+Q_REQUIRED_RESULT Q_CORE_EXPORT Q_DECL_PURE_FUNCTION int compareStrings(QStringView   lhs, QStringView   rhs, Qt::CaseSensitivity cs = Qt::CaseSensitive) Q_DECL_NOTHROW;
+Q_REQUIRED_RESULT Q_CORE_EXPORT Q_DECL_PURE_FUNCTION int compareStrings(QStringView   lhs, QLatin1String rhs, Qt::CaseSensitivity cs = Qt::CaseSensitive) Q_DECL_NOTHROW;
+Q_REQUIRED_RESULT Q_CORE_EXPORT Q_DECL_PURE_FUNCTION int compareStrings(QLatin1String lhs, QStringView   rhs, Qt::CaseSensitivity cs = Qt::CaseSensitive) Q_DECL_NOTHROW;
+Q_REQUIRED_RESULT Q_CORE_EXPORT Q_DECL_PURE_FUNCTION int compareStrings(QLatin1String lhs, QLatin1String rhs, Qt::CaseSensitivity cs = Qt::CaseSensitive) Q_DECL_NOTHROW;
+
+
+Q_REQUIRED_RESULT Q_CORE_EXPORT Q_DECL_PURE_FUNCTION bool startsWith(QStringView   haystack, QStringView   needle, Qt::CaseSensitivity cs = Qt::CaseSensitive) Q_DECL_NOTHROW;
+Q_REQUIRED_RESULT Q_CORE_EXPORT Q_DECL_PURE_FUNCTION bool startsWith(QStringView   haystack, QLatin1String needle, Qt::CaseSensitivity cs = Qt::CaseSensitive) Q_DECL_NOTHROW;
+Q_REQUIRED_RESULT Q_CORE_EXPORT Q_DECL_PURE_FUNCTION bool startsWith(QLatin1String haystack, QStringView   needle, Qt::CaseSensitivity cs = Qt::CaseSensitive) Q_DECL_NOTHROW;
+Q_REQUIRED_RESULT Q_CORE_EXPORT Q_DECL_PURE_FUNCTION bool startsWith(QLatin1String haystack, QLatin1String needle, Qt::CaseSensitivity cs = Qt::CaseSensitive) Q_DECL_NOTHROW;
+
+Q_REQUIRED_RESULT Q_CORE_EXPORT Q_DECL_PURE_FUNCTION bool endsWith(QStringView   haystack, QStringView   needle, Qt::CaseSensitivity cs = Qt::CaseSensitive) Q_DECL_NOTHROW;
+Q_REQUIRED_RESULT Q_CORE_EXPORT Q_DECL_PURE_FUNCTION bool endsWith(QStringView   haystack, QLatin1String needle, Qt::CaseSensitivity cs = Qt::CaseSensitive) Q_DECL_NOTHROW;
+Q_REQUIRED_RESULT Q_CORE_EXPORT Q_DECL_PURE_FUNCTION bool endsWith(QLatin1String haystack, QStringView   needle, Qt::CaseSensitivity cs = Qt::CaseSensitive) Q_DECL_NOTHROW;
+Q_REQUIRED_RESULT Q_CORE_EXPORT Q_DECL_PURE_FUNCTION bool endsWith(QLatin1String haystack, QLatin1String needle, Qt::CaseSensitivity cs = Qt::CaseSensitive) Q_DECL_NOTHROW;
+
+Q_REQUIRED_RESULT Q_CORE_EXPORT Q_DECL_PURE_FUNCTION QStringView   trimmed(QStringView   s) Q_DECL_NOTHROW;
+Q_REQUIRED_RESULT Q_CORE_EXPORT Q_DECL_PURE_FUNCTION QLatin1String trimmed(QLatin1String s) Q_DECL_NOTHROW;
+
+Q_REQUIRED_RESULT Q_CORE_EXPORT QByteArray convertToLatin1(QStringView str);
+Q_REQUIRED_RESULT Q_CORE_EXPORT QByteArray convertToUtf8(QStringView str);
+Q_REQUIRED_RESULT Q_CORE_EXPORT QByteArray convertToLocal8Bit(QStringView str);
+Q_REQUIRED_RESULT Q_CORE_EXPORT QVector<uint> convertToUcs4(QStringView str);
+
+} // namespace QtPRivate
+
+QT_END_NAMESPACE
+
+#endif // QSTRINGALGORTIHMS_H
diff --git a/qtbase/src/corelib/tools/qstringiterator_p.h b/qtbase/src/corelib/tools/qstringiterator_p.h
index 7cf59ae42fe4d1093ab0f5a2919b69b9a3ea62a6..b5e5274b48dc03d72143a26d192342f8accf9165 100644
--- a/qtbase/src/corelib/tools/qstringiterator_p.h
+++ b/qtbase/src/corelib/tools/qstringiterator_p.h
@@ -57,11 +57,16 @@
 
 QT_BEGIN_NAMESPACE
 
+class QStringView;
+
 class QStringIterator
 {
     QString::const_iterator i, pos, e;
 
 public:
+    // RJVB backported from 5.10
+    explicit QStringIterator(QStringView string, qsizetype idx = 0);
+
     inline explicit QStringIterator(const QString &string)
         : i(string.constBegin()),
           pos(string.constBegin()),
diff --git a/qtbase/src/corelib/tools/qstringliteral.h b/qtbase/src/corelib/tools/qstringliteral.h
new file mode 100644
index 0000000000000000000000000000000000000000..6a1a74a80e61222fad9bcdcc65f85308bc26fd32
--- /dev/null
+++ b/qtbase/src/corelib/tools/qstringliteral.h
@@ -0,0 +1,128 @@
+/****************************************************************************
+**
+** Copyright (C) 2016 The Qt Company Ltd.
+** Copyright (C) 2016 Intel Corporation.
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the QtCore module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QSTRINGLITERAL_H
+#define QSTRINGLITERAL_H
+
+#include <QtCore/qarraydata.h>
+
+#if 0
+#pragma qt_class(QStringLiteral)
+#endif
+
+QT_BEGIN_NAMESPACE
+
+typedef QTypedArrayData<ushort> QStringData;
+
+#if defined(Q_OS_WIN) && !defined(Q_COMPILER_UNICODE_STRINGS)
+// fall back to wchar_t if the a Windows compiler does not
+// support Unicode string literals, assuming wchar_t is 2 bytes
+// on that platform (sanity-checked by static_assert further below)
+
+#if defined(Q_CC_MSVC)
+#    define QT_UNICODE_LITERAL_II(str) L##str
+#else
+#    define QT_UNICODE_LITERAL_II(str) L"" str
+#endif
+typedef wchar_t qunicodechar;
+
+#else
+// all our supported compilers support Unicode string literals,
+// even if their Q_COMPILER_UNICODE_STRING has been revoked due
+// to lacking stdlib support. But QStringLiteral only needs the
+// core language feature, so just use u"" here unconditionally:
+
+#define QT_UNICODE_LITERAL_II(str) u"" str
+typedef char16_t qunicodechar;
+
+#endif
+
+Q_STATIC_ASSERT_X(sizeof(qunicodechar) == 2,
+        "qunicodechar must typedef an integral type of size 2");
+
+#define QT_UNICODE_LITERAL(str) QT_UNICODE_LITERAL_II(str)
+#define QStringLiteral(str) \
+    ([]() Q_DECL_NOEXCEPT -> QString { \
+        enum { Size = sizeof(QT_UNICODE_LITERAL(str))/2 - 1 }; \
+        static const QStaticStringData<Size> qstring_literal = { \
+            Q_STATIC_STRING_DATA_HEADER_INITIALIZER(Size), \
+            QT_UNICODE_LITERAL(str) }; \
+        QStringDataPtr holder = { qstring_literal.data_ptr() }; \
+        const QString qstring_literal_temp(holder); \
+        return qstring_literal_temp; \
+    }()) \
+    /**/
+
+#define Q_STATIC_STRING_DATA_HEADER_INITIALIZER_WITH_OFFSET(size, offset) \
+    { Q_REFCOUNT_INITIALIZE_STATIC, size, 0, 0, offset } \
+    /**/
+
+#define Q_STATIC_STRING_DATA_HEADER_INITIALIZER(size) \
+    Q_STATIC_STRING_DATA_HEADER_INITIALIZER_WITH_OFFSET(size, sizeof(QStringData)) \
+    /**/
+
+#ifndef QT_NO_UNICODE_LITERAL
+# ifndef QT_UNICODE_LITERAL
+#  error "If you change QStringLiteral, please change QStringViewLiteral, too"
+# endif
+# define QStringViewLiteral(str) QStringView(QT_UNICODE_LITERAL(str))
+#endif
+
+template <int N>
+struct QStaticStringData
+{
+    QArrayData str;
+    qunicodechar data[N + 1];
+
+    QStringData *data_ptr() const
+    {
+        Q_ASSERT(str.ref.isStatic());
+        return const_cast<QStringData *>(static_cast<const QStringData*>(&str));
+    }
+};
+
+struct QStringDataPtr
+{
+    QStringData *ptr;
+};
+
+QT_END_NAMESPACE
+
+#endif // QSTRINGLITERAL_H
diff --git a/qtbase/src/corelib/tools/qstringview.cpp b/qtbase/src/corelib/tools/qstringview.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..9b578d9e66f858305835702724503adac5eae6ae
--- /dev/null
+++ b/qtbase/src/corelib/tools/qstringview.cpp
@@ -0,0 +1,10176 @@
+/****************************************************************************
+**
+** Copyright (C) 2017 Klar√§lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Marc Mutz <marc.mutz@kdab.com>
+** Contact: http://www.qt.io/licensing/
+**
+** This file is part of the QtCore module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qstringview.h"
+#include "qstringalgorithms_p.h"
+#include "qstringiterator_p.h"
+#include "qsimd_p.h"
+#include "qendian.h"
+#include "qunicodetables_p.h"
+#ifndef QT_NO_TEXTCODEC
+#include <qtextcodec.h>
+#endif
+#include <private/qutfcodec_p.h>
+#include <qvector.h>
+#include <qdatetime.h>
+
+QT_BEGIN_NAMESPACE
+
+// from qunicodetables.cpp@5.10 :
+static const unsigned short uc_property_trie[] = {
+    // [0x0..0x11000)
+
+    6256, 6288, 6320, 6352, 6384, 6416, 6448, 6480,
+    6512, 6544, 6576, 6608, 6640, 6672, 6704, 6736,
+    6768, 6800, 6832, 6864, 6896, 6928, 6960, 6992,
+    7024, 7056, 7088, 7120, 7152, 7184, 7216, 7248,
+    7280, 7312, 7344, 7376, 7408, 7440, 7472, 7504,
+    7536, 7568, 7600, 7632, 7664, 7696, 7728, 7760,
+    7792, 7824, 7856, 7888, 7920, 7952, 7984, 8016,
+    8048, 8080, 8112, 8144, 8176, 8208, 8240, 8272,
+    8304, 8336, 8368, 8400, 8400, 8432, 8464, 8496,
+    8528, 8560, 8592, 8624, 8656, 8688, 8720, 8752,
+    8784, 8816, 8848, 8880, 8912, 8944, 8976, 9008,
+    9040, 9072, 9104, 9136, 9168, 9200, 9232, 9264,
+    9296, 9328, 9360, 9392, 9424, 9456, 9488, 9520,
+    9552, 9584, 9616, 9648, 9680, 9712, 9744, 9776,
+    9808, 9840, 9872, 9904, 9936, 9968, 10000, 9904,
+    10032, 10064, 10096, 10128, 10160, 10192, 10224, 9904,
+
+    10256, 10288, 10320, 10352, 10384, 10416, 10448, 10480,
+    10512, 10512, 10544, 10576, 10608, 10640, 10672, 10704,
+    10736, 10768, 10800, 10768, 10832, 10864, 10896, 10928,
+    10960, 10768, 10992, 11024, 11056, 11088, 11120, 11152,
+    11184, 11216, 11216, 11216, 11216, 11216, 11216, 11216,
+    11216, 11216, 11216, 11216, 11216, 11216, 11216, 11216,
+    11216, 11216, 11216, 11248, 11280, 11312, 11312, 11344,
+    11376, 11408, 11440, 11472, 11504, 11536, 11568, 11600,
+    11632, 11664, 11696, 11728, 11760, 11792, 11824, 11856,
+    11888, 11920, 11952, 11984, 12016, 12048, 12080, 12112,
+    12144, 12176, 12208, 12240, 12272, 12304, 9904, 9904,
+    12336, 12368, 12400, 12432, 12464, 12496, 12528, 12560,
+    12592, 12624, 12656, 12688, 9904, 9904, 12720, 12752,
+    12784, 12816, 12848, 12880, 12912, 12944, 12976, 13008,
+    13040, 13040, 13040, 13040, 13072, 13040, 13040, 13104,
+    13136, 13168, 13200, 13232, 13264, 13296, 13328, 13360,
+
+    13392, 13424, 13456, 13488, 13520, 13552, 13584, 13616,
+    13648, 13680, 13712, 13744, 13776, 13808, 13840, 13872,
+    13904, 13936, 13968, 14000, 14032, 14064, 14096, 14128,
+    14160, 14192, 14224, 14256, 14288, 14320, 14352, 14384,
+    14416, 14448, 14480, 14512, 14544, 14576, 14608, 14640,
+    14416, 14416, 14416, 14416, 14672, 14704, 14736, 14768,
+    14800, 14832, 14416, 14864, 14896, 14928, 14960, 14992,
+    15024, 15056, 15088, 15120, 15152, 15184, 15216, 15248,
+    15280, 15280, 15280, 15280, 15280, 15280, 15280, 15280,
+    15312, 15312, 15312, 15312, 15344, 15376, 15408, 15440,
+    15472, 15504, 15312, 15536, 15568, 15600, 15632, 15664,
+    15696, 15728, 15760, 15792, 15824, 15856, 15888, 15920,
+    15952, 15984, 16016, 16048, 16080, 16080, 16080, 16112,
+    16144, 16176, 16208, 16240, 16272, 16304, 16304, 16336,
+    16368, 16400, 16432, 9904, 16464, 16496, 16496, 16528,
+    16560, 16560, 16560, 16560, 16560, 16560, 16592, 16624,
+
+    16656, 16688, 16720, 16752, 16784, 16816, 16848, 16880,
+    16912, 16944, 16976, 16976, 17008, 17040, 17072, 17104,
+    17136, 17168, 17200, 17232, 17168, 17264, 17296, 17328,
+    17360, 17360, 17392, 17424, 17456, 17456, 17488, 17520,
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+    17552, 17552, 17552, 17552, 17552, 17552, 17552, 17552,
+    17552, 17552, 17552, 17552, 17552, 17584, 17616, 17616,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17648, 17648, 17648,
+    17648, 17648, 17648, 17648, 17648, 17680, 17712, 17744,
+
+    17776, 17808, 17808, 17808, 17808, 17808, 17808, 17808,
+    17808, 17808, 17808, 17808, 17808, 17808, 17808, 17808,
+    17808, 17808, 17808, 17808, 17808, 17808, 17808, 17808,
+    17808, 17808, 17808, 17808, 17808, 17808, 17808, 17808,
+    17808, 17808, 17808, 17808, 17840, 17872, 17904, 17936,
+    17968, 17968, 17968, 17968, 17968, 17968, 17968, 17968,
+    18000, 18032, 18064, 18096, 18128, 18160, 18160, 18192,
+    18224, 18256, 18288, 18320, 18352, 18384, 9904, 18416,
+    18448, 18480, 18512, 18544, 18576, 18608, 18640, 18672,
+    18704, 18736, 18768, 18800, 18832, 18864, 18896, 18928,
+    18960, 18992, 19024, 19056, 19088, 19120, 19152, 19184,
+    19216, 19248, 19280, 19312, 19344, 19376, 19408, 19440,
+    19472, 19504, 19536, 19568, 19600, 19632, 19664, 19472,
+    19504, 19536, 19568, 19600, 19632, 19664, 19472, 19504,
+    19536, 19568, 19600, 19632, 19664, 19472, 19504, 19536,
+    19568, 19600, 19632, 19664, 19472, 19504, 19536, 19568,
+
+    19600, 19632, 19664, 19472, 19504, 19536, 19568, 19600,
+    19632, 19664, 19472, 19504, 19536, 19568, 19600, 19632,
+    19664, 19472, 19504, 19536, 19568, 19600, 19632, 19664,
+    19472, 19504, 19536, 19568, 19600, 19632, 19664, 19472,
+    19504, 19536, 19568, 19600, 19632, 19664, 19472, 19504,
+    19536, 19568, 19600, 19632, 19664, 19472, 19504, 19536,
+    19568, 19600, 19632, 19664, 19472, 19504, 19536, 19568,
+    19600, 19632, 19664, 19472, 19504, 19536, 19568, 19600,
+    19632, 19664, 19472, 19504, 19536, 19568, 19600, 19632,
+    19664, 19472, 19504, 19536, 19568, 19600, 19632, 19664,
+    19472, 19504, 19536, 19568, 19600, 19632, 19664, 19472,
+    19504, 19536, 19568, 19600, 19632, 19664, 19472, 19504,
+    19536, 19568, 19600, 19632, 19664, 19472, 19504, 19536,
+    19568, 19600, 19632, 19664, 19472, 19504, 19536, 19568,
+    19600, 19632, 19664, 19472, 19504, 19536, 19568, 19600,
+    19632, 19664, 19472, 19504, 19536, 19568, 19600, 19632,
+
+    19664, 19472, 19504, 19536, 19568, 19600, 19632, 19664,
+    19472, 19504, 19536, 19568, 19600, 19632, 19664, 19472,
+    19504, 19536, 19568, 19600, 19632, 19664, 19472, 19504,
+    19536, 19568, 19600, 19632, 19664, 19472, 19504, 19536,
+    19568, 19600, 19632, 19664, 19472, 19504, 19536, 19568,
+    19600, 19632, 19664, 19472, 19504, 19536, 19568, 19600,
+    19632, 19664, 19472, 19504, 19536, 19568, 19600, 19632,
+    19664, 19472, 19504, 19536, 19568, 19600, 19632, 19664,
+    19472, 19504, 19536, 19568, 19600, 19632, 19664, 19472,
+    19504, 19536, 19568, 19600, 19632, 19664, 19472, 19504,
+    19536, 19568, 19600, 19632, 19664, 19472, 19504, 19536,
+    19568, 19600, 19632, 19664, 19472, 19504, 19536, 19568,
+    19600, 19632, 19664, 19472, 19504, 19536, 19568, 19600,
+    19632, 19664, 19472, 19504, 19536, 19568, 19600, 19632,
+    19664, 19472, 19504, 19536, 19568, 19600, 19632, 19664,
+    19472, 19504, 19536, 19568, 19600, 19632, 19664, 19472,
+
+    19504, 19536, 19568, 19600, 19632, 19664, 19472, 19504,
+    19536, 19568, 19600, 19632, 19664, 19472, 19504, 19536,
+    19568, 19600, 19632, 19664, 19472, 19504, 19536, 19568,
+    19600, 19632, 19664, 19472, 19504, 19536, 19568, 19600,
+    19632, 19664, 19472, 19504, 19536, 19568, 19600, 19632,
+    19664, 19472, 19504, 19536, 19568, 19600, 19632, 19664,
+    19472, 19504, 19536, 19568, 19600, 19632, 19664, 19472,
+    19504, 19536, 19568, 19600, 19632, 19696, 19728, 19760,
+    19792, 19792, 19792, 19792, 19792, 19792, 19792, 19792,
+    19792, 19792, 19792, 19792, 19792, 19792, 19792, 19792,
+    19792, 19792, 19792, 19792, 19792, 19792, 19792, 19792,
+    19792, 19792, 19792, 19792, 19792, 19792, 19792, 19792,
+    19792, 19792, 19792, 19792, 19792, 19792, 19792, 19792,
+    19792, 19792, 19792, 19792, 19792, 19792, 19792, 19792,
+    19792, 19792, 19792, 19792, 19792, 19792, 19792, 19792,
+    19792, 19792, 19792, 19792, 19792, 19792, 19792, 19792,
+
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+    19824, 19824, 19824, 19824, 19824, 19824, 19824, 19824,
+    19856, 19856, 19856, 19856, 19856, 19856, 19856, 19856,
+    19888, 19920, 19952, 19984, 20016, 20016, 20048, 17744,
+    20080, 20112, 20144, 20176, 20176, 20208, 20240, 20176,
+    20176, 20176, 20176, 20176, 20176, 20176, 20176, 20176,
+    20176, 20272, 20304, 20176, 20336, 20176, 20368, 20400,
+    20432, 20464, 20496, 20528, 20176, 20176, 20176, 20560,
+    20592, 20624, 20656, 20688, 20720, 20752, 20784, 20816,
+
+    20848, 20880, 20912, 9904, 20944, 20944, 20944, 20976,
+    21008, 21040, 21072, 21104, 21136, 21168, 21200, 21232,
+    9904, 9904, 9904, 9904, 21264, 21296, 21328, 21360,
+    21392, 21424, 21456, 21488, 21520, 21552, 21584, 9904,
+    21616, 21648, 21680, 21712, 21744, 21776, 9904, 9904,
+    21808, 21840, 21872, 21904, 9904, 9904, 9904, 9904,
+    21936, 21936, 21936, 21936, 21936, 21936, 21936, 21936,
+    21936, 21968, 22000, 22032, 9904, 9904, 9904, 9904,
+    22064, 22096, 22128, 22160, 22192, 22224, 8400, 22256,
+    22288, 22320, 8400, 8400, 22352, 22384, 22416, 22448,
+    22480, 22512, 22544, 22576, 22608, 8400, 22640, 22672,
+    22704, 22736, 22768, 22800, 22832, 22864, 8400, 8400,
+    22896, 22896, 22928, 8400, 22960, 22992, 23024, 23056,
+    8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400,
+    8400, 8400, 8400, 23088, 8400, 8400, 8400, 8400,
+    8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400,
+
+    // [0x11000..0x110000)
+
+    23120, 23376, 23632, 23888, 24144, 24400, 24656, 24912,
+    25168, 25424, 25680, 25424, 25424, 25424, 25424, 25424,
+    25936, 25936, 25936, 26192, 26448, 26704, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    26960, 26960, 27216, 27472, 27728, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 27984, 28240, 28496, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    28752, 28752, 29008, 29264, 25424, 25424, 25424, 29520,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    29776, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 30032, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    30288, 30544, 30800, 31056, 31312, 31568, 31824, 32080,
+    32336, 32336, 32592, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    32848, 33104, 33104, 33104, 33104, 33104, 33360, 33104,
+    33616, 33872, 34128, 34384, 34640, 34896, 35152, 35408,
+    35664, 35920, 25424, 25424, 25424, 25424, 25424, 36176,
+    36432, 36432, 36432, 36432, 36432, 36432, 36432, 36432,
+    36432, 36432, 36432, 36432, 36432, 36432, 36432, 36432,
+    36432, 36432, 36432, 36432, 36432, 36432, 36432, 36432,
+    36432, 36432, 36432, 36432, 36432, 36432, 36432, 36432,
+    36432, 36432, 36432, 36432, 36432, 36432, 36432, 36432,
+    36432, 36432, 36432, 36432, 36432, 36432, 36432, 36432,
+    36432, 36432, 36432, 36432, 36432, 36432, 36432, 36432,
+    36432, 36432, 36432, 36432, 36432, 36432, 36432, 36432,
+    36432, 36432, 36432, 36432, 36432, 36432, 36432, 36432,
+    36432, 36432, 36432, 36432, 36432, 36432, 36432, 36432,
+    36432, 36432, 36432, 36432, 36432, 36432, 36432, 36432,
+    36432, 36432, 36432, 36432, 36432, 36432, 36432, 36432,
+    36432, 36432, 36432, 36432, 36432, 36432, 36432, 36432,
+    36432, 36432, 36432, 36432, 36432, 36432, 36432, 36432,
+    36432, 36432, 36432, 36432, 36432, 36432, 36432, 36432,
+    36432, 36432, 36432, 36432, 36432, 36432, 36432, 36432,
+    36432, 36432, 36432, 36432, 36432, 36432, 36432, 36432,
+    36432, 36432, 36432, 36432, 36432, 36432, 36432, 36432,
+
+    36432, 36432, 36432, 36432, 36432, 36432, 36432, 36432,
+    36432, 36432, 36432, 36432, 36432, 36432, 36432, 36432,
+    36432, 36432, 36432, 36432, 36432, 36432, 36688, 36944,
+    36944, 36944, 36944, 36944, 36944, 36944, 36944, 36944,
+    36944, 36944, 36944, 36944, 36944, 36944, 36944, 37200,
+    37456, 37712, 37712, 37712, 37712, 37712, 37712, 37712,
+    37712, 37712, 37712, 37712, 37712, 37712, 37712, 37712,
+    37712, 37712, 37712, 37712, 37712, 37712, 37968, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38480, 38480, 38736, 38224, 38224, 38224, 38224, 38992,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38224,
+    38224, 38224, 38224, 38224, 38224, 38224, 38224, 38992,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 36176,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 36176,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 36176,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 36176,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 36176,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 36176,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 36176,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 36176,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 36176,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 36176,
+    39248, 39504, 39760, 39760, 39760, 39760, 39760, 39760,
+    39760, 39760, 39760, 39760, 39760, 39760, 39760, 39760,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 25424,
+    25424, 25424, 25424, 25424, 25424, 25424, 25424, 36176,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40272,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40016,
+    40016, 40016, 40016, 40016, 40016, 40016, 40016, 40272,
+
+
+    0, 0, 0, 0, 0, 0, 0, 0,
+    0, 1, 2, 3, 4, 5, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 6, 6, 6, 7,
+
+    8, 9, 10, 11, 12, 13, 14, 15,
+    16, 17, 14, 18, 19, 20, 21, 22,
+    23, 24, 25, 26, 27, 28, 29, 30,
+    31, 32, 33, 34, 35, 36, 37, 9,
+
+    14, 38, 38, 38, 38, 38, 38, 38,
+    38, 38, 38, 38, 38, 38, 38, 38,
+    38, 38, 38, 38, 38, 38, 38, 38,
+    38, 38, 38, 39, 40, 41, 42, 43,
+
+    42, 44, 44, 44, 44, 44, 44, 44,
+    44, 44, 44, 44, 44, 44, 44, 44,
+    44, 44, 44, 44, 44, 44, 44, 44,
+    44, 44, 44, 39, 45, 46, 36, 0,
+
+    0, 0, 0, 0, 0, 47, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0,
+
+    48, 49, 50, 12, 12, 12, 51, 14,
+    52, 51, 53, 54, 36, 55, 51, 52,
+    56, 57, 58, 59, 60, 61, 14, 62,
+    52, 63, 53, 64, 65, 65, 65, 49,
+
+    66, 66, 66, 66, 66, 66, 38, 66,
+    66, 66, 66, 66, 66, 66, 66, 66,
+    38, 66, 66, 66, 66, 66, 66, 36,
+    38, 66, 66, 66, 66, 66, 38, 67,
+
+    68, 68, 68, 68, 68, 68, 44, 68,
+    68, 68, 68, 68, 68, 68, 68, 68,
+    44, 68, 68, 68, 68, 68, 68, 36,
+    44, 68, 68, 68, 68, 68, 44, 69,
+
+    70, 71, 70, 71, 70, 71, 70, 71,
+    70, 71, 70, 71, 70, 71, 70, 71,
+    72, 73, 70, 71, 70, 71, 70, 71,
+    70, 71, 70, 71, 70, 71, 70, 71,
+
+    70, 71, 70, 71, 70, 71, 72, 73,
+    70, 71, 70, 71, 70, 71, 70, 71,
+    74, 75, 76, 77, 70, 71, 70, 71,
+    78, 70, 71, 70, 71, 70, 71, 76,
+
+    77, 72, 73, 70, 71, 70, 71, 70,
+    71, 79, 72, 73, 70, 71, 70, 71,
+    70, 71, 72, 73, 70, 71, 70, 71,
+    70, 71, 70, 71, 70, 71, 70, 71,
+
+    70, 71, 70, 71, 70, 71, 72, 73,
+    70, 71, 70, 71, 70, 71, 70, 71,
+    70, 71, 70, 71, 70, 71, 70, 71,
+    80, 70, 71, 70, 71, 70, 71, 81,
+
+    82, 83, 72, 73, 72, 73, 84, 72,
+    73, 85, 85, 72, 73, 78, 86, 87,
+    88, 72, 73, 85, 89, 90, 91, 92,
+    72, 73, 93, 78, 91, 94, 95, 96,
+
+    70, 71, 72, 73, 72, 73, 97, 72,
+    73, 97, 78, 78, 72, 73, 97, 70,
+    71, 98, 98, 72, 73, 72, 73, 99,
+    72, 73, 78, 100, 72, 73, 78, 101,
+
+    100, 100, 100, 100, 102, 103, 104, 102,
+    103, 104, 102, 103, 104, 70, 71, 70,
+    71, 70, 71, 70, 71, 70, 71, 70,
+    71, 70, 71, 70, 71, 105, 70, 71,
+
+    70, 71, 70, 71, 72, 73, 70, 71,
+    70, 71, 70, 71, 70, 71, 70, 71,
+    106, 102, 103, 104, 70, 71, 107, 108,
+    109, 110, 70, 71, 70, 71, 70, 71,
+
+    70, 71, 70, 71, 70, 71, 70, 71,
+    70, 71, 70, 71, 70, 71, 70, 71,
+    70, 71, 70, 71, 70, 71, 70, 71,
+    109, 110, 109, 110, 111, 112, 109, 110,
+
+    113, 114, 111, 112, 111, 112, 109, 110,
+    109, 110, 109, 110, 109, 110, 109, 110,
+    109, 110, 109, 110, 114, 114, 114, 115,
+    115, 115, 116, 117, 118, 119, 120, 121,
+
+    122, 117, 123, 124, 125, 126, 127, 123,
+    127, 123, 127, 123, 127, 123, 127, 123,
+    128, 129, 130, 131, 132, 78, 133, 133,
+    78, 134, 78, 135, 136, 78, 78, 78,
+
+    133, 137, 78, 138, 78, 139, 140, 78,
+    141, 142, 78, 143, 144, 78, 78, 142,
+    78, 145, 146, 78, 78, 147, 78, 78,
+    78, 78, 78, 78, 78, 148, 78, 78,
+
+    149, 78, 78, 149, 78, 78, 78, 150,
+    149, 151, 152, 152, 153, 78, 78, 78,
+    78, 78, 154, 78, 100, 78, 78, 78,
+    78, 78, 78, 78, 78, 155, 156, 78,
+
+    78, 78, 78, 78, 78, 78, 78, 78,
+    78, 157, 157, 157, 157, 157, 114, 114,
+    158, 158, 158, 158, 158, 158, 158, 158,
+    158, 159, 159, 160, 160, 160, 160, 160,
+
+    161, 161, 42, 42, 42, 42, 159, 159,
+    162, 159, 159, 159, 162, 159, 159, 159,
+    160, 160, 42, 42, 42, 42, 42, 163,
+    52, 52, 52, 52, 52, 52, 42, 164,
+
+    158, 158, 158, 158, 158, 42, 42, 42,
+    42, 42, 165, 165, 166, 167, 168, 169,
+    169, 169, 169, 169, 169, 169, 169, 169,
+    169, 169, 169, 169, 169, 169, 169, 169,
+
+    170, 170, 170, 170, 170, 171, 170, 170,
+    170, 170, 170, 170, 170, 171, 171, 170,
+    171, 170, 171, 170, 170, 172, 173, 173,
+    173, 173, 172, 174, 173, 173, 173, 173,
+
+    173, 175, 175, 176, 176, 176, 176, 177,
+    177, 173, 173, 173, 173, 176, 176, 173,
+    176, 176, 173, 173, 178, 178, 178, 178,
+    179, 173, 173, 173, 173, 171, 171, 171,
+
+    180, 180, 170, 180, 180, 181, 182, 183,
+    183, 183, 182, 182, 182, 183, 183, 184,
+    185, 185, 185, 186, 186, 186, 186, 185,
+    187, 188, 188, 189, 190, 191, 191, 192,
+
+    193, 193, 194, 195, 195, 195, 195, 195,
+    195, 195, 195, 195, 195, 195, 195, 195,
+    196, 197, 196, 197, 198, 199, 196, 197,
+    200, 200, 201, 202, 202, 202, 203, 204,
+
+    200, 200, 200, 200, 205, 206, 207, 208,
+    209, 209, 209, 200, 210, 200, 211, 211,
+    212, 213, 213, 213, 213, 213, 213, 213,
+    213, 213, 213, 213, 213, 213, 213, 213,
+
+    213, 213, 200, 213, 213, 213, 213, 213,
+    213, 213, 214, 214, 215, 216, 216, 216,
+    217, 218, 218, 218, 218, 218, 218, 218,
+    218, 218, 218, 218, 218, 218, 218, 218,
+
+    218, 218, 219, 218, 218, 218, 218, 218,
+    218, 218, 220, 220, 221, 222, 222, 223,
+    224, 225, 226, 227, 227, 228, 229, 230,
+    231, 232, 233, 234, 233, 234, 233, 234,
+
+    233, 234, 235, 236, 235, 236, 235, 236,
+    235, 236, 235, 236, 235, 236, 235, 236,
+    237, 238, 239, 240, 241, 242, 243, 244,
+    245, 246, 244, 245, 247, 248, 248, 248,
+
+    249, 250, 251, 250, 251, 251, 251, 250,
+    251, 251, 251, 251, 250, 249, 250, 251,
+    252, 252, 252, 252, 252, 252, 252, 252,
+    252, 253, 252, 252, 252, 252, 252, 252,
+
+    252, 252, 252, 252, 252, 252, 252, 252,
+    252, 252, 252, 252, 252, 252, 252, 252,
+    254, 254, 254, 254, 254, 254, 254, 254,
+    254, 255, 254, 254, 254, 254, 254, 254,
+
+    254, 254, 254, 254, 254, 254, 254, 254,
+    254, 254, 254, 254, 254, 254, 254, 254,
+    256, 257, 258, 257, 258, 258, 258, 257,
+    258, 258, 258, 258, 257, 256, 257, 258,
+
+    259, 260, 259, 260, 259, 260, 259, 260,
+    259, 260, 259, 260, 259, 260, 259, 260,
+    259, 260, 259, 260, 259, 260, 261, 262,
+    259, 260, 259, 260, 259, 260, 259, 260,
+
+    259, 260, 263, 264, 264, 171, 171, 265,
+    266, 266, 267, 268, 269, 270, 269, 270,
+    259, 260, 259, 260, 259, 260, 259, 260,
+    259, 260, 259, 260, 259, 260, 259, 260,
+
+    259, 260, 259, 260, 259, 260, 259, 260,
+    259, 260, 259, 260, 259, 260, 259, 260,
+    259, 260, 259, 260, 259, 260, 259, 260,
+    259, 260, 259, 260, 259, 260, 259, 260,
+
+    271, 261, 262, 259, 260, 267, 268, 259,
+    260, 267, 268, 259, 260, 267, 268, 272,
+    261, 262, 261, 262, 259, 260, 261, 262,
+    259, 260, 261, 262, 261, 262, 261, 262,
+
+    259, 260, 261, 262, 261, 262, 261, 262,
+    259, 260, 261, 262, 273, 274, 261, 262,
+    261, 262, 261, 262, 261, 262, 275, 276,
+    261, 262, 277, 278, 277, 278, 277, 278,
+
+    267, 268, 267, 268, 267, 268, 267, 268,
+    267, 268, 267, 268, 267, 268, 267, 268,
+    277, 278, 277, 278, 279, 280, 279, 280,
+    279, 280, 279, 280, 279, 280, 279, 280,
+
+    279, 280, 279, 280, 281, 282, 283, 284,
+    285, 286, 285, 286, 285, 286, 285, 286,
+    200, 287, 287, 287, 287, 287, 287, 287,
+    287, 287, 287, 287, 287, 287, 287, 287,
+
+    287, 287, 287, 287, 287, 287, 287, 287,
+    287, 287, 287, 287, 287, 287, 287, 287,
+    287, 287, 287, 287, 287, 287, 287, 200,
+    200, 288, 289, 289, 289, 290, 289, 289,
+
+    200, 291, 291, 291, 291, 291, 291, 291,
+    291, 291, 291, 291, 291, 291, 291, 291,
+    291, 291, 291, 291, 291, 291, 291, 291,
+    291, 291, 291, 291, 291, 291, 291, 291,
+
+    291, 291, 291, 291, 291, 291, 291, 292,
+    200, 293, 294, 200, 200, 295, 295, 296,
+    297, 298, 299, 299, 299, 299, 298, 299,
+    299, 299, 300, 298, 299, 299, 299, 299,
+
+    299, 299, 301, 298, 298, 298, 298, 298,
+    299, 299, 298, 299, 299, 300, 302, 299,
+    303, 304, 305, 306, 307, 308, 309, 310,
+    311, 312, 313, 314, 315, 316, 317, 318,
+
+    319, 320, 321, 319, 299, 301, 322, 323,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    324, 324, 324, 324, 324, 324, 324, 324,
+    324, 324, 324, 324, 324, 324, 324, 324,
+
+    324, 324, 324, 324, 324, 324, 324, 324,
+    324, 324, 324, 297, 297, 297, 297, 297,
+    324, 324, 324, 325, 326, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+
+    327, 327, 327, 327, 328, 329, 330, 330,
+    331, 332, 332, 333, 19, 334, 335, 335,
+    336, 336, 336, 336, 336, 336, 337, 337,
+    338, 339, 340, 341, 342, 343, 344, 345,
+
+    346, 347, 348, 348, 348, 348, 349, 350,
+    351, 350, 351, 351, 351, 351, 351, 350,
+    350, 350, 350, 351, 351, 351, 351, 351,
+    351, 351, 351, 352, 352, 352, 352, 352,
+
+    353, 351, 351, 351, 351, 351, 351, 351,
+    350, 351, 351, 354, 355, 356, 357, 358,
+    359, 360, 361, 362, 362, 363, 364, 336,
+    336, 365, 365, 365, 366, 365, 365, 367,
+
+    368, 369, 370, 371, 372, 373, 374, 375,
+    376, 377, 378, 379, 380, 381, 382, 382,
+    383, 350, 350, 350, 347, 384, 384, 384,
+    385, 351, 351, 351, 351, 351, 351, 351,
+
+    351, 351, 351, 351, 351, 351, 351, 351,
+    350, 350, 350, 350, 350, 350, 350, 350,
+    350, 350, 350, 350, 350, 350, 350, 350,
+    350, 350, 351, 351, 351, 351, 351, 351,
+
+    351, 351, 351, 351, 351, 351, 351, 351,
+    351, 351, 351, 351, 351, 351, 351, 351,
+    351, 351, 351, 351, 351, 351, 351, 351,
+    386, 386, 351, 351, 351, 351, 351, 386,
+
+    348, 351, 349, 350, 350, 350, 350, 350,
+    350, 350, 350, 350, 351, 350, 351, 387,
+    351, 351, 350, 348, 388, 350, 389, 389,
+    389, 389, 389, 389, 389, 390, 391, 389,
+
+    389, 389, 389, 392, 389, 393, 393, 389,
+    389, 391, 392, 389, 389, 392, 394, 394,
+    395, 396, 397, 398, 399, 400, 401, 402,
+    403, 404, 386, 386, 386, 405, 405, 406,
+
+    407, 407, 407, 408, 408, 408, 408, 408,
+    408, 408, 408, 408, 408, 408, 343, 409,
+    410, 411, 412, 412, 412, 410, 410, 410,
+    410, 410, 412, 412, 412, 412, 410, 412,
+
+    412, 412, 412, 412, 412, 412, 412, 412,
+    410, 412, 410, 412, 410, 413, 413, 414,
+    415, 416, 415, 415, 416, 415, 415, 416,
+    416, 416, 415, 416, 416, 415, 416, 415,
+
+    415, 415, 416, 415, 416, 415, 416, 415,
+    416, 415, 415, 343, 343, 414, 413, 413,
+    417, 417, 417, 417, 417, 417, 417, 417,
+    417, 418, 418, 418, 417, 417, 417, 417,
+
+    417, 417, 417, 417, 417, 417, 417, 417,
+    417, 417, 417, 418, 418, 417, 352, 352,
+    352, 419, 352, 419, 419, 352, 352, 352,
+    419, 419, 352, 352, 352, 352, 352, 352,
+
+    420, 420, 420, 420, 420, 420, 420, 420,
+    420, 420, 420, 420, 420, 420, 420, 420,
+    420, 420, 420, 420, 420, 420, 420, 420,
+    420, 420, 420, 420, 420, 420, 420, 420,
+
+    420, 420, 420, 420, 420, 420, 421, 421,
+    421, 421, 421, 421, 421, 421, 421, 421,
+    421, 422, 343, 343, 343, 343, 343, 343,
+    343, 343, 343, 343, 343, 343, 343, 343,
+
+    423, 424, 425, 426, 427, 428, 429, 430,
+    431, 432, 433, 433, 433, 433, 433, 433,
+    433, 433, 433, 433, 433, 433, 433, 433,
+    433, 433, 433, 433, 433, 433, 433, 433,
+
+    433, 433, 433, 433, 433, 433, 433, 433,
+    433, 433, 433, 434, 434, 434, 434, 434,
+    434, 434, 435, 434, 436, 436, 437, 438,
+    439, 440, 441, 297, 297, 297, 297, 297,
+
+    442, 442, 442, 442, 442, 442, 442, 442,
+    442, 442, 442, 442, 442, 442, 442, 442,
+    442, 442, 442, 442, 442, 442, 443, 443,
+    443, 443, 444, 443, 443, 443, 443, 443,
+
+    443, 443, 443, 443, 444, 443, 443, 443,
+    444, 443, 443, 443, 443, 443, 297, 297,
+    445, 445, 445, 445, 445, 445, 445, 445,
+    445, 445, 445, 445, 445, 445, 445, 297,
+
+    446, 447, 447, 447, 447, 447, 446, 446,
+    447, 446, 447, 447, 447, 447, 447, 447,
+    447, 447, 447, 447, 446, 447, 448, 448,
+    448, 449, 449, 449, 297, 297, 450, 297,
+
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+
+    451, 452, 451, 451, 451, 451, 451, 451,
+    451, 451, 453, 453, 453, 454, 455, 452,
+    452, 455, 455, 456, 456, 343, 343, 343,
+    343, 343, 343, 343, 343, 343, 343, 343,
+
+    343, 343, 343, 343, 343, 343, 343, 343,
+    343, 343, 343, 343, 343, 343, 343, 343,
+    343, 343, 343, 343, 343, 343, 343, 343,
+    343, 343, 343, 343, 343, 343, 343, 343,
+
+    343, 343, 343, 457, 458, 458, 459, 458,
+    458, 459, 458, 458, 458, 459, 459, 459,
+    460, 461, 462, 458, 458, 458, 459, 458,
+    458, 459, 459, 458, 458, 458, 458, 463,
+
+    464, 465, 465, 466, 467, 468, 468, 468,
+    468, 468, 468, 468, 468, 468, 468, 468,
+    468, 468, 468, 468, 468, 468, 468, 468,
+    468, 468, 468, 468, 468, 468, 468, 468,
+
+    468, 468, 468, 468, 468, 468, 468, 468,
+    468, 469, 468, 468, 468, 468, 468, 468,
+    468, 469, 468, 468, 469, 468, 468, 468,
+    468, 468, 470, 471, 472, 468, 466, 466,
+
+    466, 465, 465, 465, 465, 465, 465, 465,
+    465, 466, 466, 466, 466, 473, 474, 471,
+    468, 171, 173, 475, 475, 464, 470, 470,
+    476, 476, 476, 476, 476, 476, 476, 476,
+
+    468, 468, 465, 465, 477, 477, 478, 479,
+    480, 481, 482, 483, 484, 485, 486, 487,
+    488, 489, 490, 491, 491, 491, 491, 491,
+    492, 493, 493, 494, 494, 495, 494, 494,
+
+    496, 497, 498, 498, 200, 499, 499, 499,
+    499, 499, 499, 499, 499, 200, 200, 499,
+    499, 200, 200, 499, 499, 499, 499, 499,
+    499, 499, 499, 499, 499, 499, 499, 499,
+
+    499, 499, 499, 499, 499, 499, 499, 499,
+    499, 200, 499, 499, 499, 499, 499, 499,
+    499, 200, 499, 200, 200, 200, 499, 499,
+    499, 499, 200, 200, 500, 501, 502, 498,
+
+    498, 497, 497, 497, 497, 200, 200, 498,
+    498, 200, 200, 503, 503, 504, 505, 200,
+    200, 200, 200, 200, 200, 200, 200, 502,
+    200, 200, 200, 200, 506, 506, 200, 506,
+
+    499, 499, 497, 497, 200, 200, 507, 508,
+    509, 510, 511, 512, 513, 514, 515, 516,
+    499, 499, 517, 517, 518, 518, 518, 518,
+    518, 519, 520, 521, 200, 200, 200, 200,
+
+    200, 522, 523, 524, 200, 525, 525, 525,
+    525, 525, 525, 200, 200, 200, 200, 525,
+    525, 200, 200, 525, 525, 525, 525, 525,
+    525, 525, 525, 525, 525, 525, 525, 525,
+
+    525, 525, 525, 525, 525, 525, 525, 525,
+    525, 200, 525, 525, 525, 525, 525, 525,
+    525, 200, 525, 526, 200, 525, 526, 200,
+    525, 525, 200, 200, 527, 200, 528, 528,
+
+    528, 523, 523, 200, 200, 200, 200, 523,
+    523, 200, 200, 523, 523, 529, 200, 200,
+    200, 530, 200, 200, 200, 200, 200, 200,
+    200, 526, 526, 526, 525, 200, 526, 200,
+
+    200, 200, 200, 200, 200, 200, 531, 532,
+    533, 534, 535, 536, 537, 538, 539, 540,
+    523, 523, 525, 525, 525, 530, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    200, 541, 541, 542, 200, 543, 543, 543,
+    543, 543, 543, 543, 544, 543, 200, 543,
+    543, 543, 200, 543, 543, 543, 543, 543,
+    543, 543, 543, 543, 543, 543, 543, 543,
+
+    543, 543, 543, 543, 543, 543, 543, 543,
+    543, 200, 543, 543, 543, 543, 543, 543,
+    543, 200, 543, 543, 200, 543, 543, 543,
+    543, 543, 200, 200, 545, 543, 542, 542,
+
+    542, 541, 541, 541, 541, 541, 200, 541,
+    541, 542, 200, 542, 542, 546, 200, 200,
+    543, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    543, 544, 547, 547, 200, 200, 548, 549,
+    550, 551, 552, 553, 554, 555, 556, 557,
+    558, 559, 200, 200, 200, 200, 200, 200,
+    200, 560, 200, 200, 200, 200, 200, 200,
+
+    200, 561, 562, 562, 200, 563, 563, 563,
+    563, 563, 563, 563, 563, 200, 200, 563,
+    563, 200, 200, 563, 563, 563, 563, 563,
+    563, 563, 563, 563, 563, 563, 563, 563,
+
+    563, 563, 563, 563, 563, 563, 563, 563,
+    563, 200, 563, 563, 563, 563, 563, 563,
+    563, 200, 563, 563, 200, 564, 563, 563,
+    563, 563, 200, 200, 565, 563, 566, 561,
+
+    562, 561, 561, 561, 567, 200, 200, 562,
+    568, 200, 200, 568, 568, 569, 200, 200,
+    200, 200, 200, 200, 200, 200, 570, 566,
+    200, 200, 200, 200, 571, 571, 200, 563,
+
+    563, 563, 567, 567, 200, 200, 572, 573,
+    574, 575, 576, 577, 578, 579, 580, 581,
+    582, 564, 583, 583, 583, 583, 583, 583,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    200, 200, 584, 585, 200, 585, 585, 585,
+    585, 585, 585, 200, 200, 200, 585, 585,
+    585, 200, 585, 585, 586, 585, 200, 200,
+    200, 585, 585, 200, 585, 200, 585, 585,
+
+    200, 200, 200, 585, 585, 200, 200, 200,
+    585, 585, 585, 200, 200, 200, 585, 585,
+    585, 585, 585, 585, 585, 585, 587, 585,
+    585, 585, 200, 200, 200, 200, 588, 589,
+
+    584, 589, 589, 200, 200, 200, 589, 589,
+    589, 200, 590, 590, 590, 591, 200, 200,
+    592, 200, 200, 200, 200, 200, 200, 588,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    200, 200, 200, 200, 200, 200, 593, 594,
+    595, 596, 597, 598, 599, 600, 601, 602,
+    603, 603, 603, 604, 604, 604, 604, 604,
+    604, 605, 604, 200, 200, 200, 200, 200,
+
+    606, 607, 607, 607, 200, 608, 608, 608,
+    608, 608, 608, 608, 608, 200, 608, 608,
+    608, 200, 608, 608, 608, 608, 608, 608,
+    608, 608, 608, 608, 608, 608, 608, 608,
+
+    608, 608, 608, 608, 608, 608, 608, 608,
+    608, 200, 608, 608, 608, 608, 608, 608,
+    608, 608, 608, 608, 609, 608, 608, 608,
+    608, 608, 200, 200, 200, 610, 611, 611,
+
+    611, 607, 607, 607, 607, 200, 611, 611,
+    612, 200, 611, 611, 611, 613, 200, 200,
+    200, 200, 200, 200, 200, 614, 615, 200,
+    610, 610, 616, 200, 200, 200, 200, 200,
+
+    608, 608, 617, 617, 200, 200, 618, 619,
+    620, 621, 622, 623, 624, 625, 626, 627,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    628, 628, 628, 628, 628, 628, 628, 629,
+
+    200, 630, 631, 631, 200, 632, 632, 632,
+    632, 632, 632, 632, 632, 200, 632, 632,
+    632, 200, 632, 632, 632, 632, 632, 632,
+    632, 632, 632, 632, 632, 632, 632, 632,
+
+    632, 632, 632, 632, 632, 632, 632, 632,
+    632, 200, 632, 632, 632, 632, 632, 632,
+    632, 632, 632, 632, 200, 632, 632, 632,
+    632, 632, 200, 200, 633, 634, 631, 635,
+
+    636, 631, 637, 631, 631, 200, 635, 636,
+    636, 200, 636, 636, 638, 639, 200, 200,
+    200, 200, 200, 200, 200, 637, 637, 200,
+    200, 200, 200, 200, 200, 200, 632, 200,
+
+    632, 632, 640, 640, 200, 200, 641, 642,
+    643, 644, 645, 646, 647, 648, 649, 650,
+    200, 651, 651, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    200, 652, 653, 653, 200, 654, 654, 654,
+    654, 654, 654, 654, 654, 200, 654, 654,
+    654, 200, 654, 654, 654, 654, 654, 654,
+    654, 654, 654, 654, 654, 654, 654, 654,
+
+    654, 654, 654, 654, 654, 654, 654, 654,
+    654, 655, 654, 654, 654, 654, 654, 654,
+    654, 654, 654, 654, 654, 654, 654, 654,
+    654, 654, 655, 200, 200, 656, 657, 653,
+
+    653, 658, 658, 658, 659, 200, 653, 653,
+    653, 200, 660, 660, 660, 661, 655, 200,
+    200, 200, 200, 200, 200, 200, 200, 657,
+    200, 200, 200, 200, 200, 200, 200, 662,
+
+    654, 654, 659, 659, 200, 200, 663, 664,
+    665, 666, 667, 668, 669, 670, 671, 672,
+    673, 673, 673, 673, 673, 673, 200, 200,
+    200, 674, 656, 656, 656, 656, 656, 656,
+
+    200, 200, 675, 675, 200, 676, 676, 676,
+    676, 676, 676, 676, 676, 676, 676, 676,
+    676, 676, 676, 676, 676, 676, 676, 200,
+    200, 200, 676, 676, 676, 676, 676, 676,
+
+    676, 676, 676, 676, 676, 676, 676, 676,
+    676, 676, 676, 676, 676, 676, 676, 676,
+    676, 676, 200, 676, 676, 676, 676, 676,
+    676, 676, 676, 676, 200, 676, 200, 200,
+
+    676, 676, 676, 676, 676, 676, 676, 200,
+    200, 200, 677, 200, 200, 200, 200, 678,
+    675, 675, 679, 679, 679, 200, 679, 200,
+    675, 675, 680, 675, 680, 680, 680, 678,
+
+    200, 200, 200, 200, 200, 200, 681, 682,
+    683, 684, 685, 686, 687, 688, 689, 690,
+    200, 200, 675, 675, 691, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    200, 692, 692, 692, 692, 692, 692, 692,
+    692, 692, 692, 692, 692, 692, 692, 692,
+    692, 692, 692, 692, 692, 692, 692, 692,
+    692, 692, 692, 692, 692, 692, 692, 692,
+
+    692, 692, 692, 692, 692, 692, 692, 692,
+    692, 692, 692, 692, 692, 692, 692, 692,
+    692, 693, 692, 694, 693, 693, 693, 693,
+    695, 695, 696, 200, 200, 200, 200, 12,
+
+    692, 692, 692, 692, 692, 692, 697, 693,
+    698, 698, 698, 698, 693, 693, 693, 699,
+    700, 701, 702, 703, 704, 705, 706, 707,
+    708, 709, 710, 710, 200, 200, 200, 200,
+
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    200, 711, 711, 200, 711, 200, 200, 711,
+    711, 200, 711, 200, 200, 711, 200, 200,
+    200, 200, 200, 200, 711, 711, 711, 711,
+    200, 711, 711, 711, 711, 711, 711, 711,
+
+    200, 711, 711, 711, 200, 711, 200, 711,
+    200, 200, 711, 711, 200, 711, 711, 711,
+    711, 712, 711, 713, 712, 712, 712, 712,
+    714, 714, 200, 712, 712, 711, 200, 200,
+
+    711, 711, 711, 711, 711, 200, 715, 200,
+    716, 716, 716, 716, 712, 712, 200, 200,
+    717, 718, 719, 720, 721, 722, 723, 724,
+    725, 726, 200, 200, 727, 727, 728, 728,
+
+    729, 730, 730, 730, 731, 732, 731, 731,
+    733, 731, 731, 734, 735, 736, 736, 736,
+    736, 736, 733, 737, 736, 737, 737, 737,
+    738, 738, 737, 737, 737, 737, 737, 737,
+
+    739, 740, 741, 742, 743, 744, 745, 746,
+    747, 748, 749, 749, 749, 749, 749, 749,
+    749, 749, 749, 749, 750, 738, 737, 738,
+    737, 751, 752, 753, 752, 753, 754, 754,
+
+    729, 729, 729, 755, 729, 729, 729, 729,
+    200, 729, 729, 729, 729, 755, 729, 729,
+    729, 729, 755, 729, 729, 729, 729, 755,
+    729, 729, 729, 729, 755, 729, 729, 729,
+
+    729, 729, 729, 729, 729, 729, 729, 729,
+    729, 755, 756, 757, 757, 200, 200, 200,
+    200, 758, 759, 760, 761, 760, 760, 762,
+    760, 762, 759, 759, 759, 759, 763, 764,
+
+    759, 760, 765, 765, 766, 734, 765, 765,
+    729, 729, 729, 729, 767, 768, 768, 768,
+    763, 763, 763, 760, 763, 763, 769, 763,
+    200, 763, 763, 763, 763, 760, 763, 763,
+
+    763, 763, 760, 763, 763, 763, 763, 760,
+    763, 763, 763, 763, 760, 763, 769, 769,
+    769, 763, 763, 763, 763, 763, 763, 763,
+    769, 760, 769, 769, 769, 200, 770, 770,
+
+    771, 771, 771, 771, 771, 771, 772, 771,
+    771, 771, 771, 771, 771, 200, 773, 771,
+    774, 774, 775, 776, 777, 778, 778, 778,
+    778, 779, 779, 200, 200, 200, 200, 200,
+
+    780, 780, 780, 780, 780, 780, 780, 780,
+    780, 780, 780, 780, 780, 780, 780, 780,
+    780, 780, 780, 780, 780, 780, 780, 780,
+    780, 780, 780, 780, 780, 780, 780, 780,
+
+    780, 780, 781, 780, 780, 780, 782, 780,
+    781, 780, 780, 783, 784, 785, 786, 785,
+    785, 787, 785, 788, 788, 788, 785, 789,
+    784, 790, 791, 792, 792, 788, 788, 781,
+
+    793, 794, 795, 796, 797, 798, 799, 800,
+    801, 802, 803, 803, 804, 804, 804, 804,
+    780, 780, 780, 780, 780, 780, 787, 787,
+    785, 785, 781, 781, 781, 781, 788, 788,
+
+    788, 781, 783, 783, 783, 781, 781, 783,
+    783, 783, 783, 783, 783, 783, 781, 781,
+    781, 788, 788, 788, 788, 781, 781, 781,
+    781, 781, 781, 781, 781, 781, 781, 781,
+
+    781, 781, 788, 783, 792, 788, 788, 783,
+    783, 783, 783, 783, 783, 805, 781, 783,
+    806, 807, 808, 809, 810, 811, 812, 813,
+    814, 815, 816, 816, 816, 817, 818, 818,
+
+    819, 819, 819, 819, 819, 819, 819, 819,
+    819, 819, 819, 819, 819, 819, 819, 819,
+    819, 819, 819, 819, 819, 819, 819, 819,
+    819, 819, 819, 819, 819, 819, 819, 819,
+
+    819, 819, 819, 819, 819, 819, 200, 820,
+    200, 200, 200, 200, 200, 820, 200, 200,
+    821, 821, 821, 821, 821, 821, 821, 821,
+    821, 821, 821, 821, 821, 821, 821, 821,
+
+    821, 821, 821, 821, 821, 821, 821, 821,
+    821, 821, 821, 821, 821, 821, 821, 821,
+    821, 821, 821, 821, 821, 821, 821, 822,
+    822, 823, 823, 824, 825, 826, 826, 826,
+
+    827, 827, 827, 827, 827, 827, 827, 827,
+    827, 827, 827, 827, 827, 827, 827, 827,
+    827, 827, 827, 827, 827, 827, 827, 827,
+    827, 827, 827, 827, 827, 827, 827, 827,
+
+    827, 827, 827, 827, 827, 827, 827, 827,
+    827, 827, 827, 827, 827, 827, 827, 827,
+    827, 827, 827, 827, 827, 827, 827, 827,
+    827, 827, 828, 828, 828, 828, 828, 827,
+
+    829, 830, 830, 830, 830, 830, 830, 830,
+    830, 830, 830, 830, 830, 830, 830, 830,
+    830, 830, 830, 830, 830, 830, 829, 829,
+    829, 829, 829, 829, 829, 829, 829, 829,
+
+    829, 829, 829, 829, 829, 829, 829, 829,
+    829, 829, 829, 829, 829, 829, 829, 829,
+    829, 829, 829, 829, 829, 829, 829, 829,
+    829, 829, 829, 829, 829, 829, 829, 829,
+
+    829, 829, 829, 831, 831, 831, 831, 831,
+    832, 832, 832, 832, 832, 832, 832, 832,
+    832, 832, 832, 832, 832, 832, 832, 832,
+    832, 832, 832, 832, 832, 832, 832, 832,
+
+    832, 832, 832, 833, 833, 833, 833, 833,
+    833, 833, 833, 833, 833, 833, 833, 833,
+    833, 833, 833, 833, 833, 833, 833, 833,
+    833, 833, 833, 833, 833, 833, 833, 833,
+
+    833, 833, 833, 833, 833, 833, 833, 833,
+    833, 833, 833, 833, 833, 833, 833, 833,
+    833, 833, 833, 833, 833, 833, 833, 833,
+    833, 833, 834, 834, 834, 834, 834, 834,
+
+    835, 835, 835, 835, 835, 835, 835, 836,
+    835, 835, 835, 835, 835, 835, 835, 835,
+    835, 835, 835, 835, 835, 835, 835, 835,
+    835, 835, 835, 835, 835, 835, 835, 835,
+
+    835, 835, 835, 835, 835, 835, 835, 835,
+    835, 835, 835, 835, 835, 835, 835, 835,
+    835, 835, 835, 835, 835, 835, 835, 835,
+    835, 835, 835, 835, 835, 835, 835, 835,
+
+    835, 835, 835, 835, 835, 835, 835, 836,
+    835, 200, 835, 835, 835, 835, 200, 200,
+    835, 835, 835, 835, 835, 835, 835, 200,
+    835, 200, 835, 835, 835, 835, 200, 200,
+
+    835, 835, 835, 835, 835, 835, 835, 836,
+    835, 200, 835, 835, 835, 835, 200, 200,
+    835, 835, 835, 835, 835, 835, 835, 835,
+    835, 835, 835, 835, 835, 835, 835, 835,
+
+    835, 835, 835, 835, 835, 835, 835, 835,
+    835, 835, 835, 835, 835, 835, 835, 836,
+    835, 200, 835, 835, 835, 835, 200, 200,
+    835, 835, 835, 835, 835, 835, 835, 200,
+
+    835, 200, 835, 835, 835, 835, 200, 200,
+    835, 835, 835, 835, 835, 835, 835, 836,
+    835, 835, 835, 835, 835, 835, 835, 200,
+    835, 835, 835, 835, 835, 835, 835, 835,
+
+    835, 835, 835, 835, 835, 835, 835, 835,
+    835, 835, 835, 835, 835, 835, 835, 836,
+    835, 835, 835, 835, 835, 835, 835, 835,
+    835, 835, 835, 835, 835, 835, 835, 835,
+
+    835, 835, 835, 835, 835, 835, 835, 835,
+    835, 835, 835, 835, 835, 835, 835, 836,
+    835, 200, 835, 835, 835, 835, 200, 200,
+    835, 835, 835, 835, 835, 835, 835, 836,
+
+    835, 835, 835, 835, 835, 835, 835, 836,
+    835, 835, 835, 835, 835, 835, 835, 835,
+    835, 835, 835, 835, 835, 835, 835, 835,
+    835, 835, 835, 200, 200, 837, 837, 838,
+
+    839, 840, 841, 842, 842, 842, 842, 841,
+    841, 843, 844, 845, 846, 847, 848, 849,
+    850, 851, 852, 852, 852, 852, 852, 852,
+    852, 852, 852, 852, 852, 200, 200, 200,
+
+    836, 836, 836, 836, 836, 836, 836, 836,
+    836, 836, 836, 836, 836, 836, 836, 836,
+    853, 853, 853, 853, 853, 853, 853, 853,
+    853, 853, 200, 200, 200, 200, 200, 200,
+
+    854, 855, 856, 857, 858, 859, 860, 861,
+    862, 863, 864, 865, 866, 867, 868, 869,
+    870, 871, 872, 873, 874, 875, 876, 877,
+    878, 879, 880, 881, 882, 883, 884, 885,
+
+    886, 887, 888, 889, 890, 891, 892, 893,
+    894, 895, 896, 897, 898, 899, 900, 901,
+    902, 903, 904, 905, 906, 907, 908, 909,
+    910, 911, 912, 913, 914, 915, 916, 917,
+
+    918, 919, 920, 921, 922, 923, 924, 925,
+    926, 927, 928, 929, 930, 931, 932, 933,
+    934, 934, 934, 934, 934, 935, 200, 200,
+    936, 936, 936, 936, 936, 936, 200, 200,
+
+    937, 938, 938, 938, 938, 938, 938, 938,
+    938, 938, 938, 938, 938, 938, 938, 938,
+    938, 938, 938, 938, 938, 938, 938, 938,
+    938, 938, 938, 938, 938, 938, 938, 938,
+
+    938, 938, 938, 938, 938, 938, 938, 938,
+    938, 938, 938, 938, 938, 938, 938, 938,
+    938, 938, 938, 938, 938, 938, 938, 938,
+    938, 938, 938, 938, 938, 938, 938, 938,
+
+    938, 938, 938, 938, 938, 938, 938, 938,
+    938, 938, 938, 938, 938, 939, 940, 938,
+    938, 938, 938, 938, 938, 938, 938, 941,
+    941, 941, 941, 941, 941, 941, 941, 941,
+
+    942, 943, 943, 943, 943, 943, 943, 943,
+    943, 943, 943, 943, 943, 943, 943, 943,
+    943, 943, 943, 943, 943, 943, 943, 943,
+    943, 943, 943, 944, 945, 200, 200, 200,
+
+    946, 946, 946, 946, 946, 946, 946, 946,
+    946, 946, 946, 946, 946, 946, 946, 946,
+    946, 946, 946, 946, 946, 946, 946, 946,
+    946, 946, 946, 946, 946, 946, 946, 946,
+
+    946, 946, 946, 946, 946, 946, 946, 946,
+    946, 946, 946, 947, 947, 947, 948, 948,
+    948, 949, 949, 949, 949, 949, 949, 949,
+    949, 200, 200, 200, 200, 200, 200, 200,
+
+    950, 950, 950, 950, 950, 950, 950, 950,
+    950, 950, 950, 950, 950, 200, 950, 950,
+    950, 950, 951, 951, 952, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    953, 953, 953, 953, 953, 953, 953, 953,
+    953, 953, 953, 953, 953, 953, 953, 953,
+    953, 953, 954, 954, 955, 956, 956, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    957, 957, 957, 957, 957, 957, 957, 957,
+    957, 957, 957, 957, 957, 957, 957, 957,
+    957, 957, 958, 958, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    959, 959, 959, 959, 959, 959, 959, 959,
+    959, 959, 959, 959, 959, 200, 959, 959,
+    959, 200, 960, 960, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    961, 961, 961, 961, 961, 961, 961, 961,
+    961, 961, 961, 961, 961, 961, 961, 961,
+    961, 961, 961, 961, 961, 961, 961, 961,
+    961, 961, 961, 961, 961, 961, 961, 961,
+
+    961, 961, 961, 961, 961, 961, 961, 961,
+    961, 961, 961, 961, 961, 961, 961, 961,
+    961, 961, 961, 961, 962, 962, 963, 962,
+    962, 962, 962, 962, 962, 962, 963, 963,
+
+    963, 963, 963, 963, 963, 963, 962, 963,
+    963, 962, 962, 962, 962, 962, 962, 962,
+    962, 962, 964, 962, 965, 965, 966, 967,
+    965, 968, 965, 969, 961, 970, 200, 200,
+
+    971, 972, 973, 974, 975, 976, 977, 978,
+    979, 980, 200, 200, 200, 200, 200, 200,
+    981, 981, 981, 981, 981, 981, 981, 981,
+    981, 981, 200, 200, 200, 200, 200, 200,
+
+    982, 982, 983, 984, 985, 986, 987, 988,
+    989, 990, 991, 992, 992, 992, 993, 200,
+    994, 995, 996, 997, 998, 999, 1000, 1001,
+    1002, 1003, 200, 200, 200, 200, 200, 200,
+
+    1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
+    1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
+    1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
+    1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
+
+    1004, 1004, 1004, 1005, 1004, 1004, 1004, 1004,
+    1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
+    1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
+    1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
+
+    1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
+    1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
+    1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    1006, 1006, 1006, 1006, 1006, 1006, 1006, 1004,
+    1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
+    1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
+    1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
+
+    1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
+    1004, 1007, 1008, 200, 200, 200, 200, 200,
+    941, 941, 941, 941, 941, 941, 941, 941,
+    941, 941, 941, 941, 941, 941, 941, 941,
+
+    941, 941, 941, 941, 941, 941, 941, 941,
+    941, 941, 941, 941, 941, 941, 941, 941,
+    941, 941, 941, 941, 941, 941, 941, 941,
+    941, 941, 941, 941, 941, 941, 941, 941,
+
+    941, 941, 941, 941, 941, 941, 941, 941,
+    941, 941, 941, 941, 941, 941, 941, 941,
+    941, 941, 941, 941, 941, 941, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
+    1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
+    1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
+    1009, 1009, 1009, 1009, 1009, 1010, 1010, 200,
+
+    1011, 1011, 1011, 1012, 1012, 1012, 1012, 1011,
+    1011, 1012, 1012, 1012, 200, 200, 200, 200,
+    1012, 1012, 1011, 1012, 1012, 1012, 1012, 1012,
+    1012, 1013, 1014, 1015, 200, 200, 200, 200,
+
+    1016, 200, 200, 200, 1017, 1017, 1018, 1019,
+    1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
+    1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
+    1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
+
+    1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
+    1028, 1028, 1028, 1028, 1028, 1028, 200, 200,
+    1028, 1028, 1028, 1028, 1028, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
+    1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
+    1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
+    1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
+
+    1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
+    1029, 1029, 1030, 1030, 200, 200, 200, 200,
+    1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
+    1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
+
+    1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
+    1029, 1029, 200, 200, 200, 200, 200, 200,
+    1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
+    1039, 1040, 1041, 200, 200, 200, 1042, 1042,
+
+    1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
+    1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
+    1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
+    1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
+
+    1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
+    1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
+    1044, 1044, 1044, 1044, 1044, 1044, 1044, 1045,
+    1046, 1047, 1047, 1048, 200, 200, 1049, 1049,
+
+    1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
+    1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
+    1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
+    1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
+
+    1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
+    1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
+    1050, 1050, 1050, 1050, 1050, 1051, 1052, 1051,
+    1052, 1052, 1052, 1052, 1052, 1052, 1052, 200,
+
+    1053, 1054, 1052, 1054, 1054, 1052, 1052, 1052,
+    1052, 1052, 1052, 1052, 1052, 1051, 1051, 1051,
+    1051, 1051, 1051, 1052, 1052, 1055, 1055, 1055,
+    1055, 1055, 1055, 1055, 1055, 200, 200, 1056,
+
+    1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
+    1065, 1066, 200, 200, 200, 200, 200, 200,
+    1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
+    1065, 1066, 200, 200, 200, 200, 200, 200,
+
+    1067, 1067, 1067, 1067, 1067, 1067, 1067, 1068,
+    1069, 1069, 1069, 1069, 1067, 1067, 200, 200,
+    1070, 1070, 1070, 1070, 1070, 1071, 1071, 1071,
+    1071, 1071, 1071, 1070, 1070, 1071, 1072, 200,
+
+    1073, 1073, 1073, 1073, 1074, 1075, 1076, 1075,
+    1076, 1075, 1076, 1075, 1076, 1075, 1076, 1075,
+    1075, 1075, 1076, 1075, 1075, 1075, 1075, 1075,
+    1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
+
+    1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
+    1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
+    1075, 1075, 1075, 1075, 1077, 1078, 1073, 1073,
+    1073, 1073, 1073, 1079, 1073, 1079, 1074, 1074,
+
+    1079, 1079, 1073, 1079, 1080, 1075, 1075, 1075,
+    1075, 1075, 1075, 1075, 200, 200, 200, 200,
+    1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
+    1089, 1090, 1091, 1091, 1092, 1093, 1091, 1091,
+
+    1093, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
+    1094, 1094, 1094, 1095, 1096, 1095, 1095, 1095,
+    1095, 1095, 1095, 1095, 1094, 1094, 1094, 1094,
+    1094, 1094, 1094, 1094, 1094, 200, 200, 200,
+
+    1097, 1097, 1098, 1099, 1099, 1099, 1099, 1099,
+    1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
+    1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
+    1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
+
+    1099, 1098, 1097, 1097, 1097, 1097, 1098, 1098,
+    1097, 1097, 1100, 1101, 1102, 1102, 1099, 1099,
+    1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
+    1111, 1112, 1113, 1113, 1113, 1113, 1113, 1113,
+
+    1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
+    1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
+    1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
+    1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
+
+    1114, 1114, 1114, 1114, 1114, 1114, 1115, 1116,
+    1117, 1117, 1116, 1116, 1116, 1117, 1116, 1117,
+    1117, 1117, 1118, 1118, 200, 200, 200, 200,
+    200, 200, 200, 200, 1119, 1119, 1119, 1119,
+
+    1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
+    1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
+    1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
+    1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
+
+    1120, 1120, 1120, 1120, 1121, 1121, 1121, 1121,
+    1121, 1121, 1121, 1121, 1122, 1122, 1122, 1122,
+    1122, 1122, 1122, 1122, 1121, 1121, 1122, 1123,
+    200, 200, 200, 1124, 1124, 1125, 1125, 1125,
+
+    1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133,
+    1134, 1135, 200, 200, 200, 1120, 1120, 1120,
+    1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143,
+    1144, 1145, 1146, 1146, 1146, 1146, 1146, 1146,
+
+    1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
+    1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
+    1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
+    1147, 1147, 1147, 1147, 1147, 1147, 1148, 1148,
+
+    1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    1150, 1150, 1150, 1151, 1152, 1153, 1153, 1153,
+    1153, 1153, 1150, 1150, 1153, 1153, 1153, 1153,
+
+    1150, 1154, 1152, 1152, 1152, 1152, 1152, 1152,
+    1152, 1155, 1155, 1155, 1155, 1153, 1155, 1155,
+    1155, 1155, 1154, 1156, 1157, 1158, 1158, 200,
+    1070, 1070, 200, 200, 200, 200, 200, 200,
+
+    114, 114, 114, 114, 114, 114, 114, 114,
+    114, 114, 114, 114, 114, 114, 114, 114,
+    114, 114, 114, 114, 114, 114, 114, 114,
+    114, 114, 114, 114, 114, 114, 114, 114,
+
+    114, 114, 114, 114, 114, 114, 1159, 1159,
+    1159, 1159, 1159, 1160, 1161, 1161, 1161, 1162,
+    1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
+    1161, 1161, 1161, 1162, 1161, 1161, 1161, 1161,
+
+    1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
+    1161, 1161, 1161, 1161, 1161, 1161, 1162, 1161,
+    1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
+    1161, 1161, 1161, 1161, 1161, 1163, 1163, 1163,
+
+    1163, 1163, 1161, 1161, 1161, 1161, 1163, 1163,
+    1163, 1163, 1163, 114, 115, 115, 115, 115,
+    115, 115, 115, 115, 115, 115, 115, 115,
+    1164, 1165, 115, 115, 115, 1166, 115, 115,
+
+    115, 115, 115, 115, 115, 115, 115, 115,
+    115, 115, 115, 115, 115, 115, 115, 115,
+    115, 115, 115, 115, 115, 115, 115, 115,
+    115, 115, 115, 1167, 1167, 1167, 1167, 1167,
+
+    1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
+    1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
+    1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
+    1167, 1167, 1167, 1167, 1167, 1167, 1167, 1168,
+
+    189, 189, 188, 189, 1169, 1169, 1169, 1169,
+    1169, 1169, 1170, 1171, 1171, 1172, 1173, 1174,
+    1175, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
+    1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
+
+    1171, 1171, 1171, 1171, 1171, 1171, 1171, 1070,
+    1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070,
+    1070, 1070, 1070, 1070, 1070, 1070, 200, 200,
+    200, 200, 200, 200, 1176, 1153, 1169, 1170,
+
+    70, 71, 70, 71, 70, 71, 70, 71,
+    70, 71, 70, 71, 70, 71, 70, 71,
+    70, 71, 70, 71, 70, 71, 70, 71,
+    70, 71, 70, 71, 70, 71, 70, 71,
+
+    70, 71, 70, 71, 70, 71, 70, 71,
+    70, 71, 70, 71, 70, 71, 70, 71,
+    70, 71, 70, 71, 70, 71, 1177, 1178,
+    1179, 1180, 1181, 1182, 1183, 1183, 1184, 1183,
+
+    70, 71, 70, 71, 70, 71, 70, 71,
+    70, 71, 70, 71, 70, 71, 70, 71,
+    70, 71, 70, 71, 70, 71, 70, 71,
+    70, 71, 1185, 1186, 1185, 1186, 1185, 1186,
+
+    1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
+    1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
+    1187, 1187, 1187, 1187, 1187, 1187, 200, 200,
+    1188, 1188, 1188, 1188, 1188, 1188, 200, 200,
+
+    1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
+    1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
+    1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
+    1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
+
+    1187, 1187, 1187, 1187, 1187, 1187, 200, 200,
+    1188, 1188, 1188, 1188, 1188, 1188, 200, 200,
+    1189, 1187, 1190, 1187, 1191, 1187, 1192, 1187,
+    200, 1188, 200, 1188, 200, 1188, 200, 1188,
+
+    1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
+    1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
+    1193, 1194, 1195, 1196, 1195, 1196, 1197, 1198,
+    1199, 1200, 1201, 1202, 1203, 1204, 200, 200,
+
+    1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
+    1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
+    1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228,
+    1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236,
+
+    1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244,
+    1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
+    1187, 1187, 1253, 1254, 1255, 200, 1256, 1257,
+    1188, 1188, 1258, 1259, 1260, 205, 1261, 205,
+
+    205, 1262, 1263, 1264, 1265, 200, 1266, 1267,
+    1268, 1269, 1268, 1269, 1270, 1262, 1262, 1262,
+    1187, 1187, 1271, 1272, 200, 200, 1273, 1274,
+    1188, 1188, 1275, 1276, 200, 1262, 1262, 1262,
+
+    1187, 1187, 1277, 1278, 1279, 1280, 1281, 1282,
+    1188, 1188, 1283, 1284, 1285, 1262, 1286, 1286,
+    200, 200, 1287, 1288, 1289, 200, 1290, 1291,
+    1292, 1293, 1294, 1295, 1296, 1297, 205, 200,
+
+    1298, 1298, 1299, 1299, 1299, 1299, 1299, 1300,
+    1299, 1299, 1299, 1301, 1302, 1303, 1304, 1305,
+    1306, 1307, 1306, 1308, 1309, 1310, 14, 1311,
+    1312, 1313, 1314, 1315, 1315, 1316, 1314, 1315,
+
+    14, 14, 14, 14, 1317, 1318, 1318, 1319,
+    1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327,
+    13, 13, 13, 1328, 1328, 1329, 1330, 1330,
+    14, 1331, 1332, 14, 1333, 1334, 1311, 43,
+
+    43, 14, 14, 14, 1335, 16, 1336, 1337,
+    1338, 1338, 1339, 1339, 1339, 1339, 1340, 1340,
+    1340, 1340, 1341, 1342, 1343, 1344, 1345, 1346,
+    1345, 1345, 1345, 1345, 1344, 1345, 1345, 1347,
+
+    1348, 1349, 1349, 1349, 1350, 1351, 1352, 1353,
+    1354, 1355, 1356, 1356, 1356, 1356, 1356, 1356,
+    1357, 1358, 200, 200, 1359, 1360, 1361, 1362,
+    1363, 1364, 1365, 1365, 1366, 1367, 1368, 158,
+
+    1357, 63, 58, 59, 1359, 1360, 1361, 1362,
+    1363, 1364, 1365, 1365, 1366, 1367, 1368, 200,
+    1167, 1167, 1167, 1167, 1167, 1369, 1369, 1369,
+    1369, 1369, 1369, 1369, 1369, 200, 200, 200,
+
+    12, 12, 12, 12, 12, 12, 12, 50,
+    1370, 12, 12, 1371, 1372, 1373, 1373, 1373,
+    1374, 1374, 1375, 1375, 1375, 1375, 1376, 1377,
+    1377, 1378, 1379, 1380, 1381, 1381, 1382, 1383,
+
+    1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
+    1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
+    171, 171, 178, 178, 171, 171, 171, 171,
+    178, 178, 178, 171, 171, 1384, 1384, 1384,
+
+    1384, 171, 1385, 1385, 1386, 1387, 1387, 195,
+    1388, 195, 1387, 1389, 1170, 1170, 1170, 1170,
+    1171, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    1390, 1390, 1391, 1392, 51, 1390, 1390, 1391,
+    51, 1392, 1393, 1391, 1391, 1391, 1393, 1393,
+    1391, 1391, 1391, 1393, 51, 1391, 1394, 51,
+    36, 1391, 1391, 1391, 1391, 1391, 51, 51,
+
+    1390, 1390, 1390, 51, 1391, 51, 1395, 51,
+    1391, 51, 1396, 1397, 1391, 1391, 1398, 1393,
+    1391, 1391, 1399, 1391, 1393, 1400, 1400, 1400,
+    1400, 1401, 1402, 1403, 1404, 1405, 1406, 1406,
+
+    1407, 1341, 1341, 1341, 1341, 1406, 1405, 1405,
+    1405, 1405, 1408, 1341, 1409, 1410, 1411, 1412,
+    1413, 1413, 1413, 65, 65, 65, 65, 65,
+    65, 65, 65, 65, 65, 65, 65, 65,
+
+    1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414,
+    1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414,
+    1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
+    1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
+
+    1416, 1416, 1416, 111, 123, 1417, 1417, 1417,
+    1417, 1413, 1418, 1418, 200, 200, 200, 200,
+    36, 36, 36, 36, 36, 51, 51, 51,
+    51, 51, 1419, 1419, 51, 51, 51, 51,
+
+    36, 51, 51, 36, 51, 51, 36, 51,
+    51, 51, 51, 51, 51, 51, 1419, 51,
+    51, 51, 51, 51, 51, 51, 51, 51,
+    51, 51, 51, 51, 51, 51, 51, 51,
+
+    51, 51, 51, 51, 51, 51, 51, 51,
+    51, 51, 51, 51, 51, 1420, 1419, 1419,
+    51, 51, 36, 51, 36, 51, 51, 51,
+    51, 51, 51, 51, 51, 51, 51, 51,
+
+    51, 51, 51, 51, 51, 51, 51, 51,
+    51, 51, 51, 1402, 1402, 1402, 1402, 1402,
+    1402, 1402, 1402, 1402, 1341, 1341, 1341, 1341,
+    1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
+
+    36, 36, 36, 36, 1419, 36, 36, 36,
+    1421, 1422, 1421, 1423, 1424, 1423, 36, 36,
+    36, 36, 18, 57, 36, 1425, 36, 36,
+    36, 36, 36, 36, 36, 36, 36, 36,
+
+    36, 36, 36, 36, 1419, 36, 1419, 36,
+    36, 36, 36, 36, 1366, 1366, 36, 1366,
+    1366, 36, 36, 36, 36, 36, 36, 36,
+    36, 36, 36, 36, 1426, 1427, 36, 36,
+
+    36, 1419, 36, 1428, 1419, 36, 36, 1419,
+    36, 1419, 36, 36, 36, 36, 36, 36,
+    36, 36, 1426, 1427, 1426, 1427, 36, 36,
+    36, 36, 36, 36, 36, 36, 36, 36,
+
+    1419, 36, 1419, 36, 1426, 1427, 1426, 1427,
+    1426, 1427, 1426, 1427, 36, 1419, 1429, 1430,
+    1429, 1430, 1426, 1427, 1429, 1430, 1426, 1427,
+    1429, 1430, 1426, 1427, 1426, 1427, 1426, 1427,
+
+    1429, 1430, 1426, 1427, 1429, 1430, 1426, 1427,
+    1429, 1430, 1426, 1427, 36, 36, 36, 1426,
+    1427, 1426, 1427, 36, 36, 36, 36, 36,
+    1431, 36, 36, 36, 36, 36, 36, 36,
+
+    36, 36, 1426, 1427, 36, 36, 1432, 36,
+    1433, 1434, 36, 1434, 1419, 1419, 1419, 1419,
+    1426, 1427, 1426, 1427, 1426, 1427, 1426, 1427,
+    36, 36, 36, 36, 36, 36, 36, 36,
+
+    36, 36, 36, 36, 36, 36, 36, 36,
+    36, 1426, 1427, 1426, 1427, 1435, 36, 36,
+    1426, 1427, 36, 36, 36, 36, 1426, 1427,
+    1426, 1427, 1426, 1427, 1426, 1427, 1426, 1427,
+
+    1429, 1430, 1429, 1430, 1426, 1427, 1426, 1427,
+    1426, 1427, 1429, 1430, 1429, 1430, 36, 1436,
+    1426, 1427, 1437, 1437, 1437, 1341, 1438, 1438,
+    1341, 1341, 1439, 1439, 1439, 1440, 1440, 1341,
+
+    51, 1402, 51, 51, 51, 51, 51, 51,
+    16, 1336, 16, 1336, 51, 51, 51, 51,
+    51, 51, 51, 51, 51, 51, 51, 51,
+    51, 51, 1441, 1441, 51, 51, 51, 51,
+
+    36, 36, 51, 51, 51, 51, 51, 51,
+    51, 1442, 1443, 51, 51, 51, 51, 51,
+    51, 51, 51, 51, 51, 51, 1444, 1444,
+    1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
+
+    1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
+    1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
+    1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
+    1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
+
+    1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
+    1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
+    1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
+    1444, 1444, 1444, 1402, 1341, 1402, 1402, 1402,
+
+    1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
+    1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
+    1402, 1402, 1402, 1402, 1402, 1445, 1402, 1402,
+    1402, 1402, 1402, 1341, 1341, 1341, 1341, 1341,
+
+    1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
+    1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
+    1341, 1341, 1341, 1341, 1408, 1408, 1408, 1408,
+    1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408,
+
+    1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408,
+    1408, 1408, 1408, 1408, 1408, 1408, 1408, 1446,
+    1446, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
+    1409, 1409, 1409, 1409, 1447, 1447, 1447, 1447,
+
+    1447, 1447, 1410, 1410, 1410, 1410, 1410, 1410,
+    1448, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
+    1450, 1450, 1450, 1450, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 200, 200, 200, 200, 200,
+
+    51, 51, 51, 51, 51, 51, 51, 51,
+    51, 51, 51, 51, 51, 51, 51, 51,
+    51, 51, 51, 51, 51, 51, 51, 51,
+    51, 51, 51, 51, 51, 51, 51, 51,
+
+    51, 51, 51, 51, 51, 1402, 1402, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    51, 51, 51, 51, 51, 51, 51, 51,
+    51, 51, 51, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
+    1460, 65, 65, 65, 65, 65, 65, 65,
+    65, 65, 65, 65, 1452, 1453, 1454, 1455,
+    1456, 1457, 1458, 1459, 1460, 65, 65, 65,
+
+    65, 65, 65, 65, 65, 65, 65, 65,
+    63, 58, 59, 1359, 1360, 1361, 1362, 1363,
+    1364, 1461, 1461, 1461, 1461, 1461, 1461, 1461,
+    1461, 1461, 1461, 1461, 1462, 1462, 1462, 1462,
+
+    1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
+    1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
+    1462, 1462, 1462, 1462, 1462, 1462, 1463, 1463,
+    1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
+
+    1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
+    1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
+    1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464,
+    1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464,
+
+    1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464,
+    1464, 1464, 1465, 1466, 1466, 1466, 1466, 1466,
+    1466, 1466, 1466, 1466, 1466, 1467, 1468, 1469,
+    1470, 1471, 1472, 1473, 1474, 1475, 1466, 1476,
+
+    51, 51, 51, 51, 51, 51, 51, 51,
+    51, 51, 51, 51, 51, 51, 51, 51,
+    51, 51, 51, 51, 51, 51, 1408, 1408,
+    1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408,
+
+    51, 51, 51, 51, 51, 51, 51, 51,
+    51, 51, 51, 51, 51, 51, 51, 51,
+    51, 51, 51, 51, 51, 51, 51, 36,
+    51, 51, 51, 51, 51, 51, 51, 51,
+
+    51, 36, 51, 51, 51, 51, 51, 51,
+    51, 51, 51, 51, 51, 51, 51, 51,
+    51, 51, 51, 51, 51, 51, 51, 51,
+    51, 51, 51, 51, 51, 51, 51, 51,
+
+    51, 51, 51, 51, 51, 51, 51, 51,
+    51, 51, 51, 51, 51, 51, 51, 51,
+    1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
+    1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
+
+    1441, 1441, 1441, 1441, 51, 51, 51, 51,
+    51, 51, 51, 51, 51, 51, 51, 51,
+    51, 51, 51, 51, 1477, 1477, 1408, 1408,
+    1478, 1402, 1441, 1441, 1441, 1441, 1441, 1441,
+
+    51, 51, 51, 51, 51, 51, 51, 51,
+    51, 51, 51, 51, 51, 51, 51, 51,
+    51, 51, 51, 51, 51, 51, 51, 51,
+    51, 1441, 1441, 1441, 51, 51, 51, 51,
+
+    51, 51, 51, 51, 51, 51, 51, 51,
+    1441, 51, 51, 51, 51, 51, 51, 36,
+    1402, 1402, 1408, 1408, 1408, 1408, 1408, 1408,
+    1408, 1408, 1408, 1408, 1408, 1408, 1409, 1478,
+
+    1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408,
+    1408, 1408, 1446, 1446, 1446, 1446, 1446, 1446,
+    1446, 1446, 1409, 1409, 1409, 1409, 1409, 1409,
+    1409, 1409, 1409, 1409, 1409, 1479, 1448, 1448,
+
+    1446, 1446, 1409, 1409, 1409, 1409, 1409, 1409,
+    1409, 1409, 1409, 1409, 1480, 1409, 1409, 1409,
+    1409, 1409, 1410, 1479, 1479, 1479, 1479, 1479,
+    1479, 1479, 1479, 1479, 1479, 1481, 1481, 1481,
+
+    1482, 1482, 1482, 1482, 1481, 1481, 1481, 1481,
+    1481, 1448, 1448, 1448, 1448, 1481, 1449, 1481,
+    1481, 1481, 1448, 1481, 1481, 1448, 1448, 1448,
+    1481, 1481, 1448, 1448, 1481, 1448, 1448, 1481,
+
+    1481, 1481, 1449, 1448, 1449, 1449, 1449, 1449,
+    1448, 1448, 1481, 1448, 1448, 1448, 1448, 1448,
+    1448, 1481, 1481, 1481, 1481, 1481, 1448, 1481,
+    1481, 1481, 1481, 1448, 1448, 1481, 1481, 1481,
+
+    1483, 1441, 1441, 1441, 1441, 1449, 51, 51,
+    1441, 1441, 1450, 1450, 1441, 1441, 51, 51,
+    51, 51, 51, 51, 51, 51, 51, 51,
+    51, 51, 51, 51, 51, 51, 51, 51,
+
+    51, 51, 51, 51, 51, 51, 51, 51,
+    1449, 51, 51, 51, 51, 51, 51, 51,
+    51, 51, 51, 51, 51, 51, 51, 51,
+    51, 51, 51, 51, 51, 51, 51, 51,
+
+    51, 51, 51, 51, 51, 51, 51, 51,
+    51, 51, 51, 51, 1449, 51, 1449, 51,
+    51, 51, 51, 1449, 1449, 1449, 51, 1448,
+    51, 51, 51, 1484, 1484, 1484, 1484, 1485,
+
+    1485, 51, 1486, 1486, 51, 51, 51, 51,
+    1487, 1488, 1487, 1488, 1487, 1488, 1487, 1488,
+    1487, 1488, 1487, 1488, 1487, 1488, 1489, 1490,
+    1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498,
+
+    1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496,
+    1497, 1498, 1489, 1490, 1491, 1492, 1493, 1494,
+    1495, 1496, 1497, 1498, 51, 1449, 1449, 1449,
+    51, 51, 51, 51, 51, 51, 51, 51,
+
+    51, 51, 51, 51, 51, 51, 51, 51,
+    51, 51, 51, 51, 51, 51, 51, 51,
+    1449, 51, 51, 51, 51, 51, 51, 51,
+    51, 51, 51, 51, 51, 51, 51, 1449,
+
+    1499, 1499, 1499, 1500, 1501, 1502, 1503, 1447,
+    1504, 1505, 1447, 1506, 1507, 1508, 1509, 1509,
+    1341, 1341, 1341, 1341, 1341, 1510, 1511, 1341,
+    1341, 1341, 1341, 1341, 1341, 1510, 1511, 1341,
+
+    1341, 1341, 1510, 1511, 1510, 1511, 1487, 1488,
+    1487, 1488, 1487, 1488, 1512, 1513, 1512, 1513,
+    1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
+    1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
+
+    1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+    1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+    1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+    1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+
+    1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
+    1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
+    1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
+    1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
+
+    1341, 1341, 1341, 1487, 1488, 1487, 1488, 1487,
+    1488, 1487, 1488, 1487, 1488, 1515, 1516, 1517,
+    1518, 1487, 1488, 1487, 1488, 1487, 1488, 1487,
+    1488, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
+
+    1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
+    1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
+    1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
+    1519, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
+
+    1510, 1511, 1341, 1341, 1510, 1511, 1341, 1341,
+    1341, 1341, 1341, 1341, 1341, 1341, 1341, 1510,
+    1511, 1510, 1511, 1341, 1510, 1511, 1341, 1341,
+    1487, 1488, 1487, 1488, 1341, 1341, 1341, 1341,
+
+    1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
+    1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
+    1341, 1341, 1341, 1341, 1341, 1520, 1341, 1341,
+    1510, 1511, 1341, 1341, 1487, 1488, 1341, 1341,
+
+    1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
+    1341, 1341, 1341, 1341, 1407, 1341, 1341, 1341,
+    1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
+    1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
+
+    1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
+    1341, 1341, 1341, 1510, 1511, 1510, 1511, 1341,
+    1341, 1341, 1341, 1341, 1510, 1511, 1341, 1341,
+    1341, 1341, 1341, 1341, 1510, 1511, 1341, 1341,
+
+    1341, 1341, 1341, 1341, 1510, 1511, 1341, 1341,
+    1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
+    1341, 1341, 1341, 1341, 1407, 1407, 1407, 1341,
+    1341, 1510, 1511, 1341, 1341, 1510, 1511, 1510,
+
+    1511, 1510, 1511, 1510, 1511, 1341, 1341, 1341,
+    1341, 1341, 1341, 1510, 1511, 1341, 1341, 1341,
+    1341, 1510, 1511, 1510, 1511, 1510, 1511, 1510,
+    1511, 1510, 1511, 1510, 1511, 1341, 1341, 1341,
+
+    1341, 1510, 1511, 1341, 1341, 1341, 1510, 1511,
+    1510, 1511, 1510, 1511, 1510, 1511, 1341, 1510,
+    1511, 1341, 1341, 1510, 1511, 1341, 1341, 1341,
+    1341, 1341, 1341, 1510, 1511, 1510, 1511, 1510,
+
+    1511, 1510, 1511, 1510, 1511, 1510, 1511, 1341,
+    1341, 1341, 1341, 1341, 1341, 1510, 1511, 1510,
+    1511, 1510, 1511, 1510, 1511, 1510, 1511, 1341,
+    1341, 1341, 1341, 1341, 1521, 1341, 1522, 1341,
+
+    1341, 1341, 1341, 1523, 1524, 1523, 1341, 1341,
+    1341, 1341, 1341, 1341, 1510, 1511, 1341, 1341,
+    1341, 1341, 1341, 1341, 1341, 1341, 1341, 1510,
+    1511, 1510, 1511, 1341, 1341, 1341, 1341, 1341,
+
+    1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
+    1446, 1446, 1446, 1446, 1446, 1446, 1409, 1409,
+    1409, 1409, 1409, 1409, 1410, 1410, 1410, 1410,
+    1410, 1410, 1410, 1479, 1479, 1479, 1479, 1479,
+
+    1410, 1410, 1410, 1410, 1479, 1479, 1479, 1479,
+    1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479,
+    1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507,
+    1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507,
+
+    1507, 1507, 1507, 1507, 1507, 1479, 1479, 1507,
+    1507, 1507, 1507, 1507, 1507, 1451, 1451, 1451,
+    1479, 1479, 1479, 1479, 1479, 1448, 1448, 1448,
+    1448, 1448, 1451, 1451, 1451, 1451, 1451, 1451,
+
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 200, 200, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 200, 200,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 200, 200, 200, 1451, 1451, 1451,
+
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 200, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 1418, 1418, 1418, 1418,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525,
+    1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525,
+    1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525,
+    1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525,
+
+    1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525,
+    1525, 1525, 1525, 1525, 1525, 1525, 1525, 200,
+    1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
+    1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
+
+    1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
+    1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
+    1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
+    1526, 1526, 1526, 1526, 1526, 1526, 1526, 200,
+
+    127, 123, 1527, 1528, 1529, 1530, 1531, 127,
+    123, 127, 123, 127, 123, 1532, 1533, 1534,
+    1535, 1183, 1185, 1186, 1536, 127, 123, 1536,
+    1183, 1183, 1183, 1183, 1537, 1537, 1538, 1539,
+
+    1540, 1541, 1540, 1541, 1540, 1541, 1540, 1541,
+    1540, 1541, 1540, 1541, 1540, 1541, 1540, 1541,
+    1540, 1541, 1540, 1541, 1540, 1541, 1540, 1541,
+    1540, 1541, 1540, 1541, 1540, 1541, 1540, 1541,
+
+    1540, 1541, 1540, 1541, 1542, 1543, 1543, 1543,
+    1543, 1543, 1543, 1544, 1545, 1544, 1545, 1546,
+    1546, 1546, 1547, 1548, 200, 200, 200, 200,
+    200, 1549, 1550, 1550, 1550, 1551, 1549, 1550,
+
+    1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
+    1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
+    1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
+    1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
+
+    1552, 1552, 1552, 1552, 1552, 1552, 200, 1553,
+    200, 200, 200, 200, 200, 1553, 200, 200,
+    1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
+    1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
+
+    1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
+    1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
+    1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
+    1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
+
+    1554, 1554, 1554, 1554, 1554, 1554, 1555, 1555,
+    200, 200, 200, 200, 200, 200, 200, 1556,
+    1557, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 1558,
+
+    836, 836, 836, 836, 836, 836, 836, 836,
+    836, 836, 836, 836, 836, 836, 836, 836,
+    836, 836, 836, 836, 836, 836, 836, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    836, 836, 836, 836, 836, 836, 836, 200,
+    836, 836, 836, 836, 836, 836, 836, 200,
+    836, 836, 836, 836, 836, 836, 836, 200,
+    836, 836, 836, 836, 836, 836, 836, 200,
+
+    265, 265, 265, 265, 265, 265, 265, 265,
+    265, 265, 265, 265, 265, 265, 265, 265,
+    265, 265, 265, 265, 265, 265, 265, 265,
+    265, 265, 265, 265, 265, 265, 265, 265,
+
+    1559, 1559, 1560, 1561, 1560, 1561, 1559, 1559,
+    1559, 1560, 1561, 1559, 1560, 1561, 1345, 1345,
+    1345, 1345, 1345, 1345, 1345, 1345, 1344, 1562,
+    1563, 1564, 1565, 1566, 1560, 1561, 1566, 1566,
+
+    1567, 1568, 1512, 1513, 1512, 1513, 1512, 1513,
+    1512, 1513, 1564, 1564, 1564, 1564, 1569, 1570,
+    1564, 1571, 1572, 1573, 1573, 1572, 1572, 1572,
+    1572, 1572, 1574, 1574, 1575, 1576, 1576, 1577,
+
+    1578, 1576, 1579, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
+    1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
+    1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
+    1580, 1580, 200, 1580, 1580, 1580, 1580, 1581,
+
+    1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
+    1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
+    1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
+    1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
+
+    1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
+    1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
+    1580, 1580, 1580, 1581, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581,
+    1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581,
+    1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581,
+    1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581,
+
+    1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581,
+    1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581,
+    1581, 1581, 1581, 1581, 1581, 1581, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
+    1582, 1582, 1582, 1582, 200, 200, 200, 200,
+
+    1299, 1583, 1584, 1585, 1441, 1586, 1587, 1588,
+    16, 1336, 16, 1336, 16, 1336, 16, 1336,
+    16, 1336, 1441, 1441, 16, 1336, 16, 1336,
+    16, 1336, 16, 1336, 1589, 1314, 1590, 1590,
+
+    1441, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
+    1588, 1588, 1591, 1592, 172, 1593, 1594, 1594,
+    1595, 1596, 1596, 1596, 1596, 1597, 1598, 1441,
+    1599, 1599, 1599, 1600, 1601, 1602, 1582, 1441,
+
+    200, 1603, 1604, 1603, 1604, 1603, 1604, 1603,
+    1604, 1603, 1604, 1604, 1605, 1604, 1605, 1604,
+    1605, 1604, 1605, 1604, 1605, 1604, 1605, 1604,
+    1605, 1604, 1605, 1604, 1605, 1604, 1605, 1604,
+
+    1605, 1604, 1605, 1603, 1604, 1605, 1604, 1605,
+    1604, 1605, 1604, 1604, 1604, 1604, 1604, 1604,
+    1605, 1605, 1604, 1605, 1605, 1604, 1605, 1605,
+    1604, 1605, 1605, 1604, 1605, 1605, 1604, 1604,
+
+    1604, 1604, 1604, 1603, 1604, 1603, 1604, 1603,
+    1604, 1604, 1604, 1604, 1604, 1604, 1603, 1604,
+    1604, 1604, 1604, 1604, 1605, 1606, 1606, 200,
+    200, 1607, 1607, 1608, 1608, 1609, 1610, 1611,
+
+    1612, 1613, 1614, 1613, 1614, 1613, 1614, 1613,
+    1614, 1613, 1614, 1614, 1615, 1614, 1615, 1614,
+    1615, 1614, 1615, 1614, 1615, 1614, 1615, 1614,
+    1615, 1614, 1615, 1614, 1615, 1614, 1615, 1614,
+
+    1615, 1614, 1615, 1613, 1614, 1615, 1614, 1615,
+    1614, 1615, 1614, 1614, 1614, 1614, 1614, 1614,
+    1615, 1615, 1614, 1615, 1615, 1614, 1615, 1615,
+    1614, 1615, 1615, 1614, 1615, 1615, 1614, 1614,
+
+    1614, 1614, 1614, 1613, 1614, 1613, 1614, 1613,
+    1614, 1614, 1614, 1614, 1614, 1614, 1613, 1614,
+    1614, 1614, 1614, 1614, 1615, 1613, 1613, 1615,
+    1615, 1615, 1615, 1616, 1617, 1618, 1619, 1620,
+
+    200, 200, 200, 200, 200, 1621, 1621, 1621,
+    1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621,
+    1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621,
+    1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621,
+
+    1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621,
+    1621, 1621, 1621, 1621, 1621, 1622, 200, 200,
+    200, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
+    1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
+
+    1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
+    1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
+    1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
+    1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
+
+    1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
+    1623, 1623, 1623, 1623, 1623, 1623, 1623, 200,
+    1624, 1624, 1625, 1625, 1625, 1625, 1626, 1626,
+    1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
+
+    1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627,
+    1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627,
+    1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627,
+    1628, 1628, 1628, 200, 200, 200, 200, 200,
+
+    1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478,
+    1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478,
+    1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
+    1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
+
+    1482, 1482, 1482, 1482, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
+    1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
+
+    1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630,
+    1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630,
+    1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630,
+    1630, 1630, 1630, 1630, 1630, 1631, 1631, 200,
+
+    1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625,
+    1625, 1625, 1626, 1626, 1626, 1626, 1626, 1626,
+    1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
+    1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
+
+    1626, 1626, 1626, 1626, 1632, 1632, 1632, 1632,
+    1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633,
+    1634, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
+    1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
+
+    1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630,
+    1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630,
+    1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630,
+    1630, 1630, 1630, 1630, 1631, 1631, 1636, 1624,
+
+    1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
+    1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
+    1626, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
+    1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
+
+    1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
+    1626, 1626, 1626, 1626, 1634, 1634, 1634, 1634,
+    1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
+    1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
+
+    1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
+    1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
+    1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
+    1637, 1637, 1637, 1637, 1637, 1637, 1637, 200,
+
+    1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
+    1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
+    1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
+    1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
+
+    1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
+    1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
+    1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
+    1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
+
+    1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
+    1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
+    1626, 1626, 1626, 1626, 1626, 1626, 1626, 1634,
+    1634, 1634, 1634, 1626, 1626, 1626, 1626, 1626,
+
+    1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
+    1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
+    1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
+    1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
+
+    1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
+    1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
+    1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
+    1626, 1626, 1626, 1626, 1626, 1626, 1634, 1634,
+
+    1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
+    1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
+    1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
+    1626, 1626, 1626, 1626, 1626, 1626, 1626, 1634,
+
+    1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
+    1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
+    1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
+    1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
+
+    1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
+    1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
+    1638, 1638, 1638, 1638, 1638, 1638, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+
+    1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
+    1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
+    1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
+    1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
+
+    1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
+    1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
+    1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
+    1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
+
+    1640, 1640, 1640, 1640, 1640, 1640, 1641, 1641,
+    1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641,
+    1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641,
+    1641, 1641, 1641, 1641, 1642, 1642, 1642, 1642,
+
+    1642, 1642, 1642, 1642, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1644, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+
+    1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
+    1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
+    1646, 1646, 1646, 1646, 1646, 1647, 1646, 1646,
+    1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
+
+    1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
+    1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
+    1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
+    1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
+
+    1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
+    1646, 1646, 1646, 1646, 1646, 200, 200, 200,
+    1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
+    1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
+
+    1648, 1648, 1649, 1649, 1648, 1648, 1648, 1648,
+    1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
+    1648, 1648, 1648, 1648, 1649, 1648, 1648, 1648,
+    1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
+
+    1648, 1649, 1648, 1648, 1648, 1649, 1648, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
+    1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
+
+    1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
+    1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
+    1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
+    1651, 1651, 1651, 1651, 1651, 1651, 1652, 1653,
+
+    1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
+    1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
+    1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
+    1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
+
+    1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
+    1654, 1654, 1654, 1654, 1655, 1656, 1657, 1658,
+    1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
+    1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
+
+    1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666,
+    1667, 1668, 1654, 1654, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    279, 280, 279, 280, 279, 280, 279, 280,
+    279, 280, 279, 280, 279, 280, 279, 280,
+    279, 280, 279, 280, 279, 280, 279, 280,
+    279, 280, 279, 280, 279, 280, 279, 280,
+
+    283, 284, 279, 280, 279, 280, 279, 280,
+    279, 280, 279, 280, 279, 280, 1669, 265,
+    1670, 1670, 1670, 1671, 1672, 1672, 1672, 1672,
+    1672, 1672, 1672, 1672, 265, 265, 1671, 1673,
+
+    279, 280, 279, 280, 279, 280, 279, 280,
+    279, 280, 279, 280, 279, 280, 279, 280,
+    279, 280, 279, 280, 279, 280, 279, 280,
+    285, 286, 285, 286, 1674, 1674, 1675, 1672,
+
+    1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676,
+    1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676,
+    1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676,
+    1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676,
+
+    1676, 1676, 1676, 1676, 1676, 1676, 1677, 1677,
+    1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677,
+    1678, 1678, 1679, 1680, 1681, 1681, 1681, 1680,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
+    1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
+    1682, 1682, 1682, 1682, 1682, 1682, 1682, 1683,
+    1683, 1683, 1683, 1570, 1570, 1570, 1570, 1570,
+
+    1684, 1684, 1185, 1186, 1185, 1186, 1185, 1186,
+    1185, 1186, 1185, 1186, 1185, 1186, 1185, 1186,
+    1183, 1183, 1185, 1186, 1185, 1186, 1185, 1186,
+    1185, 1186, 1185, 1186, 1185, 1186, 1185, 1186,
+
+    1185, 1186, 1185, 1186, 1185, 1186, 1185, 1186,
+    1185, 1186, 1185, 1186, 1185, 1186, 1185, 1186,
+    1185, 1186, 1185, 1186, 1185, 1186, 1185, 1186,
+    1185, 1186, 1185, 1186, 1185, 1186, 1185, 1186,
+
+    1185, 1186, 1185, 1186, 1185, 1186, 1185, 1186,
+    1185, 1186, 1185, 1186, 1185, 1186, 1185, 1186,
+    1537, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
+    1183, 1185, 1186, 1185, 1186, 1685, 1185, 1186,
+
+    1185, 1186, 1185, 1186, 1185, 1186, 1185, 1186,
+    1570, 1686, 1686, 1185, 1186, 1687, 1688, 1689,
+    1690, 1691, 1692, 1693, 1694, 1694, 1695, 1696,
+    1695, 1696, 1695, 1696, 1695, 1696, 1695, 1696,
+
+    1690, 1691, 1690, 1691, 1690, 1691, 1690, 1691,
+    1690, 1691, 1697, 1698, 1699, 1700, 200, 200,
+    1701, 1702, 1703, 1704, 1705, 1706, 1705, 1706,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 1707,
+    1708, 1708, 1688, 1709, 1709, 1709, 1709, 1709,
+
+    1710, 1710, 1711, 1710, 1710, 1710, 1712, 1710,
+    1710, 1710, 1710, 1711, 1710, 1710, 1710, 1710,
+    1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710,
+    1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710,
+
+    1710, 1710, 1710, 1713, 1713, 1711, 1711, 1713,
+    1714, 1714, 1714, 1714, 200, 200, 200, 200,
+    1633, 1633, 1633, 1633, 1633, 1633, 778, 778,
+    1376, 1715, 200, 200, 200, 200, 200, 200,
+
+    1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
+    1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
+    1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
+    1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
+
+    1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
+    1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
+    1716, 1716, 1717, 1718, 1719, 1719, 1720, 1720,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    1721, 1721, 1722, 1722, 1722, 1722, 1722, 1722,
+    1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722,
+    1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722,
+    1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722,
+
+    1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722,
+    1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722,
+    1722, 1722, 1722, 1722, 1721, 1721, 1721, 1721,
+    1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721,
+
+    1721, 1721, 1721, 1721, 1723, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 1724, 1724,
+    1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732,
+    1733, 1734, 200, 200, 200, 200, 200, 200,
+
+    1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735,
+    1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735,
+    1735, 1735, 493, 493, 493, 493, 493, 493,
+    1736, 1736, 1736, 493, 1737, 1738, 200, 200,
+
+    1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746,
+    1747, 1748, 1749, 1749, 1749, 1749, 1749, 1749,
+    1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
+    1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
+
+    1749, 1749, 1749, 1749, 1749, 1749, 1750, 1750,
+    1750, 1750, 1750, 1751, 1751, 1751, 1752, 1753,
+    1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
+    1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
+
+    1754, 1754, 1754, 1754, 1754, 1754, 1754, 1755,
+    1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755,
+    1755, 1755, 1756, 1757, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 1758,
+
+    828, 828, 828, 828, 828, 828, 828, 828,
+    828, 828, 828, 828, 828, 828, 828, 828,
+    828, 828, 828, 828, 828, 828, 828, 828,
+    828, 828, 828, 828, 828, 200, 200, 200,
+
+    1759, 1759, 1759, 1760, 1761, 1761, 1761, 1761,
+    1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
+    1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
+    1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
+
+    1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
+    1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
+    1761, 1761, 1761, 1762, 1760, 1760, 1759, 1759,
+    1759, 1759, 1760, 1760, 1759, 1760, 1760, 1760,
+
+    1763, 1764, 1764, 1764, 1764, 1764, 1764, 1765,
+    1766, 1766, 1764, 1764, 1764, 1764, 200, 1767,
+    1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775,
+    1776, 1777, 200, 200, 200, 200, 1764, 1764,
+
+    1778, 1778, 1778, 1778, 1778, 1779, 1780, 1778,
+    1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
+    1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788,
+    1789, 1790, 1778, 1778, 1778, 1778, 1778, 200,
+
+    1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791,
+    1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791,
+    1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791,
+    1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791,
+
+    1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791,
+    1791, 1792, 1792, 1792, 1792, 1792, 1792, 1793,
+    1793, 1792, 1792, 1793, 1793, 1792, 1792, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    1791, 1791, 1791, 1792, 1791, 1791, 1791, 1791,
+    1791, 1791, 1791, 1791, 1792, 1793, 200, 200,
+    1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801,
+    1802, 1803, 200, 200, 1804, 1805, 1805, 1805,
+
+    1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806,
+    1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806,
+    1807, 1806, 1806, 1806, 1806, 1806, 1806, 1808,
+    1808, 1808, 1806, 816, 1779, 1809, 1778, 1778,
+
+    1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810,
+    1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810,
+    1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810,
+    1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810,
+
+    1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810,
+    1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810,
+    1811, 1810, 1811, 1811, 1812, 1810, 1810, 1811,
+    1811, 1810, 1810, 1810, 1810, 1810, 1811, 1811,
+
+    1810, 1811, 1810, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 1810, 1810, 1813, 1814, 1814,
+
+    1815, 1815, 1815, 1815, 1815, 1815, 1815, 1815,
+    1815, 1815, 1815, 1816, 1817, 1817, 1816, 1816,
+    1818, 1818, 1815, 1819, 1819, 1816, 1820, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    200, 1821, 1821, 1821, 1821, 1821, 1821, 200,
+    200, 1821, 1821, 1821, 1821, 1821, 1821, 200,
+    200, 1821, 1821, 1821, 1821, 1821, 1821, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    1821, 1821, 1821, 1821, 1821, 1821, 1821, 200,
+    1821, 1821, 1821, 1821, 1821, 1821, 1821, 200,
+    1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694,
+    1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694,
+
+    1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694,
+    1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694,
+    1694, 1694, 1694, 1822, 1694, 1694, 1694, 1694,
+    1694, 1694, 1694, 1823, 1824, 1824, 1824, 1824,
+
+    1825, 1825, 1825, 1825, 1694, 1826, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
+    1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842,
+
+    1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850,
+    1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858,
+    1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866,
+    1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874,
+
+    1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882,
+    1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890,
+    1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898,
+    1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906,
+
+    1907, 1907, 1907, 1907, 1907, 1907, 1907, 1907,
+    1907, 1907, 1907, 1907, 1907, 1907, 1907, 1907,
+    1907, 1907, 1907, 1907, 1907, 1907, 1907, 1907,
+    1907, 1907, 1907, 1907, 1907, 1907, 1907, 1907,
+
+    1907, 1907, 1907, 1908, 1908, 1909, 1908, 1908,
+    1909, 1908, 1908, 1910, 1908, 1911, 200, 200,
+    1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919,
+    1920, 1921, 200, 200, 200, 200, 200, 200,
+
+    1922, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
+    1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
+    1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
+    1923, 1923, 1923, 1923, 1922, 1923, 1923, 1923,
+
+    1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
+    1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
+    1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
+    1922, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
+
+    1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
+    1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
+    1923, 1923, 1923, 1923, 1922, 1923, 1923, 1923,
+    1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
+
+    1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
+    1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
+    1922, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
+    1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
+
+    1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
+    1923, 1923, 1923, 1923, 1922, 1923, 1923, 1923,
+    1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
+    1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
+
+    1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
+    1922, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
+    1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
+    1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
+
+    1923, 1923, 1923, 1923, 1922, 1923, 1923, 1923,
+    1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
+    1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
+    1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923,
+
+    1923, 1923, 1923, 1923, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    831, 831, 831, 831, 831, 831, 831, 831,
+    831, 831, 831, 831, 831, 831, 831, 831,
+
+    831, 831, 831, 831, 831, 831, 831, 200,
+    200, 200, 200, 834, 834, 834, 834, 834,
+    834, 834, 834, 834, 834, 834, 834, 834,
+    834, 834, 834, 834, 834, 834, 834, 834,
+
+    834, 834, 834, 834, 834, 834, 834, 834,
+    834, 834, 834, 834, 834, 834, 834, 834,
+    834, 834, 834, 834, 834, 834, 834, 834,
+    834, 834, 834, 834, 200, 200, 200, 200,
+
+    1924, 1924, 1924, 1924, 1924, 1924, 1924, 1924,
+    1924, 1924, 1924, 1924, 1924, 1924, 1924, 1924,
+    1924, 1924, 1924, 1924, 1924, 1924, 1924, 1924,
+    1924, 1924, 1924, 1924, 1924, 1924, 1924, 1924,
+
+    1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,
+    1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,
+    1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,
+    1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,
+
+    1926, 1926, 1926, 1926, 1926, 1926, 1926, 1926,
+    1926, 1926, 1926, 1926, 1926, 1926, 1926, 1926,
+    1926, 1926, 1926, 1926, 1926, 1926, 1926, 1926,
+    1926, 1926, 1926, 1926, 1926, 1926, 1926, 1926,
+
+    1926, 1926, 1926, 1926, 1926, 1926, 1926, 1926,
+    1926, 1926, 1926, 1926, 1926, 1926, 1640, 1640,
+    1926, 1640, 1926, 1640, 1640, 1926, 1926, 1926,
+    1926, 1926, 1926, 1926, 1926, 1926, 1926, 1640,
+
+    1926, 1640, 1926, 1640, 1640, 1926, 1926, 1640,
+    1640, 1640, 1926, 1926, 1926, 1926, 1927, 1927,
+    1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,
+    1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,
+
+    1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,
+    1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,
+    1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,
+    1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,
+
+    1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928,
+    1928, 1928, 1928, 1929, 1929, 1929, 1639, 1639,
+    1930, 1930, 1930, 1930, 1930, 1930, 1930, 1930,
+    1930, 1930, 1930, 1930, 1930, 1930, 1930, 1930,
+
+    1930, 1930, 1930, 1930, 1930, 1930, 1930, 1930,
+    1930, 1930, 1930, 1930, 1930, 1930, 1930, 1930,
+    1930, 1930, 1930, 1930, 1930, 1930, 1930, 1930,
+    1930, 1930, 1930, 1930, 1930, 1930, 1930, 1930,
+
+    1930, 1930, 1930, 1930, 1930, 1930, 1930, 1930,
+    1930, 1930, 1930, 1930, 1930, 1930, 1930, 1930,
+    1930, 1930, 1930, 1930, 1930, 1930, 1930, 1930,
+    1930, 1930, 1639, 1639, 1639, 1639, 1639, 1639,
+
+    1931, 1932, 1933, 1934, 1935, 1936, 1936, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 1937, 1938, 1939, 1940, 1941,
+    200, 200, 200, 200, 200, 1942, 1943, 1944,
+
+    1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945,
+    1945, 1946, 1944, 1944, 1944, 1944, 1944, 1944,
+    1944, 1944, 1944, 1944, 1944, 1944, 1944, 297,
+    1944, 1944, 1944, 1944, 1944, 297, 1944, 297,
+
+    1944, 1944, 297, 1944, 1944, 297, 1944, 1944,
+    1944, 1944, 1944, 1944, 1944, 1944, 1944, 1945,
+    1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
+    1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
+
+    1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
+    1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
+    1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
+    1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
+
+    1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
+    1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
+    1947, 1947, 1948, 1948, 1948, 1948, 1948, 1948,
+    1948, 1948, 1948, 1948, 1948, 1948, 1948, 1948,
+
+    1948, 1948, 343, 343, 343, 343, 343, 343,
+    343, 343, 343, 343, 343, 343, 343, 343,
+    343, 343, 343, 1947, 1947, 1947, 1947, 1947,
+    1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
+
+    1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
+    1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
+    1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
+    1947, 1947, 1947, 1947, 1947, 1947, 1590, 1314,
+
+    343, 343, 343, 343, 343, 343, 343, 343,
+    343, 343, 343, 343, 343, 343, 343, 343,
+    1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
+    1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
+
+    1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
+    1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
+    343, 343, 1947, 1947, 1947, 1947, 1947, 1947,
+    1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
+
+    1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
+    343, 343, 343, 343, 343, 343, 343, 343,
+    1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
+    1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
+
+    1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
+    1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
+    1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
+    1947, 1947, 1947, 1947, 1950, 335, 343, 343,
+
+    1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
+    1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
+    1952, 1953, 1954, 1955, 1956, 1957, 1957, 1958,
+    1959, 1960, 200, 200, 200, 200, 200, 200,
+
+    171, 171, 171, 171, 1171, 1171, 1171, 1071,
+    1071, 1071, 1071, 1071, 1071, 1071, 1675, 1675,
+    1961, 1962, 1962, 1963, 1963, 1964, 1965, 1964,
+    1965, 1964, 1965, 1964, 1965, 1964, 1965, 1964,
+
+    1965, 1964, 1965, 1964, 1965, 1602, 1602, 1966,
+    1967, 1961, 1961, 1961, 1961, 1963, 1963, 1963,
+    1968, 1969, 1970, 200, 1971, 1972, 1973, 1973,
+    1962, 1367, 1368, 1367, 1368, 1367, 1368, 1974,
+
+    1961, 1961, 1975, 1976, 1977, 1978, 1979, 200,
+    1961, 1370, 1328, 1961, 200, 200, 200, 200,
+    1947, 1947, 1947, 1980, 1947, 343, 1947, 1947,
+    1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
+
+    1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
+    1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
+    1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
+    1947, 1947, 1947, 1947, 1947, 343, 343, 1981,
+
+    200, 1973, 1961, 1974, 1370, 1328, 1961, 1982,
+    1367, 1368, 1961, 1975, 1968, 1976, 1970, 1983,
+    1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991,
+    1992, 1993, 1972, 1971, 1994, 1979, 1995, 1973,
+
+    1961, 1996, 1996, 1996, 1996, 1996, 1996, 1996,
+    1996, 1996, 1996, 1996, 1996, 1996, 1996, 1996,
+    1996, 1996, 1996, 1996, 1996, 1996, 1996, 1996,
+    1996, 1996, 1996, 1997, 1961, 1998, 1999, 1963,
+
+    1999, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
+    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
+    2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
+    2000, 2000, 2000, 1997, 1979, 1998, 1979, 2001,
+
+    2002, 2003, 1367, 1368, 2004, 2005, 2006, 2007,
+    2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007,
+    2008, 2006, 2006, 2006, 2006, 2006, 2006, 2006,
+    2006, 2006, 2006, 2006, 2006, 2006, 2006, 2006,
+
+    2006, 2006, 2006, 2006, 2006, 2006, 2006, 2006,
+    2006, 2006, 2006, 2006, 2006, 2006, 2006, 2006,
+    2006, 2006, 2006, 2006, 2006, 2006, 2006, 2006,
+    2006, 2006, 2006, 2006, 2006, 2006, 2009, 2009,
+
+    2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010,
+    2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010,
+    2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010,
+    2010, 2010, 2010, 2010, 2010, 2010, 2010, 200,
+
+    200, 200, 2010, 2010, 2010, 2010, 2010, 2010,
+    200, 200, 2010, 2010, 2010, 2010, 2010, 2010,
+    200, 200, 2010, 2010, 2010, 2010, 2010, 2010,
+    200, 200, 2010, 2010, 2010, 200, 200, 200,
+
+    2011, 1370, 1979, 1999, 1598, 1370, 1370, 200,
+    1390, 1366, 1366, 1366, 1366, 1390, 1390, 200,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 2012, 2012, 2012, 2013, 51, 2014, 2014,
+
+    2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015,
+    2015, 2015, 2015, 2015, 200, 2015, 2015, 2015,
+    2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015,
+    2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015,
+
+    2015, 2015, 2015, 2015, 2015, 2015, 2015, 200,
+    2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015,
+    2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015,
+    2015, 2015, 2015, 200, 2015, 2015, 200, 2015,
+
+    2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015,
+    2015, 2015, 2015, 2015, 2015, 2015, 200, 200,
+    2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015,
+    2015, 2015, 2015, 2015, 2015, 2015, 200, 200,
+
+    2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015,
+    2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015,
+    2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015,
+    2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015,
+
+    2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015,
+    2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015,
+    2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015,
+    2015, 2015, 2015, 200, 200, 200, 200, 200,
+
+    2016, 2017, 2016, 200, 200, 200, 200, 2018,
+    2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018,
+    2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018,
+    2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018,
+
+    2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018,
+    2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018,
+    2018, 2018, 2018, 2018, 200, 200, 200, 2019,
+    2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
+
+    2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
+    2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
+    2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
+    2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
+
+    2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
+    2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,
+    2020, 2020, 2020, 2020, 2020, 2021, 2021, 2021,
+    2021, 2022, 2022, 2022, 2022, 2022, 2022, 2022,
+
+    2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022,
+    2022, 2022, 2021, 2023, 2024, 200, 200, 200,
+    1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479,
+    1479, 1479, 1479, 1479, 200, 200, 200, 200,
+
+    2024, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
+    1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
+
+    1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
+    1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
+    1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
+    1412, 1412, 1412, 1412, 1412, 1174, 200, 200,
+
+    2025, 2025, 2025, 2025, 2025, 2025, 2025, 2025,
+    2025, 2025, 2025, 2025, 2025, 2025, 2025, 2025,
+    2025, 2025, 2025, 2025, 2025, 2025, 2025, 2025,
+    2025, 2025, 2025, 2025, 2025, 200, 200, 200,
+
+    2026, 2026, 2026, 2026, 2026, 2026, 2026, 2026,
+    2026, 2026, 2026, 2026, 2026, 2026, 2026, 2026,
+    2026, 2026, 2026, 2026, 2026, 2026, 2026, 2026,
+    2026, 2026, 2026, 2026, 2026, 2026, 2026, 2026,
+
+    2026, 2026, 2026, 2026, 2026, 2026, 2026, 2026,
+    2026, 2026, 2026, 2026, 2026, 2026, 2026, 2026,
+    2026, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    1071, 2027, 2027, 2027, 2027, 2027, 2027, 2027,
+    2027, 2027, 2027, 2027, 2027, 2027, 2027, 2027,
+    2027, 2027, 2027, 2027, 2027, 2027, 2027, 2027,
+    2027, 2027, 2027, 2027, 200, 200, 200, 200,
+
+    2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028,
+    2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028,
+    2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028,
+    2028, 2028, 2028, 2028, 2028, 2028, 2028, 2029,
+
+    2030, 2030, 2030, 2030, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    2031, 2031, 2031, 2031, 2031, 2031, 2031, 2031,
+    2031, 2031, 2031, 2031, 2031, 2031, 2031, 2031,
+
+    2031, 2032, 2031, 2031, 2031, 2031, 2031, 2031,
+    2031, 2031, 2032, 200, 200, 200, 200, 200,
+    2033, 2033, 2033, 2033, 2033, 2033, 2033, 2033,
+    2033, 2033, 2033, 2033, 2033, 2033, 2033, 2033,
+
+    2033, 2033, 2033, 2033, 2033, 2033, 2033, 2033,
+    2033, 2033, 2033, 2033, 2033, 2033, 2033, 2033,
+    2033, 2033, 2033, 2033, 2033, 2033, 2034, 2034,
+    2034, 2034, 2034, 200, 200, 200, 200, 200,
+
+    2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035,
+    2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035,
+    2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035,
+    2035, 2035, 2035, 2035, 2035, 2035, 200, 2036,
+
+    2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037,
+    2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037,
+    2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037,
+    2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037,
+
+    2037, 2037, 2037, 2037, 200, 200, 200, 200,
+    2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037,
+    2038, 2039, 2039, 2039, 2039, 2039, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
+    2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
+    2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
+    2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
+
+    2040, 2040, 2040, 2040, 2040, 2040, 2041, 2041,
+    2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042,
+    2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042,
+    2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042,
+
+    2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042,
+    2042, 2042, 2042, 2042, 2042, 2042, 2043, 2043,
+    2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
+    2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
+
+    2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
+    2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
+    2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
+    2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
+
+    2045, 2045, 2045, 2045, 2045, 2045, 2045, 2045,
+    2045, 2045, 2045, 2045, 2045, 2045, 2045, 2045,
+    2045, 2045, 2045, 2045, 2045, 2045, 2045, 2045,
+    2045, 2045, 2045, 2045, 2045, 2045, 200, 200,
+
+    2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053,
+    2054, 2055, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056,
+    2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056,
+    2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056,
+    2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056,
+
+    2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    2057, 2057, 2057, 2057, 2057, 2057, 2057, 2057,
+    2057, 2057, 2057, 2057, 2057, 2057, 2057, 2057,
+
+    2057, 2057, 2057, 2057, 2057, 2057, 2057, 2057,
+    2057, 2057, 2057, 2057, 2057, 2057, 2057, 2057,
+    2057, 2057, 2057, 2057, 2057, 2057, 2057, 2057,
+    2057, 2057, 2057, 2057, 2057, 2057, 2057, 2057,
+
+    2057, 2057, 2057, 2057, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 2058,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059,
+    2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059,
+    2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059,
+    2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059,
+
+    2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059,
+    2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059,
+    2059, 2059, 2059, 2059, 2059, 2059, 2059, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059,
+    2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059,
+    2059, 2059, 2059, 2059, 2059, 2059, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    2060, 2060, 2060, 2060, 2060, 2060, 297, 297,
+    2060, 297, 2060, 2060, 2060, 2060, 2060, 2060,
+    2060, 2060, 2060, 2060, 2060, 2060, 2060, 2060,
+    2060, 2060, 2060, 2060, 2060, 2060, 2060, 2060,
+
+    2060, 2060, 2060, 2060, 2060, 2060, 2060, 2060,
+    2060, 2060, 2060, 2060, 2060, 2060, 2060, 2060,
+    2060, 2060, 2060, 2060, 2060, 2060, 297, 2060,
+    2060, 297, 297, 297, 2060, 297, 297, 2060,
+
+    2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
+    2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
+    2061, 2061, 2061, 2061, 2061, 2061, 297, 2062,
+    2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063,
+
+    2064, 2064, 2064, 2064, 2064, 2064, 2064, 2064,
+    2064, 2064, 2064, 2064, 2064, 2064, 2064, 2064,
+    2064, 2064, 2064, 2064, 2064, 2064, 2064, 2065,
+    2065, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
+
+    2067, 2067, 2067, 2067, 2067, 2067, 2067, 2067,
+    2067, 2067, 2067, 2067, 2067, 2067, 2067, 2067,
+    2067, 2067, 2067, 2067, 2067, 2067, 2067, 2067,
+    2067, 2067, 2067, 2067, 2067, 2067, 2067, 297,
+
+    297, 297, 297, 297, 297, 297, 297, 2068,
+    2068, 2068, 2068, 2068, 2068, 2068, 2068, 2068,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+
+    2069, 2069, 2069, 2069, 2069, 2069, 2069, 2069,
+    2069, 2069, 2069, 2069, 2069, 2069, 2069, 2069,
+    2069, 2069, 2069, 297, 2069, 2069, 297, 297,
+    297, 297, 297, 2070, 2070, 2070, 2070, 2070,
+
+    2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
+    2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
+    2071, 2071, 2071, 2071, 2071, 2071, 2072, 2072,
+    2072, 2072, 2073, 2073, 297, 297, 297, 2074,
+
+    2075, 2075, 2075, 2075, 2075, 2075, 2075, 2075,
+    2075, 2075, 2075, 2075, 2075, 2075, 2075, 2075,
+    2075, 2075, 2075, 2075, 2075, 2075, 2075, 2075,
+    2075, 2075, 297, 297, 297, 297, 297, 2076,
+
+    2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
+    2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
+    2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
+    2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
+
+    2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078,
+    2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078,
+    2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078,
+    297, 297, 297, 297, 2079, 2079, 2078, 2078,
+
+    2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079,
+    2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079,
+    297, 297, 2079, 2079, 2079, 2079, 2079, 2079,
+    2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079,
+
+    2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079,
+    2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079,
+    2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079,
+    2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079,
+
+    2080, 2081, 2081, 2081, 297, 2081, 2081, 297,
+    297, 297, 297, 297, 2081, 2082, 2081, 2083,
+    2080, 2080, 2080, 2080, 297, 2080, 2080, 2080,
+    297, 2080, 2080, 2080, 2080, 2080, 2080, 2080,
+
+    2080, 2080, 2080, 2080, 2080, 2080, 2080, 2080,
+    2080, 2080, 2080, 2080, 2080, 2080, 2080, 2080,
+    2080, 2080, 2080, 2080, 297, 297, 297, 297,
+    2083, 2084, 2082, 297, 297, 297, 297, 2085,
+
+    2086, 2087, 2088, 2089, 2090, 2090, 2090, 2090,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    2091, 2091, 2091, 2091, 2091, 2091, 2092, 2092,
+    2093, 297, 297, 297, 297, 297, 297, 297,
+
+    2094, 2094, 2094, 2094, 2094, 2094, 2094, 2094,
+    2094, 2094, 2094, 2094, 2094, 2094, 2094, 2094,
+    2094, 2094, 2094, 2094, 2094, 2094, 2094, 2094,
+    2094, 2094, 2094, 2094, 2094, 2095, 2095, 2096,
+
+    2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097,
+    2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097,
+    2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097,
+    2097, 2097, 2097, 2097, 2097, 2098, 2098, 2098,
+
+    2099, 2099, 2099, 2099, 2099, 2100, 2101, 2100,
+    2102, 2100, 2100, 2101, 2101, 2103, 2100, 2100,
+    2100, 2100, 2100, 2099, 2099, 2099, 2099, 2103,
+    2099, 2099, 2099, 2099, 2099, 2100, 2099, 2099,
+
+    2099, 2100, 2101, 2101, 2100, 2104, 2105, 297,
+    297, 297, 297, 2106, 2106, 2106, 2106, 2107,
+    2108, 2108, 2108, 2108, 2108, 2108, 2109, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+
+    2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
+    2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
+    2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
+    2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
+
+    2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
+    2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110,
+    2110, 2110, 2110, 2110, 2110, 2110, 297, 297,
+    297, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
+
+    2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
+    2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
+    2112, 2112, 2112, 2112, 2112, 2112, 297, 297,
+    2113, 2113, 2113, 2113, 2113, 2113, 2113, 2113,
+
+    2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
+    2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
+    2114, 2114, 2114, 297, 297, 297, 297, 297,
+    2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115,
+
+    2116, 2117, 2116, 2117, 2117, 2117, 2116, 2116,
+    2116, 2117, 2116, 2116, 2117, 2116, 2117, 2117,
+    2116, 2117, 297, 297, 297, 297, 297, 297,
+    297, 2118, 2118, 2118, 2118, 297, 297, 297,
+
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 2119, 2119, 2119, 2119, 2120, 2120, 2121,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+
+    2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122,
+    2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122,
+    2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122,
+    2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122,
+
+    2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122,
+    2122, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+
+    2123, 2123, 2123, 2123, 2123, 2123, 2123, 2123,
+    2123, 2123, 2123, 2123, 2123, 2123, 2123, 2123,
+    2123, 2123, 2123, 2123, 2123, 2123, 2123, 2123,
+    2123, 2123, 2123, 2123, 2123, 2123, 2123, 2123,
+
+    2123, 2123, 2123, 2123, 2123, 2123, 2123, 2123,
+    2123, 2123, 2123, 2123, 2123, 2123, 2123, 2123,
+    2123, 2123, 2123, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+
+    2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124,
+    2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124,
+    2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124,
+    2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124,
+
+    2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124,
+    2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124,
+    2124, 2124, 2124, 297, 297, 297, 297, 297,
+    297, 297, 2125, 2125, 2125, 2125, 2125, 2125,
+
+    2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133,
+    2134, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
+    2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135,
+    2135, 2135, 2135, 2135, 2135, 2135, 2135, 297,
+
+    2136, 2137, 2136, 2138, 2138, 2138, 2138, 2138,
+    2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
+    2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
+    2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
+    2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
+    2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
+    2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
+    2137, 2137, 2137, 2137, 2137, 2137, 2137, 2137,
+    2137, 2137, 2137, 2137, 2137, 2137, 2139, 2140,
+    2140, 2141, 2141, 2141, 2141, 2141, 200, 200,
+    200, 200, 2142, 2143, 2144, 2145, 2146, 2147,
+    2148, 2149, 2150, 2151, 2151, 2151, 2151, 2151,
+    2151, 2151, 2151, 2151, 2151, 2151, 2152, 2153,
+    2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 2162,
+    2163, 2163, 2164, 2165, 2165, 2165, 2165, 2165,
+    2165, 2165, 2165, 2165, 2165, 2165, 2165, 2165,
+    2165, 2165, 2165, 2165, 2165, 2165, 2165, 2165,
+    2165, 2165, 2166, 2165, 2166, 2165, 2165, 2165,
+    2165, 2165, 2165, 2165, 2165, 2165, 2165, 2165,
+    2165, 2165, 2165, 2166, 2165, 2165, 2165, 2165,
+    2164, 2164, 2164, 2163, 2163, 2163, 2163, 2164,
+    2164, 2167, 2168, 2169, 2169, 2170, 2171, 2171,
+    2171, 2171, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    2172, 2172, 2172, 2172, 2172, 2172, 2172, 2172,
+    2172, 2172, 2172, 2172, 2172, 2172, 2172, 2172,
+    2172, 2172, 2172, 2172, 2172, 2172, 2172, 2172,
+    2172, 200, 200, 200, 200, 200, 200, 200,
+    2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180,
+    2181, 2182, 200, 200, 200, 200, 200, 200,
+
+    2183, 2183, 2183, 2184, 2184, 2184, 2184, 2184,
+    2184, 2184, 2184, 2184, 2184, 2184, 2184, 2184,
+    2184, 2184, 2184, 2184, 2184, 2184, 2184, 2184,
+    2184, 2184, 2184, 2184, 2184, 2184, 2184, 2184,
+    2184, 2184, 2184, 2184, 2184, 2184, 2184, 2185,
+    2186, 2186, 2186, 2186, 2187, 2186, 2188, 2188,
+    2186, 2186, 2186, 2189, 2189, 200, 2190, 2191,
+    2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199,
+    2200, 2201, 2201, 2201, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    2202, 2202, 2202, 2202, 2202, 2202, 2202, 2202,
+    2202, 2202, 2202, 2202, 2202, 2202, 2202, 2202,
+    2202, 2202, 2202, 2202, 2202, 2202, 2202, 2202,
+    2202, 2202, 2202, 2202, 2202, 2202, 2202, 2202,
+    2202, 2202, 2202, 2203, 2204, 2205, 2202, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    2206, 2206, 2207, 2208, 2208, 2208, 2208, 2208,
+    2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208,
+    2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208,
+    2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208,
+    2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208,
+    2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208,
+    2208, 2208, 2208, 2207, 2207, 2207, 2206, 2206,
+    2206, 2206, 2206, 2206, 2206, 2206, 2206, 2207,
+    2209, 2208, 2208, 2208, 2208, 2210, 2210, 2211,
+    2212, 2213, 2214, 2215, 2215, 2216, 200, 200,
+    2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224,
+    2225, 2226, 2227, 2228, 2229, 2230, 2231, 2231,
+    200, 2232, 2232, 2232, 2232, 2232, 2232, 2232,
+    2232, 2232, 2232, 2232, 2232, 2232, 2232, 2232,
+    2232, 2232, 2232, 2232, 2232, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    2233, 2233, 2233, 2233, 2233, 2233, 2233, 2233,
+    2233, 2233, 2233, 2233, 2233, 2233, 2233, 2233,
+    2233, 2233, 200, 2233, 2233, 2233, 2233, 2233,
+    2233, 2233, 2233, 2233, 2233, 2233, 2233, 2233,
+    2233, 2233, 2233, 2233, 2233, 2233, 2233, 2233,
+    2233, 2233, 2233, 2233, 2234, 2234, 2234, 2235,
+    2235, 2235, 2234, 2234, 2235, 2236, 2237, 2235,
+    2238, 2238, 2239, 2238, 2238, 2239, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    2240, 2240, 2240, 2240, 2240, 2240, 2240, 200,
+    2240, 200, 2240, 2240, 2240, 2240, 200, 2240,
+    2240, 2240, 2240, 2240, 2240, 2240, 2240, 2240,
+    2240, 2240, 2240, 2240, 2240, 2240, 200, 2240,
+    2240, 2240, 2240, 2240, 2240, 2240, 2240, 2240,
+    2240, 2241, 200, 200, 200, 200, 200, 200,
+    2242, 2242, 2242, 2242, 2242, 2242, 2242, 2242,
+    2242, 2242, 2242, 2242, 2242, 2242, 2242, 2242,
+    2242, 2242, 2242, 2242, 2242, 2242, 2242, 2242,
+    2242, 2242, 2242, 2242, 2242, 2242, 2242, 2242,
+    2242, 2242, 2242, 2242, 2242, 2242, 2242, 2242,
+    2242, 2242, 2242, 2242, 2242, 2242, 2242, 2243,
+    2244, 2244, 2244, 2243, 2243, 2243, 2243, 2243,
+    2243, 2245, 2246, 200, 200, 200, 200, 200,
+    2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254,
+    2255, 2256, 200, 200, 200, 200, 200, 200,
+
+    2257, 2258, 2259, 2259, 200, 2260, 2260, 2260,
+    2260, 2260, 2260, 2260, 2260, 200, 200, 2260,
+    2260, 200, 200, 2260, 2260, 2260, 2260, 2260,
+    2260, 2260, 2260, 2260, 2260, 2260, 2260, 2260,
+    2260, 2260, 2260, 2260, 2260, 2260, 2260, 2260,
+    2260, 200, 2260, 2260, 2260, 2260, 2260, 2260,
+    2260, 200, 2260, 2260, 200, 2260, 2260, 2260,
+    2260, 2260, 200, 200, 2261, 2260, 2262, 2259,
+    2258, 2259, 2259, 2259, 2259, 200, 200, 2259,
+    2259, 200, 200, 2263, 2263, 2264, 200, 200,
+    2265, 200, 200, 200, 200, 200, 200, 2262,
+    200, 200, 200, 200, 200, 2260, 2260, 2260,
+    2260, 2260, 2259, 2259, 200, 200, 2266, 2266,
+    2266, 2266, 2266, 2266, 2266, 200, 200, 200,
+    2266, 2266, 2266, 2266, 2266, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    2267, 2267, 2267, 2267, 2267, 2267, 2267, 2267,
+    2267, 2267, 2267, 2267, 2267, 2267, 2267, 2267,
+    2267, 2267, 2267, 2267, 2267, 2267, 2267, 2267,
+    2267, 2267, 2267, 2267, 2267, 2267, 2267, 2267,
+    2267, 2267, 2267, 2267, 2267, 2267, 2267, 2267,
+    2267, 2267, 2267, 2267, 2267, 2267, 2267, 2267,
+    2268, 2269, 2269, 2270, 2270, 2270, 2270, 2270,
+    2270, 2269, 2271, 2272, 2272, 2268, 2272, 2270,
+    2270, 2269, 2273, 2274, 2267, 2267, 2275, 2267,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283,
+    2284, 2285, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    2286, 2286, 2286, 2286, 2286, 2286, 2286, 2286,
+    2286, 2286, 2286, 2286, 2286, 2286, 2286, 2286,
+    2286, 2286, 2286, 2286, 2286, 2286, 2286, 2286,
+    2286, 2286, 2286, 2286, 2286, 2286, 2286, 2286,
+    2286, 2286, 2286, 2286, 2286, 2286, 2286, 2286,
+    2286, 2286, 2286, 2286, 2286, 2286, 2286, 2287,
+    2288, 2288, 2289, 2289, 2289, 2289, 200, 200,
+    2288, 2288, 2290, 2290, 2289, 2289, 2288, 2291,
+    2292, 2293, 2294, 2294, 2295, 2295, 2296, 2296,
+    2296, 2294, 2297, 2297, 2297, 2297, 2297, 2297,
+    2297, 2297, 2297, 2297, 2297, 2297, 2297, 2297,
+    2298, 2298, 2298, 2298, 2299, 2299, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    2300, 2300, 2300, 2300, 2300, 2300, 2300, 2300,
+    2300, 2300, 2300, 2300, 2300, 2300, 2300, 2300,
+    2300, 2300, 2300, 2300, 2300, 2300, 2300, 2300,
+    2300, 2300, 2300, 2300, 2300, 2300, 2300, 2300,
+    2300, 2300, 2300, 2300, 2300, 2300, 2300, 2300,
+    2300, 2300, 2300, 2300, 2300, 2300, 2300, 2300,
+    2301, 2301, 2301, 2302, 2302, 2302, 2302, 2302,
+    2302, 2302, 2302, 2301, 2301, 2302, 2301, 2303,
+    2302, 2304, 2304, 2305, 2300, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    2306, 2307, 2308, 2309, 2310, 2311, 2312, 2313,
+    2314, 2315, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316,
+    2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316,
+    2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316,
+    2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316,
+    2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316,
+    2316, 2316, 2316, 2317, 2318, 2317, 2318, 2318,
+    2317, 2317, 2317, 2317, 2317, 2317, 2319, 2320,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328,
+    2329, 2330, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    2331, 2331, 2331, 2331, 2331, 2331, 2331, 2331,
+    2331, 2331, 2331, 2331, 2331, 2331, 2331, 2331,
+    2331, 2331, 2331, 2331, 2331, 2331, 2331, 2331,
+    2331, 2331, 200, 200, 200, 2332, 2332, 2332,
+    2333, 2333, 2332, 2332, 2332, 2332, 2333, 2332,
+    2332, 2332, 2332, 2334, 200, 200, 200, 200,
+    2335, 2336, 2337, 2338, 2339, 2340, 2341, 2342,
+    2343, 2344, 2345, 2345, 2346, 2346, 2346, 2347,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    2348, 2348, 2348, 2348, 2348, 2348, 2348, 2348,
+    2348, 2348, 2348, 2348, 2348, 2348, 2348, 2348,
+    2348, 2348, 2348, 2348, 2348, 2348, 2348, 2348,
+    2348, 2348, 2348, 2348, 2348, 2348, 2348, 2348,
+    2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349,
+    2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349,
+    2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349,
+    2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349,
+    2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357,
+    2358, 2359, 2360, 2360, 2360, 2360, 2360, 2360,
+    2360, 2360, 2360, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 2361,
+
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,
+    2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,
+    2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,
+    2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,
+    2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,
+    2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,
+    2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,
+    2362, 200, 200, 200, 200, 200, 200, 200,
+
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2363,
+    2363, 2363, 2363, 2363, 2363, 2363, 2363, 2364,
+    2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
+    2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
+    2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
+    2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
+    2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
+    2364, 2365, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    2366, 2366, 2366, 2366, 2366, 2366, 2366, 2366,
+    2366, 2366, 2366, 2366, 2366, 2366, 2366, 2366,
+    2366, 2366, 2366, 2366, 2366, 2366, 2366, 2366,
+    2366, 2366, 2366, 2366, 2366, 2366, 2366, 2366,
+    2366, 2366, 2366, 2366, 2366, 2366, 2366, 2366,
+    2366, 2366, 2366, 2366, 2366, 2366, 2366, 2366,
+    2366, 2366, 2366, 2366, 2366, 2366, 2366, 2366,
+    2366, 2366, 2366, 2366, 2366, 2366, 2366, 2366,
+    2366, 2366, 2366, 2366, 2366, 2366, 2366, 2366,
+    2366, 2366, 2366, 2366, 2366, 2366, 2366, 2366,
+    2366, 2366, 2366, 2366, 2366, 2366, 2366, 2366,
+    2366, 2366, 2366, 2366, 2366, 2366, 2366, 2366,
+    2366, 2366, 2366, 2367, 2367, 2367, 2367, 2367,
+    2367, 2367, 2367, 2367, 2367, 2367, 2367, 200,
+    2368, 2368, 2368, 2368, 2369, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+    2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+    2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+    2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+    2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+    2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+    2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+    2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+    2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+    2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+    2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+    2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+    2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+    2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+    2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+    2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+
+    2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+    2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+    2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+    2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+    2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+    2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+    2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+    2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+    2365, 2365, 2365, 2365, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2371, 2371, 2371, 2372, 2372, 2372, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2372, 2370, 2370, 2370, 2371, 2372,
+    2371, 2372, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2371, 2372, 2372, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
+    2370, 2370, 2370, 2370, 2370, 2370, 2370, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2374, 2375,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
+    2373, 2373, 2373, 2373, 2373, 2373, 2373, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
+    2376, 200, 200, 200, 200, 200, 200, 200,
+    2377, 2377, 2377, 2377, 2377, 2377, 2377, 2377,
+    2377, 2377, 2377, 2377, 2377, 2377, 2377, 2377,
+    2377, 2377, 2377, 2377, 2377, 2377, 2377, 2377,
+    2377, 2377, 2377, 2377, 2377, 2377, 2377, 200,
+    2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385,
+    2386, 2387, 200, 200, 200, 200, 2388, 2388,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    2389, 2389, 2389, 2389, 2389, 2389, 2389, 2389,
+    2389, 2389, 2389, 2389, 2389, 2389, 2389, 2389,
+    2389, 2389, 2389, 2389, 2389, 2389, 2389, 2389,
+    2389, 2389, 2389, 2389, 2389, 2389, 200, 200,
+    2390, 2390, 2390, 2390, 2390, 2391, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392,
+    2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392,
+    2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392,
+    2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392,
+    2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392,
+    2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392,
+    2393, 2393, 2393, 2393, 2393, 2393, 2393, 2394,
+    2394, 2395, 2396, 2396, 2397, 2397, 2397, 2397,
+    2398, 2398, 2398, 2398, 2394, 2397, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    2399, 2400, 2401, 2402, 2403, 2404, 2405, 2406,
+    2407, 2408, 200, 2409, 2409, 2409, 2409, 2409,
+    2409, 2409, 200, 2392, 2392, 2392, 2392, 2392,
+    2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392,
+    2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392,
+    200, 200, 200, 200, 200, 2392, 2392, 2392,
+    2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392,
+    2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410,
+    2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410,
+    2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410,
+    2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410,
+    2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410,
+    2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410,
+    2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410,
+    2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410,
+    2410, 2410, 2410, 2410, 2410, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    2410, 2411, 2411, 2411, 2411, 2411, 2411, 2411,
+    2411, 2411, 2411, 2411, 2411, 2411, 2411, 2411,
+    2411, 2411, 2411, 2411, 2411, 2411, 2411, 2411,
+    2411, 2411, 2411, 2411, 2411, 2411, 2411, 2411,
+    2411, 2411, 2411, 2411, 2411, 2411, 2411, 2411,
+    2411, 2411, 2411, 2411, 2411, 2411, 2411, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 2412,
+    2412, 2412, 2412, 2413, 2413, 2413, 2413, 2413,
+    2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    2414, 2415, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    2416, 2416, 2416, 2416, 2416, 2416, 2416, 2416,
+    2416, 2416, 2416, 2416, 2416, 2416, 2416, 2416,
+    2416, 2416, 2416, 2416, 2416, 2416, 2416, 2416,
+    2416, 2416, 2416, 2416, 2416, 2416, 2416, 2416,
+    2416, 2416, 2416, 2416, 2416, 2416, 2416, 2416,
+    2416, 2416, 2416, 2416, 2416, 2416, 2416, 2416,
+    2416, 2416, 2416, 2416, 2416, 2416, 2416, 2416,
+    2416, 2416, 2416, 2416, 2416, 2416, 2416, 2416,
+    2416, 2416, 2416, 2416, 2416, 2416, 2416, 2416,
+    2416, 2416, 2416, 2416, 2416, 2416, 2416, 2416,
+    2416, 2416, 2416, 2416, 2416, 2416, 2416, 2416,
+    2416, 2416, 2416, 2416, 2416, 2416, 2416, 2416,
+    2416, 2416, 2416, 2416, 2416, 2416, 2416, 2416,
+    2416, 2416, 2416, 200, 200, 200, 200, 200,
+    2416, 2416, 2416, 2416, 2416, 2416, 2416, 2416,
+    2416, 2416, 2416, 2416, 2416, 200, 200, 200,
+    2416, 2416, 2416, 2416, 2416, 2416, 2416, 2416,
+    2416, 200, 200, 200, 200, 200, 200, 200,
+    2416, 2416, 2416, 2416, 2416, 2416, 2416, 2416,
+    2416, 2416, 200, 200, 2417, 2418, 2419, 2420,
+    2421, 2421, 2421, 2421, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 200,
+    200, 1412, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2423, 2423,
+    2423, 2423, 2423, 2423, 2423, 2424, 2425, 2426,
+    2426, 2426, 2422, 2422, 2422, 2427, 2424, 2424,
+    2424, 2424, 2424, 2428, 2428, 2428, 2428, 2428,
+    2428, 2428, 2428, 2429, 2429, 2429, 2429, 2429,
+    2429, 2429, 2429, 2422, 2422, 2430, 2430, 2430,
+    2430, 2430, 2429, 2429, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2430, 2430, 2430, 2430, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2423, 2423, 2423, 2423, 2423,
+    2423, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2422, 2422,
+    2422, 2422, 2422, 2422, 2422, 2422, 2431, 2431,
+    2431, 2431, 2431, 2431, 2431, 2431, 2431, 2431,
+    2431, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022,
+    2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022,
+    2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022,
+    2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022,
+    2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022,
+    2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022,
+    2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022,
+    2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022,
+    2022, 2022, 2432, 2432, 2432, 2022, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
+    1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
+    1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
+    1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
+    1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
+    1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
+    1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
+    1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
+    1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
+    1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
+    1446, 1446, 1446, 1446, 1446, 1446, 1446, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    2433, 2433, 2433, 2433, 2433, 2433, 2433, 2433,
+    2433, 2433, 2433, 2433, 2433, 2433, 2433, 2433,
+    2433, 2433, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 200, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2434, 200, 2434, 2434,
+    200, 200, 2434, 200, 200, 2434, 2434, 200,
+    200, 2434, 2434, 2434, 2434, 200, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2435, 2435,
+    2435, 2435, 200, 2435, 200, 2435, 2435, 2435,
+    2435, 2436, 2435, 2435, 200, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+
+    2435, 2435, 2435, 2435, 2434, 2434, 200, 2434,
+    2434, 2434, 2434, 200, 200, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 200, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 200, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2434, 2434, 200, 2434, 2434, 2434, 2434, 200,
+    2434, 2434, 2434, 2434, 2434, 200, 2434, 200,
+    200, 200, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 200, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 1404, 1404, 200, 200,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2437, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2438, 2435, 2435, 2435, 2435,
+    2435, 2435, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2437, 2435, 2435, 2435, 2435,
+
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2438, 2435, 2435,
+    2435, 2435, 2435, 2435, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2437, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2438,
+    2435, 2435, 2435, 2435, 2435, 2435, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2437,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2438, 2435, 2435, 2435, 2435, 2435, 2435,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+    2434, 2437, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
+    2435, 2435, 2435, 2438, 2435, 2435, 2435, 2435,
+    2435, 2435, 2439, 2440, 200, 200, 2441, 2442,
+    2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450,
+    2441, 2442, 2443, 2444, 2445, 2446, 2447, 2448,
+    2449, 2450, 2441, 2442, 2443, 2444, 2445, 2446,
+    2447, 2448, 2449, 2450, 2441, 2442, 2443, 2444,
+    2445, 2446, 2447, 2448, 2449, 2450, 2441, 2442,
+    2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450,
+
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+
+    2452, 2452, 2452, 2452, 2452, 2452, 2452, 2452,
+    2452, 2452, 2452, 2452, 2452, 2452, 2452, 2452,
+    2452, 2452, 2452, 2452, 2452, 2452, 2452, 2452,
+    2452, 2452, 2452, 2452, 2452, 2452, 2452, 2452,
+    2452, 2452, 2452, 2452, 2452, 2452, 2452, 2452,
+    2452, 2452, 2452, 2452, 2452, 2452, 2452, 2452,
+    2452, 2452, 2452, 2452, 2452, 2452, 2452, 2451,
+    2451, 2451, 2451, 2452, 2452, 2452, 2452, 2452,
+    2452, 2452, 2452, 2452, 2452, 2452, 2452, 2452,
+    2452, 2452, 2452, 2452, 2452, 2452, 2452, 2452,
+    2452, 2452, 2452, 2452, 2452, 2452, 2452, 2452,
+    2452, 2452, 2452, 2452, 2452, 2452, 2452, 2452,
+    2452, 2452, 2452, 2452, 2452, 2452, 2452, 2452,
+    2452, 2452, 2452, 2452, 2452, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2452, 2451, 2451,
+    2451, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
+    2451, 2451, 2451, 2451, 2452, 2451, 2451, 2453,
+    2454, 2453, 2453, 2455, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 2452, 2452, 2452, 2452, 2452,
+    200, 2452, 2452, 2452, 2452, 2452, 2452, 2452,
+    2452, 2452, 2452, 2452, 2452, 2452, 2452, 2452,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
+    2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
+    2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
+    2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
+    2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
+    2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
+    2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
+    2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
+    2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
+    2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
+    2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
+    2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
+    2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
+    2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
+    2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
+    2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
+    2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
+    2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
+    2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
+    2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
+    2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
+    2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
+    2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
+    2456, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
+    2456, 2456, 2456, 2456, 2456, 297, 297, 2457,
+    2457, 2457, 2457, 2457, 2457, 2457, 2457, 2457,
+    2458, 2458, 2458, 2458, 2458, 2458, 2458, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+    297, 297, 297, 297, 297, 297, 297, 297,
+
+    2459, 2459, 2459, 2459, 343, 2459, 2459, 2459,
+    2459, 2459, 2459, 2459, 2459, 2459, 2459, 2459,
+    2459, 2459, 2459, 2459, 2459, 2459, 2459, 2459,
+    2459, 2459, 2459, 2459, 2459, 2459, 2459, 2459,
+    343, 2459, 2459, 343, 2459, 343, 343, 2459,
+    343, 2459, 2459, 2459, 2459, 2459, 2459, 2459,
+    2459, 2459, 2459, 343, 2459, 2459, 2459, 2459,
+    343, 2459, 343, 2459, 343, 343, 343, 343,
+    343, 343, 2459, 343, 343, 343, 343, 2459,
+    343, 2459, 343, 2459, 343, 2459, 2459, 2459,
+    343, 2459, 2459, 343, 2459, 343, 343, 2459,
+    343, 2459, 343, 2459, 343, 2459, 343, 2459,
+    343, 2459, 2459, 343, 2459, 343, 343, 2459,
+    2459, 2459, 2459, 343, 2459, 2459, 2459, 2459,
+    2459, 2459, 2459, 343, 2459, 2459, 2459, 2459,
+    343, 2459, 2459, 2459, 2459, 343, 2459, 343,
+    2459, 2459, 2459, 2459, 2459, 2459, 2459, 2459,
+    2459, 2459, 343, 2459, 2459, 2459, 2459, 2459,
+    2459, 2459, 2459, 2459, 2459, 2459, 2459, 2459,
+    2459, 2459, 2459, 2459, 343, 343, 343, 343,
+    343, 2459, 2459, 2459, 343, 2459, 2459, 2459,
+    2459, 2459, 343, 2459, 2459, 2459, 2459, 2459,
+    2459, 2459, 2459, 2459, 2459, 2459, 2459, 2459,
+    2459, 2459, 2459, 2459, 343, 343, 343, 343,
+    343, 343, 343, 343, 343, 343, 343, 343,
+    343, 343, 343, 343, 343, 343, 343, 343,
+    343, 343, 343, 343, 343, 343, 343, 343,
+    343, 343, 343, 343, 343, 343, 343, 343,
+    343, 343, 343, 343, 343, 343, 343, 343,
+    343, 343, 343, 343, 343, 343, 343, 343,
+    2460, 2460, 343, 343, 343, 343, 343, 343,
+    343, 343, 343, 343, 343, 343, 343, 343,
+
+    1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
+    1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
+    1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
+    1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
+    1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
+    1482, 1482, 1482, 1482, 200, 200, 200, 200,
+    1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
+    1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
+    1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
+    1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
+    1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
+    1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
+    1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
+    1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
+    1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
+    1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
+    1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
+    1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
+    1482, 1482, 1482, 1482, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 200,
+    200, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1483,
+    200, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    200, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
+    1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
+    1483, 1483, 1483, 1483, 1483, 1483, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    2461, 2461, 2462, 2463, 2464, 2465, 2466, 2467,
+    2468, 2469, 2470, 2471, 2471, 200, 200, 200,
+    2472, 2472, 2472, 2472, 2472, 2472, 2472, 2472,
+    2472, 2472, 2472, 2472, 2472, 2472, 2472, 2472,
+    2472, 2472, 2472, 2472, 2472, 2472, 2472, 2472,
+    2472, 2472, 2472, 2472, 2472, 2472, 2472, 200,
+    2473, 2474, 2473, 2473, 2473, 2473, 2473, 2473,
+    2473, 2473, 2473, 2473, 2473, 2474, 2473, 2474,
+    2473, 2473, 2474, 2473, 2473, 2473, 2474, 2473,
+    2473, 2473, 2472, 2472, 2472, 2472, 2472, 2475,
+    2476, 2476, 2476, 2476, 2476, 2476, 2476, 2477,
+    2476, 2476, 2476, 2476, 2476, 2476, 2476, 2477,
+    2476, 2476, 2476, 2476, 2476, 2476, 2476, 2476,
+    2476, 2476, 2478, 2478, 200, 200, 200, 200,
+    2476, 2476, 2476, 2476, 2476, 2476, 2476, 2476,
+    2476, 2477, 2476, 2477, 2477, 2476, 2476, 2477,
+    2476, 2476, 2476, 2476, 2476, 2476, 2476, 2476,
+    2476, 2476, 778, 778, 778, 778, 2479, 2479,
+    2472, 2479, 2479, 2479, 2479, 2479, 2479, 2479,
+    2479, 2479, 2479, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 2480, 2480,
+    2480, 2480, 2480, 2480, 2480, 2480, 2480, 2480,
+    2480, 2480, 2480, 2480, 2480, 2480, 2480, 2480,
+    2480, 2480, 2480, 2480, 2480, 2480, 2480, 2480,
+
+    2481, 2482, 2482, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
+    1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
+    1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
+    1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
+    1632, 1632, 2482, 2482, 2482, 2482, 2482, 2482,
+    2482, 2482, 2482, 200, 200, 200, 200, 200,
+    1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
+    1632, 200, 200, 200, 200, 200, 200, 200,
+    2482, 2482, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
+    1483, 1483, 1483, 1483, 1483, 2483, 2483, 2483,
+    1450, 1450, 1450, 1450, 1450, 1450, 1483, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1483, 2483, 2483,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1483, 1483, 1483, 1483,
+    1483, 1483, 1483, 1483, 1451, 1451, 1483, 1483,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1449, 1449, 1450,
+    1450, 1450, 1450, 1450, 1449, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1483, 1450, 1450,
+    1450, 1450, 1450, 1483, 1483, 1483, 1483, 2483,
+    2483, 2483, 2483, 2483, 1483, 1483, 1483, 1483,
+    1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
+    2483, 2483, 2483, 2484, 2484, 2484, 2484, 2484,
+
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1483,
+    1450, 1483, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1449, 1450, 1449, 1450, 1449, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1449,
+    1450, 1449, 1449, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1483, 1450, 1450, 1450, 1450, 1483, 1483, 2483,
+
+    1449, 1449, 1449, 1449, 1449, 1449, 1449, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1449,
+    1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
+    1449, 1449, 1449, 1449, 1449, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1449, 1449, 1449, 1449, 1449, 1449,
+    1449, 1449, 1449, 1449, 1449, 1449, 1451, 1451,
+    2485, 2485, 2485, 2485, 1451, 1451, 1451, 1451,
+    1451, 1451, 1483, 2483, 2483, 2483, 2483, 2483,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
+    1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
+    1483, 1483, 200, 1483, 1483, 1483, 1483, 1483,
+    1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
+    1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
+    1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
+    1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
+    1483, 1483, 1483, 1483, 200, 1483, 1483, 1483,
+    1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
+    1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
+    1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
+    1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
+    1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
+    1483, 1483, 1483, 1483, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1483, 1483, 1483, 1483,
+    1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
+    1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
+    1483, 1483, 1483, 1483, 1451, 1451, 1451, 1451,
+    1451, 1451, 1483, 1450, 1450, 1450, 1450, 1450,
+
+    2486, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 2486, 1450, 1450, 1450, 2486, 1450, 2486,
+    1450, 2486, 1450, 2486, 1450, 1450, 1450, 2486,
+    1450, 1450, 1450, 1450, 1450, 1450, 2486, 2486,
+    1450, 1450, 1450, 1450, 2486, 1450, 2486, 2486,
+    1450, 1450, 1450, 1450, 2486, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1483, 1483, 2483, 2483, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 2487, 2487,
+    2487, 2488, 2488, 2488, 1451, 1451, 1451, 1451,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
+    1450, 1450, 1450, 1450, 1450, 1450, 1483, 1483,
+    1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
+    2483, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
+    1483, 1483, 1483, 1483, 1483, 200, 200, 200,
+    1483, 1483, 1483, 1483, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
+    1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
+    1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
+    1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
+    1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
+    1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
+    1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
+    1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
+    1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
+    1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
+    1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
+    1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
+    1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
+    1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
+    1449, 1449, 1449, 1449, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 200, 200, 200, 200,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 200, 200, 200, 200, 200, 200,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
+    1451, 1451, 1451, 1451, 1451, 1451, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    2483, 2483, 2483, 2483, 2483, 2483, 2483, 2483,
+    2483, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    2483, 2483, 2483, 2483, 2483, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    2483, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 200, 200,
+    200, 200, 200, 200, 200, 200, 2489, 2489,
+
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
+    2490, 2490, 2490, 2490, 2490, 2490, 2490, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+    1643, 1643, 1643, 1643, 1643, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 2491, 2491,
+    2491, 2491, 2491, 2491, 2491, 2491, 1639, 1639,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
+    1645, 1645, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 2492, 2492,
+    2492, 2492, 2492, 2492, 2492, 2492, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+    1639, 1639, 1639, 1639, 1639, 1639, 2489, 2489,
+
+    1351, 2428, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    2428, 2428, 2428, 2428, 2428, 2428, 2428, 2428,
+    2428, 2428, 2428, 2428, 2428, 2428, 2428, 2428,
+    2428, 2428, 2428, 2428, 2428, 2428, 2428, 2428,
+    2428, 2428, 2428, 2428, 2428, 2428, 2428, 2428,
+    2428, 2428, 2428, 2428, 2428, 2428, 2428, 2428,
+    2428, 2428, 2428, 2428, 2428, 2428, 2428, 2428,
+    2428, 2428, 2428, 2428, 2428, 2428, 2428, 2428,
+    2428, 2428, 2428, 2428, 2428, 2428, 2428, 2428,
+    2428, 2428, 2428, 2428, 2428, 2428, 2428, 2428,
+    2428, 2428, 2428, 2428, 2428, 2428, 2428, 2428,
+    2428, 2428, 2428, 2428, 2428, 2428, 2428, 2428,
+    2428, 2428, 2428, 2428, 2428, 2428, 2428, 2428,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    2493, 2493, 2493, 2493, 2493, 2493, 2493, 2493,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+    1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
+    2494, 2494, 2494, 2494, 2494, 2494, 2489, 2489
+};
+static const unsigned short specialCaseMap[] = {
+    0x0, // placeholder
+    0x1, 0x2c65,
+    0x1, 0x2c66,
+    0x1, 0x2c7e,
+    0x1, 0x2c7f,
+    0x1, 0x2c6f,
+    0x1, 0x2c6d,
+    0x1, 0x2c70,
+    0x1, 0xa7ab,
+    0x1, 0xa7ac,
+    0x1, 0xa78d,
+    0x1, 0xa7aa,
+    0x1, 0x2c62,
+    0x1, 0xa7ad,
+    0x1, 0x2c6e,
+    0x1, 0x2c64,
+    0x1, 0xa7b1,
+    0x1, 0xa7b2,
+    0x1, 0xa7b0,
+    0x1, 0xab70,
+    0x1, 0xab71,
+    0x1, 0xab72,
+    0x1, 0xab73,
+    0x1, 0xab74,
+    0x1, 0xab75,
+    0x1, 0xab76,
+    0x1, 0xab77,
+    0x1, 0xab78,
+    0x1, 0xab79,
+    0x1, 0xab7a,
+    0x1, 0xab7b,
+    0x1, 0xab7c,
+    0x1, 0xab7d,
+    0x1, 0xab7e,
+    0x1, 0xab7f,
+    0x1, 0xab80,
+    0x1, 0xab81,
+    0x1, 0xab82,
+    0x1, 0xab83,
+    0x1, 0xab84,
+    0x1, 0xab85,
+    0x1, 0xab86,
+    0x1, 0xab87,
+    0x1, 0xab88,
+    0x1, 0xab89,
+    0x1, 0xab8a,
+    0x1, 0xab8b,
+    0x1, 0xab8c,
+    0x1, 0xab8d,
+    0x1, 0xab8e,
+    0x1, 0xab8f,
+    0x1, 0xab90,
+    0x1, 0xab91,
+    0x1, 0xab92,
+    0x1, 0xab93,
+    0x1, 0xab94,
+    0x1, 0xab95,
+    0x1, 0xab96,
+    0x1, 0xab97,
+    0x1, 0xab98,
+    0x1, 0xab99,
+    0x1, 0xab9a,
+    0x1, 0xab9b,
+    0x1, 0xab9c,
+    0x1, 0xab9d,
+    0x1, 0xab9e,
+    0x1, 0xab9f,
+    0x1, 0xaba0,
+    0x1, 0xaba1,
+    0x1, 0xaba2,
+    0x1, 0xaba3,
+    0x1, 0xaba4,
+    0x1, 0xaba5,
+    0x1, 0xaba6,
+    0x1, 0xaba7,
+    0x1, 0xaba8,
+    0x1, 0xaba9,
+    0x1, 0xabaa,
+    0x1, 0xabab,
+    0x1, 0xabac,
+    0x1, 0xabad,
+    0x1, 0xabae,
+    0x1, 0xabaf,
+    0x1, 0xabb0,
+    0x1, 0xabb1,
+    0x1, 0xabb2,
+    0x1, 0xabb3,
+    0x1, 0xabb4,
+    0x1, 0xabb5,
+    0x1, 0xabb6,
+    0x1, 0xabb7,
+    0x1, 0xabb8,
+    0x1, 0xabb9,
+    0x1, 0xabba,
+    0x1, 0xabbb,
+    0x1, 0xabbc,
+    0x1, 0xabbd,
+    0x1, 0xabbe,
+    0x1, 0xabbf,
+    0x1, 0xa77d,
+    0x1, 0x6b,
+    0x1, 0xe5,
+    0x1, 0x26b,
+    0x1, 0x27d,
+    0x1, 0x23a,
+    0x1, 0x23e,
+    0x1, 0x251,
+    0x1, 0x271,
+    0x1, 0x250,
+    0x1, 0x252,
+    0x1, 0x23f,
+    0x1, 0x240,
+    0x1, 0x1d79,
+    0x1, 0x265,
+    0x1, 0x266,
+    0x1, 0x25c,
+    0x1, 0x261,
+    0x1, 0x26c,
+    0x1, 0x29e,
+    0x1, 0x287,
+    0x1, 0x29d,
+    0x1, 0x13a0,
+    0x1, 0x13a1,
+    0x1, 0x13a2,
+    0x1, 0x13a3,
+    0x1, 0x13a4,
+    0x1, 0x13a5,
+    0x1, 0x13a6,
+    0x1, 0x13a7,
+    0x1, 0x13a8,
+    0x1, 0x13a9,
+    0x1, 0x13aa,
+    0x1, 0x13ab,
+    0x1, 0x13ac,
+    0x1, 0x13ad,
+    0x1, 0x13ae,
+    0x1, 0x13af,
+    0x1, 0x13b0,
+    0x1, 0x13b1,
+    0x1, 0x13b2,
+    0x1, 0x13b3,
+    0x1, 0x13b4,
+    0x1, 0x13b5,
+    0x1, 0x13b6,
+    0x1, 0x13b7,
+    0x1, 0x13b8,
+    0x1, 0x13b9,
+    0x1, 0x13ba,
+    0x1, 0x13bb,
+    0x1, 0x13bc,
+    0x1, 0x13bd,
+    0x1, 0x13be,
+    0x1, 0x13bf,
+    0x1, 0x13c0,
+    0x1, 0x13c1,
+    0x1, 0x13c2,
+    0x1, 0x13c3,
+    0x1, 0x13c4,
+    0x1, 0x13c5,
+    0x1, 0x13c6,
+    0x1, 0x13c7,
+    0x1, 0x13c8,
+    0x1, 0x13c9,
+    0x1, 0x13ca,
+    0x1, 0x13cb,
+    0x1, 0x13cc,
+    0x1, 0x13cd,
+    0x1, 0x13ce,
+    0x1, 0x13cf,
+    0x1, 0x13d0,
+    0x1, 0x13d1,
+    0x1, 0x13d2,
+    0x1, 0x13d3,
+    0x1, 0x13d4,
+    0x1, 0x13d5,
+    0x1, 0x13d6,
+    0x1, 0x13d7,
+    0x1, 0x13d8,
+    0x1, 0x13d9,
+    0x1, 0x13da,
+    0x1, 0x13db,
+    0x1, 0x13dc,
+    0x1, 0x13dd,
+    0x1, 0x13de,
+    0x1, 0x13df,
+    0x1, 0x13e0,
+    0x1, 0x13e1,
+    0x1, 0x13e2,
+    0x1, 0x13e3,
+    0x1, 0x13e4,
+    0x1, 0x13e5,
+    0x1, 0x13e6,
+    0x1, 0x13e7,
+    0x1, 0x13e8,
+    0x1, 0x13e9,
+    0x1, 0x13ea,
+    0x1, 0x13eb,
+    0x1, 0x13ec,
+    0x1, 0x13ed,
+    0x1, 0x13ee,
+    0x1, 0x13ef,
+    0x2, 0x53, 0x73,
+    0x2, 0x53, 0x53,
+    0x2, 0x69, 0x307,
+    0x2, 0x46, 0x66,
+    0x2, 0x46, 0x46,
+    0x2, 0x46, 0x69,
+    0x2, 0x46, 0x49,
+    0x2, 0x46, 0x6c,
+    0x2, 0x46, 0x4c,
+    0x3, 0x46, 0x66, 0x69,
+    0x3, 0x46, 0x46, 0x49,
+    0x3, 0x46, 0x66, 0x6c,
+    0x3, 0x46, 0x46, 0x4c,
+    0x2, 0x53, 0x74,
+    0x2, 0x53, 0x54,
+    0x2, 0x535, 0x582,
+    0x2, 0x535, 0x552,
+    0x2, 0x544, 0x576,
+    0x2, 0x544, 0x546,
+    0x2, 0x544, 0x565,
+    0x2, 0x544, 0x535,
+    0x2, 0x544, 0x56b,
+    0x2, 0x544, 0x53b,
+    0x2, 0x54e, 0x576,
+    0x2, 0x54e, 0x546,
+    0x2, 0x544, 0x56d,
+    0x2, 0x544, 0x53d,
+    0x2, 0x2bc, 0x4e,
+    0x3, 0x399, 0x308, 0x301,
+    0x3, 0x3a5, 0x308, 0x301,
+    0x2, 0x4a, 0x30c,
+    0x2, 0x48, 0x331,
+    0x2, 0x54, 0x308,
+    0x2, 0x57, 0x30a,
+    0x2, 0x59, 0x30a,
+    0x2, 0x41, 0x2be,
+    0x2, 0x3a5, 0x313,
+    0x3, 0x3a5, 0x313, 0x300,
+    0x3, 0x3a5, 0x313, 0x301,
+    0x3, 0x3a5, 0x313, 0x342,
+    0x2, 0x391, 0x342,
+    0x2, 0x397, 0x342,
+    0x3, 0x399, 0x308, 0x300,
+    0x2, 0x399, 0x342,
+    0x3, 0x399, 0x308, 0x342,
+    0x3, 0x3a5, 0x308, 0x300,
+    0x2, 0x3a1, 0x313,
+    0x2, 0x3a5, 0x342,
+    0x3, 0x3a5, 0x308, 0x342,
+    0x2, 0x3a9, 0x342,
+    0x2, 0x1f08, 0x399,
+    0x2, 0x1f09, 0x399,
+    0x2, 0x1f0a, 0x399,
+    0x2, 0x1f0b, 0x399,
+    0x2, 0x1f0c, 0x399,
+    0x2, 0x1f0d, 0x399,
+    0x2, 0x1f0e, 0x399,
+    0x2, 0x1f0f, 0x399,
+    0x2, 0x1f28, 0x399,
+    0x2, 0x1f29, 0x399,
+    0x2, 0x1f2a, 0x399,
+    0x2, 0x1f2b, 0x399,
+    0x2, 0x1f2c, 0x399,
+    0x2, 0x1f2d, 0x399,
+    0x2, 0x1f2e, 0x399,
+    0x2, 0x1f2f, 0x399,
+    0x2, 0x1f68, 0x399,
+    0x2, 0x1f69, 0x399,
+    0x2, 0x1f6a, 0x399,
+    0x2, 0x1f6b, 0x399,
+    0x2, 0x1f6c, 0x399,
+    0x2, 0x1f6d, 0x399,
+    0x2, 0x1f6e, 0x399,
+    0x2, 0x1f6f, 0x399,
+    0x2, 0x391, 0x399,
+    0x2, 0x397, 0x399,
+    0x2, 0x3a9, 0x399,
+    0x2, 0x1fba, 0x345,
+    0x2, 0x1fba, 0x399,
+    0x2, 0x386, 0x345,
+    0x2, 0x386, 0x399,
+    0x2, 0x1fca, 0x345,
+    0x2, 0x1fca, 0x399,
+    0x2, 0x389, 0x345,
+    0x2, 0x389, 0x399,
+    0x2, 0x1ffa, 0x345,
+    0x2, 0x1ffa, 0x399,
+    0x2, 0x38f, 0x345,
+    0x2, 0x38f, 0x399,
+    0x3, 0x391, 0x342, 0x345,
+    0x3, 0x391, 0x342, 0x399,
+    0x3, 0x397, 0x342, 0x345,
+    0x3, 0x397, 0x342, 0x399,
+    0x3, 0x3a9, 0x342, 0x345,
+    0x3, 0x3a9, 0x342, 0x399
+};
+
+#define GET_PROP_INDEX(ucs4) \
+       (ucs4 < 0x11000 \
+        ? (uc_property_trie[uc_property_trie[ucs4>>5] + (ucs4 & 0x1f)]) \
+        : (uc_property_trie[uc_property_trie[((ucs4 - 0x11000)>>8) + 0x880] + (ucs4 & 0xff)]))
+
+#define GET_PROP_INDEX_UCS2(ucs2) \
+       (uc_property_trie[uc_property_trie[ucs2>>5] + (ucs2 & 0x1f)])
+
+static const QUnicodeTables::Properties uc_properties[] = {
+    { 9, 18, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 21, 2 },
+    { 9, 8, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 5, 17, 2 },
+    { 9, 7, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 2, 2, 34, 2 },
+    { 9, 8, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 3, 5, 35, 2 },
+    { 9, 9, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 3, 5, 35, 2 },
+    { 9, 7, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 33, 2 },
+    { 9, 7, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 21, 2 },
+    { 9, 8, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 21, 2 },
+    { 6, 9, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 32, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 6, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 10, 13, 3, 2 },
+    { 25, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 27, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 2 },
+    { 25, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 9, 13, 3, 2 },
+    { 21, 10, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 13, 0, 2 },
+    { 22, 10, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 13, 2, 2 },
+    { 26, 3, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 2 },
+    { 25, 6, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 13, 11, 8, 2 },
+    { 20, 3, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 16, 2 },
+    { 25, 6, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 13, 10, 8, 2 },
+    { 25, 6, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 2 },
+    { 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 2 },
+    { 3, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 2 },
+    { 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 2 },
+    { 3, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 2 },
+    { 3, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 2 },
+    { 3, 2, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 2 },
+    { 3, 2, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 2 },
+    { 3, 2, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 2 },
+    { 3, 2, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 2 },
+    { 3, 2, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 2 },
+    { 25, 6, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 8, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 13, 0, 8, 2 },
+    { 26, 10, 0, 0, -1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, -2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 14, 0, 0, 0, -1, 0, 0, 32, 0, 0, 0, 0, 0, 32, 1, 0, 0, 8, 7, 12, 3 },
+    { 21, 10, 0, 0, -1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 13, 0, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 2 },
+    { 22, 10, 0, 0, -1, -2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 13, 2, 2 },
+    { 28, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 19, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 15, 0, 12, 2 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -32, 0, -32, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 26, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 17, 2 },
+    { 22, 10, 0, 0, -1, -2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 13, 1, 2 },
+    { 9, 7, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 3, 3, 35, 2 },
+    { 6, 6, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 5, 4, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2 },
+    { 27, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 28, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 8, 6, 12, 3 },
+    { 23, 10, 0, 0, -1, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 13, 3, 2 },
+    { 10, 18, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 4, 17, 2 },
+    { 29, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 2 },
+    { 26, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 2 },
+    { 5, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 5, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 28, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 18, 2 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 743, 0, 743, 0, 775, 1, 80, 0, 8, 6, 12, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 12, 0, 12, 2 },
+    { 5, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 24, 10, 0, 0, -1, -16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 13, 3, 2 },
+    { 5, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 14, 0, 0, 0, -1, 0, 0, 32, 0, 0, 0, 0, 0, 32, 1, 17, 0, 8, 7, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 404, 1, 401, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -32, 0, -32, 0, 0, 1, 17, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 121, 0, 121, 0, 0, 1, 17, 0, 8, 6, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 17, 0, 8, 7, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 1, 17, 0, 8, 6, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 8, 7, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 1, 407, 0, 0, 0, 0, 0, 0, 1, 17, 0, 8, 7, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -232, 0, -232, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 80, 0, 8, 7, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 1, 80, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 486, 1, 486, 0, 0, 1, 80, 0, 8, 6, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, -121, 0, 0, 0, 0, 0, -121, 1, 17, 0, 8, 7, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -300, 0, -300, 0, -268, 1, 80, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 195, 0, 195, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 210, 0, 0, 0, 0, 0, 210, 1, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 206, 0, 0, 0, 0, 0, 206, 1, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 205, 0, 0, 0, 0, 0, 205, 1, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 79, 0, 0, 0, 0, 0, 79, 1, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 202, 0, 0, 0, 0, 0, 202, 1, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 203, 0, 0, 0, 0, 0, 203, 1, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 207, 0, 0, 0, 0, 0, 207, 1, 0, 0, 8, 7, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 97, 0, 97, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 211, 0, 0, 0, 0, 0, 211, 1, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 209, 0, 0, 0, 0, 0, 209, 1, 0, 0, 8, 7, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 163, 0, 163, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 213, 0, 0, 0, 0, 0, 213, 1, 0, 0, 8, 7, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 130, 0, 130, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 214, 0, 0, 0, 0, 0, 214, 1, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 218, 0, 0, 0, 0, 0, 218, 1, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 217, 0, 0, 0, 0, 0, 217, 1, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 219, 0, 0, 0, 0, 0, 219, 1, 0, 0, 8, 7, 12, 3 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 8, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 56, 0, 56, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 2, 0, 0, 0, 1, 0, 2, 1, 80, 0, 8, 7, 12, 3 },
+    { 16, 0, 0, 0, -1, 0, 0, 1, 0, -1, 0, 0, 0, 1, 1, 80, 0, 8, 7, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -2, 0, -1, 0, 0, 1, 80, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -79, 0, -79, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 497, 1, 497, 0, 0, 1, 17, 0, 8, 6, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, -97, 0, 0, 0, 0, 0, -97, 4, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, -56, 0, 0, 0, 0, 0, -56, 4, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 4, 17, 0, 8, 7, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 4, 17, 0, 8, 6, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 4, 0, 0, 8, 7, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 4, 0, 0, 8, 6, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, -130, 0, 0, 0, 0, 0, -130, 6, 0, 0, 8, 7, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 6, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 8, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 8, 0, 0, 8, 7, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 8, 0, 0, 8, 6, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, -163, 0, 0, 0, 0, 0, -163, 8, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 1, 3, 0, 0, 0, 0, 1, 3, 8, 0, 0, 8, 7, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 5, 1, 5, 0, 0, 8, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 7, 1, 7, 0, 0, 8, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 9, 0, 0, 8, 6, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, -195, 0, 0, 0, 0, 0, -195, 9, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 69, 0, 0, 0, 0, 0, 69, 9, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 71, 0, 0, 0, 0, 0, 71, 9, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 9, 0, 0, 8, 7, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 9, 1, 9, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 11, 1, 11, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 13, 1, 13, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -210, 0, -210, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -206, 0, -206, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -205, 0, -205, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -202, 0, -202, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -203, 0, -203, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 15, 1, 15, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 17, 1, 17, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -207, 0, -207, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 19, 1, 19, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 21, 1, 21, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -209, 0, -209, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -211, 0, -211, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 23, 1, 23, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 25, 1, 25, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 27, 1, 27, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -213, 0, -213, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -214, 0, -214, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 29, 1, 29, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -218, 0, -218, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 31, 1, 31, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -69, 0, -69, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -217, 0, -217, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -71, 0, -71, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -219, 0, -219, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 33, 1, 33, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 35, 1, 35, 0, 0, 1, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 6, 12, 3 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 8, 6, 12, 3 },
+    { 17, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 8, 12, 2 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 8, 12, 2 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 6, 12, 2 },
+    { 17, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 8, 18, 2 },
+    { 28, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 12, 0, 12, 2 },
+    { 28, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 18, 2 },
+    { 28, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 36 },
+    { 17, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 8, 12, 2 },
+    { 28, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 2 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 8, 12, 2 },
+    { 28, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 12, 2 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 204, 4, 4, 4, 21, 1 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 232, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 216, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 204, 4, 4, 4, 21, 1 },
+    { 0, 17, 202, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 204, 4, 4, 4, 21, 1 },
+    { 0, 17, 202, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 204, 4, 4, 4, 21, 1 },
+    { 0, 17, 1, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 1, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 204, 4, 4, 4, 21, 1 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 85, 4, 4, 4, 21, 1 },
+    { 0, 17, 240, 5, -1, 0, 0, 0, 0, 84, 0, 84, 0, 116, 1, 204, 4, 4, 4, 21, 1 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 4, 4, 4, 4, 1 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 232, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 233, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 4, 4, 4, 1 },
+    { 0, 17, 234, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 4, 4, 4, 1 },
+    { 0, 17, 233, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 4, 4, 4, 1 },
+    { 0, 17, 234, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 4, 1 },
+    { 0, 17, 233, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 4, 1 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 4, 4, 4, 21, 1 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 10, 0, 0, 8, 7, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 10, 0, 0, 8, 6, 12, 4 },
+    { 17, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 85, 0, 8, 8, 12, 2 },
+    { 28, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 4 },
+    { 13, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 130, 0, 130, 0, 0, 9, 0, 0, 8, 6, 12, 4 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 85, 0, 13, 0, 8, 2 },
+    { 14, 0, 0, 0, -1, 0, 0, 116, 0, 0, 0, 0, 0, 116, 16, 0, 0, 8, 7, 12, 4 },
+    { 28, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 4 },
+    { 28, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 81, 0, 0, 0, 12, 2 },
+    { 14, 0, 0, 0, -1, 0, 0, 38, 0, 0, 0, 0, 0, 38, 1, 17, 0, 8, 7, 12, 4 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 85, 0, 12, 0, 12, 2 },
+    { 14, 0, 0, 0, -1, 0, 0, 37, 0, 0, 0, 0, 0, 37, 1, 17, 0, 8, 7, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, 64, 0, 0, 0, 0, 0, 64, 1, 17, 0, 8, 7, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, 63, 0, 0, 0, 0, 0, 63, 1, 17, 0, 8, 7, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 489, 1, 489, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, 32, 0, 0, 0, 0, 0, 32, 1, 0, 0, 8, 7, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, 32, 0, 0, 0, 0, 0, 32, 1, 17, 0, 8, 7, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -38, 0, -38, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -37, 0, -37, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 493, 1, 493, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -32, 0, -32, 0, 0, 1, 0, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -31, 0, -31, 0, 1, 1, 0, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -32, 0, -32, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -64, 0, -64, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -63, 0, -63, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, 8, 0, 0, 0, 0, 0, 8, 10, 0, 0, 8, 7, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -62, 0, -62, 0, -30, 1, 80, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -57, 0, -57, 0, -25, 1, 80, 0, 8, 6, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 8, 7, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 81, 0, 8, 7, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -47, 0, -47, 0, -15, 1, 80, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -54, 0, -54, 0, -22, 1, 80, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -8, 0, -8, 0, 0, 4, 0, 0, 8, 6, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 6, 0, 0, 8, 7, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 6, 0, 0, 8, 6, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 8, 7, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 4, 0, 0, 8, 6, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 8, 7, 12, 46 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 1, 0, 0, 8, 6, 12, 46 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -86, 0, -86, 0, -54, 1, 80, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -80, 0, -80, 0, -48, 1, 80, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 7, 0, 7, 0, 0, 1, 80, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -116, 0, -116, 0, 0, 1, 0, 0, 8, 6, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, -60, 0, 0, 0, 0, 0, -60, 5, 80, 0, 8, 7, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -96, 0, -96, 0, -64, 5, 80, 0, 8, 6, 12, 4 },
+    { 26, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 7, 0, 0, 8, 7, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 7, 0, 0, 8, 6, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, -7, 0, 0, 0, 0, 0, -7, 7, 80, 0, 8, 7, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 6, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, -130, 0, 0, 0, 0, 0, -130, 8, 0, 0, 8, 7, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, 80, 0, 0, 0, 0, 0, 80, 4, 17, 0, 8, 7, 12, 5 },
+    { 14, 0, 0, 0, -1, 0, 0, 80, 0, 0, 0, 0, 0, 80, 1, 17, 0, 8, 7, 12, 5 },
+    { 14, 0, 0, 0, -1, 0, 0, 80, 0, 0, 0, 0, 0, 80, 1, 0, 0, 8, 7, 12, 5 },
+    { 14, 0, 0, 0, -1, 0, 0, 32, 0, 0, 0, 0, 0, 32, 1, 0, 0, 8, 7, 12, 5 },
+    { 14, 0, 0, 0, -1, 0, 0, 32, 0, 0, 0, 0, 0, 32, 1, 17, 0, 8, 7, 12, 5 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -32, 0, -32, 0, 0, 1, 0, 0, 8, 6, 12, 5 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -32, 0, -32, 0, 0, 1, 17, 0, 8, 6, 12, 5 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -80, 0, -80, 0, 0, 4, 17, 0, 8, 6, 12, 5 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -80, 0, -80, 0, 0, 1, 17, 0, 8, 6, 12, 5 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -80, 0, -80, 0, 0, 1, 0, 0, 8, 6, 12, 5 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 8, 7, 12, 5 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 1, 0, 0, 8, 6, 12, 5 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 17, 0, 8, 7, 12, 5 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 1, 17, 0, 8, 6, 12, 5 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 5 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 5 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 21, 5 },
+    { 2, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 21, 5 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 6, 0, 0, 8, 7, 12, 5 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 6, 0, 0, 8, 6, 12, 5 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 4, 0, 0, 8, 7, 12, 5 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 4, 0, 0, 8, 6, 12, 5 },
+    { 14, 0, 0, 0, -1, 0, 0, 15, 0, 0, 0, 0, 0, 15, 1, 0, 0, 8, 7, 12, 5 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -15, 0, -15, 0, 0, 9, 0, 0, 8, 6, 12, 5 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 4, 17, 0, 8, 7, 12, 5 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 4, 17, 0, 8, 6, 12, 5 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 8, 0, 0, 8, 7, 12, 5 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 8, 0, 0, 8, 6, 12, 5 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 9, 0, 0, 8, 7, 12, 5 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 9, 0, 0, 8, 6, 12, 5 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 10, 0, 0, 8, 7, 12, 5 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 10, 0, 0, 8, 6, 12, 5 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 11, 0, 0, 8, 7, 12, 5 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 11, 0, 0, 8, 6, 12, 5 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 12, 0, 0, 8, 7, 12, 5 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 12, 0, 0, 8, 6, 12, 5 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 16, 0, 0, 8, 7, 12, 5 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 16, 0, 0, 8, 6, 12, 5 },
+    { 14, 0, 0, 0, -1, 0, 0, 48, 0, 0, 0, 0, 0, 48, 1, 0, 0, 8, 7, 12, 6 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 8, 12, 6 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 6 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 12, 6 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -48, 0, -48, 0, 0, 1, 0, 0, 8, 6, 12, 6 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 453, 1, 450, 0, 0, 1, 80, 0, 8, 6, 12, 6 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 13, 12, 8, 2 },
+    { 20, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 17, 6 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 6 },
+    { 27, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 9, 6 },
+    { 13, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 4, 4, 21, 7 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 4, 4, 21, 7 },
+    { 0, 17, 222, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 4, 4, 21, 7 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 4, 4, 21, 7 },
+    { 0, 17, 228, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 4, 4, 21, 7 },
+    { 0, 17, 10, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 7 },
+    { 0, 17, 11, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 7 },
+    { 0, 17, 12, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 7 },
+    { 0, 17, 13, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 7 },
+    { 0, 17, 14, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 7 },
+    { 0, 17, 15, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 7 },
+    { 0, 17, 16, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 7 },
+    { 0, 17, 17, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 7 },
+    { 0, 17, 18, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 7 },
+    { 0, 17, 19, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 7 },
+    { 0, 17, 19, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 4, 4, 4, 21, 7 },
+    { 0, 17, 20, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 7 },
+    { 0, 17, 21, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 7 },
+    { 0, 17, 22, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 7 },
+    { 20, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 17, 7 },
+    { 0, 17, 23, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 7 },
+    { 25, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 7 },
+    { 0, 17, 24, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 7 },
+    { 0, 17, 25, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 7 },
+    { 25, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 6, 7 },
+    { 0, 17, 18, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 4, 4, 21, 7 },
+    { 18, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 7, 8, 13, 7 },
+    { 25, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 8, 12, 7 },
+    { 25, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 12, 0, 12, 7 },
+    { 10, 5, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 3, 4, 4, 12, 8 },
+    { 10, 5, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 3, 4, 4, 12, 8 },
+    { 10, 5, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 3, 4, 4, 12, 2 },
+    { 26, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 12, 8 },
+    { 26, 13, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 12, 8 },
+    { 25, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 10, 8 },
+    { 27, 13, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 10, 8 },
+    { 25, 13, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 13, 11, 8, 8 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 12, 8 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 4, 4, 21, 8 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 21, 8 },
+    { 0, 17, 30, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 21, 8 },
+    { 0, 17, 31, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 21, 8 },
+    { 0, 17, 32, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 21, 8 },
+    { 25, 13, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 2 },
+    { 10, 13, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 3, 4, 4, 21, 2 },
+    { 13, 13, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0 },
+    { 25, 13, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 6, 8 },
+    { 25, 13, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 6, 2 },
+    { 18, 13, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 8, 8, 12, 8 },
+    { 18, 13, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 8, 12, 8 },
+    { 18, 13, 0, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 0, 8, 8, 12, 8 },
+    { 18, 13, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 0, 8, 8, 12, 8 },
+    { 18, 13, 0, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 8, 12, 8 },
+    { 18, 13, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 8, 12, 8 },
+    { 18, 13, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 8 },
+    { 17, 13, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 8, 12, 2 },
+    { 0, 17, 27, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 28, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 29, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 30, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 31, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 32, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 33, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 34, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 204, 4, 4, 4, 21, 1 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 204, 4, 4, 4, 21, 1 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 4, 4, 21, 8 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 4, 4, 21, 8 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 4, 4, 21, 8 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 4, 4, 4, 21, 8 },
+    { 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 8 },
+    { 3, 5, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 8 },
+    { 3, 5, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 8 },
+    { 3, 5, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 8 },
+    { 3, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 8 },
+    { 3, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 8 },
+    { 3, 5, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 8 },
+    { 3, 5, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 8 },
+    { 3, 5, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 8 },
+    { 3, 5, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 8 },
+    { 25, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 8 },
+    { 25, 5, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 8 },
+    { 25, 5, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 13, 9, 11, 8 },
+    { 25, 13, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 8 },
+    { 18, 13, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 8, 8, 12, 8 },
+    { 0, 17, 35, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 1 },
+    { 18, 13, 0, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 8, 8, 12, 8 },
+    { 18, 13, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 8, 8, 12, 8 },
+    { 18, 13, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 8, 12, 8 },
+    { 18, 13, 0, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 8, 12, 8 },
+    { 25, 13, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 6, 8 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 8 },
+    { 10, 5, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 4, 12, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 8 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 8 },
+    { 17, 13, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 8, 12, 8 },
+    { 18, 13, 0, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 8, 8, 12, 8 },
+    { 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 8 },
+    { 3, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 8 },
+    { 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 8 },
+    { 3, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 8 },
+    { 3, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 8 },
+    { 3, 2, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 8 },
+    { 3, 2, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 8 },
+    { 3, 2, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 8 },
+    { 3, 2, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 8 },
+    { 3, 2, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 8 },
+    { 29, 13, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 8 },
+    { 18, 13, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 8, 8, 12, 8 },
+    { 25, 13, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 12, 12, 9 },
+    { 25, 13, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 9 },
+    { 10, 13, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 3, 4, 4, 12, 9 },
+    { 18, 13, 0, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 8, 12, 9 },
+    { 0, 17, 36, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 21, 9 },
+    { 18, 13, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 8, 12, 9 },
+    { 18, 13, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 8, 8, 12, 9 },
+    { 18, 13, 0, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 8, 8, 12, 9 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 21, 9 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 21, 9 },
+    { 18, 13, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 8, 12, 8 },
+    { 18, 13, 0, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 8, 12, 8 },
+    { 18, 13, 0, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 8 },
+    { 18, 13, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 8, 12, 10 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 21, 10 },
+    { 18, 13, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 8, 8, 12, 10 },
+    { 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 14, 9, 11, 66 },
+    { 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 14, 9, 11, 66 },
+    { 3, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 14, 9, 11, 66 },
+    { 3, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 14, 9, 11, 66 },
+    { 3, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 14, 9, 11, 66 },
+    { 3, 1, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 14, 9, 11, 66 },
+    { 3, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 14, 9, 11, 66 },
+    { 3, 1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 14, 9, 11, 66 },
+    { 3, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 14, 9, 11, 66 },
+    { 3, 1, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 14, 9, 11, 66 },
+    { 18, 1, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 8, 8, 12, 66 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 4, 4, 4, 21, 66 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 4, 4, 4, 21, 66 },
+    { 17, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 8, 8, 12, 66 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 12, 66 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 12, 66 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 13, 11, 8, 66 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 12, 6, 66 },
+    { 17, 1, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 8, 8, 12, 66 },
+    { 18, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 8, 8, 12, 82 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 4, 4, 21, 82 },
+    { 17, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 8, 8, 12, 82 },
+    { 25, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 82 },
+    { 18, 1, 0, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 8, 8, 12, 95 },
+    { 18, 1, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 8, 8, 12, 95 },
+    { 18, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 8, 8, 12, 95 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 4, 4, 4, 21, 95 },
+    { 25, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 95 },
+    { 18, 13, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 8, 8, 12, 8 },
+    { 18, 13, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 8 },
+    { 18, 13, 0, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 8, 8, 12, 8 },
+    { 18, 13, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 8 },
+    { 18, 13, 0, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 8 },
+    { 18, 13, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 8, 8, 12, 8 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 4, 4, 4, 21, 8 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 4, 4, 21, 8 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 4, 4, 21, 8 },
+    { 0, 17, 27, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 4, 4, 21, 8 },
+    { 0, 17, 28, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 4, 4, 21, 8 },
+    { 0, 17, 29, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 4, 4, 21, 8 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 8 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 4, 4, 21, 11 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 11 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 4, 4, 21, 11 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 8, 8, 12, 11 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 8, 12, 11 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 0, 8, 8, 12, 11 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 4, 4, 4, 21, 11 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 7, 4, 4, 21, 11 },
+    { 0, 17, 7, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 204, 4, 4, 4, 21, 11 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 11 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 7, 4, 4, 21, 11 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 11 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 85, 0, 8, 8, 12, 11 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 17, 2 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 11 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 11 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 11 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 11 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 11 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 11 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 11 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 11 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 11 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 11 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 11 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 11 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 11 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 8, 8, 12, 11 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 11 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 8, 8, 12, 11 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 8, 8, 12, 11 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 8, 12, 11 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 12 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 12 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 4, 4, 21, 12 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 8, 12, 12 },
+    { 0, 17, 7, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 12 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 8, 8, 12, 12 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 204, 4, 4, 4, 21, 12 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 7, 4, 4, 21, 12 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 12 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 8, 12, 12 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 85, 0, 8, 8, 12, 12 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 12 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 12 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 12 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 12 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 12 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 12 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 12 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 12 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 12 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 12 },
+    { 27, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 12 },
+    { 5, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 12 },
+    { 5, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 12 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 12 },
+    { 27, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 9, 12 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 4, 4, 21, 13 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 13 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 4, 4, 21, 13 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 8, 12, 13 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 85, 0, 8, 8, 12, 13 },
+    { 0, 17, 7, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 13 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 4, 4, 21, 13 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 13 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 21, 13 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 13 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 13 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 13 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 13 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 13 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 13 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 13 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 13 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 13 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 13 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 14 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 4, 4, 21, 14 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 8, 12, 14 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 8, 8, 12, 14 },
+    { 0, 17, 7, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 14 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 14 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 4, 4, 21, 14 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 14 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 14 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 14 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 14 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 14 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 14 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 14 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 14 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 14 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 14 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 12, 14 },
+    { 27, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 9, 14 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 8, 8, 12, 14 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 15 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 4, 4, 21, 15 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 8, 12, 15 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 8, 8, 12, 15 },
+    { 0, 17, 7, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 15 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 204, 4, 4, 4, 21, 15 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 21, 15 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 7, 4, 4, 21, 15 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 15 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 204, 4, 4, 4, 21, 15 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 85, 0, 8, 8, 12, 15 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 15 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 15 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 15 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 15 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 15 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 15 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 15 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 15 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 15 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 15 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 15 },
+    { 5, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 15 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 16 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 8, 12, 16 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 0, 8, 8, 12, 16 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 8, 12, 16 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 204, 4, 4, 4, 21, 16 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 4, 4, 21, 16 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 7, 4, 4, 21, 16 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 16 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 16 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 14, 9, 11, 16 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 16 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 16 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 16 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 16 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 16 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 16 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 16 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 16 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 16 },
+    { 5, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 16 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 12, 16 },
+    { 27, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 9, 16 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 17 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 4, 4, 21, 17 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 8, 12, 17 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 17 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 17 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 17 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 4, 4, 4, 21, 17 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 17 },
+    { 0, 17, 84, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 17 },
+    { 0, 17, 91, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 204, 4, 4, 4, 21, 17 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 8, 8, 12, 17 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 21, 17 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 17 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 17 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 17 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 17 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 17 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 17 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 17 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 17 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 17 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 17 },
+    { 5, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 12, 17 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 12, 17 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 18 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 4, 4, 21, 18 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 8, 12, 18 },
+    { 0, 17, 7, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 4, 4, 21, 18 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 8, 8, 12, 18 },
+    { 0, 0, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 18 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 7, 4, 4, 21, 18 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 204, 4, 4, 4, 21, 18 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 18 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 18 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 4, 4, 4, 21, 18 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 18 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 18 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 18 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 18 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 18 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 18 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 18 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 18 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 18 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 18 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 8, 8, 12, 18 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 19 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 4, 4, 21, 19 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 8, 12, 19 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 8, 8, 12, 19 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 19 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 204, 4, 4, 4, 21, 19 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 19 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 21, 19 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 7, 4, 4, 21, 19 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 19 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 8, 8, 12, 19 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 19 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 19 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 19 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 19 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 19 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 19 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 19 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 19 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 19 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 19 },
+    { 5, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 12, 19 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 10, 19 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 4, 4, 21, 20 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 8, 12, 20 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 204, 4, 4, 4, 21, 20 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 204, 4, 4, 4, 21, 20 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 21, 20 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 17, 7, 4, 4, 21, 20 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 20 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 20 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 20 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 20 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 20 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 20 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 20 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 20 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 20 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 20 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 20 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 30, 21 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 30, 21 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 7, 0, 8, 30, 21 },
+    { 0, 17, 103, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 30, 21 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 30, 21 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 30, 21 },
+    { 0, 17, 107, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 30, 21 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 21 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 21 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 21 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 21 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 21 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 21 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 21 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 21 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 21 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 21 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 21 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 17, 21 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 30, 22 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 30, 22 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 7, 0, 8, 30, 22 },
+    { 0, 17, 118, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 30, 22 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 30, 22 },
+    { 0, 17, 122, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 30, 22 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 22 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 22 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 22 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 22 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 22 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 22 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 22 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 22 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 22 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 9, 11, 22 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 8, 30, 22 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 8, 30, 22 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 8, 8, 12, 23 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 18, 23 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 18, 23 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 12, 23 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 4, 23 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 17, 23 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 80, 0, 0, 0, 4, 23 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 6, 23 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 12, 23 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 4, 4, 21, 23 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 14, 9, 11, 23 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 14, 9, 11, 23 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 14, 9, 11, 23 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 14, 9, 11, 23 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 14, 9, 11, 23 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 14, 9, 11, 23 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 14, 9, 11, 23 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 14, 9, 11, 23 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 14, 9, 11, 23 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 14, 9, 11, 23 },
+    { 5, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 12, 23 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 17, 23 },
+    { 0, 17, 216, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 4, 4, 21, 23 },
+    { 21, 10, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 13, 0, 23 },
+    { 22, 10, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 13, 1, 23 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 4, 4, 21, 23 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 85, 0, 8, 8, 12, 23 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 8, 12, 23 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 23 },
+    { 0, 17, 129, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 4, 4, 21, 23 },
+    { 0, 17, 130, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 4, 4, 21, 23 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 85, 4, 4, 4, 21, 23 },
+    { 0, 17, 132, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 4, 4, 21, 23 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 80, 4, 4, 4, 21, 23 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 4, 4, 21, 23 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 4, 4, 17, 23 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 4, 4, 21, 23 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 4, 4, 21, 23 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 8, 8, 12, 23 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 4, 4, 4, 21, 23 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 21, 23 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 17, 23 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 23 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 21, 23 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 12, 23 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 18, 23 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 17, 23 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 18, 23 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 12, 23 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 2 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 4, 23 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 30, 24 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 8, 30, 24 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 17, 0, 0, 8, 30, 24 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 4, 4, 30, 24 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 4, 30, 24 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 30, 24 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 204, 4, 4, 4, 30, 24 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 4, 4, 30, 24 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 30, 24 },
+    { 0, 17, 7, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 30, 24 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 30, 24 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 30, 24 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 7, 4, 4, 30, 24 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 24 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 12, 17, 24 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 24 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 30, 24 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 24 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 4, 4, 30, 24 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 4, 4, 30, 24 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 30, 24 },
+    { 14, 0, 0, 0, -1, 0, 0, 7264, 0, 0, 0, 0, 0, 7264, 1, 0, 0, 8, 7, 12, 25 },
+    { 14, 0, 0, 0, -1, 0, 0, 7264, 0, 0, 0, 0, 0, 7264, 13, 0, 0, 8, 7, 12, 25 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 8, 12, 25 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 8, 8, 12, 25 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 8, 12, 25 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 80, 0, 8, 8, 12, 25 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 8, 8, 12, 25 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 8, 8, 25, 26 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 8, 8, 8, 25, 26 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 8, 8, 26, 26 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 204, 9, 8, 8, 26, 26 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 9, 8, 8, 26, 26 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 204, 10, 8, 8, 27, 26 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 8, 8, 27, 26 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 10, 8, 8, 27, 26 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 8, 12, 27 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 8, 12, 27 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 4, 4, 4, 21, 27 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 4, 4, 21, 27 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 12, 27 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 17, 27 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 12, 12, 27 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 27 },
+    { 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 27 },
+    { 5, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 27 },
+    { 5, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 27 },
+    { 5, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 27 },
+    { 5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 27 },
+    { 5, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 27 },
+    { 5, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 27 },
+    { 5, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 27 },
+    { 5, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 27 },
+    { 5, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 27 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 12, 27 },
+    { 14, 0, 0, 0, -1, 0, 1, 37, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 39, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 41, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 43, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 45, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 47, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 49, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 51, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 53, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 55, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 57, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 59, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 61, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 63, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 65, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 67, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 69, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 71, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 73, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 75, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 77, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 79, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 81, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 83, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 85, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 87, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 89, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 91, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 93, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 95, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 97, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 99, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 101, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 103, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 105, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 107, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 109, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 111, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 113, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 115, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 117, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 119, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 121, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 123, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 125, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 127, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 129, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 131, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 133, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 135, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 137, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 139, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 141, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 143, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 145, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 147, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 149, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 151, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 153, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 155, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 157, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 159, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 161, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 163, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 165, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 167, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 169, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 171, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 173, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 175, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 177, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 179, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 181, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 183, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 185, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 187, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 189, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 191, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 193, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 1, 195, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 7, 12, 28 },
+    { 14, 0, 0, 0, -1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 17, 0, 0, 8, 7, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -8, 0, -8, 0, -8, 17, 0, 0, 8, 6, 12, 28 },
+    { 20, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 17, 29 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 8, 12, 29 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 29 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 12, 12, 29 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 8, 8, 12, 29 },
+    { 6, 9, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 17, 30 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 8, 12, 30 },
+    { 21, 10, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 13, 0, 30 },
+    { 22, 10, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 13, 1, 30 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 8, 12, 31 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 17, 2 },
+    { 4, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 8, 12, 31 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 31 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 8, 8, 12, 42 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 4, 4, 4, 21, 42 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 4, 4, 4, 21, 42 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 8, 8, 12, 43 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 4, 4, 4, 21, 43 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 4, 4, 4, 21, 43 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 12, 17, 2 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 8, 8, 12, 44 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 4, 4, 4, 21, 44 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 8, 8, 12, 45 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 4, 4, 4, 21, 45 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 30, 32 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 30, 32 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 4, 4, 30, 32 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 30, 32 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 17, 32 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 5, 32 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 30, 32 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 32 },
+    { 27, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 9, 32 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 4, 4, 30, 32 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 32 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 32 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 32 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 32 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 32 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 32 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 32 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 32 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 32 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 32 },
+    { 5, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 12, 32 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 33 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 11, 6, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 12, 6, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 17, 33 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 17, 2 },
+    { 20, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 18, 33 },
+    { 25, 10, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 33 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 11, 6, 33 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 12, 6, 33 },
+    { 25, 10, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 33 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 21, 33 },
+    { 10, 18, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 3, 4, 4, 4, 33 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 33 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 33 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 33 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 33 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 33 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 33 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 33 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 33 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 33 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 9, 11, 33 },
+    { 18, 0, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 8, 12, 33 },
+    { 17, 0, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 8, 12, 33 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 8, 12, 33 },
+    { 0, 17, 228, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 21, 33 },
+    { 18, 0, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 33 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 8, 8, 12, 47 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 47 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 4, 4, 21, 47 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 4, 4, 21, 47 },
+    { 0, 17, 222, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 4, 4, 21, 47 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 4, 4, 21, 47 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 4, 4, 21, 47 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 12, 47 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 12, 6, 47 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 14, 9, 11, 47 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 14, 9, 11, 47 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 14, 9, 11, 47 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 14, 9, 11, 47 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 14, 9, 11, 47 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 14, 9, 11, 47 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 14, 9, 11, 47 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 14, 9, 11, 47 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 14, 9, 11, 47 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 14, 9, 11, 47 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 8, 30, 48 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 30, 56 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 8, 30, 56 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 14, 9, 11, 56 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 14, 9, 11, 56 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 14, 9, 11, 56 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 14, 9, 11, 56 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 14, 9, 11, 56 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 14, 9, 11, 56 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 14, 9, 11, 56 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 14, 9, 11, 56 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 14, 9, 11, 56 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 14, 9, 11, 56 },
+    { 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 30, 56 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 30, 56 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 12, 32 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 8, 12, 55 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 4, 4, 21, 55 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 4, 4, 21, 55 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 7, 4, 4, 21, 55 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 4, 4, 21, 55 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 12, 55 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 8, 30, 78 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 7, 4, 4, 30, 78 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 4, 4, 30, 78 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 4, 4, 30, 78 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 4, 4, 30, 78 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 4, 4, 30, 78 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 4, 4, 21, 78 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 78 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 78 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 78 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 78 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 78 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 78 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 78 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 78 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 78 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 78 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 30, 78 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 8, 30, 78 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 12, 30, 78 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 1 },
+    { 2, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 4, 4, 4, 21, 62 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 7, 4, 4, 21, 62 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 8, 8, 12, 62 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 17, 0, 8, 8, 12, 62 },
+    { 0, 17, 7, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 4, 4, 4, 21, 62 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 204, 7, 4, 4, 21, 62 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 17, 7, 4, 4, 21, 62 },
+    { 1, 0, 9, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 7, 4, 4, 21, 62 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 14, 9, 11, 62 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 14, 9, 11, 62 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 14, 9, 11, 62 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 14, 9, 11, 62 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 14, 9, 11, 62 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 14, 9, 11, 62 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 14, 9, 11, 62 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 14, 9, 11, 62 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 14, 9, 11, 62 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 14, 9, 11, 62 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 12, 17, 62 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 12, 62 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 17, 62 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 12, 62 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 4, 4, 4, 21, 62 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 4, 4, 4, 21, 62 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 21, 67 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 7, 4, 4, 21, 67 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 67 },
+    { 1, 0, 9, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 7, 4, 4, 21, 67 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 4, 4, 21, 67 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 4, 4, 21, 67 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 67 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 67 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 67 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 67 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 67 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 67 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 67 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 67 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 67 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 67 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 8, 8, 12, 67 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 8, 8, 12, 93 },
+    { 0, 17, 7, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 4, 4, 4, 21, 93 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 7, 4, 4, 21, 93 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 4, 4, 4, 21, 93 },
+    { 1, 0, 9, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 7, 4, 4, 21, 93 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 93 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 68 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 7, 4, 4, 21, 68 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 21, 68 },
+    { 0, 17, 7, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 21, 68 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 12, 17, 68 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 17, 68 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 68 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 68 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 68 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 68 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 68 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 68 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 68 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 68 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 68 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 68 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 69 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 69 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 69 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 69 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 69 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 69 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 69 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 69 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 69 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 69 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 69 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 69 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 12, 17, 69 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 12, 67 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 4, 4, 21, 1 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 2 },
+    { 0, 17, 1, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 4, 4, 21, 1 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 7, 4, 4, 21, 2 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 8, 8, 12, 2 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 7, 4, 4, 21, 2 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 4, 4, 21, 1 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 8, 8, 12, 2 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 8, 6, 12, 5 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 80, 0, 8, 6, 12, 3 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 8, 6, 12, 3 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 80, 0, 8, 6, 12, 4 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 80, 0, 8, 6, 12, 5 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 197, 1, 197, 0, 0, 8, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 3814, 0, 3814, 0, 0, 8, 0, 0, 8, 6, 12, 3 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 80, 0, 8, 6, 12, 3 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 80, 0, 8, 6, 12, 4 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 234, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 214, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 202, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 233, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 4, 4, 4, 21, 1 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 500, 1, 500, 0, 0, 1, 17, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 503, 1, 503, 0, 0, 1, 17, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 506, 1, 506, 0, 0, 1, 17, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 509, 1, 509, 0, 0, 1, 17, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 512, 1, 512, 0, 0, 1, 80, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -59, 0, -59, 0, -58, 2, 81, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 6, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, -7615, 0, 0, 0, 0, 0, -7615, 10, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 10, 0, 0, 8, 7, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 10, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 8, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, -8, 0, 0, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 515, 1, 515, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 518, 1, 518, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 522, 1, 522, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 526, 1, 526, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 74, 0, 74, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 74, 0, 74, 0, 0, 1, 85, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 86, 0, 86, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 86, 0, 86, 0, 0, 1, 85, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 100, 0, 100, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 100, 0, 100, 0, 0, 1, 85, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 128, 0, 128, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 128, 0, 128, 0, 0, 1, 85, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 112, 0, 112, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 112, 0, 112, 0, 0, 1, 85, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 126, 0, 126, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 126, 0, 126, 0, 0, 1, 85, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 564, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 567, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 570, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 573, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 576, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 579, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 582, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 585, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -8, 1, 564, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -8, 1, 567, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -8, 1, 570, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -8, 1, 573, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -8, 1, 576, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -8, 1, 579, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -8, 1, 582, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -8, 1, 585, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 588, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 591, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 594, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 597, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 600, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 603, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 606, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 609, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -8, 1, 588, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -8, 1, 591, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -8, 1, 594, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -8, 1, 597, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -8, 1, 600, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -8, 1, 603, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -8, 1, 606, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -8, 1, 609, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 612, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 615, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 618, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 621, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 624, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 627, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 630, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 633, 0, 8, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -8, 1, 612, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -8, 1, 615, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -8, 1, 618, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -8, 1, 621, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -8, 1, 624, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -8, 1, 627, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -8, 1, 630, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -8, 1, 633, 0, 0, 0, -8, 1, 17, 0, 8, 7, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 648, 1, 645, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 636, 0, 9, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 654, 1, 651, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 530, 1, 530, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 685, 1, 681, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, -74, 0, 0, 0, 0, 0, -74, 1, 17, 0, 8, 7, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, -74, 0, 0, 0, 0, 0, -74, 1, 85, 0, 8, 7, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -9, 1, 636, 0, 0, 0, -9, 1, 17, 0, 8, 7, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -7205, 0, -7205, 0, -7173, 1, 85, 0, 8, 6, 12, 4 },
+    { 28, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 81, 0, 0, 0, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 660, 1, 657, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 639, 0, 9, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 666, 1, 663, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 533, 1, 533, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 693, 1, 689, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, -86, 0, 0, 0, 0, 0, -86, 1, 17, 0, 8, 7, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, -86, 0, 0, 0, 0, 0, -86, 1, 85, 0, 8, 7, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -9, 1, 639, 0, 0, 0, -9, 1, 17, 0, 8, 7, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 536, 1, 536, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 489, 1, 489, 0, 0, 1, 85, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 540, 1, 540, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 543, 1, 543, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, -100, 0, 0, 0, 0, 0, -100, 1, 17, 0, 8, 7, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, -100, 0, 0, 0, 0, 0, -100, 1, 85, 0, 8, 7, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 547, 1, 547, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 493, 1, 493, 0, 0, 1, 85, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 551, 1, 551, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 7, 0, 7, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 554, 1, 554, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 557, 1, 557, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, -112, 0, 0, 0, 0, 0, -112, 1, 17, 0, 8, 7, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, -112, 0, 0, 0, 0, 0, -112, 1, 85, 0, 8, 7, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, -7, 0, 0, 0, 0, 0, -7, 1, 17, 0, 8, 7, 12, 4 },
+    { 28, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 85, 0, 0, 0, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 672, 1, 669, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 642, 0, 9, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 678, 1, 675, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 561, 1, 561, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 701, 1, 697, 0, 0, 1, 17, 0, 8, 6, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, -128, 0, 0, 0, 0, 0, -128, 1, 17, 0, 8, 7, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, -128, 0, 0, 0, 0, 0, -128, 1, 85, 0, 8, 7, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, -126, 0, 0, 0, 0, 0, -126, 1, 17, 0, 8, 7, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 0, -126, 0, 0, 0, 0, 0, -126, 1, 85, 0, 8, 7, 12, 4 },
+    { 16, 0, 0, 0, -1, 0, 0, -9, 1, 642, 0, 0, 0, -9, 1, 17, 0, 8, 7, 12, 4 },
+    { 28, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 85, 0, 0, 0, 18, 4 },
+    { 6, 9, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 85, 0, 0, 5, 17, 2 },
+    { 6, 9, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 5, 17, 2 },
+    { 6, 9, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 5, 4, 2 },
+    { 10, 18, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 4, 20, 2 },
+    { 10, 18, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 1 },
+    { 10, 18, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 1 },
+    { 10, 0, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 4, 21, 2 },
+    { 10, 1, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 4, 21, 2 },
+    { 20, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 17, 2 },
+    { 20, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 4, 2 },
+    { 20, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 17, 2 },
+    { 20, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 19, 2 },
+    { 20, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 23, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 11, 13, 3, 2 },
+    { 24, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 11, 13, 3, 2 },
+    { 21, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 13, 0, 2 },
+    { 23, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 13, 3, 2 },
+    { 24, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 13, 3, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 11, 10, 15, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 15, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 12, 0, 17, 2 },
+    { 7, 9, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 3, 3, 35, 2 },
+    { 8, 7, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 3, 3, 35, 2 },
+    { 10, 11, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 4, 21, 2 },
+    { 10, 14, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 4, 21, 2 },
+    { 10, 16, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 4, 21, 2 },
+    { 10, 12, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 4, 21, 2 },
+    { 10, 15, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 4, 21, 2 },
+    { 6, 6, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 80, 0, 0, 5, 4, 2 },
+    { 25, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 10, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 10, 2 },
+    { 23, 10, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 13, 3, 2 },
+    { 24, 10, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 13, 3, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 12, 5, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 5, 2 },
+    { 26, 6, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 13, 0, 8, 2 },
+    { 22, 10, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 13, 1, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 80, 0, 0, 12, 5, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 80, 0, 0, 12, 5, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 12, 2 },
+    { 19, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 15, 0, 12, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 12, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 17, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 80, 0, 0, 0, 12, 2 },
+    { 6, 9, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 80, 0, 0, 5, 17, 2 },
+    { 10, 18, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 3, 4, 4, 22, 2 },
+    { 10, 18, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 3, 4, 4, 12, 2 },
+    { 10, 18, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 3, 4, 4, 12, 2 },
+    { 13, 18, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 12, 0 },
+    { 10, 19, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 3, 4, 4, 21, 2 },
+    { 10, 20, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 3, 4, 4, 21, 2 },
+    { 10, 21, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 3, 4, 4, 21, 2 },
+    { 10, 22, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 3, 4, 4, 21, 2 },
+    { 10, 18, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 4, 21, 2 },
+    { 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 80, 0, 8, 6, 12, 3 },
+    { 5, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 5, 2, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 5, 2, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 5, 2, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 5, 2, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 5, 2, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 26, 3, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 21, 10, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 13, 0, 2 },
+    { 22, 10, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 13, 1, 2 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 80, 0, 8, 6, 12, 3 },
+    { 27, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 9, 2 },
+    { 27, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 9, 2 },
+    { 27, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 9, 2 },
+    { 27, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 9, 2 },
+    { 27, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 9, 2 },
+    { 27, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 9, 2 },
+    { 27, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 10, 2 },
+    { 27, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 9, 2 },
+    { 27, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 9, 2 },
+    { 27, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 9, 2 },
+    { 27, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 10, 2 },
+    { 27, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 9, 2 },
+    { 27, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 10, 2 },
+    { 13, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0 },
+    { 2, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 1 },
+    { 2, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 21, 1 },
+    { 2, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 1, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 1, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 4, 4, 21, 1 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 14, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 8, 7, 12, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 10, 2 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 8, 6, 12, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 9, 2 },
+    { 14, 0, 0, 0, -1, 0, 0, -7517, 0, 0, 0, 0, 0, -7517, 1, 85, 0, 8, 7, 12, 4 },
+    { 14, 0, 0, 0, -1, 0, 1, 199, 0, 0, 0, 0, 1, 199, 1, 85, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 1, 201, 0, 0, 0, 0, 1, 201, 1, 85, 0, 8, 7, 12, 3 },
+    { 29, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 14, 0, 0, 0, -1, 0, 0, 28, 0, 0, 0, 0, 0, 28, 1, 0, 0, 8, 7, 12, 3 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 8, 8, 12, 2 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 80, 0, 8, 6, 12, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 80, 0, 0, 0, 12, 2 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 80, 0, 8, 6, 12, 2 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 80, 0, 8, 6, 12, 2 },
+    { 14, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 80, 0, 8, 7, 12, 2 },
+    { 26, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 80, 0, 0, 0, 12, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 12, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 12, 2 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -28, 0, -28, 0, 0, 9, 0, 0, 8, 6, 12, 3 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 80, 0, 0, 0, 12, 2 },
+    { 4, 0, 0, 0, -1, 0, 0, 16, 0, 0, 0, 0, 0, 16, 1, 80, 0, 8, 7, 12, 3 },
+    { 4, 0, 0, 0, -1, 0, 0, 0, 0, -16, 0, -16, 0, 0, 1, 80, 0, 8, 6, 12, 3 },
+    { 4, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 8, 12, 3 },
+    { 4, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 3 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 0, 0, 0, 12, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, -3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, -3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 2016, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 138, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 1824, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 2104, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 2108, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 2106, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, -138, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 15, 2 },
+    { 26, 10, 0, 0, -1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, -8, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, -7, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 14, 2 },
+    { 21, 10, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 85, 0, 0, 13, 0, 2 },
+    { 22, 10, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 85, 0, 0, 13, 1, 2 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 12, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 14, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 5, 2, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 29, 0, 0, 0, -1, 0, 0, 26, 0, 0, 0, 0, 0, 26, 1, 80, 0, 8, 7, 12, 2 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, -26, 0, -26, 0, 0, 1, 80, 0, 8, 6, 12, 2 },
+    { 5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 12, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 14, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 14, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 12, 2 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 12, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 14, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 14, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 14, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 13, 3, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 13, 3, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 2 },
+    { 21, 10, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 13, 0, 2 },
+    { 22, 10, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 13, 1, 2 },
+    { 5, 10, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 12, 2 },
+    { 21, 10, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 13, 0, 2 },
+    { 22, 10, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 13, 1, 2 },
+    { 26, 10, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, -2, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 2 },
+    { 21, 10, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 13, 0, 2 },
+    { 22, 10, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 13, 1, 2 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 12, 54 },
+    { 21, 10, 0, 0, -1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 13, 0, 2 },
+    { 22, 10, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 13, 1, 2 },
+    { 21, 10, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 13, 0, 2 },
+    { 22, 10, 0, 0, -1, -3, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 13, 1, 2 },
+    { 26, 10, 0, 0, -1, -1824, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, -2016, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 85, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, -2104, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, -2106, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, -2108, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 12, 2 },
+    { 14, 0, 0, 0, -1, 0, 0, 48, 0, 0, 0, 0, 0, 48, 8, 0, 0, 8, 7, 12, 57 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -48, 0, -48, 0, 0, 8, 0, 0, 8, 6, 12, 57 },
+    { 14, 0, 0, 0, -1, 0, 1, 203, 0, 0, 0, 0, 1, 203, 9, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, -3814, 0, 0, 0, 0, 0, -3814, 9, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 1, 205, 0, 0, 0, 0, 1, 205, 9, 0, 0, 8, 7, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 207, 1, 207, 0, 0, 9, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 209, 1, 209, 0, 0, 9, 0, 0, 8, 6, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 1, 211, 0, 0, 0, 0, 1, 211, 10, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 1, 213, 0, 0, 0, 0, 1, 213, 10, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 1, 215, 0, 0, 0, 0, 1, 215, 10, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 1, 217, 0, 0, 0, 0, 1, 217, 11, 0, 0, 8, 7, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 8, 6, 12, 3 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 80, 0, 8, 6, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 1, 219, 0, 0, 0, 0, 1, 219, 11, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 1, 221, 0, 0, 0, 0, 1, 221, 11, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 8, 0, 0, 8, 7, 12, 46 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 8, 0, 0, 8, 6, 12, 46 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 6, 12, 46 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 12, 46 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 11, 0, 0, 8, 7, 12, 46 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 11, 0, 0, 8, 6, 12, 46 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 4, 4, 21, 46 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 13, 0, 0, 8, 7, 12, 46 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 13, 0, 0, 8, 6, 12, 46 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 6, 46 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 17, 46 },
+    { 5, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 12, 46 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -7264, 0, -7264, 0, 0, 8, 0, 0, 8, 6, 12, 25 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -7264, 0, -7264, 0, 0, 13, 0, 0, 8, 6, 12, 25 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 8, 12, 58 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 8, 8, 12, 58 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 80, 0, 8, 8, 12, 58 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 17, 58 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 4, 4, 4, 21, 58 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 13, 3, 2 },
+    { 23, 10, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 13, 3, 2 },
+    { 24, 10, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 13, 3, 2 },
+    { 20, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 17, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 17, 2 },
+    { 20, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 12, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 12, 2 },
+    { 23, 10, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 13, 3, 2 },
+    { 24, 10, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 13, 3, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 12, 6, 2 },
+    { 17, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 17, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 12, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 17, 2 },
+    { 20, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 19, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 12, 17, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 17, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 2 },
+    { 20, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 17, 2 },
+    { 21, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 13, 0, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 14, 37 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 80, 0, 0, 0, 14, 37 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 14, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 1, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 1, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 14, 2 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 8, 5, 37 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 14, 2 },
+    { 4, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 14, 37 },
+    { 20, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 2 },
+    { 22, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 13, 1, 2 },
+    { 0, 17, 218, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 228, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 222, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 1 },
+    { 1, 0, 224, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 26 },
+    { 20, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 14, 2 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 6, 8, 14, 2 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 6, 8, 21, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 14, 2 },
+    { 4, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 80, 0, 0, 8, 14, 37 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 8, 8, 5, 37 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 8, 8, 5, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 14, 2 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 5, 34 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 14, 34 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 0, 0, 8, 14, 34 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 8, 5, 34 },
+    { 0, 17, 8, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 204, 4, 4, 4, 21, 1 },
+    { 28, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 6, 0, 5, 2 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 5, 34 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 0, 0, 8, 5, 34 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 80, 0, 0, 8, 14, 34 },
+    { 20, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 6, 0, 5, 2 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 6, 8, 5, 35 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 6, 8, 14, 35 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 0, 6, 8, 14, 35 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 2 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 6, 8, 5, 2 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 6, 8, 5, 35 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 0, 6, 8, 5, 35 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 80, 0, 6, 8, 14, 35 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 8, 14, 36 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 14, 36 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 8, 8, 14, 26 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 14, 2 },
+    { 5, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 14, 2 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 14, 2 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 8, 14, 36 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 8, 8, 14, 36 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 6, 8, 5, 35 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 14, 26 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 80, 0, 0, 0, 14, 26 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 80, 0, 0, 0, 14, 2 },
+    { 5, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 80, 0, 0, 0, 14, 2 },
+    { 5, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 80, 0, 0, 0, 14, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 80, 0, 0, 0, 14, 26 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 6, 0, 14, 35 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 14, 37 },
+    { 13, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 14, 37 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 14, 37 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 8, 14, 37 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 8, 14, 37 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 8, 14, 37 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 8, 14, 37 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 8, 14, 38 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 8, 5, 38 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 14, 38 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 14, 38 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 8, 8, 12, 83 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 8, 8, 12, 83 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 17, 83 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 12, 17, 83 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 70 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 70 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 17, 70 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 12, 6, 70 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 12, 17, 70 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 70 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 70 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 70 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 70 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 70 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 70 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 70 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 70 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 70 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 70 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 5 },
+    { 2, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 21, 5 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 12, 5 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 4, 4, 21, 5 },
+    { 17, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 5 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 80, 0, 8, 6, 12, 5 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 4, 4, 4, 21, 5 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 8, 8, 12, 84 },
+    { 4, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 8, 8, 12, 84 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 4, 4, 21, 84 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 84 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 12, 17, 84 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 17, 84 },
+    { 28, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 12, 2 },
+    { 17, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 8, 8, 12, 2 },
+    { 28, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 12, 2 },
+    { 14, 0, 0, 0, -1, 0, 1, 223, 0, 0, 0, 0, 1, 223, 10, 0, 0, 8, 7, 12, 3 },
+    { 28, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 12, 2 },
+    { 14, 0, 0, 0, -1, 0, 1, 225, 0, 0, 0, 0, 1, 225, 12, 0, 0, 8, 7, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 8, 6, 12, 3 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 8, 8, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 12, 0, 0, 8, 7, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 12, 0, 0, 8, 6, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 13, 0, 0, 8, 7, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 13, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 6, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 16, 0, 0, 8, 7, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 16, 0, 0, 8, 6, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 1, 227, 0, 0, 0, 0, 1, 227, 13, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 1, 229, 0, 0, 0, 0, 1, 229, 16, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 1, 231, 0, 0, 0, 0, 1, 231, 16, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 1, 233, 0, 0, 0, 0, 1, 233, 16, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 1, 235, 0, 0, 0, 0, 1, 235, 16, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 1, 237, 0, 0, 0, 0, 1, 237, 16, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 1, 239, 0, 0, 0, 0, 1, 239, 17, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 928, 0, 0, 0, 0, 0, 928, 17, 0, 0, 8, 7, 12, 3 },
+    { 14, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 17, 0, 0, 8, 7, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 17, 0, 0, 8, 6, 12, 3 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 3 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 80, 0, 8, 6, 12, 3 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 3 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 8, 12, 59 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 4, 4, 21, 59 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 4, 4, 21, 59 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 7, 4, 4, 21, 59 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 12, 59 },
+    { 29, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 2 },
+    { 18, 0, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 8, 8, 12, 65 },
+    { 18, 0, 0, 4, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 8, 8, 12, 65 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 8, 8, 12, 65 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 18, 65 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 12, 6, 65 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 7, 4, 4, 21, 71 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 71 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 21, 71 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 12, 17, 71 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 71 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 71 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 71 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 71 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 71 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 71 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 71 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 71 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 71 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 71 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 4, 4, 21, 11 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 11 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 18, 11 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 8, 8, 12, 11 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 72 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 72 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 72 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 72 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 72 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 72 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 72 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 72 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 72 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 72 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 72 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 21, 72 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 21, 72 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 17, 2 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 12, 17, 72 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 73 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 21, 73 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 7, 4, 4, 21, 73 },
+    { 1, 0, 9, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 7, 4, 4, 21, 73 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 12, 73 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 4, 4, 21, 85 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 7, 4, 4, 21, 85 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 8, 8, 12, 85 },
+    { 0, 17, 7, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 4, 4, 21, 85 },
+    { 1, 0, 9, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 7, 4, 4, 21, 85 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 85 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 17, 85 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 12, 17, 85 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 8, 8, 12, 2 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 85 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 85 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 85 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 85 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 85 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 85 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 85 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 85 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 85 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 85 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 8, 30, 24 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 30, 24 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 8, 30, 24 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 24 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 24 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 77 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 4, 4, 21, 77 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 7, 4, 4, 21, 77 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 77 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 77 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 77 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 77 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 77 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 77 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 77 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 77 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 77 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 14, 9, 11, 77 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 12, 77 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 12, 17, 77 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 8, 30, 24 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 8, 30, 24 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 30, 24 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 4, 4, 30, 24 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 8, 30, 79 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 4, 4, 30, 79 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 4, 4, 30, 79 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 8, 30, 79 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 30, 79 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 8, 8, 12, 86 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 7, 4, 4, 21, 86 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 4, 4, 21, 86 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 12, 17, 86 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 8, 8, 12, 86 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 4, 4, 21, 86 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 8, 8, 12, 27 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -928, 0, -928, 0, 0, 16, 0, 0, 8, 6, 12, 3 },
+    { 28, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 2 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 80, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 6, 12, 4 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 241, 1, 241, 1, 241, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 243, 1, 243, 1, 243, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 245, 1, 245, 1, 245, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 247, 1, 247, 1, 247, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 249, 1, 249, 1, 249, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 251, 1, 251, 1, 251, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 253, 1, 253, 1, 253, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 255, 1, 255, 1, 255, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 257, 1, 257, 1, 257, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 259, 1, 259, 1, 259, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 261, 1, 261, 1, 261, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 263, 1, 263, 1, 263, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 265, 1, 265, 1, 265, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 267, 1, 267, 1, 267, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 269, 1, 269, 1, 269, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 271, 1, 271, 1, 271, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 273, 1, 273, 1, 273, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 275, 1, 275, 1, 275, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 277, 1, 277, 1, 277, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 279, 1, 279, 1, 279, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 281, 1, 281, 1, 281, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 283, 1, 283, 1, 283, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 285, 1, 285, 1, 285, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 287, 1, 287, 1, 287, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 289, 1, 289, 1, 289, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 291, 1, 291, 1, 291, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 293, 1, 293, 1, 293, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 295, 1, 295, 1, 295, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 297, 1, 297, 1, 297, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 299, 1, 299, 1, 299, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 301, 1, 301, 1, 301, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 303, 1, 303, 1, 303, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 305, 1, 305, 1, 305, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 307, 1, 307, 1, 307, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 309, 1, 309, 1, 309, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 311, 1, 311, 1, 311, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 313, 1, 313, 1, 313, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 315, 1, 315, 1, 315, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 317, 1, 317, 1, 317, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 319, 1, 319, 1, 319, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 321, 1, 321, 1, 321, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 323, 1, 323, 1, 323, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 325, 1, 325, 1, 325, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 327, 1, 327, 1, 327, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 329, 1, 329, 1, 329, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 331, 1, 331, 1, 331, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 333, 1, 333, 1, 333, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 335, 1, 335, 1, 335, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 337, 1, 337, 1, 337, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 339, 1, 339, 1, 339, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 341, 1, 341, 1, 341, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 343, 1, 343, 1, 343, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 345, 1, 345, 1, 345, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 347, 1, 347, 1, 347, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 349, 1, 349, 1, 349, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 351, 1, 351, 1, 351, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 353, 1, 353, 1, 353, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 355, 1, 355, 1, 355, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 357, 1, 357, 1, 357, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 359, 1, 359, 1, 359, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 361, 1, 361, 1, 361, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 363, 1, 363, 1, 363, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 365, 1, 365, 1, 365, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 367, 1, 367, 1, 367, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 369, 1, 369, 1, 369, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 371, 1, 371, 1, 371, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 373, 1, 373, 1, 373, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 375, 1, 375, 1, 375, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 377, 1, 377, 1, 377, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 379, 1, 379, 1, 379, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 381, 1, 381, 1, 381, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 383, 1, 383, 1, 383, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 385, 1, 385, 1, 385, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 387, 1, 387, 1, 387, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 389, 1, 389, 1, 389, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 391, 1, 391, 1, 391, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 393, 1, 393, 1, 393, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 395, 1, 395, 1, 395, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 397, 1, 397, 1, 397, 17, 0, 0, 8, 6, 12, 28 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 399, 1, 399, 1, 399, 17, 0, 0, 8, 6, 12, 28 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 8, 8, 12, 86 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 7, 4, 4, 21, 86 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 4, 4, 21, 86 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 12, 17, 86 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 4, 4, 21, 86 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 86 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 86 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 86 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 86 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 86 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 86 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 86 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 86 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 86 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 14, 9, 11, 86 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 17, 11, 8, 8, 23, 26 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 17, 12, 8, 8, 24, 26 },
+    { 11, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 0, 31, 0 },
+    { 12, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 85, 0, 0, 8, 14, 37 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 85, 0, 0, 8, 14, 37 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 85, 0, 0, 8, 14, 37 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 85, 0, 0, 8, 14, 37 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 85, 0, 0, 8, 14, 37 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 413, 1, 410, 0, 0, 1, 80, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 419, 1, 416, 0, 0, 1, 80, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 425, 1, 422, 0, 0, 1, 80, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 432, 1, 428, 0, 0, 1, 80, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 440, 1, 436, 0, 0, 1, 80, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 447, 1, 444, 0, 0, 1, 80, 0, 8, 6, 12, 3 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 459, 1, 456, 0, 0, 1, 80, 0, 8, 6, 12, 6 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 465, 1, 462, 0, 0, 1, 80, 0, 8, 6, 12, 6 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 471, 1, 468, 0, 0, 1, 80, 0, 8, 6, 12, 6 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 477, 1, 474, 0, 0, 1, 80, 0, 8, 6, 12, 6 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 1, 483, 1, 480, 0, 0, 1, 80, 0, 8, 6, 12, 6 },
+    { 18, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 85, 0, 7, 8, 13, 7 },
+    { 0, 17, 26, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 4, 4, 21, 7 },
+    { 18, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 85, 0, 7, 8, 13, 7 },
+    { 18, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 7, 8, 13, 7 },
+    { 26, 3, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 12, 7 },
+    { 18, 13, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 8, 8, 12, 8 },
+    { 28, 13, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 8 },
+    { 13, 18, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 12, 0 },
+    { 27, 13, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 80, 0, 0, 0, 10, 8 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 4, 4, 4, 21, 1 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 80, 0, 13, 11, 8, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 80, 0, 0, 11, 1, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 80, 0, 0, 0, 1, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 80, 0, 12, 11, 8, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 80, 0, 13, 0, 8, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 80, 0, 0, 0, 6, 2 },
+    { 21, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 80, 0, 0, 13, 0, 2 },
+    { 22, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 80, 0, 0, 13, 1, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 80, 0, 0, 0, 15, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 14, 2 },
+    { 20, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 11, 14, 2 },
+    { 19, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 15, 0, 14, 2 },
+    { 21, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 13, 0, 2 },
+    { 22, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 13, 1, 2 },
+    { 21, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 80, 0, 0, 13, 0, 2 },
+    { 22, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 80, 0, 0, 13, 1, 2 },
+    { 25, 6, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 13, 11, 1, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 11, 14, 2 },
+    { 25, 6, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 11, 10, 1, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 13, 0, 5, 2 },
+    { 25, 6, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 12, 11, 5, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 12, 6, 2 },
+    { 25, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 14, 2 },
+    { 26, 3, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 14, 2 },
+    { 20, 3, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 11, 14, 2 },
+    { 26, 10, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 14, 2 },
+    { 26, 10, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 14, 2 },
+    { 26, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 14, 2 },
+    { 18, 13, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 8, 8, 12, 8 },
+    { 10, 18, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 4, 22, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 11, 0, 14, 2 },
+    { 25, 6, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 14, 2 },
+    { 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 14, 2 },
+    { 3, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 14, 2 },
+    { 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 14, 2 },
+    { 3, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 14, 2 },
+    { 3, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 14, 2 },
+    { 3, 2, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 14, 2 },
+    { 3, 2, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 14, 2 },
+    { 3, 2, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 14, 2 },
+    { 3, 2, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 14, 2 },
+    { 3, 2, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 14, 2 },
+    { 26, 10, 0, 0, -1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 14, 2 },
+    { 26, 10, 0, 0, -1, -2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 14, 2 },
+    { 14, 0, 0, 0, -1, 0, 0, 32, 0, 0, 0, 0, 0, 32, 1, 80, 0, 8, 7, 14, 3 },
+    { 21, 10, 0, 0, -1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 13, 0, 2 },
+    { 22, 10, 0, 0, -1, -2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 13, 1, 2 },
+    { 28, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 14, 2 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -32, 0, -32, 0, 0, 1, 80, 0, 8, 6, 14, 3 },
+    { 21, 10, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 6, 80, 0, 0, 13, 0, 2 },
+    { 22, 10, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 6, 80, 0, 0, 13, 1, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 12, 1, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 11, 1, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 5, 2 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 6, 8, 12, 35 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 6, 8, 5, 35 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 6, 8, 5, 2 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 4, 4, 4, 5, 2 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 8, 8, 12, 26 },
+    { 27, 4, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 10, 2 },
+    { 10, 10, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 3, 4, 4, 21, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 29, 2 },
+    { 13, 18, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 0 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 8, 8, 12, 49 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 17, 2 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 17, 2 },
+    { 5, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 12, 2 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 12, 2 },
+    { 4, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 8, 12, 4 },
+    { 5, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 12, 4 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 12, 4 },
+    { 5, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 4 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 4 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 74 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 75 },
+    { 5, 2, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 2 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 8, 8, 12, 39 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 39 },
+    { 5, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 12, 39 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 8, 8, 12, 40 },
+    { 4, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 8, 8, 12, 40 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 120 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 120 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 8, 8, 12, 50 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 17, 50 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 8, 12, 60 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 17, 60 },
+    { 4, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 8, 12, 60 },
+    { 14, 0, 0, 0, -1, 0, 0, 40, 0, 0, 0, 0, 0, 40, 5, 0, 0, 8, 7, 12, 41 },
+    { 14, 0, 0, 0, -1, 0, 0, 40, 0, 0, 0, 0, 0, 40, 7, 0, 0, 8, 7, 12, 41 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -40, 0, -40, 0, 0, 5, 0, 0, 8, 6, 12, 41 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -40, 0, -40, 0, 0, 7, 0, 0, 8, 6, 12, 41 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 8, 8, 12, 51 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 8, 8, 12, 52 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 14, 9, 11, 52 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 14, 9, 11, 52 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 14, 9, 11, 52 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 14, 9, 11, 52 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 14, 9, 11, 52 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 14, 9, 11, 52 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 14, 9, 11, 52 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 14, 9, 11, 52 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 14, 9, 11, 52 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 14, 9, 11, 52 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 106 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 103 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 103 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 110 },
+    { 18, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 8, 8, 12, 53 },
+    { 18, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 8, 8, 12, 87 },
+    { 25, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 17, 87 },
+    { 5, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 87 },
+    { 18, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 118 },
+    { 29, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 118 },
+    { 5, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 118 },
+    { 18, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 117 },
+    { 5, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 117 },
+    { 18, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 8, 8, 12, 128 },
+    { 5, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 12, 128 },
+    { 18, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 8, 8, 12, 64 },
+    { 5, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 12, 64 },
+    { 5, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 64 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 17, 64 },
+    { 18, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 8, 12, 76 },
+    { 25, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 12, 76 },
+    { 18, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 8, 8, 12, 98 },
+    { 18, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 8, 8, 12, 97 },
+    { 5, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 12, 97 },
+    { 18, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 8, 12, 61 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 4, 4, 21, 61 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 4, 4, 21, 61 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 4, 4, 21, 61 },
+    { 0, 17, 1, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 4, 4, 21, 61 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 4, 4, 21, 61 },
+    { 5, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 12, 61 },
+    { 5, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 12, 61 },
+    { 5, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 12, 61 },
+    { 5, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 12, 61 },
+    { 5, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 12, 61 },
+    { 25, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 17, 61 },
+    { 25, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 12, 17, 61 },
+    { 25, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 12, 61 },
+    { 18, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 8, 8, 12, 88 },
+    { 5, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 88 },
+    { 25, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 88 },
+    { 18, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 116 },
+    { 5, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 116 },
+    { 18, 1, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 112 },
+    { 18, 1, 0, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 112 },
+    { 18, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 112 },
+    { 29, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 112 },
+    { 18, 1, 0, 4, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 112 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 112 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 112 },
+    { 5, 1, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 112 },
+    { 5, 1, 0, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 112 },
+    { 25, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 17, 112 },
+    { 25, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 15, 112 },
+    { 18, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 8, 8, 12, 80 },
+    { 25, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 17, 80 },
+    { 18, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 8, 8, 12, 89 },
+    { 5, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 89 },
+    { 18, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 8, 8, 12, 90 },
+    { 5, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 90 },
+    { 18, 1, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 121 },
+    { 18, 1, 0, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 121 },
+    { 25, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 121 },
+    { 5, 1, 0, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 121 },
+    { 5, 1, 0, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 121 },
+    { 5, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 121 },
+    { 18, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 8, 8, 12, 91 },
+    { 14, 1, 0, 0, -1, 0, 0, 64, 0, 0, 0, 0, 0, 64, 17, 0, 0, 8, 7, 12, 130 },
+    { 15, 1, 0, 0, -1, 0, 0, 0, 0, -64, 0, -64, 0, 0, 17, 0, 0, 8, 6, 12, 130 },
+    { 5, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 12, 130 },
+    { 5, 5, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 8 },
+    { 5, 5, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 8 },
+    { 5, 5, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 8 },
+    { 5, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 8 },
+    { 5, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 8 },
+    { 5, 5, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 8 },
+    { 5, 5, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 8 },
+    { 5, 5, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 8 },
+    { 5, 5, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 8 },
+    { 5, 5, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 8 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 7, 4, 4, 21, 94 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 4, 4, 4, 21, 94 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 8, 8, 12, 94 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 4, 4, 4, 21, 94 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 12, 17, 94 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 94 },
+    { 5, 10, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 94 },
+    { 5, 10, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 94 },
+    { 5, 10, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 94 },
+    { 5, 10, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 94 },
+    { 5, 10, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 94 },
+    { 5, 10, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 94 },
+    { 5, 10, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 94 },
+    { 5, 10, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 94 },
+    { 5, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 94 },
+    { 5, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 94 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 14, 9, 11, 94 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 14, 9, 11, 94 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 14, 9, 11, 94 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 14, 9, 11, 94 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 14, 9, 11, 94 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 14, 9, 11, 94 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 14, 9, 11, 94 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 14, 9, 11, 94 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 14, 9, 11, 94 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 14, 9, 11, 94 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 94 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 4, 4, 21, 92 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 7, 4, 4, 21, 92 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 8, 8, 12, 92 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 17, 0, 8, 8, 12, 92 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 4, 4, 4, 21, 92 },
+    { 0, 17, 7, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 204, 4, 4, 4, 21, 92 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 12, 92 },
+    { 10, 0, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 3, 4, 4, 12, 92 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 12, 17, 92 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 8, 8, 12, 101 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 101 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 101 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 101 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 101 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 101 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 101 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 101 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 101 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 101 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 101 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 4, 4, 21, 96 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 8, 8, 12, 96 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 204, 4, 4, 4, 21, 96 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 4, 4, 21, 96 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 7, 4, 4, 21, 96 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 17, 4, 4, 4, 21, 96 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 4, 4, 21, 96 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 96 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 96 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 96 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 96 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 96 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 96 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 96 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 96 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 96 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 96 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 17, 96 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 12, 17, 96 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 111 },
+    { 0, 17, 7, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 111 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 111 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 18, 111 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 4, 4, 21, 100 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 7, 4, 4, 21, 100 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 8, 8, 12, 100 },
+    { 1, 0, 9, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 7, 4, 4, 21, 100 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 12, 17, 100 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 12, 100 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 17, 100 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 12, 100 },
+    { 0, 17, 7, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 4, 4, 4, 21, 100 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 4, 4, 4, 21, 100 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 12, 12, 100 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 100 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 100 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 100 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 100 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 100 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 100 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 100 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 100 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 100 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 100 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 100 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 18, 100 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 8, 8, 12, 100 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 17, 100 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 12, 17, 100 },
+    { 5, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 20 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 109 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 7, 4, 4, 21, 109 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 109 },
+    { 1, 0, 9, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 7, 4, 4, 21, 109 },
+    { 0, 17, 7, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 109 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 12, 17, 109 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 109 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 8, 8, 12, 129 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 12, 17, 129 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 123 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 123 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 7, 4, 4, 21, 123 },
+    { 0, 17, 7, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 123 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 123 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 123 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 123 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 123 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 123 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 123 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 123 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 123 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 123 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 123 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 123 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 4, 4, 4, 21, 107 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 107 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 7, 4, 4, 21, 107 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 107 },
+    { 0, 17, 7, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 107 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 204, 4, 4, 4, 21, 107 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 7, 4, 4, 21, 107 },
+    { 1, 0, 9, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 7, 4, 4, 21, 107 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 8, 8, 12, 107 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 107 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 124 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 204, 4, 4, 4, 21, 124 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 7, 4, 4, 21, 124 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 124 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 204, 4, 4, 4, 21, 124 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 7, 4, 4, 21, 124 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 124 },
+    { 0, 17, 7, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 124 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 124 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 124 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 124 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 124 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 124 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 124 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 124 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 124 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 124 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 124 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 124 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 122 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 204, 4, 4, 4, 21, 122 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 7, 4, 4, 21, 122 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 122 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 7, 4, 4, 21, 122 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 122 },
+    { 0, 17, 7, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 122 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 18, 122 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 12, 17, 122 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 6, 122 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 122 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 12, 17, 122 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 8, 8, 12, 122 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 4, 4, 4, 21, 122 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 114 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 7, 4, 4, 21, 114 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 114 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 114 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 12, 17, 114 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 114 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 114 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 114 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 114 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 114 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 114 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 114 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 114 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 114 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 114 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 114 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 8, 8, 12, 102 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 4, 4, 21, 102 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 7, 4, 4, 21, 102 },
+    { 1, 0, 9, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 7, 4, 4, 21, 102 },
+    { 0, 17, 7, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 4, 4, 21, 102 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 102 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 102 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 102 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 102 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 102 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 102 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 102 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 102 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 102 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 14, 9, 11, 102 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 8, 30, 126 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 4, 4, 4, 30, 126 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 7, 4, 4, 30, 126 },
+    { 0, 17, 9, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 4, 4, 4, 30, 126 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 14, 9, 11, 126 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 14, 9, 11, 126 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 14, 9, 11, 126 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 14, 9, 11, 126 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 14, 9, 11, 126 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 14, 9, 11, 126 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 14, 9, 11, 126 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 14, 9, 11, 126 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 14, 9, 11, 126 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 14, 9, 11, 126 },
+    { 5, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 30, 126 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 12, 17, 126 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 30, 126 },
+    { 14, 0, 0, 0, -1, 0, 0, 32, 0, 0, 0, 0, 0, 32, 16, 0, 0, 8, 7, 12, 125 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, -32, 0, -32, 0, 0, 16, 0, 0, 8, 6, 12, 125 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 125 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 125 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 125 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 125 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 125 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 125 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 125 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 125 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 125 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 125 },
+    { 5, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 125 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 125 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 119 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 8, 8, 12, 63 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 63 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 8, 8, 12, 63 },
+    { 4, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 8, 8, 12, 63 },
+    { 4, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 63 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 17, 63 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 17, 63 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 8, 8, 12, 81 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 8, 8, 0, 81 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 8, 8, 1, 81 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 8, 8, 12, 127 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 8, 8, 0, 127 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 8, 8, 1, 127 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 8, 8, 12, 84 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 115 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 115 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 115 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 115 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 115 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 115 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 115 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 115 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 115 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 115 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 115 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 12, 17, 115 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 104 },
+    { 0, 17, 1, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 104 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 12, 17, 104 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 108 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 108 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 12, 17, 108 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 17, 108 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 108 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 108 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 108 },
+    { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 108 },
+    { 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 108 },
+    { 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 108 },
+    { 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 108 },
+    { 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 108 },
+    { 3, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 108 },
+    { 3, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 108 },
+    { 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 108 },
+    { 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 108 },
+    { 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 14, 9, 11, 108 },
+    { 5, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 108 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 8, 8, 12, 99 },
+    { 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 7, 4, 4, 21, 99 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 4, 4, 21, 99 },
+    { 17, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 8, 8, 12, 99 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 6, 8, 14, 35 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 8, 14, 34 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 105 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 105 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 105 },
+    { 0, 17, 1, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 105 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 12, 17, 105 },
+    { 10, 18, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 3, 4, 4, 21, 2 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 12, 2 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 85, 0, 0, 0, 12, 2 },
+    { 1, 0, 216, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 4, 4, 21, 2 },
+    { 1, 0, 216, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 4, 4, 21, 2 },
+    { 0, 17, 1, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 4, 4, 21, 1 },
+    { 1, 0, 226, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 4, 4, 21, 2 },
+    { 10, 18, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 3, 4, 4, 21, 2 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 4, 4, 21, 1 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 4, 4, 21, 1 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 12, 2 },
+    { 0, 17, 230, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 4, 4, 21, 4 },
+    { 5, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 12, 2 },
+    { 14, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 80, 0, 8, 7, 12, 2 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 80, 0, 8, 6, 12, 2 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 80, 0, 8, 6, 12, 2 },
+    { 26, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 80, 0, 0, 0, 12, 2 },
+    { 26, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 80, 0, 0, 0, 12, 2 },
+    { 14, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 80, 0, 8, 7, 12, 2 },
+    { 15, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 80, 0, 8, 6, 12, 2 },
+    { 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 80, 0, 14, 9, 11, 2 },
+    { 3, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 80, 0, 14, 9, 11, 2 },
+    { 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 80, 0, 14, 9, 11, 2 },
+    { 3, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 80, 0, 14, 9, 11, 2 },
+    { 3, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 80, 0, 14, 9, 11, 2 },
+    { 3, 2, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 80, 0, 14, 9, 11, 2 },
+    { 3, 2, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 80, 0, 14, 9, 11, 2 },
+    { 3, 2, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 80, 0, 14, 9, 11, 2 },
+    { 3, 2, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 80, 0, 14, 9, 11, 2 },
+    { 3, 2, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 80, 0, 14, 9, 11, 2 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 12, 131 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 4, 4, 4, 21, 131 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 17, 131 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 12, 17, 131 },
+    { 25, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 12, 131 },
+    { 18, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 8, 8, 12, 113 },
+    { 5, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 113 },
+    { 0, 17, 220, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 4, 21, 113 },
+    { 18, 13, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 80, 0, 8, 8, 12, 8 },
+    { 26, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 12, 8 },
+    { 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 80, 0, 0, 0, 12, 2 },
+    { 5, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 80, 0, 0, 0, 12, 2 },
+    { 5, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 80, 0, 0, 0, 12, 2 },
+    { 5, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 80, 0, 0, 0, 12, 2 },
+    { 5, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 80, 0, 0, 0, 12, 2 },
+    { 5, 2, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 80, 0, 0, 0, 12, 2 },
+    { 5, 2, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 80, 0, 0, 0, 12, 2 },
+    { 5, 2, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 80, 0, 0, 0, 12, 2 },
+    { 5, 2, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 80, 0, 0, 0, 12, 2 },
+    { 5, 2, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 80, 0, 0, 0, 12, 2 },
+    { 5, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 12, 2 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 80, 0, 0, 0, 12, 2 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 80, 0, 8, 7, 12, 2 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 80, 0, 8, 7, 12, 2 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 80, 0, 0, 0, 12, 2 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 8, 7, 12, 2 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 8, 7, 12, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 80, 0, 0, 0, 12, 2 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 2 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 5, 5, 0, 28, 2 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 80, 0, 0, 0, 14, 34 },
+    { 29, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 80, 0, 0, 0, 14, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 14, 2 },
+    { 28, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 12, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 12, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 14, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 13, 3, 2 },
+    { 29, 10, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 5, 2 },
+    { 13, 18, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 8, 14, 37 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 8, 14, 37 },
+    { 18, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 85, 0, 0, 8, 14, 37 },
+    { 0, 17, 0, 5, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 4, 4, 21, 1 },
+    { 12, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 12, 0 }
+};
+
+Q_DECL_CONST_FUNCTION static inline const QUnicodeTables::Properties *qGetProp(uint ucs4) Q_DECL_NOTHROW
+{
+    return uc_properties + GET_PROP_INDEX(ucs4);
+}
+
+// from qchar.cpp@5.10 :
+template <typename Traits, typename T>
+Q_DECL_CONST_FUNCTION static inline T convertCase_helper(T uc) Q_DECL_NOTHROW
+{
+    const QUnicodeTables::Properties *prop = qGetProp(uc);
+
+    if (Q_UNLIKELY(Traits::caseSpecial(prop))) {
+        const ushort *specialCase = specialCaseMap + Traits::caseDiff(prop);
+        // so far, there are no special cases beyond BMP (guaranteed by the qunicodetables generator)
+        return *specialCase == 1 ? specialCase[1] : uc;
+    }
+
+    return uc + Traits::caseDiff(prop);
+}
+
+// static inline uint foldCase(const ushort *ch, const ushort *start)
+// {
+//     uint ucs4 = *ch;
+//     if (QChar::isLowSurrogate(ucs4) && ch > start && QChar::isHighSurrogate(*(ch - 1)))
+//         ucs4 = QChar::surrogateToUcs4(*(ch - 1), ucs4);
+//     return convertCase_helper<QUnicodeTables::CasefoldTraits>(ucs4);
+// }
+// 
+static inline uint foldCase(uint ch, uint &last) Q_DECL_NOTHROW
+{
+    uint ucs4 = ch;
+    if (QChar::isLowSurrogate(ucs4) && QChar::isHighSurrogate(last))
+        ucs4 = QChar::surrogateToUcs4(last, ucs4);
+    last = ch;
+    return convertCase_helper<QUnicodeTables::CasefoldTraits>(ucs4);
+}
+
+// static inline ushort foldCase(ushort ch) Q_DECL_NOTHROW
+// {
+//     return convertCase_helper<QUnicodeTables::CasefoldTraits>(ch);
+// }
+// 
+// static inline QChar foldCase(QChar ch) Q_DECL_NOTHROW
+// {
+//     return QChar(foldCase(ch.unicode()));
+// }
+// 
+// from qstring.cpp@5.10 :
+qsizetype QtPrivate::qustrlen(const ushort *str) Q_DECL_NOTHROW
+{
+    qsizetype result = 0;
+
+#ifdef __SSE2__
+    // find the 16-byte alignment immediately prior or equal to str
+    quintptr misalignment = quintptr(str) & 0xf;
+    Q_ASSERT((misalignment & 1) == 0);
+    const ushort *ptr = str - (misalignment / 2);
+
+    // load 16 bytes and see if we have a null
+    // (aligned loads can never segfault)
+    const __m128i zeroes = _mm_setzero_si128();
+    __m128i data = _mm_load_si128(reinterpret_cast<const __m128i *>(ptr));
+    __m128i comparison = _mm_cmpeq_epi16(data, zeroes);
+    quint32 mask = _mm_movemask_epi8(comparison);
+
+    // ignore the result prior to the beginning of str
+    mask >>= misalignment;
+
+    // Have we found something in the first block? Need to handle it now
+    // because of the left shift above.
+    if (mask)
+        return qCountTrailingZeroBits(quint32(mask)) / 2;
+
+    do {
+        ptr += 8;
+        data = _mm_load_si128(reinterpret_cast<const __m128i *>(ptr));
+
+        comparison = _mm_cmpeq_epi16(data, zeroes);
+        mask = _mm_movemask_epi8(comparison);
+    } while (mask == 0);
+
+    // found a null
+    uint idx = qCountTrailingZeroBits(quint32(mask));
+    return ptr - str + idx / 2;
+#endif
+
+    if (sizeof(wchar_t) == sizeof(ushort))
+        return wcslen(reinterpret_cast<const wchar_t *>(str));
+
+    while (*str++)
+        ++result;
+    return result;
+}
+
+// Unicode case-insensitive comparison
+static int ucstricmp(const QChar *a, const QChar *ae, const QChar *b, const QChar *be)
+{
+    if (a == b)
+        return (ae - be);
+    if (a == 0)
+        return be - b;
+    if (b == 0)
+        return a - ae;
+
+    const QChar *e = ae;
+    if (be - b < ae - a)
+        e = a + (be - b);
+
+    uint alast = 0;
+    uint blast = 0;
+    while (a < e) {
+//         qDebug() << hex << alast << blast;
+//         qDebug() << hex << "*a=" << *a << "alast=" << alast << "folded=" << foldCase (*a, alast);
+//         qDebug() << hex << "*b=" << *b << "blast=" << blast << "folded=" << foldCase (*b, blast);
+        int diff = foldCase(a->unicode(), alast) - foldCase(b->unicode(), blast);
+        if ((diff))
+            return diff;
+        ++a;
+        ++b;
+    }
+    if (a == ae) {
+        if (b == be)
+            return 0;
+        return -1;
+    }
+    return 1;
+}
+
+#if defined(__mips_dsp)
+// From qstring_mips_dsp_asm.S
+extern "C" int qt_ucstrncmp_mips_dsp_asm(const ushort *a,
+                                         const ushort *b,
+                                         unsigned len);
+#endif
+
+#if defined(Q_COMPILER_LAMBDA) && !defined(__OPTIMIZE_SIZE__)
+namespace {
+template <uint MaxCount> struct UnrollTailLoop
+{
+    template <typename RetType, typename Functor1, typename Functor2, typename Number>
+    static inline RetType exec(Number count, RetType returnIfExited, Functor1 loopCheck, Functor2 returnIfFailed, Number i = 0)
+    {
+        /* equivalent to:
+         *   while (count--) {
+         *       if (loopCheck(i))
+         *           return returnIfFailed(i);
+         *   }
+         *   return returnIfExited;
+         */
+
+        if (!count)
+            return returnIfExited;
+
+        bool check = loopCheck(i);
+        if (check) {
+            const RetType &retval = returnIfFailed(i);
+            return retval;
+        }
+
+        return UnrollTailLoop<MaxCount - 1>::exec(count - 1, returnIfExited, loopCheck, returnIfFailed, i + 1);
+    }
+
+    template <typename Functor, typename Number>
+    static inline void exec(Number count, Functor code)
+    {
+        /* equivalent to:
+         *   for (Number i = 0; i < count; ++i)
+         *       code(i);
+         */
+        exec(count, 0, [=](Number i) -> bool { code(i); return false; }, [](Number) { return 0; });
+    }
+};
+template <> template <typename RetType, typename Functor1, typename Functor2, typename Number>
+inline RetType UnrollTailLoop<0>::exec(Number, RetType returnIfExited, Functor1, Functor2, Number)
+{
+    return returnIfExited;
+}
+}
+#endif
+
+// Unicode case-sensitive compare two same-sized strings
+static int ucstrncmp(const QChar *a, const QChar *b, size_t l)
+{
+#ifdef __OPTIMIZE_SIZE__
+    const QChar *end = a + l;
+    while (a < end) {
+        if (int diff = (int)a->unicode() - (int)b->unicode())
+            return diff;
+        ++a;
+        ++b;
+    }
+    return 0;
+#else
+#if defined(__mips_dsp)
+    Q_STATIC_ASSERT(sizeof(uint) == sizeof(size_t));
+    if (l >= 8) {
+        return qt_ucstrncmp_mips_dsp_asm(reinterpret_cast<const ushort*>(a),
+                                         reinterpret_cast<const ushort*>(b),
+                                         l);
+    }
+#endif // __mips_dsp
+#ifdef __SSE2__
+    const char *ptr = reinterpret_cast<const char*>(a);
+    qptrdiff distance = reinterpret_cast<const char*>(b) - ptr;
+    a += l & ~7;
+    b += l & ~7;
+    l &= 7;
+
+    // we're going to read ptr[0..15] (16 bytes)
+    for ( ; ptr + 15 < reinterpret_cast<const char *>(a); ptr += 16) {
+        __m128i a_data = _mm_loadu_si128((const __m128i*)ptr);
+        __m128i b_data = _mm_loadu_si128((const __m128i*)(ptr + distance));
+        __m128i result = _mm_cmpeq_epi16(a_data, b_data);
+        uint mask = ~_mm_movemask_epi8(result);
+        if (ushort(mask)) {
+            // found a different byte
+            uint idx = qCountTrailingZeroBits(mask);
+            return reinterpret_cast<const QChar *>(ptr + idx)->unicode()
+                    - reinterpret_cast<const QChar *>(ptr + distance + idx)->unicode();
+        }
+    }
+    const auto lambda = [=](size_t i) -> int {
+        return reinterpret_cast<const QChar *>(ptr)[i].unicode()
+                - reinterpret_cast<const QChar *>(ptr + distance)[i].unicode();
+    };
+    return UnrollTailLoop<7>::exec(l, 0, lambda, lambda);
+#endif
+#if defined(__ARM_NEON__) && defined(Q_PROCESSOR_ARM_64) // vaddv is only available on Aarch64
+    if (l >= 8) {
+        const QChar *end = a + l;
+        const uint16x8_t mask = { 1, 1 << 1, 1 << 2, 1 << 3, 1 << 4, 1 << 5, 1 << 6, 1 << 7 };
+        while (a + 7 < end) {
+            uint16x8_t da = vld1q_u16(reinterpret_cast<const uint16_t *>(a));
+            uint16x8_t db = vld1q_u16(reinterpret_cast<const uint16_t *>(b));
+
+            uint8_t r = ~(uint8_t)vaddvq_u16(vandq_u16(vceqq_u16(da, db), mask));
+            if (r) {
+                // found a different QChar
+                uint idx = qCountTrailingZeroBits(r);
+                return (int)a[idx].unicode() - (int)b[idx].unicode();
+            }
+            a += 8;
+            b += 8;
+        }
+        l &= 7;
+    }
+    const auto lambda = [=](size_t i) -> int {
+        return a[i].unicode() - b[i].unicode();
+    };
+    return UnrollTailLoop<7>::exec(l, 0, lambda, lambda);
+#endif // __ARM_NEON__
+    if (!l)
+        return 0;
+
+    // check alignment
+    if ((reinterpret_cast<quintptr>(a) & 2) == (reinterpret_cast<quintptr>(b) & 2)) {
+        // both addresses have the same alignment
+        if (reinterpret_cast<quintptr>(a) & 2) {
+            // both addresses are not aligned to 4-bytes boundaries
+            // compare the first character
+            if (*a != *b)
+                return a->unicode() - b->unicode();
+            --l;
+            ++a;
+            ++b;
+
+            // now both addresses are 4-bytes aligned
+        }
+
+        // both addresses are 4-bytes aligned
+        // do a fast 32-bit comparison
+        const quint32 *da = reinterpret_cast<const quint32 *>(a);
+        const quint32 *db = reinterpret_cast<const quint32 *>(b);
+        const quint32 *e = da + (l >> 1);
+        for ( ; da != e; ++da, ++db) {
+            if (*da != *db) {
+                a = reinterpret_cast<const QChar *>(da);
+                b = reinterpret_cast<const QChar *>(db);
+                if (*a != *b)
+                    return a->unicode() - b->unicode();
+                return a[1].unicode() - b[1].unicode();
+            }
+        }
+
+        // do we have a tail?
+        a = reinterpret_cast<const QChar *>(da);
+        b = reinterpret_cast<const QChar *>(db);
+        return (l & 1) ? a->unicode() - b->unicode() : 0;
+    } else {
+        // one of the addresses isn't 4-byte aligned but the other is
+        const QChar *e = a + l;
+        for ( ; a != e; ++a, ++b) {
+            if (*a != *b)
+                return a->unicode() - b->unicode();
+        }
+    }
+    return 0;
+#endif
+}
+
+template <typename Number>
+Q_DECL_CONSTEXPR int lencmp(Number lhs, Number rhs) Q_DECL_NOTHROW
+{
+    return lhs == rhs ? 0 :
+           lhs >  rhs ? 1 :
+           /* else */  -1 ;
+}
+
+// Unicode case-sensitive comparison
+static int ucstrcmp(const QChar *a, size_t alen, const QChar *b, size_t blen)
+{
+    if (a == b && alen == blen)
+        return 0;
+    const size_t l = qMin(alen, blen);
+    int cmp = ucstrncmp(a, b, l);
+    return cmp ? cmp : lencmp(alen, blen);
+}
+
+static int qt_compare_strings(QStringView lhs, QStringView rhs, Qt::CaseSensitivity cs) Q_DECL_NOTHROW
+{
+    if (cs == Qt::CaseSensitive)
+        return ucstrcmp(lhs.begin(), lhs.size(), rhs.begin(), rhs.size());
+    else
+        return ucstricmp(lhs.begin(), lhs.end(), rhs.begin(), rhs.end());
+}
+
+static int qt_compare_strings(QStringView lhs, QLatin1String rhs, Qt::CaseSensitivity cs) Q_DECL_NOTHROW
+{
+    const QString r(rhs);
+    if (cs == Qt::CaseSensitive)
+        return ucstrcmp(lhs.begin(), lhs.size(), r.begin(), r.size());
+    else
+        return ucstricmp(lhs.begin(), lhs.end(), r.begin(), r.end());
+}
+
+static int qt_compare_strings(QLatin1String lhs, QStringView rhs, Qt::CaseSensitivity cs) Q_DECL_NOTHROW
+{
+    return -qt_compare_strings(rhs, lhs, cs);
+}
+
+static int qt_compare_strings(QLatin1String lhs, QLatin1String rhs, Qt::CaseSensitivity cs) Q_DECL_NOTHROW
+{
+    if (lhs.size() == 0)
+        return lencmp(0, rhs.size());
+    const auto l = std::min(lhs.size(), rhs.size());
+    int r;
+    if (cs == Qt::CaseSensitive)
+        r = qstrncmp(lhs.data(), rhs.data(), l);
+    else
+        r = qstrnicmp(lhs.data(), rhs.data(), l);
+    return r ? r : lencmp(lhs.size(), rhs.size());
+}
+
+// qstringview.cpp @ 5.10
+/*!
+    \relates QStringView
+    \internal
+    \since 5.10
+
+    Returns an integer that compares to 0 as \a lhs compares to \a rhs.
+
+    If \a cs is Qt::CaseSensitive (the default), the comparison is case-sensitive;
+    otherwise the comparison is case-insensitive.
+
+    Case-sensitive comparison is based exclusively on the numeric Unicode values
+    of the characters and is very fast, but is not what a human would expect.
+    Consider sorting user-visible strings with QString::localeAwareCompare().
+*/
+int QtPrivate::compareStrings(QStringView lhs, QStringView rhs, Qt::CaseSensitivity cs) Q_DECL_NOTHROW
+{
+    return qt_compare_strings(lhs, rhs, cs);
+}
+
+/*!
+    \relates QStringView
+    \internal
+    \since 5.10
+    \overload
+
+    Returns an integer that compares to 0 as \a lhs compares to \a rhs.
+
+    If \a cs is Qt::CaseSensitive (the default), the comparison is case-sensitive;
+    otherwise the comparison is case-insensitive.
+
+    Case-sensitive comparison is based exclusively on the numeric Unicode values
+    of the characters and is very fast, but is not what a human would expect.
+    Consider sorting user-visible strings with QString::localeAwareCompare().
+*/
+int QtPrivate::compareStrings(QStringView lhs, QLatin1String rhs, Qt::CaseSensitivity cs) Q_DECL_NOTHROW
+{
+    return qt_compare_strings(lhs, rhs, cs);
+}
+
+/*!
+    \relates QStringView
+    \internal
+    \since 5.10
+    \overload
+
+    Returns an integer that compares to 0 as \a lhs compares to \a rhs.
+
+    If \a cs is Qt::CaseSensitive (the default), the comparison is case-sensitive;
+    otherwise the comparison is case-insensitive.
+
+    Case-sensitive comparison is based exclusively on the numeric Unicode values
+    of the characters and is very fast, but is not what a human would expect.
+    Consider sorting user-visible strings with QString::localeAwareCompare().
+*/
+int QtPrivate::compareStrings(QLatin1String lhs, QStringView rhs, Qt::CaseSensitivity cs) Q_DECL_NOTHROW
+{
+    return qt_compare_strings(lhs, rhs, cs);
+}
+
+/*!
+    \relates QStringView
+    \internal
+    \since 5.10
+    \overload
+
+    Returns an integer that compares to 0 as \a lhs compares to \a rhs.
+
+    If \a cs is Qt::CaseSensitive (the default), the comparison is case-sensitive;
+    otherwise the comparison is case-insensitive.
+
+    Case-sensitive comparison is based exclusively on the numeric Latin-1 values
+    of the characters and is very fast, but is not what a human would expect.
+    Consider sorting user-visible strings with QString::localeAwareCompare().
+*/
+int QtPrivate::compareStrings(QLatin1String lhs, QLatin1String rhs, Qt::CaseSensitivity cs) Q_DECL_NOTHROW
+{
+    return qt_compare_strings(lhs, rhs, cs);
+}
+
+#if defined(__SSE2__)
+static inline __m128i mergeQuestionMarks(__m128i chunk)
+{
+    const __m128i questionMark = _mm_set1_epi16('?');
+
+# ifdef __SSE4_2__
+    // compare the unsigned shorts for the range 0x0100-0xFFFF
+    // note on the use of _mm_cmpestrm:
+    //  The MSDN documentation online (http://technet.microsoft.com/en-us/library/bb514080.aspx)
+    //  says for range search the following:
+    //    For each character c in a, determine whether b0 <= c <= b1 or b2 <= c <= b3
+    //
+    //  However, all examples on the Internet, including from Intel
+    //  (see http://software.intel.com/en-us/articles/xml-parsing-accelerator-with-intel-streaming-simd-extensions-4-intel-sse4/)
+    //  put the range to be searched first
+    //
+    //  Disassembly and instruction-level debugging with GCC and ICC show
+    //  that they are doing the right thing. Inverting the arguments in the
+    //  instruction does cause a bunch of test failures.
+
+    const __m128i rangeMatch = _mm_cvtsi32_si128(0xffff0100);
+    const __m128i offLimitMask = _mm_cmpestrm(rangeMatch, 2, chunk, 8,
+            _SIDD_UWORD_OPS | _SIDD_CMP_RANGES | _SIDD_UNIT_MASK);
+
+    // replace the non-Latin 1 characters in the chunk with question marks
+    chunk = _mm_blendv_epi8(chunk, questionMark, offLimitMask);
+# else
+    // SSE has no compare instruction for unsigned comparison.
+    // The variables must be shiffted + 0x8000 to be compared
+    const __m128i signedBitOffset = _mm_set1_epi16(short(0x8000));
+    const __m128i thresholdMask = _mm_set1_epi16(short(0xff + 0x8000));
+
+    const __m128i signedChunk = _mm_add_epi16(chunk, signedBitOffset);
+    const __m128i offLimitMask = _mm_cmpgt_epi16(signedChunk, thresholdMask);
+
+#  ifdef __SSE4_1__
+    // replace the non-Latin 1 characters in the chunk with question marks
+    chunk = _mm_blendv_epi8(chunk, questionMark, offLimitMask);
+#  else
+    // offLimitQuestionMark contains '?' for each 16 bits that was off-limit
+    // the 16 bits that were correct contains zeros
+    const __m128i offLimitQuestionMark = _mm_and_si128(offLimitMask, questionMark);
+
+    // correctBytes contains the bytes that were in limit
+    // the 16 bits that were off limits contains zeros
+    const __m128i correctBytes = _mm_andnot_si128(offLimitMask, chunk);
+
+    // merge offLimitQuestionMark and correctBytes to have the result
+    chunk = _mm_or_si128(correctBytes, offLimitQuestionMark);
+#  endif
+# endif
+    return chunk;
+}
+#endif
+
+namespace {
+    template <typename StringView>
+    StringView qt_trimmed(StringView s) Q_DECL_NOTHROW
+    {
+        auto begin = s.begin();
+        auto end = s.end();
+        QStringAlgorithms<const StringView>::trimmed_helper_positions(begin, end);
+        return StringView{begin, end};
+    }
+}
+
+/*!
+    \fn QStringView QtPrivate::trimmed(QStringView s)
+    \fn QLatin1String QtPrivate::trimmed(QLatin1String s)
+    \internal
+    \relates QStringView
+    \since 5.10
+
+    Returns \a s with whitespace removed from the start and the end.
+
+    Whitespace means any character for which QChar::isSpace() returns
+    \c true. This includes the ASCII characters '\\t', '\\n', '\\v',
+    '\\f', '\\r', and ' '.
+
+    \sa QString::trimmed(), QStringView::trimmed(), QLatin1String::trimmed()
+*/
+QStringView QtPrivate::trimmed(QStringView s) Q_DECL_NOTHROW
+{
+    return qt_trimmed(s);
+}
+
+QLatin1String QtPrivate::trimmed(QLatin1String s) Q_DECL_NOTHROW
+{
+    auto res = qt_trimmed(QStringView(QString(s)));
+    return QLatin1String(res.toLatin1());
+}
+
+static void qt_to_latin1(uchar *dst, const ushort *src, int length)
+{
+#if defined(__SSE2__)
+    uchar *e = dst + length;
+    qptrdiff offset = 0;
+
+    // we're going to write to dst[offset..offset+15] (16 bytes)
+    for ( ; dst + offset + 15 < e; offset += 16) {
+        __m128i chunk1 = _mm_loadu_si128((const __m128i*)(src + offset)); // load
+        chunk1 = mergeQuestionMarks(chunk1);
+
+        __m128i chunk2 = _mm_loadu_si128((const __m128i*)(src + offset + 8)); // load
+        chunk2 = mergeQuestionMarks(chunk2);
+
+        // pack the two vector to 16 x 8bits elements
+        const __m128i result = _mm_packus_epi16(chunk1, chunk2);
+        _mm_storeu_si128((__m128i*)(dst + offset), result); // store
+    }
+
+    length = length % 16;
+    dst += offset;
+    src += offset;
+
+#  if defined(Q_COMPILER_LAMBDA) && !defined(__OPTIMIZE_SIZE__)
+    return UnrollTailLoop<15>::exec(length, [=](int i) { dst[i] = (src[i]>0xff) ? '?' : (uchar) src[i]; });
+#  endif
+#elif defined(__ARM_NEON__)
+    // Refer to the documentation of the SSE2 implementation
+    // this use eactly the same method as for SSE except:
+    // 1) neon has unsigned comparison
+    // 2) packing is done to 64 bits (8 x 8bits component).
+    if (length >= 16) {
+        const int chunkCount = length >> 3; // divided by 8
+        const uint16x8_t questionMark = vdupq_n_u16('?'); // set
+        const uint16x8_t thresholdMask = vdupq_n_u16(0xff); // set
+        for (int i = 0; i < chunkCount; ++i) {
+            uint16x8_t chunk = vld1q_u16((uint16_t *)src); // load
+            src += 8;
+
+            const uint16x8_t offLimitMask = vcgtq_u16(chunk, thresholdMask); // chunk > thresholdMask
+            const uint16x8_t offLimitQuestionMark = vandq_u16(offLimitMask, questionMark); // offLimitMask & questionMark
+            const uint16x8_t correctBytes = vbicq_u16(chunk, offLimitMask); // !offLimitMask & chunk
+            chunk = vorrq_u16(correctBytes, offLimitQuestionMark); // correctBytes | offLimitQuestionMark
+            const uint8x8_t result = vmovn_u16(chunk); // narrowing move->packing
+            vst1_u8(dst, result); // store
+            dst += 8;
+        }
+        length = length % 8;
+    }
+#endif
+#if defined(__mips_dsp)
+    qt_toLatin1_mips_dsp_asm(dst, src, length);
+#else
+    while (length--) {
+        *dst++ = (*src>0xff) ? '?' : (uchar) *src;
+        ++src;
+    }
+#endif
+}
+
+static QByteArray qt_convert_to_latin1(QStringView string)
+{
+    if (Q_UNLIKELY(string.isNull()))
+        return QByteArray();
+
+    QByteArray ba(string.length(), Qt::Uninitialized);
+
+    // since we own the only copy, we're going to const_cast the constData;
+    // that avoids an unnecessary call to detach() and expansion code that will never get used
+    qt_to_latin1(reinterpret_cast<uchar *>(const_cast<char *>(ba.constData())),
+                 reinterpret_cast<const ushort *>(string.data()), string.length());
+    return ba;
+}
+
+QByteArray QtPrivate::convertToLatin1(QStringView string)
+{
+    return qt_convert_to_latin1(string);
+}
+
+static QByteArray qt_convert_to_utf8(QStringView str)
+{
+    if (str.isNull())
+        return QByteArray();
+
+    return QUtf8::convertFromUnicode(str.data(), str.length());
+}
+
+/*!
+    \since 5.10
+    \internal
+    \relates QStringView
+
+    Returns a UTF-8 representation of \a string as a QByteArray.
+
+    UTF-8 is a Unicode codec and can represent all characters in a Unicode
+    string like QStringView.
+
+    \sa QString::toUtf8(), QStringView::toUtf8()
+*/
+QByteArray QtPrivate::convertToUtf8(QStringView string)
+{
+    return qt_convert_to_utf8(string);
+}
+
+static QByteArray qt_convert_to_local_8bit(QStringView string)
+{
+    if (string.isNull())
+        return QByteArray();
+#ifndef QT_NO_TEXTCODEC
+    QTextCodec *localeCodec = QTextCodec::codecForLocale();
+    if (localeCodec)
+        return localeCodec->fromUnicode(QString::fromUtf8(string.toUtf8()));
+#endif // QT_NO_TEXTCODEC
+    return qt_convert_to_latin1(string);
+}
+
+QByteArray QtPrivate::convertToLocal8Bit(QStringView string)
+{
+    return qt_convert_to_local_8bit(string);
+}
+
+QStringIterator::QStringIterator(QStringView string, qsizetype idx)
+    : i(string.begin()),
+      pos(i + idx),
+      e(string.end())
+{
+}
+
+static QVector<uint> qt_convert_to_ucs4(QStringView string)
+{
+    QVector<uint> v(string.length());
+    uint *a = const_cast<uint*>(v.constData());
+    QStringIterator it(string);
+    while (it.hasNext())
+        *a++ = it.next();
+    v.resize(a - v.constData());
+    return v;
+}
+
+QVector<uint> QtPrivate::convertToUcs4(QStringView string)
+{
+    return qt_convert_to_ucs4(string);
+}
+
+// static bool _isNull(QChar &c)
+// {
+//     return c.isNull();
+// }
+
+static bool _isNull(QStringView &c)
+{
+    return c.isNull();
+}
+
+static bool _isNull(QLatin1String &c)
+{
+    return c.data() == nullptr;
+}
+
+template <typename Haystack, typename Needle>
+bool qt_starts_with_impl(Haystack haystack, Needle needle, Qt::CaseSensitivity cs) Q_DECL_NOTHROW
+{
+    if (_isNull(haystack))
+        return _isNull(needle); // historical behavior, consider changing in ### Qt 6.
+    const auto haystackLen = haystack.size();
+    const auto needleLen = needle.size();
+    if (haystackLen == 0)
+        return needleLen == 0;
+    if (needleLen > haystackLen)
+        return false;
+
+    return qt_compare_strings(haystack.left(needleLen), needle, cs) == 0;
+}
+
+// static inline bool qt_starts_with(QStringView haystack, QStringView needle, Qt::CaseSensitivity cs)
+// {
+//     return qt_starts_with_impl(haystack, needle, cs);
+// }
+// 
+// static inline bool qt_starts_with(QStringView haystack, QLatin1String needle, Qt::CaseSensitivity cs)
+// {
+//     return qt_starts_with_impl(haystack, needle, cs);
+// }
+/*
+static inline bool qt_starts_with(QStringView haystack, QChar needle, Qt::CaseSensitivity cs)
+{
+    return haystack.size()
+           && (cs == Qt::CaseSensitive ? haystack.front() == needle
+                                       : foldCase(haystack.front()) == foldCase(needle));
+}*/
+
+bool QtPrivate::startsWith(QStringView haystack, QStringView needle, Qt::CaseSensitivity cs) Q_DECL_NOTHROW
+{
+    return qt_starts_with_impl(haystack, needle, cs);
+}
+
+bool QtPrivate::startsWith(QStringView haystack, QLatin1String needle, Qt::CaseSensitivity cs) Q_DECL_NOTHROW
+{
+    return qt_starts_with_impl(haystack, needle, cs);
+}
+
+bool QtPrivate::startsWith(QLatin1String haystack, QStringView needle, Qt::CaseSensitivity cs) Q_DECL_NOTHROW
+{
+    return qt_starts_with_impl(haystack, needle, cs);
+}
+
+bool QtPrivate::startsWith(QLatin1String haystack, QLatin1String needle, Qt::CaseSensitivity cs) Q_DECL_NOTHROW
+{
+    return qt_starts_with_impl(haystack, needle, cs);
+}
+
+template <typename Haystack, typename Needle>
+bool qt_ends_with_impl(Haystack haystack, Needle needle, Qt::CaseSensitivity cs) Q_DECL_NOTHROW
+{
+    if (_isNull(haystack))
+        return _isNull(needle); // historical behavior, consider changing in ### Qt 6.
+    const auto haystackLen = haystack.size();
+    const auto needleLen = needle.size();
+    if (haystackLen == 0)
+        return needleLen == 0;
+    if (haystackLen < needleLen)
+        return false;
+
+    return qt_compare_strings(haystack.right(needleLen), needle, cs) == 0;
+}
+
+// static inline bool qt_ends_with(QStringView haystack, QStringView needle, Qt::CaseSensitivity cs)
+// {
+//     return qt_ends_with_impl(haystack, needle, cs);
+// }
+// 
+// static inline bool qt_ends_with(QStringView haystack, QLatin1String needle, Qt::CaseSensitivity cs)
+// {
+//     return qt_ends_with_impl(haystack, needle, cs);
+// }
+// 
+// static inline bool qt_ends_with(QStringView haystack, QChar needle, Qt::CaseSensitivity cs)
+// {
+//     return haystack.size()
+//            && (cs == Qt::CaseSensitive ? haystack.back() == needle
+//                                        : foldCase(haystack.back()) == foldCase(needle));
+// }
+// 
+bool QtPrivate::endsWith(QStringView haystack, QStringView needle, Qt::CaseSensitivity cs) Q_DECL_NOTHROW
+{
+    return qt_ends_with_impl(haystack, needle, cs);
+}
+
+bool QtPrivate::endsWith(QStringView haystack, QLatin1String needle, Qt::CaseSensitivity cs) Q_DECL_NOTHROW
+{
+    return qt_ends_with_impl(haystack, needle, cs);
+}
+
+bool QtPrivate::endsWith(QLatin1String haystack, QStringView needle, Qt::CaseSensitivity cs) Q_DECL_NOTHROW
+{
+    return qt_ends_with_impl(haystack, needle, cs);
+}
+
+bool QtPrivate::endsWith(QLatin1String haystack, QLatin1String needle, Qt::CaseSensitivity cs) Q_DECL_NOTHROW
+{
+    return qt_ends_with_impl(haystack, needle, cs);
+}
+
+/*!
+    \class QStringView
+    \inmodule QtCore
+    \since 5.10
+    \brief The QStringView class provides a unified view on UTF-16 strings with a read-only subset of the QString API.
+    \reentrant
+    \ingroup tools
+    \ingroup string-processing
+
+    A QStringView references a contiguous portion of a UTF-16 string it does
+    not own. It acts as an interface type to all kinds of UTF-16 string,
+    without the need to construct a QString first.
+
+    The UTF-16 string may be represented as an array (or an array-compatible
+    data-structure such as QString,
+    std::basic_string, etc.) of QChar, \c ushort, \c char16_t (on compilers that
+    support C++11 Unicode strings) or (on platforms, such as Windows,
+    where it is a 16-bit type) \c wchar_t.
+
+    QStringView is designed as an interface type; its main use-case is
+    as a function parameter type. When QStringViews are used as automatic
+    variables or data members, care must be taken to ensure that the referenced
+    string data (for example, owned by a QString) outlives the QStringView on all code paths,
+    lest the string view ends up referencing deleted data.
+
+    When used as an interface type, QStringView allows a single function to accept
+    a wide variety of UTF-16 string data sources. One function accepting QStringView
+    thus replaces three function overloads (taking QString, QStringRef, and
+    \c{(const QChar*, int)}), while at the same time enabling even more string data
+    sources to be passed to the function, such as \c{u"Hello World"}, a \c char16_t
+    string literal.
+
+    QStringViews should be passed by value, not by reference-to-const:
+    \code
+    void myfun1(QStringView sv);        // preferred
+    void myfun2(const QStringView &sv); // compiles and works, but slower
+    \endcode
+
+    If you want to give your users maximum freedom in what strings they can pass
+    to your function, accompany the QStringView overload with overloads for
+
+    \list
+        \li \e QChar: this overload can delegate to the QStringView version:
+            \code
+            void fun(QChar ch) { fun(QStringView(&ch, 1)); }
+            \endcode
+            even though, for technical reasons, QStringView cannot provide a
+            QChar constructor by itself.
+        \li \e QString: if you store an unmodified copy of the string and thus would
+            like to take advantage of QString's implicit sharing.
+        \li QLatin1String: if you can implement the function without converting the
+            QLatin1String to UTF-16 first; users expect a function overloaded on
+            QLatin1String to perform strictly less memory allocations than the
+            semantically equivalent call of the QStringView version, involving
+            construction of a QString from the QLatin1String.
+    \endlist
+
+    QStringView can also be used as the return value of a function. If you call a
+    function returning QStringView, take extra care to not keep the QStringView
+    around longer than the function promises to keep the referenced string data alive.
+    If in doubt, obtain a strong reference to the data by calling toString() to convert
+    the QStringView into a QString.
+
+    QStringView is a \e{Literal Type}, but since it stores data as \c{char16_t}, iteration
+    is not \c constexpr (casts from \c{const char16_t*} to \c{const QChar*}, which is not
+    allowed in \c constexpr functions). You can use an indexed loop and/or utf16() in
+    \c constexpr contexts instead.
+
+    \note We strongly discourage the use of QList<QStringView>,
+    because QList is a very inefficient container for QStringViews (it would heap-allocate
+    every element). Use QVector (or std::vector) to hold QStringViews instead.
+
+    \sa QString, QStringRef
+*/
+
+/*!
+    \typedef QStringView::value_type
+
+    Alias for \c{const QChar}. Provided for compatibility with the STL.
+*/
+
+/*!
+    \typedef QStringView::difference_type
+
+    Alias for \c{std::ptrdiff_t}. Provided for compatibility with the STL.
+*/
+
+/*!
+    \typedef QStringView::size_type
+
+    Alias for qsizetype. Provided for compatibility with the STL.
+
+    Unlike other Qt classes, QStringView uses qsizetype as its \c size_type, to allow
+    accepting data from \c{std::basic_string} without truncation. The Qt API functions,
+    for example length(), return \c int, while the STL-compatible functions, for example
+    size(), return \c size_type.
+*/
+
+/*!
+    \typedef QStringView::reference
+
+    Alias for \c{value_type &}. Provided for compatibility with the STL.
+
+    QStringView does not support mutable references, so this is the same
+    as const_reference.
+*/
+
+/*!
+    \typedef QStringView::const_reference
+
+    Alias for \c{value_type &}. Provided for compatibility with the STL.
+*/
+
+/*!
+    \typedef QStringView::pointer
+
+    Alias for \c{value_type *}. Provided for compatibility with the STL.
+
+    QStringView does not support mutable pointers, so this is the same
+    as const_pointer.
+*/
+
+/*!
+    \typedef QStringView::const_pointer
+
+    Alias for \c{value_type *}. Provided for compatibility with the STL.
+*/
+
+/*!
+    \typedef QStringView::iterator
+
+    This typedef provides an STL-style const iterator for QStringView.
+
+    QStringView does not support mutable iterators, so this is the same
+    as const_iterator.
+
+    \sa const_iterator, reverse_iterator
+*/
+
+/*!
+    \typedef QStringView::const_iterator
+
+    This typedef provides an STL-style const iterator for QStringView.
+
+    \sa iterator, const_reverse_iterator
+*/
+
+/*!
+    \typedef QStringView::reverse_iterator
+
+    This typedef provides an STL-style const reverse iterator for QStringView.
+
+    QStringView does not support mutable reverse iterators, so this is the
+    same as const_reverse_iterator.
+
+    \sa const_reverse_iterator, iterator
+*/
+
+/*!
+    \typedef QStringView::const_reverse_iterator
+
+    This typedef provides an STL-style const reverse iterator for QStringView.
+
+    \sa reverse_iterator, const_iterator
+*/
+
+/*!
+    \fn QStringView::QStringView()
+
+    Constructs a null string view.
+
+    \sa isNull()
+*/
+
+/*!
+    \fn QStringView::QStringView(std::nullptr_t)
+
+    Constructs a null string view.
+
+    \sa isNull()
+*/
+
+/*!
+    \fn QStringView::QStringView(const Char *str, qsizetype len)
+
+    Constructs a string view on \a str with length \a len.
+
+    The range \c{[str,len)} must remain valid for the lifetime of this string view object.
+
+    Passing \c nullptr as \a str is safe if \a len is 0, too, and results in a null string view.
+
+    The behavior is undefined if \a len is negative or, when positive, if \a str is \c nullptr.
+
+    This constructor only participates in overload resolution if \c Char is a compatible
+    character type. The compatible character types are: \c QChar, \c ushort, \c char16_t and
+    (on platforms, such as Windows, where it is a 16-bit type) \c wchar_t.
+*/
+
+/*!
+    \fn QStringView::QStringView(const Char *first, const Char *last)
+
+    Constructs a string view on \a first with length (\a last - \a first).
+
+    The range \c{[first,last)} must remain valid for the lifetime of
+    this string view object.
+
+    Passing \c nullptr as \a first is safe if \a last is nullptr, too,
+    and results in a null string view.
+
+    The behavior is undefined if \a last precedes \a first, or \a first
+    is \c nullptr and \a last is not.
+
+    This constructor only participates in overload resolution if \c Char
+    is a compatible character type. The compatible character types
+    are: \c QChar, \c ushort, \c char16_t and (on platforms, such as
+    Windows, where it is a 16-bit type) \c wchar_t.
+*/
+
+/*!
+    \fn QStringView::QStringView(const Char *str)
+
+    Constructs a string view on \a str. The length is determined
+    by scanning for the first \c{Char(0)}.
+
+    \a str must remain valid for the lifetime of this string view object.
+
+    Passing \c nullptr as \a str is safe and results in a null string view.
+
+    This constructor only participates in overload resolution if \a
+    str is not an array and if \c Char is a compatible character
+    type. The compatible character types are: \c QChar, \c ushort, \c
+    char16_t and (on platforms, such as Windows, where it is a 16-bit
+    type) \c wchar_t.
+*/
+
+/*!
+    \fn QStringView::QStringView(const Char (&string)[N])
+
+    Constructs a string view on the character string literal \a string.
+    The length is set to \c{N-1}, excluding the trailing \{Char(0)}.
+    If you need the full array, use the constructor from pointer and
+    size instead:
+
+    \code
+    auto sv = QStringView(array, std::size(array)); // using C++17 std::size()
+    \endcode
+
+    \a string must remain valid for the lifetime of this string view
+    object.
+
+    This constructor only participates in overload resolution if \a
+    string is an actual array and \c Char is a compatible character
+    type. The compatible character types are: \c QChar, \c ushort, \c
+    char16_t and (on platforms, such as Windows, where it is a 16-bit
+    type) \c wchar_t.
+*/
+
+/*!
+    \fn QStringView::QStringView(const QString &str)
+
+    Constructs a string view on \a str.
+
+    \c{str.data()} must remain valid for the lifetime of this string view object.
+
+    The string view will be null if and only if \c{str.isNull()}.
+*/
+
+/*!
+    \fn QStringView::QStringView(const QStringRef &str)
+
+    Constructs a string view on \a str.
+
+    \c{str.data()} must remain valid for the lifetime of this string view object.
+
+    The string view will be null if and only if \c{str.isNull()}.
+*/
+
+/*!
+    \fn QStringView::QStringView(const StdBasicString &str)
+
+    Constructs a string view on \a str. The length is taken from \c{str.size()}.
+
+    \c{str.data()} must remain valid for the lifetime of this string view object.
+
+    This constructor only participates in overload resolution if \c StdBasicString is an
+    instantiation of \c std::basic_string with a compatible character type. The
+    compatible character types are: \c QChar, \c ushort, \c char16_t and
+    (on platforms, such as Windows, where it is a 16-bit type) \c wchar_t.
+
+    The string view will be empty if and only if \c{str.empty()}. It is unspecified
+    whether this constructor can result in a null string view (\c{str.data()} would
+    have to return \c nullptr for this).
+
+    \sa isNull(), isEmpty()
+*/
+
+/*!
+    \fn QString QStringView::toString() const
+
+    Returns a deep copy of this string view's data as a QString.
+
+    The return value will be the null QString if and only if this string view is null.
+
+    \warning QStringView can store strings with more than 2\sup{30} characters
+    while QString cannot. Calling this function on a string view for which size()
+    returns a value greater than \c{INT_MAX / 2} constitutes undefined behavior.
+*/
+
+/*!
+    \fn const QChar *QStringView::data() const
+
+    Returns a const pointer to the first character in the string.
+
+    \note The character array represented by the return value is \e not null-terminated.
+
+    \sa begin(), end(), utf16()
+*/
+
+/*!
+    \fn const storage_type *QStringView::utf16() const
+
+    Returns a const pointer to the first character in the string.
+
+    \c{storage_type} is \c{char16_t}, except on MSVC 2013 (which lacks \c char16_t support),
+    where it is \c{wchar_t} instead.
+
+    \note The character array represented by the return value is \e not null-terminated.
+
+    \sa begin(), end(), data()
+*/
+
+/*!
+    \fn QStringView::const_iterator QStringView::begin() const
+
+    Returns a const \l{STL-style iterators}{STL-style iterator} pointing to the first character in
+    the string.
+
+    This function is provided for STL compatibility.
+
+    \sa end(), cbegin(), rbegin(), data()
+*/
+
+/*!
+    \fn QStringView::const_iterator QStringView::cbegin() const
+
+    Same as begin().
+
+    This function is provided for STL compatibility.
+
+    \sa cend(), begin(), crbegin(), data()
+*/
+
+/*!
+    \fn QStringView::const_iterator QStringView::end() const
+
+    Returns a const \l{STL-style iterators}{STL-style iterator} pointing to the imaginary
+    character after the last character in the list.
+
+    This function is provided for STL compatibility.
+
+    \sa begin(), cend(), rend()
+*/
+
+/*! \fn QStringView::const_iterator QStringView::cend() const
+
+    Same as end().
+
+    This function is provided for STL compatibility.
+
+    \sa cbegin(), end(), crend()
+*/
+
+/*!
+    \fn QStringView::const_reverse_iterator QStringView::rbegin() const
+
+    Returns a const \l{STL-style iterators}{STL-style} reverse iterator pointing to the first
+    character in the string, in reverse order.
+
+    This function is provided for STL compatibility.
+
+    \sa rend(), crbegin(), begin()
+*/
+
+/*!
+    \fn QStringView::const_reverse_iterator QStringView::crbegin() const
+
+    Same as rbegin().
+
+    This function is provided for STL compatibility.
+
+    \sa crend(), rbegin(), cbegin()
+*/
+
+/*!
+    \fn QStringView::const_reverse_iterator QStringView::rend() const
+
+    Returns a \l{STL-style iterators}{STL-style} reverse iterator pointing to one past
+    the last character in the string, in reverse order.
+
+    This function is provided for STL compatibility.
+
+    \sa rbegin(), crend(), end()
+*/
+
+/*!
+    \fn QStringView::const_reverse_iterator QStringView::crend() const
+
+    Same as rend().
+
+    This function is provided for STL compatibility.
+
+    \sa crbegin(), rend(), cend()
+*/
+
+/*!
+    \fn bool QStringView::empty() const
+
+    Returns whether this string view is empty - that is, whether \c{size() == 0}.
+
+    This function is provided for STL compatibility.
+
+    \sa isEmpty(), isNull(), size(), length()
+*/
+
+/*!
+    \fn bool QStringView::isEmpty() const
+
+    Returns whether this string view is empty - that is, whether \c{size() == 0}.
+
+    This function is provided for compatibility with other Qt containers.
+
+    \sa empty(), isNull(), size(), length()
+*/
+
+/*!
+    \fn bool QStringView::isNull() const
+
+    Returns whether this string view is null - that is, whether \c{data() == nullptr}.
+
+    This functions is provided for compatibility with other Qt containers.
+
+    \sa empty(), isEmpty(), size(), length()
+*/
+
+/*!
+    \fn qsizetype QStringView::size() const
+
+    Returns the size of this string view, in UTF-16 code points (that is,
+    surrogate pairs count as two for the purposes of this function, the same
+    as in QString and QStringRef).
+
+    \sa empty(), isEmpty(), isNull(), length()
+*/
+
+/*!
+    \fn int QStringView::length() const
+
+    Same as size(), except returns the result as an \c int.
+
+    This function is provided for compatibility with other Qt containers.
+
+    \warning QStringView can represent strings with more than 2\sup{31} characters.
+    Calling this function on a string view for which size() returns a value greater
+    than \c{INT_MAX} constitutes undefined behavior.
+
+    \sa empty(), isEmpty(), isNull(), size()
+*/
+
+/*!
+    \fn QChar QStringView::operator[](qsizetype n) const
+
+    Returns the character at position \a n in this string view.
+
+    The behavior is undefined if \a n is negative or not less than size().
+
+    \sa at(), front(), back()
+*/
+
+/*!
+    \fn QChar QStringView::at(qsizetype n) const
+
+    Returns the character at position \a n in this string view.
+
+    The behavior is undefined if \a n is negative or not less than size().
+
+    \sa operator[](), front(), back()
+*/
+
+/*!
+    \fn QChar QStringView::front() const
+
+    Returns the first character in the string. Same as first().
+
+    This function is provided for STL compatibility.
+
+    \warning Calling this function on an empty string view constitutes
+    undefined behavior.
+
+    \sa back(), first(), last()
+*/
+
+/*!
+    \fn QChar QStringView::back() const
+
+    Returns the last character in the string. Same as last().
+
+    This function is provided for STL compatibility.
+
+    \warning Calling this function on an empty string view constitutes
+    undefined behavior.
+
+    \sa front(), first(), last()
+*/
+
+/*!
+    \fn QChar QStringView::first() const
+
+    Returns the first character in the string. Same as front().
+
+    This function is provided for compatibility with other Qt containers.
+
+    \warning Calling this function on an empty string view constitutes
+    undefined behavior.
+
+    \sa front(), back(), last()
+*/
+
+/*!
+    \fn QChar QStringView::last() const
+
+    Returns the last character in the string. Same as back().
+
+    This function is provided for compatibility with other Qt containers.
+
+    \warning Calling this function on an empty string view constitutes
+    undefined behavior.
+
+    \sa back(), front(), first()
+*/
+
+/*!
+    \fn QStringView QStringView::mid(qsizetype start) const
+
+    Returns the substring starting at position \a start in this object,
+    and extending to the end of the string.
+
+    \note The behavior is undefined when \a start < 0 or \a start > size().
+
+    \sa left(), right(), chopped(), chop(), truncate()
+*/
+
+/*!
+    \fn QStringView QStringView::mid(qsizetype start, qsizetype length) const
+    \overload
+
+    Returns the substring of length \a length starting at position
+    \a start in this object.
+
+    \note The behavior is undefined when \a start < 0, \a length < 0,
+    or \a start + \a length > size().
+
+    \sa left(), right(), chopped(), chop(), truncate()
+*/
+
+/*!
+    \fn QStringView QStringView::left(qsizetype length) const
+
+    Returns the substring of length \a length starting at position
+    0 in this object.
+
+    \note The behavior is undefined when \a length < 0 or \a length > size().
+
+    \sa mid(), right(), chopped(), chop(), truncate()
+*/
+
+/*!
+    \fn QStringView QStringView::right(qsizetype length) const
+
+    Returns the substring of length \a length starting at position
+    size() - \a length in this object.
+
+    \note The behavior is undefined when \a length < 0 or \a length > size().
+
+    \sa mid(), left(), chopped(), chop(), truncate()
+*/
+
+/*!
+    \fn QStringView QStringView::chopped(qsizetype length) const
+
+    Returns the substring of length size() - \a length starting at the
+    beginning of this object.
+
+    Same as \c{left(size() - length)}.
+
+    \note The behavior is undefined when \a length < 0 or \a length > size().
+
+    \sa mid(), left(), right(), chop(), truncate()
+*/
+
+/*!
+    \fn void QStringView::truncate(qsizetype length)
+
+    Truncates this string view to length \a length.
+
+    Same as \c{*this = left(length)}.
+
+    \note The behavior is undefined when \a length < 0 or \a length > size().
+
+    \sa mid(), left(), right(), chopped(), chop()
+*/
+
+/*!
+    \fn void QStringView::chop(qsizetype length)
+
+    Truncates this string view by \a length characters.
+
+    Same as \c{*this = left(size() - length)}.
+
+    \note The behavior is undefined when \a length < 0 or \a length > size().
+
+    \sa mid(), left(), right(), chopped(), truncate()
+*/
+
+/*!
+    \fn QStringView QStringView::trimmed() const
+
+    Strips leading and trailing whitespace and returns the result.
+
+    Whitespace means any character for which QChar::isSpace() returns
+    \c true. This includes the ASCII characters '\\t', '\\n', '\\v',
+    '\\f', '\\r', and ' '.
+*/
+
+/*!
+    \fn bool QStringView::startsWith(QStringView str, Qt::CaseSensitivity cs) const
+    \fn bool QStringView::startsWith(QLatin1String l1, Qt::CaseSensitivity cs) const
+    \fn bool QStringView::startsWith(QChar ch) const
+    \fn bool QStringView::startsWith(QChar ch, Qt::CaseSensitivity cs) const
+
+    Returns \c true if this string-view starts with string-view \a str,
+    Latin-1 string \a l1, or character \a ch, respectively;
+    otherwise returns \c false.
+
+    If \a cs is Qt::CaseSensitive (the default), the search is case-sensitive;
+    otherwise the search is case-insensitive.
+
+    \sa endsWith()
+*/
+
+/*!
+    \fn bool QStringView::endsWith(QStringView str, Qt::CaseSensitivity cs) const
+    \fn bool QStringView::endsWith(QLatin1String l1, Qt::CaseSensitivity cs) const
+    \fn bool QStringView::endsWith(QChar ch) const
+    \fn bool QStringView::endsWith(QChar ch, Qt::CaseSensitivity cs) const
+
+    Returns \c true if this string-view ends with string-view \a str,
+    Latin-1 string \a l1, or character \a ch, respectively;
+    otherwise returns \c false.
+
+    If \a cs is Qt::CaseSensitive (the default), the search is case-sensitive;
+    otherwise the search is case-insensitive.
+
+    \sa startsWith()
+*/
+
+/*!
+    \fn QByteArray QStringView::toLatin1() const
+
+    Returns a Latin-1 representation of the string as a QByteArray.
+
+    The behavior is undefined if the string contains non-Latin1 characters.
+
+    \sa toUtf8(), toLocal8Bit(), QTextCodec, qConvertToLatin1()
+*/
+
+/*!
+    \fn QByteArray QStringView::toLocal8Bit() const
+
+    Returns a local 8-bit representation of the string as a QByteArray.
+
+    QTextCodec::codecForLocale() is used to perform the conversion from
+    Unicode. If the locale's encoding could not be determined, this function
+    does the same as toLatin1().
+
+    The behavior is undefined if the string contains characters not
+    supported by the locale's 8-bit encoding.
+
+    \sa toLatin1(), toUtf8(), QTextCodec
+*/
+
+/*!
+    \fn QByteArray QStringView::toUtf8() const
+
+    Returns a UTF-8 representation of the string as a QByteArray.
+
+    UTF-8 is a Unicode codec and can represent all characters in a Unicode
+    string like QString.
+
+    \sa toLatin1(), toLocal8Bit(), QTextCodec, qConvertToUtf8()
+*/
+
+/*!
+    \fn QVector<uint> QStringView::toUcs4() const
+
+    Returns a UCS-4/UTF-32 representation of the string as a QVector<uint>.
+
+    UCS-4 is a Unicode codec and therefore it is lossless. All characters from
+    this string will be encoded in UCS-4. Any invalid sequence of code units in
+    this string is replaced by the Unicode replacement character
+    (QChar::ReplacementCharacter, which corresponds to \c{U+FFFD}).
+
+    The returned vector is not 0-terminated.
+
+    \sa toUtf8(), toLatin1(), toLocal8Bit(), QTextCodec
+*/
+
+/*!
+    \fn qToStringViewIgnoringNull(const QStringLike &s);
+    \since 5.10
+    \internal
+
+    Convert \a s to a QStringView ignoring \c{s.isNull()}.
+
+    Returns a string-view that references \a{s}' data, but is never null.
+
+    This is a faster way to convert a QString or QStringRef to a QStringView,
+    if null QStrings can legitimately be treated as empty ones.
+
+    \sa QString::isNull(), QStringRef::isNull(), QStringView
+*/
+
+QString QStringView::toString() const
+{
+    return Q_ASSERT10(size() == length()), QString(data(), length());
+}
+
+uint qHash(QStringView key, uint seed) Q_DECL_NOTHROW
+{
+    return qHash(key.toString(), seed);
+}
+
+// From qstring.h @ 5.10 :
+
+bool QLatin1String::startsWith(QStringView s, Qt::CaseSensitivity cs) const Q_DECL_NOTHROW
+{
+    return QtPrivate::startsWith(*this, s, cs);
+}
+
+Q_REQUIRED_RESULT bool QLatin1String::startsWith(QLatin1String s, Qt::CaseSensitivity cs) const Q_DECL_NOTHROW
+{
+    return QtPrivate::startsWith(*this, s, cs);
+}
+
+Q_REQUIRED_RESULT Q_DECL_CONSTEXPR bool QLatin1String::startsWith(QChar c) const Q_DECL_NOTHROW
+{
+    return size() && front() == c;
+}
+
+Q_REQUIRED_RESULT inline bool QLatin1String::startsWith(QChar c, Qt::CaseSensitivity cs) const Q_DECL_NOTHROW
+{
+    return QtPrivate::startsWith(*this, QStringView(&c, 1), cs);
+}
+
+Q_REQUIRED_RESULT bool QLatin1String::endsWith(QStringView s, Qt::CaseSensitivity cs) const Q_DECL_NOTHROW
+{
+    return QtPrivate::endsWith(*this, s, cs);
+}
+
+Q_REQUIRED_RESULT bool QLatin1String::endsWith(QLatin1String s, Qt::CaseSensitivity cs) const Q_DECL_NOTHROW
+{
+    return QtPrivate::endsWith(*this, s, cs);
+}
+
+Q_REQUIRED_RESULT Q_DECL_CONSTEXPR bool QLatin1String::endsWith(QChar c) const Q_DECL_NOTHROW
+{
+    return size() && back() == c;
+}
+
+Q_REQUIRED_RESULT inline bool QLatin1String::endsWith(QChar c, Qt::CaseSensitivity cs) const Q_DECL_NOTHROW
+{
+    return QtPrivate::endsWith(*this, QStringView(&c, 1), cs);
+}
+
+Q_REQUIRED_RESULT QString QString::arg(QStringView a, int fieldWidth, QChar fillChar) const
+{
+    return arg(a.toString(), fieldWidth, fillChar);
+}
+
+Q_REQUIRED_RESULT bool QString::startsWith(QStringView s, Qt::CaseSensitivity cs) const Q_DECL_NOTHROW
+{
+    return QtPrivate::startsWith(*this, s, cs);
+}
+
+Q_REQUIRED_RESULT bool QString::endsWith(QStringView s, Qt::CaseSensitivity cs) const Q_DECL_NOTHROW
+{
+    return QtPrivate::endsWith(*this, s, cs);
+}
+
+Q_REQUIRED_RESULT bool QStringRef::startsWith(QStringView s, Qt::CaseSensitivity cs) const Q_DECL_NOTHROW
+{
+    return QtPrivate::startsWith(*this, s, cs);
+}
+
+Q_REQUIRED_RESULT bool QStringRef::endsWith(QStringView s, Qt::CaseSensitivity cs) const Q_DECL_NOTHROW
+{
+    return QtPrivate::endsWith(*this, s, cs);
+}
+
+// from qdatetime.cpp @ 5.10
+
+QString QDate::toString(QStringView format) const
+{
+    return QLocale::system().toString(*this, format.toString()); // QLocale::c() ### Qt6
+}
+
+QString QTime::toString(QStringView format) const
+{
+    return QLocale::system().toString(*this, format.toString()); // QLocale::c() ### Qt6
+}
+
+QString QDateTime::toString(QStringView format) const
+{
+    return QLocale::system().toString(*this, format.toString()); // QLocale::c() ### Qt6
+}
+
+
+QT_END_NAMESPACE
diff --git a/qtbase/src/corelib/tools/qstringview.h b/qtbase/src/corelib/tools/qstringview.h
new file mode 100644
index 0000000000000000000000000000000000000000..4966003a2ed4fb1334382f7ef8ebc4db8b946221
--- /dev/null
+++ b/qtbase/src/corelib/tools/qstringview.h
@@ -0,0 +1,364 @@
+/****************************************************************************
+**
+** Copyright (C) 2017 Klar√§lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Marc Mutz <marc.mutz@kdab.com>
+** Contact: http://www.qt.io/licensing/
+**
+** This file is part of the QtCore module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+#ifndef QSTRINGVIEW_H
+#define QSTRINGVIEW_H
+
+#ifndef QT_STRINGVIEW_LEVEL
+#  define QT_STRINGVIEW_LEVEL 1
+#endif
+
+#include <QtCore/qchar.h>
+#include <QtCore/qbytearray.h>
+// RJVB : include qstring.h instead of qstringliteral.h
+#include <QtCore/qstring.h>
+#include <QtCore/qstringalgorithms.h>
+
+#include <string>
+
+#if !defined(Q_ASSERT10)
+#  if defined(QT_NO_DEBUG) && !defined(QT_FORCE_ASSERTS)
+#    define Q_ASSERT10(cond) static_cast<void>(false && (cond))
+#  else
+#    define Q_ASSERT10(cond) ((cond) ? static_cast<void>(0) : qt_assert(#cond, __FILE__, __LINE__))
+#  endif
+#endif
+
+QT_BEGIN_NAMESPACE
+
+class QString;
+class QStringRef;
+
+namespace QtPrivate {
+template <typename Char>
+struct IsCompatibleCharTypeHelper
+    : std::integral_constant<bool,
+                             std::is_same<Char, QChar>::value ||
+                             std::is_same<Char, ushort>::value ||
+#if defined(Q_COMPILER_UNICODE_STRINGS)
+                             std::is_same<Char, char16_t>::value ||
+#endif
+                             (std::is_same<Char, wchar_t>::value && sizeof(wchar_t) == sizeof(QChar))> {};
+template <typename Char>
+struct IsCompatibleCharType
+    : IsCompatibleCharTypeHelper<typename std::remove_cv<typename std::remove_reference<Char>::type>::type> {};
+
+template <typename Array>
+struct IsCompatibleArrayHelper : std::false_type {};
+template <typename Char, size_t N>
+struct IsCompatibleArrayHelper<Char[N]>
+    : IsCompatibleCharType<Char> {};
+template <typename Array>
+struct IsCompatibleArray
+    : IsCompatibleArrayHelper<typename std::remove_cv<typename std::remove_reference<Array>::type>::type> {};
+
+template <typename Pointer>
+struct IsCompatiblePointerHelper : std::false_type {};
+template <typename Char>
+struct IsCompatiblePointerHelper<Char*>
+    : IsCompatibleCharType<Char> {};
+template <typename Pointer>
+struct IsCompatiblePointer
+    : IsCompatiblePointerHelper<typename std::remove_cv<typename std::remove_reference<Pointer>::type>::type> {};
+
+template <typename T>
+struct IsCompatibleStdBasicStringHelper : std::false_type {};
+template <typename Char, typename...Args>
+struct IsCompatibleStdBasicStringHelper<std::basic_string<Char, Args...> >
+    : IsCompatibleCharType<Char> {};
+
+template <typename T>
+struct IsCompatibleStdBasicString
+    : IsCompatibleStdBasicStringHelper<
+        typename std::remove_cv<typename std::remove_reference<T>::type>::type
+      > {};
+
+} // namespace QtPrivate
+
+class QStringView
+{
+public:
+#if defined(Q_OS_WIN) && !defined(Q_COMPILER_UNICODE_STRINGS)
+    typedef wchar_t storage_type;
+#else
+    typedef char16_t storage_type;
+#endif
+    typedef const QChar value_type;
+    typedef std::ptrdiff_t difference_type;
+    typedef qsizetype size_type;
+    typedef value_type &reference;
+    typedef value_type &const_reference;
+    typedef value_type *pointer;
+    typedef value_type *const_pointer;
+
+    typedef pointer iterator;
+    typedef const_pointer const_iterator;
+    typedef std::reverse_iterator<iterator> reverse_iterator;
+    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
+
+private:
+    template <typename Char>
+    using if_compatible_char = typename std::enable_if<QtPrivate::IsCompatibleCharType<Char>::value, bool>::type;
+
+    template <typename Array>
+    using if_compatible_array = typename std::enable_if<QtPrivate::IsCompatibleArray<Array>::value, bool>::type;
+
+    template <typename Pointer>
+    using if_compatible_pointer = typename std::enable_if<QtPrivate::IsCompatiblePointer<Pointer>::value, bool>::type;
+
+    template <typename T>
+    using if_compatible_string = typename std::enable_if<QtPrivate::IsCompatibleStdBasicString<T>::value, bool>::type;
+
+    template <typename T>
+    using if_compatible_qstring_like = typename std::enable_if<std::is_same<T, QString>::value || std::is_same<T, QStringRef>::value, bool>::type;
+
+    template <typename Char, size_t N>
+    static Q_DECL_CONSTEXPR qsizetype lengthHelperArray(const Char (&)[N]) Q_DECL_NOTHROW
+    {
+        return qsizetype(N - 1);
+    }
+
+    template <typename Char>
+    static qsizetype lengthHelperPointer(const Char *str) Q_DECL_NOTHROW
+    {
+#if defined(Q_CC_GNU) && !defined(Q_CC_CLANG) && !defined(Q_CC_INTEL)
+        if (__builtin_constant_p(*str)) {
+            qsizetype result = 0;
+            while (*str++)
+                ++result;
+            return result;
+        }
+#endif
+        return QtPrivate::qustrlen(reinterpret_cast<const ushort *>(str));
+    }
+    static qsizetype lengthHelperPointer(const QChar *str) Q_DECL_NOTHROW
+    {
+        return QtPrivate::qustrlen(reinterpret_cast<const ushort *>(str));
+    }
+
+    template <typename Char>
+    static const storage_type *castHelper(const Char *str) Q_DECL_NOTHROW
+    { return reinterpret_cast<const storage_type*>(str); }
+    static Q_DECL_CONSTEXPR const storage_type *castHelper(const storage_type *str) Q_DECL_NOTHROW
+    { return str; }
+
+public:
+    Q_DECL_CONSTEXPR QStringView() Q_DECL_NOTHROW
+        : m_size(0), m_data(nullptr) {}
+    Q_DECL_CONSTEXPR QStringView(std::nullptr_t) Q_DECL_NOTHROW
+        : QStringView() {}
+
+    template <typename Char, if_compatible_char<Char> = true>
+    Q_DECL_CONSTEXPR QStringView(const Char *str, qsizetype len)
+        : m_size((Q_ASSERT10(len >= 0), Q_ASSERT10(str || !len), len)),
+          m_data(castHelper(str)) {}
+
+    template <typename Char, if_compatible_char<Char> = true>
+    Q_DECL_CONSTEXPR QStringView(const Char *f, const Char *l)
+        : QStringView(f, l - f) {}
+
+#ifdef Q_QDOC
+    template <typename Char, size_t N>
+    Q_DECL_CONSTEXPR QStringView(const Char (&array)[N]) Q_DECL_NOTHROW;
+
+    template <typename Char>
+    Q_DECL_CONSTEXPR QStringView(const Char *str) Q_DECL_NOTHROW;
+#else
+    template <typename Array, if_compatible_array<Array> = true>
+    Q_DECL_CONSTEXPR QStringView(const Array &str) Q_DECL_NOTHROW
+        : QStringView(str, lengthHelperArray(str)) {}
+
+    template <typename Pointer, if_compatible_pointer<Pointer> = true>
+    Q_DECL_CONSTEXPR QStringView(const Pointer &str) Q_DECL_NOTHROW
+        : QStringView(str, str ? lengthHelperPointer(str) : 0) {}
+#endif
+
+#ifdef Q_QDOC
+    QStringView(const QString &str) Q_DECL_NOTHROW;
+    QStringView(const QStringRef &str) Q_DECL_NOTHROW;
+#else
+    template <typename String, if_compatible_qstring_like<String> = true>
+    QStringView(const String &str) Q_DECL_NOTHROW
+        : QStringView(str.isNull() ? nullptr : str.data(), qsizetype(str.size())) {}
+#endif
+
+    template <typename StdBasicString, if_compatible_string<StdBasicString> = true>
+    QStringView(const StdBasicString &str) Q_DECL_NOTHROW
+        : QStringView(str.data(), qsizetype(str.size())) {}
+
+    Q_REQUIRED_RESULT inline QString toString() const; // defined in qstring.h
+
+    Q_REQUIRED_RESULT Q_DECL_CONSTEXPR qsizetype size() const Q_DECL_NOTHROW { return m_size; }
+    Q_REQUIRED_RESULT const_pointer data() const Q_DECL_NOTHROW { return reinterpret_cast<const_pointer>(m_data); }
+    Q_REQUIRED_RESULT Q_DECL_CONSTEXPR const storage_type *utf16() const Q_DECL_NOTHROW { return m_data; }
+
+    Q_REQUIRED_RESULT Q_DECL_CONSTEXPR QChar operator[](qsizetype n) const
+    { return Q_ASSERT10(n >= 0), Q_ASSERT10(n < size()), QChar(m_data[n]); }
+
+    //
+    // QString API
+    //
+
+    Q_REQUIRED_RESULT QByteArray toLatin1() const { return QtPrivate::convertToLatin1(*this); }
+    Q_REQUIRED_RESULT QByteArray toUtf8() const { return QtPrivate::convertToUtf8(*this); }
+    Q_REQUIRED_RESULT QByteArray toLocal8Bit() const { return QtPrivate::convertToLocal8Bit(*this); }
+    Q_REQUIRED_RESULT inline QVector<uint> toUcs4() const; // defined in qvector.h
+
+    Q_REQUIRED_RESULT Q_DECL_CONSTEXPR QChar at(qsizetype n) const { return (*this)[n]; }
+
+    Q_REQUIRED_RESULT Q_DECL_CONSTEXPR QStringView mid(qsizetype pos) const
+    { return Q_ASSERT10(pos >= 0), Q_ASSERT10(pos <= size()), QStringView(m_data + pos, m_size - pos); }
+    Q_REQUIRED_RESULT Q_DECL_CONSTEXPR QStringView mid(qsizetype pos, qsizetype n) const
+    { return Q_ASSERT10(pos >= 0), Q_ASSERT10(n >= 0), Q_ASSERT10(pos + n <= size()), QStringView(m_data + pos, n); }
+    Q_REQUIRED_RESULT Q_DECL_CONSTEXPR QStringView left(qsizetype n) const
+    { return Q_ASSERT10(n >= 0), Q_ASSERT10(n <= size()), QStringView(m_data, n); }
+    Q_REQUIRED_RESULT Q_DECL_CONSTEXPR QStringView right(qsizetype n) const
+    { return Q_ASSERT10(n >= 0), Q_ASSERT10(n <= size()), QStringView(m_data + m_size - n, n); }
+    Q_REQUIRED_RESULT Q_DECL_CONSTEXPR QStringView chopped(qsizetype n) const
+    { return Q_ASSERT10(n >= 0), Q_ASSERT10(n <= size()), QStringView(m_data, m_size - n); }
+
+    Q_DECL_RELAXED_CONSTEXPR void truncate(qsizetype n)
+    { Q_ASSERT(n >= 0); Q_ASSERT(n <= size()); m_size = n; }
+    Q_DECL_RELAXED_CONSTEXPR void chop(qsizetype n)
+    { Q_ASSERT(n >= 0); Q_ASSERT(n <= size()); m_size -= n; }
+
+    Q_REQUIRED_RESULT QStringView trimmed() const Q_DECL_NOTHROW { return QtPrivate::trimmed(*this); }
+
+    Q_REQUIRED_RESULT bool startsWith(QStringView s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const Q_DECL_NOTHROW
+    { return QtPrivate::startsWith(*this, s, cs); }
+    Q_REQUIRED_RESULT inline bool startsWith(QLatin1String s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const Q_DECL_NOTHROW;
+    Q_REQUIRED_RESULT bool startsWith(QChar c) const Q_DECL_NOTHROW
+    { return !empty() && front() == c; }
+    Q_REQUIRED_RESULT bool startsWith(QChar c, Qt::CaseSensitivity cs) const Q_DECL_NOTHROW
+    { return QtPrivate::startsWith(*this, QStringView(&c, 1), cs); }
+
+    Q_REQUIRED_RESULT bool endsWith(QStringView s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const Q_DECL_NOTHROW
+    { return QtPrivate::endsWith(*this, s, cs); }
+    Q_REQUIRED_RESULT inline bool endsWith(QLatin1String s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const Q_DECL_NOTHROW;
+    Q_REQUIRED_RESULT bool endsWith(QChar c) const Q_DECL_NOTHROW
+    { return !empty() && back() == c; }
+    Q_REQUIRED_RESULT bool endsWith(QChar c, Qt::CaseSensitivity cs) const Q_DECL_NOTHROW
+    { return QtPrivate::endsWith(*this, QStringView(&c, 1), cs); }
+
+    //
+    // STL compatibility API:
+    //
+    Q_REQUIRED_RESULT const_iterator begin()   const Q_DECL_NOTHROW { return data(); }
+    Q_REQUIRED_RESULT const_iterator end()     const Q_DECL_NOTHROW { return data() + size(); }
+    Q_REQUIRED_RESULT const_iterator cbegin()  const Q_DECL_NOTHROW { return begin(); }
+    Q_REQUIRED_RESULT const_iterator cend()    const Q_DECL_NOTHROW { return end(); }
+    Q_REQUIRED_RESULT const_reverse_iterator rbegin()  const Q_DECL_NOTHROW { return const_reverse_iterator(end()); }
+    Q_REQUIRED_RESULT const_reverse_iterator rend()    const Q_DECL_NOTHROW { return const_reverse_iterator(begin()); }
+    Q_REQUIRED_RESULT const_reverse_iterator crbegin() const Q_DECL_NOTHROW { return rbegin(); }
+    Q_REQUIRED_RESULT const_reverse_iterator crend()   const Q_DECL_NOTHROW { return rend(); }
+
+    Q_REQUIRED_RESULT Q_DECL_CONSTEXPR bool empty() const Q_DECL_NOTHROW { return size() == 0; }
+    Q_REQUIRED_RESULT Q_DECL_CONSTEXPR QChar front() const { return Q_ASSERT10(!empty()), QChar(m_data[0]); }
+    Q_REQUIRED_RESULT Q_DECL_CONSTEXPR QChar back()  const { return Q_ASSERT10(!empty()), QChar(m_data[m_size - 1]); }
+
+    //
+    // Qt compatibility API:
+    //
+    Q_REQUIRED_RESULT Q_DECL_CONSTEXPR bool isNull() const Q_DECL_NOTHROW { return !m_data; }
+    Q_REQUIRED_RESULT Q_DECL_CONSTEXPR bool isEmpty() const Q_DECL_NOTHROW { return empty(); }
+    Q_REQUIRED_RESULT Q_DECL_CONSTEXPR int length() const /* not nothrow! */
+    { return Q_ASSERT10(int(size()) == size()), int(size()); }
+    Q_REQUIRED_RESULT Q_DECL_CONSTEXPR QChar first() const { return front(); }
+    Q_REQUIRED_RESULT Q_DECL_CONSTEXPR QChar last()  const { return back(); }
+private:
+    qsizetype m_size;
+    const storage_type *m_data;
+};
+Q_DECLARE_TYPEINFO(QStringView, Q_PRIMITIVE_TYPE);
+
+template <typename QStringLike, typename std::enable_if<
+    std::is_same<QStringLike, QString>::value || std::is_same<QStringLike, QStringRef>::value,
+    bool>::type = true>
+inline QStringView qToStringViewIgnoringNull(const QStringLike &s) Q_DECL_NOTHROW
+{ return QStringView(s.data(), s.size()); }
+
+Q_CORE_EXPORT Q_DECL_PURE_FUNCTION uint qHash(QStringView key, uint seed = 0) Q_DECL_NOTHROW;
+
+#ifndef QT_NO_UNICODE_LITERAL
+# ifndef QT_UNICODE_LITERAL
+#  error "If you change QStringLiteral, please change QStringViewLiteral, too"
+# endif
+# define QStringViewLiteral(str) QStringView(QT_UNICODE_LITERAL(str))
+#endif
+
+// QStringView <> QStringView
+inline bool operator==(QStringView lhs, QStringView rhs) Q_DECL_NOTHROW { return lhs.size() == rhs.size() && QtPrivate::compareStrings(lhs, rhs) == 0; }
+inline bool operator!=(QStringView lhs, QStringView rhs) Q_DECL_NOTHROW { return !(lhs == rhs); }
+inline bool operator< (QStringView lhs, QStringView rhs) Q_DECL_NOTHROW { return QtPrivate::compareStrings(lhs, rhs) <  0; }
+inline bool operator<=(QStringView lhs, QStringView rhs) Q_DECL_NOTHROW { return QtPrivate::compareStrings(lhs, rhs) <= 0; }
+inline bool operator> (QStringView lhs, QStringView rhs) Q_DECL_NOTHROW { return QtPrivate::compareStrings(lhs, rhs) >  0; }
+inline bool operator>=(QStringView lhs, QStringView rhs) Q_DECL_NOTHROW { return QtPrivate::compareStrings(lhs, rhs) >= 0; }
+
+// QStringView <> QChar
+inline bool operator==(QStringView lhs, QChar rhs) Q_DECL_NOTHROW { return lhs == QStringView(&rhs, 1); }
+inline bool operator!=(QStringView lhs, QChar rhs) Q_DECL_NOTHROW { return lhs != QStringView(&rhs, 1); }
+inline bool operator< (QStringView lhs, QChar rhs) Q_DECL_NOTHROW { return lhs <  QStringView(&rhs, 1); }
+inline bool operator<=(QStringView lhs, QChar rhs) Q_DECL_NOTHROW { return lhs <= QStringView(&rhs, 1); }
+inline bool operator> (QStringView lhs, QChar rhs) Q_DECL_NOTHROW { return lhs >  QStringView(&rhs, 1); }
+inline bool operator>=(QStringView lhs, QChar rhs) Q_DECL_NOTHROW { return lhs >= QStringView(&rhs, 1); }
+
+inline bool operator==(QChar lhs, QStringView rhs) Q_DECL_NOTHROW { return QStringView(&lhs, 1) == rhs; }
+inline bool operator!=(QChar lhs, QStringView rhs) Q_DECL_NOTHROW { return QStringView(&lhs, 1) != rhs; }
+inline bool operator< (QChar lhs, QStringView rhs) Q_DECL_NOTHROW { return QStringView(&lhs, 1) <  rhs; }
+inline bool operator<=(QChar lhs, QStringView rhs) Q_DECL_NOTHROW { return QStringView(&lhs, 1) <= rhs; }
+inline bool operator> (QChar lhs, QStringView rhs) Q_DECL_NOTHROW { return QStringView(&lhs, 1) >  rhs; }
+inline bool operator>=(QChar lhs, QStringView rhs) Q_DECL_NOTHROW { return QStringView(&lhs, 1) >= rhs; }
+
+// QStringView <> QLatin1String
+inline bool operator==(QStringView lhs, QLatin1String rhs) Q_DECL_NOTHROW { return lhs.size() == rhs.size() && QtPrivate::compareStrings(lhs, rhs) == 0; }
+inline bool operator!=(QStringView lhs, QLatin1String rhs) Q_DECL_NOTHROW { return !(lhs == rhs); }
+inline bool operator< (QStringView lhs, QLatin1String rhs) Q_DECL_NOTHROW { return QtPrivate::compareStrings(lhs, rhs) <  0; }
+inline bool operator<=(QStringView lhs, QLatin1String rhs) Q_DECL_NOTHROW { return QtPrivate::compareStrings(lhs, rhs) <= 0; }
+inline bool operator> (QStringView lhs, QLatin1String rhs) Q_DECL_NOTHROW { return QtPrivate::compareStrings(lhs, rhs) >  0; }
+inline bool operator>=(QStringView lhs, QLatin1String rhs) Q_DECL_NOTHROW { return QtPrivate::compareStrings(lhs, rhs) >= 0; }
+
+inline bool operator==(QLatin1String lhs, QStringView rhs) Q_DECL_NOTHROW { return lhs.size() == rhs.size() && QtPrivate::compareStrings(lhs, rhs) == 0; }
+inline bool operator!=(QLatin1String lhs, QStringView rhs) Q_DECL_NOTHROW { return !(lhs == rhs); }
+inline bool operator< (QLatin1String lhs, QStringView rhs) Q_DECL_NOTHROW { return QtPrivate::compareStrings(lhs, rhs) <  0; }
+inline bool operator<=(QLatin1String lhs, QStringView rhs) Q_DECL_NOTHROW { return QtPrivate::compareStrings(lhs, rhs) <= 0; }
+inline bool operator> (QLatin1String lhs, QStringView rhs) Q_DECL_NOTHROW { return QtPrivate::compareStrings(lhs, rhs) >  0; }
+inline bool operator>=(QLatin1String lhs, QStringView rhs) Q_DECL_NOTHROW { return QtPrivate::compareStrings(lhs, rhs) >= 0; }
+
+QT_END_NAMESPACE
+
+#endif /* QSTRINGVIEW_H */
diff --git a/qtbase/src/corelib/tools/tools.pri b/qtbase/src/corelib/tools/tools.pri
index bea8e9743527649110f9bc73063c7695b14254f4..9f5d6fa3a6bd5b4b7776de0e257fb04beb19e256 100644
--- a/qtbase/src/corelib/tools/tools.pri
+++ b/qtbase/src/corelib/tools/tools.pri
@@ -57,11 +57,13 @@ HEADERS +=  \
         tools/qsize.h \
         tools/qstack.h \
         tools/qstring.h \
+        tools/qstringalgorithms.h \
         tools/qstringalgorithms_p.h \
         tools/qstringbuilder.h \
         tools/qstringiterator_p.h \
         tools/qstringlist.h \
         tools/qstringmatcher.h \
+        tools/qstringview.h \
         tools/qtextboundaryfinder.h \
         tools/qtimeline.h \
         tools/qtools_p.h \
@@ -71,6 +73,9 @@ HEADERS +=  \
         tools/qvector.h \
         tools/qversionnumber.h
 
+# RJVB: for QStringView; we use qstring.h instead
+# HEADERS +=  \
+#         tools/qstringliteral.h
 
 SOURCES += \
         tools/qarraydata.cpp \
@@ -111,6 +116,10 @@ SOURCES += \
         tools/qvsnprintf.cpp \
         tools/qversionnumber.cpp
 
+# RJVB : backport QStringView
+SOURCES += \
+        tools/qstringview.cpp 
+
 NO_PCH_SOURCES = tools/qstring_compat.cpp
 msvc: NO_PCH_SOURCES += tools/qvector_msvc.cpp
 false: SOURCES += $$NO_PCH_SOURCES # Hack for QtCreator
diff --git a/qtbase/include/QtCore/QStringAlgorithms b/qtbase/include/QtCore/QStringAlgorithms
new file mode 100644
index 00000000..a520c646
--- /dev/null
+++ b/qtbase/include/QtCore/QStringAlgorithms
@@ -0,0 +1 @@
+#include "qstringalgorithms.h"
diff --git a/qtbase/include/QtCore/QStringView b/qtbase/include/QtCore/QStringView
new file mode 100644
index 00000000..022413cc
--- /dev/null
+++ b/qtbase/include/QtCore/QStringView
@@ -0,0 +1 @@
+#include "qstringview.h"
diff --git a/qtbase/include/QtCore/qstringalgorithms.h b/qtbase/include/QtCore/qstringalgorithms.h
new file mode 100644
index 00000000..77a5df53
--- /dev/null
+++ b/qtbase/include/QtCore/qstringalgorithms.h
@@ -0,0 +1 @@
+#include "../../src/corelib/tools/qstringalgorithms.h"
diff --git a/qtbase/include/QtCore/qstringliteral.h b/qtbase/include/QtCore/qstringliteral.h
new file mode 100644
index 00000000..0804f98f
--- /dev/null
+++ b/qtbase/include/QtCore/qstringliteral.h
@@ -0,0 +1 @@
+#include "../../src/corelib/tools/qstringliteral.h"
diff --git a/qtbase/include/QtCore/qstringview.h b/qtbase/include/QtCore/qstringview.h
new file mode 100644
index 00000000..b9364542
--- /dev/null
+++ b/qtbase/include/QtCore/qstringview.h
@@ -0,0 +1 @@
+#include "../../src/corelib/tools/qstringview.h"
