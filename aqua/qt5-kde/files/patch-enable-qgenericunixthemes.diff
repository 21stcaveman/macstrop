--- a/qtbase/src/platformsupport/themes/genericunix/qgenericunixthemes.cpp
+++ b/qtbase/src/platformsupport/themes/genericunix/qgenericunixthemes.cpp
@@ -43,6 +43,8 @@
 #include <QtCore/QFileInfo>
 #include <QtCore/QFile>
 #include <QtCore/QDebug>
+#undef QT_NO_DEBUG
+#undef QT_NO_DEBUG_OUTPUT
 #include <QtCore/QHash>
 #include <QtCore/QLoggingCategory>
 #include <QtCore/QSettings>
@@ -692,7 +694,9 @@
 #endif
     if (name == QLatin1String(QGnomeTheme::name))
         return new QGnomeTheme;
-    return Q_NULLPTR;
+//     return Q_NULLPTR;
+    // On OS X prefer to return something valid always?
+    return new QGenericUnixTheme;
 }
 
 QStringList QGenericUnixTheme::themeNames()
--- a/qtbase/src/platformsupport/themes/themes.pri
+++ b/qtbase/src/platformsupport/themes/themes.pri
@@ -1,3 +1,3 @@
-unix:!mac {
+unix {
     include($$PWD/genericunix/genericunix.pri)
 }
--- a/qtbase/src/plugins/platforms/cocoa/qcocoaintegration.mm
+++ b/qtbase/src/plugins/platforms/cocoa/qcocoaintegration.mm
@@ -54,6 +54,8 @@
 
 #include <IOKit/graphics/IOGraphicsLib.h>
 
+#include <private/qgenericunixthemes_p.h>
+
 static void initResources()
 {
     Q_INIT_RESOURCE(qcocoaresources);
@@ -521,14 +523,33 @@
 
 QStringList QCocoaIntegration::themeNames() const
 {
-    return QStringList(QLatin1String(QCocoaTheme::name));
+    QStringList themes;
+    themes.push_back(QLatin1String(QCocoaTheme::name));
+    const QByteArray kdeSessionVersion = qgetenv("KDE_SESSION_VERSION");
+    const int kdeVersion = kdeSessionVersion.toInt();
+    if (kdeVersion >= 4)
+        themes.push_back(QLatin1String("kde"));
+    return themes;
 }
 
 QPlatformTheme *QCocoaIntegration::createPlatformTheme(const QString &name) const
 {
-    if (name == QLatin1String(QCocoaTheme::name))
+    // qDebug() << "QCocoaIntegration::createPlatformTheme(" << n << ")";
+    if (name == QLatin1String(QCocoaTheme::name)) {
+        // qDebug() << "returning the QCocoaTheme";
         return new QCocoaTheme;
-    return QPlatformIntegration::createPlatformTheme(name);
+    }
+    QPlatformTheme *unixTheme = QGenericUnixTheme::createUnixTheme(name);
+    if (unixTheme) {
+        qDebug() << "returning QGenericUnixTheme" << unixTheme;
+        return unixTheme;
+    }
+    else {
+        unixTheme = QPlatformIntegration::createPlatformTheme(name);
+        qDebug() << "returning QPlatformIntegration::createPlatformTheme(" << name << ")=" << unixTheme;
+        return unixTheme;
+//         return QPlatformIntegration::createPlatformTheme(name);
+    }
 }
 
 QCocoaServices *QCocoaIntegration::services() const
--- a/qtbase/src/widgets/styles/qmacstyle_mac.mm
+++ b/qtbase/src/widgets/styles/qmacstyle_mac.mm
@@ -4245,7 +4245,10 @@
             // (QComboMenuItem is internal and should never be seen by the
             // outside world, unless they read the source, in which case, it's
             // their own fault).
-            bool nonDefaultFont = p->font() != qt_app_fonts_hash()->value("QComboMenuItem");
+//             bool nonDefaultFont = p->font() != qt_app_fonts_hash()->value("QComboMenuItem");
+            // We support non-native themes in this patched Qt version, so we cannot rely on the result
+            // of the test above. It's best to presume it always returns true.
+            bool nonDefaultFont = true;
             bool isSelectedAndNeedsShadow = selected && !usingYosemiteOrLater;
             if (isSelectedAndNeedsShadow || verticalTabs || nonDefaultFont || !tab->icon.isNull()
                 || !myTab.leftButtonSize.isEmpty() || !myTab.rightButtonSize.isEmpty()) {
