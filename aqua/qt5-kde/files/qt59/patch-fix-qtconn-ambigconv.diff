From: Timur Pocheptsov <timur.pocheptsov@qt.io>
Date: Wed, 3 Jul 2019 13:26:31 +0000 (+0200)
Subject: Core/IO/Bluetooth - fix ambiguous conversions
X-Git-Tag: v5.13.1~3^2^2
X-Git-Url: https://codereview.qt-project.org/gitweb?p=qt%2Fqtconnectivity.git;a=commitdiff_plain;h=0fc7e18bf7a24c9408602242d51a852905dfd0da

Core/IO/Bluetooth - fix ambiguous conversions

... somewhat prospective fix (I do not have the new iOS yet), so far build
never failed with my current SDK.

Fixes: QTBUG-76847
Additional locations for Qt 5.9.8:
src/bluetooth/osx/osxbtledeviceinquiry.mm:147:9
src/bluetooth/osx/osxbtperipheralmanager.mm:316:9
src/bluetooth/osx/osxbtperipheralmanager.mm:381:5
src/bluetooth/qbluetoothdevicediscoveryagent_osx.mm:184:9
src/bluetooth/qbluetoothdevicediscoveryagent_osx.mm:198:12
src/bluetooth/qbluetoothdevicediscoveryagent_osx.mm:295:9
src/bluetooth/qbluetoothlocaldevice_osx.mm:152:12
src/bluetooth/qbluetoothserver_osx.mm:145:5
src/bluetooth/qbluetoothserver_osx.mm:157:5
src/bluetooth/qbluetoothserver_osx.mm:296:16
src/bluetooth/qbluetoothserviceinfo_osx.mm:175:5
src/bluetooth/qbluetoothsocket_osx.mm:106:13
src/bluetooth/qbluetoothsocket_osx.mm:112:13
src/bluetooth/qbluetoothsocket_osx.mm:186:13
src/bluetooth/qbluetoothsocket_osx.mm:189:13
src/bluetooth/qbluetoothsocket_osx.mm:203:13
src/bluetooth/qbluetoothsocket_osx.mm:206:13
src/bluetooth/qbluetoothsocket_osx.mm:216:13
src/bluetooth/qbluetoothsocket_osx.mm:219:13
src/bluetooth/qbluetoothsocket_osx.mm:236:16
src/bluetooth/qbluetoothsocket_osx.mm:280:9
src/bluetooth/qbluetoothsocket_osx.mm:286:12
src/bluetooth/qbluetoothsocket_osx.mm:304:9
src/bluetooth/qbluetoothsocket_osx.mm:310:12
src/bluetooth/qbluetoothtransferreply_osx.mm:139:9
src/bluetooth/qbluetoothtransferreply_osx.mm:145:22
src/bluetooth/qbluetoothtransferreply_osx.mm:221:5
src/bluetooth/qbluetoothtransferreply_osx.mm:271:9
src/bluetooth/qlowenergycontroller_osx.mm:203:12

===

diff --git a/qtconnectivity/src/bluetooth/osx/osxbtledeviceinquiry.mm b/qtconnectivity/src/bluetooth/osx/osxbtledeviceinquiry.mm
index 7a516dd41bd421350a54e1953a6f481a750a8a12..0b59ec108735fd9e8e352c9505743c000d4e70fe 100644
--- a/qtconnectivity/src/bluetooth/osx/osxbtledeviceinquiry.mm
+++ b/qtconnectivity/src/bluetooth/osx/osxbtledeviceinquiry.mm
@@ -139,7 +139,7 @@ QT_USE_NAMESPACE
 
 - (void)dealloc
 {
-    if (manager) {
+    if (manager.data()) {
         [manager setDelegate:nil];
         if (internalState == InquiryActive)
             [manager stopScan];
diff --git a/qtconnectivity/src/bluetooth/osx/osxbtperipheralmanager.mm b/qtconnectivity/src/bluetooth/osx/osxbtperipheralmanager.mm
index 64c8cd90ab374b5e422a1d3830f85a2a502a5964..8c9bfa9bcc455c78918ee06b8f297c9ea958b478 100644
--- a/qtconnectivity/src/bluetooth/osx/osxbtperipheralmanager.mm
+++ b/qtconnectivity/src/bluetooth/osx/osxbtperipheralmanager.mm
@@ -313,7 +313,7 @@ bool qt_validate_value_range(const QLowEnergyCharacteristicData &data)
 - (void)startAdvertising
 {
     state = PeripheralState::waitingForPowerOn;
-    if (manager)
+    if (manager.data())
         [manager setDelegate:nil];
     manager.reset([[CBPeripheralManager alloc] initWithDelegate:self
                    queue:OSXBluetooth::qt_LE_queue()]);
@@ -378,7 +378,7 @@ bool qt_validate_value_range(const QLowEnergyCharacteristicData &data)
 
 - (void) addServicesToPeripheral
 {
-    Q_ASSERT(manager);
+    Q_ASSERT(manager.data());
 
     if (nextServiceToAdd < services.size())
         [manager addService:services[nextServiceToAdd++]];
diff --git a/qtconnectivity/src/bluetooth/qbluetoothdevicediscoveryagent_ios.mm b/qtconnectivity/src/bluetooth/qbluetoothdevicediscoveryagent_ios.mm
index 3f4c6755e37dee0be872aee67ddfda2c852577a6..4e645014d40c96a8b9e0f63ebc11a5ebe5d11bb6 100644
--- a/qtconnectivity/src/bluetooth/qbluetoothdevicediscoveryagent_ios.mm
+++ b/qtconnectivity/src/bluetooth/qbluetoothdevicediscoveryagent_ios.mm
@@ -132,7 +132,7 @@ QBluetoothDeviceDiscoveryAgentPrivate::QBluetoothDeviceDiscoveryAgentPrivate(con
 
 QBluetoothDeviceDiscoveryAgentPrivate::~QBluetoothDeviceDiscoveryAgentPrivate()
 {
-    if (inquiryLE) {
+    if (inquiryLE.data()) {
         // We want the LE scan to stop as soon as possible.
         if (dispatch_queue_t leQueue = OSXBluetooth::qt_LE_queue()) {
             // Local variable to be retained ...
@@ -151,7 +151,7 @@ bool QBluetoothDeviceDiscoveryAgentPrivate::isActive() const
     if (stopPending)
         return false;
 
-    return inquiryLE;
+    return !!inquiryLE.data();
 }
 
 void QBluetoothDeviceDiscoveryAgentPrivate::start(QBluetoothDeviceDiscoveryAgent::DiscoveryMethods /*methods*/)
@@ -178,7 +178,7 @@ void QBluetoothDeviceDiscoveryAgentPrivate::start(QBluetoothDeviceDiscoveryAgent
                       this, &QBluetoothDeviceDiscoveryAgentPrivate::LEdeviceFound);
 
     inquiryLE.reset([[LEDeviceInquiryObjC alloc] initWithNotifier:notifier.data()]);
-    if (inquiryLE)
+    if (inquiryLE.data())
         notifier.take(); // Whatever happens next, inquiryLE is already the owner ...
 
     dispatch_queue_t leQueue(qt_LE_queue());
diff --git a/qtconnectivity/src/bluetooth/qbluetoothdevicediscoveryagent_osx.mm b/qtconnectivity/src/bluetooth/qbluetoothdevicediscoveryagent_osx.mm
index 7f03759623f9e5281e3a2bfed43d14399e664353..d5367abc5eb721506b011240d99cca417a37b76e 100644
--- a/qtconnectivity/src/bluetooth/qbluetoothdevicediscoveryagent_osx.mm
+++ b/qtconnectivity/src/bluetooth/qbluetoothdevicediscoveryagent_osx.mm
@@ -181,7 +181,7 @@ QBluetoothDeviceDiscoveryAgentPrivate::QBluetoothDeviceDiscoveryAgentPrivate(con
 
 QBluetoothDeviceDiscoveryAgentPrivate::~QBluetoothDeviceDiscoveryAgentPrivate()
 {
-    if (inquiryLE && agentState != NonActive) {
+    if (inquiryLE.data() && agentState != NonActive) {
         // We want the LE scan to stop as soon as possible.
         if (dispatch_queue_t leQueue = OSXBluetooth::qt_LE_queue()) {
             // Local variable to be retained ...
@@ -195,7 +195,7 @@ QBluetoothDeviceDiscoveryAgentPrivate::~QBluetoothDeviceDiscoveryAgentPrivate()
 
 bool QBluetoothDeviceDiscoveryAgentPrivate::isValid() const
 {
-    return hostController && [hostController powerState] == kBluetoothHCIPowerStateON;
+    return hostController.data() && [hostController powerState] == kBluetoothHCIPowerStateON;
 }
 
 bool QBluetoothDeviceDiscoveryAgentPrivate::isActive() const
@@ -292,7 +292,7 @@ void QBluetoothDeviceDiscoveryAgentPrivate::startLE()
 
     // Check queue and create scanner:
     inquiryLE.reset([[LEDeviceInquiryObjC alloc] initWithNotifier:notifier.data()]);
-    if (inquiryLE)
+    if (inquiryLE.data())
         notifier.take(); // Whatever happens next, inquiryLE is already the owner ...
 
     dispatch_queue_t leQueue(qt_LE_queue());
diff --git a/qtconnectivity/src/bluetooth/qbluetoothlocaldevice_osx.mm b/qtconnectivity/src/bluetooth/qbluetoothlocaldevice_osx.mm
index cb5625d6cc6a95407cab0495332b2ba86282b4d3..6ad20137584b70e122a61ef73089e18966008afd 100644
--- a/qtconnectivity/src/bluetooth/qbluetoothlocaldevice_osx.mm
+++ b/qtconnectivity/src/bluetooth/qbluetoothlocaldevice_osx.mm
@@ -149,7 +149,7 @@ QBluetoothLocalDevicePrivate::QBluetoothLocalDevicePrivate(QBluetoothLocalDevice
 
 bool QBluetoothLocalDevicePrivate::isValid() const
 {
-    return hostController;
+    return hostController.data();
 }
 
 void QBluetoothLocalDevicePrivate::requestPairing(const QBluetoothAddress &address, Pairing pairing)
diff --git a/qtconnectivity/src/bluetooth/qbluetoothserver_osx.mm b/qtconnectivity/src/bluetooth/qbluetoothserver_osx.mm
index 8d7eeb29c349b4f8a4cbf16b698d1a3edbc43448..af47300961581c482e5aadb553c8c30654f2262b 100644
--- a/qtconnectivity/src/bluetooth/qbluetoothserver_osx.mm
+++ b/qtconnectivity/src/bluetooth/qbluetoothserver_osx.mm
@@ -142,7 +142,7 @@ void QBluetoothServerPrivate::stopListener()
 
 void QBluetoothServerPrivate::openNotify(IOBluetoothRFCOMMChannel *channel)
 {
-    Q_ASSERT_X(listener, Q_FUNC_INFO, "invalid listener (nil)");
+    Q_ASSERT_X(listener.data(), Q_FUNC_INFO, "invalid listener (nil)");
     Q_ASSERT_X(channel, Q_FUNC_INFO, "invalid channel (nil)");
     Q_ASSERT_X(q_ptr, Q_FUNC_INFO, "invalid q_ptr (null)");
 
@@ -154,7 +154,7 @@ void QBluetoothServerPrivate::openNotify(IOBluetoothRFCOMMChannel *channel)
 
 void QBluetoothServerPrivate::openNotify(IOBluetoothL2CAPChannel *channel)
 {
-    Q_ASSERT_X(listener, Q_FUNC_INFO, "invalid listener (nil)");
+    Q_ASSERT_X(listener.data(), Q_FUNC_INFO, "invalid listener (nil)");
     Q_ASSERT_X(channel, Q_FUNC_INFO, "invalid channel (nil)");
     Q_ASSERT_X(q_ptr, Q_FUNC_INFO, "invalid q_ptr (null)");
 
@@ -293,7 +293,7 @@ bool QBluetoothServer::listen(const QBluetoothAddress &address, quint16 port)
 
     OSXBluetooth::qt_test_iobluetooth_runloop();
 
-    if (d_ptr->listener) {
+    if (d_ptr->listener.data()) {
         qCWarning(QT_BT_OSX) << "already in listen mode, close server first";
         return false;
     }
diff --git a/qtconnectivity/src/bluetooth/qbluetoothserviceinfo_osx.mm b/qtconnectivity/src/bluetooth/qbluetoothserviceinfo_osx.mm
index a25653ab6896349e2d41f83c09881c60dfd62bea..1c6411cb9dbb0ca09018b407e0a9f664f0c388b9 100644
--- a/qtconnectivity/src/bluetooth/qbluetoothserviceinfo_osx.mm
+++ b/qtconnectivity/src/bluetooth/qbluetoothserviceinfo_osx.mm
@@ -172,7 +172,7 @@ bool QBluetoothServiceInfoPrivate::unregisterService()
     if (!registered)
         return false;
 
-    Q_ASSERT_X(serviceRecord, Q_FUNC_INFO, "service registered, but serviceRecord is nil");
+    Q_ASSERT_X(serviceRecord.data(), Q_FUNC_INFO, "service registered, but serviceRecord is nil");
 
     [serviceRecord removeServiceRecord];
 
diff --git a/qtconnectivity/src/bluetooth/qbluetoothsocket_osx.mm b/qtconnectivity/src/bluetooth/qbluetoothsocket_osx.mm
index ae5362e281da4ae6d092f9de0cfebefa29f8130e..09e1841b1e11a3333f3f3c468161f57f40735fc7 100644
--- a/qtconnectivity/src/bluetooth/qbluetoothsocket_osx.mm
+++ b/qtconnectivity/src/bluetooth/qbluetoothsocket_osx.mm
@@ -103,13 +103,13 @@ void QBluetoothSocketPrivate::connectToService(const QBluetoothAddress &address,
 
     if (socketType == QBluetoothServiceInfo::RfcommProtocol) {
         rfcommChannel.reset([[ObjCRFCOMMChannel alloc] initWithDelegate:this]);
-        if (rfcommChannel)
+        if (rfcommChannel.data())
             status = [rfcommChannel connectAsyncToDevice:address withChannelID:port];
         else
             status = kIOReturnNoMemory;
     } else if (socketType == QBluetoothServiceInfo::L2capProtocol) {
         l2capChannel.reset([[ObjCL2CAPChannel alloc] initWithDelegate:this]);
-        if (l2capChannel)
+        if (l2capChannel.data())
             status = [l2capChannel connectAsyncToDevice:address withPSM:port];
         else
             status = kIOReturnNoMemory;
@@ -183,10 +183,10 @@ QString QBluetoothSocketPrivate::peerName() const
 
     NSString *nsName = nil;
     if (socketType == QBluetoothServiceInfo::RfcommProtocol) {
-        if (rfcommChannel)
+        if (rfcommChannel.data())
             nsName = [rfcommChannel peerName];
     } else if (socketType == QBluetoothServiceInfo::L2capProtocol) {
-        if (l2capChannel)
+        if (l2capChannel.data())
             nsName = [l2capChannel peerName];
     }
 
@@ -200,10 +200,10 @@ QBluetoothAddress QBluetoothSocketPrivate::peerAddress() const
 {
     BluetoothDeviceAddress addr = {};
     if (socketType == QBluetoothServiceInfo::RfcommProtocol) {
-        if (rfcommChannel)
+        if (rfcommChannel.data())
             addr = [rfcommChannel peerAddress];
     } else if (socketType == QBluetoothServiceInfo::L2capProtocol) {
-        if (l2capChannel)
+        if (l2capChannel.data())
             addr = [l2capChannel peerAddress];
     }
 
@@ -213,10 +213,10 @@ QBluetoothAddress QBluetoothSocketPrivate::peerAddress() const
 quint16 QBluetoothSocketPrivate::peerPort() const
 {
     if (socketType == QBluetoothServiceInfo::RfcommProtocol) {
-        if (rfcommChannel)
+        if (rfcommChannel.data())
             return [rfcommChannel getChannelID];
     } else if (socketType == QBluetoothServiceInfo::L2capProtocol) {
-        if (l2capChannel)
+        if (l2capChannel.data())
             return [l2capChannel getPSM];
     }
 
@@ -233,7 +233,7 @@ void QBluetoothSocketPrivate::_q_writeNotify()
     Q_ASSERT_X(socketType == QBluetoothServiceInfo::L2capProtocol
                || socketType == QBluetoothServiceInfo::RfcommProtocol,
                Q_FUNC_INFO, "invalid socket type");
-    Q_ASSERT_X(l2capChannel || rfcommChannel, Q_FUNC_INFO,
+    Q_ASSERT_X(l2capChannel.data() || rfcommChannel.data(), Q_FUNC_INFO,
                "invalid socket (no open channel)");
     Q_ASSERT_X(q_ptr, Q_FUNC_INFO, "invalid q_ptr (null)");
 
@@ -272,18 +272,18 @@ bool QBluetoothSocketPrivate::setChannel(IOBluetoothRFCOMMChannel *channel)
 
     // It must be a newborn socket!
     Q_ASSERT_X(socketError == QBluetoothSocket::NoSocketError
-               && state == QBluetoothSocket::UnconnectedState && !rfcommChannel && !l2capChannel,
+               && state == QBluetoothSocket::UnconnectedState && !rfcommChannel.data() && !l2capChannel.data(),
                Q_FUNC_INFO, "unexpected socket state");
 
     openMode = QIODevice::ReadWrite;
     rfcommChannel.reset([[ObjCRFCOMMChannel alloc] initWithDelegate:this channel:channel]);
-    if (rfcommChannel) {// We do not handle errors, up to an external user.
+    if (rfcommChannel.data()) {// We do not handle errors, up to an external user.
         q_ptr->setOpenMode(QIODevice::ReadWrite);
         state = QBluetoothSocket::ConnectedState;
         socketType = QBluetoothServiceInfo::RfcommProtocol;
     }
 
-    return rfcommChannel;
+    return rfcommChannel.data();
 }
 
 bool QBluetoothSocketPrivate::setChannel(IOBluetoothL2CAPChannel *channel)
@@ -301,13 +301,13 @@ bool QBluetoothSocketPrivate::setChannel(IOBluetoothL2CAPChannel *channel)
 
     openMode = QIODevice::ReadWrite;
     l2capChannel.reset([[ObjCL2CAPChannel alloc] initWithDelegate:this channel:channel]);
-    if (l2capChannel) {// We do not handle errors, up to an external user.
+    if (l2capChannel.data()) {// We do not handle errors, up to an external user.
         q_ptr->setOpenMode(QIODevice::ReadWrite);
         state = QBluetoothSocket::ConnectedState;
         socketType = QBluetoothServiceInfo::L2capProtocol;
     }
 
-    return l2capChannel;
+    return l2capChannel.data();
 }
 
 
diff --git a/qtconnectivity/src/bluetooth/qbluetoothtransferreply_osx.mm b/qtconnectivity/src/bluetooth/qbluetoothtransferreply_osx.mm
index 0213386090bc784cffe88c523e6707314f7fe221..33d1ead0781cd2a57886244209326127a3ec8db9 100644
--- a/qtconnectivity/src/bluetooth/qbluetoothtransferreply_osx.mm
+++ b/qtconnectivity/src/bluetooth/qbluetoothtransferreply_osx.mm
@@ -136,13 +136,13 @@ QBluetoothTransferReplyOSXPrivate::~QBluetoothTransferReplyOSXPrivate()
     // The OBEX session will be closed then. If
     // somehow IOBluetooth/OBEX still has a reference to our
     // session, it will not call any of delegate's callbacks.
-    if (session)
+    if (session.data())
         [session closeSession];
 }
 
 bool QBluetoothTransferReplyOSXPrivate::isActive() const
 {
-    return agent || (session && [session hasActiveRequest]);
+    return agent || (session.data() && [session hasActiveRequest]);
 }
 
 bool QBluetoothTransferReplyOSXPrivate::startOPP(const QBluetoothAddress &device)
@@ -218,7 +218,7 @@ void QBluetoothTransferReplyOSXPrivate::sendConnect(const QBluetoothAddress &dev
 void QBluetoothTransferReplyOSXPrivate::sendPut()
 {
     Q_ASSERT_X(inputStream, Q_FUNC_INFO, "invalid input stream (null)");
-    Q_ASSERT_X(session, Q_FUNC_INFO, "invalid OBEX session (nil)");
+    Q_ASSERT_X(session.data(), Q_FUNC_INFO, "invalid OBEX session (nil)");
     Q_ASSERT_X([session isConnected], Q_FUNC_INFO, "not connected");
     Q_ASSERT_X(![session hasActiveRequest], Q_FUNC_INFO,
                "session already has an active request");
@@ -268,7 +268,7 @@ void QBluetoothTransferReplyOSXPrivate::OBEXConnectError(OBEXError errorCode, OB
     Q_UNUSED(errorCode)
     Q_UNUSED(response)
 
-    if (session) {
+    if (session.data()) {
         setReplyError(QBluetoothTransferReply::SessionError,
                       QCoreApplication::translate(TRANSFER_REPLY, TR_CONNECT_FAILED));
     } else {
diff --git a/qtconnectivity/src/bluetooth/qlowenergycontroller_osx.mm b/qtconnectivity/src/bluetooth/qlowenergycontroller_osx.mm
index a2923d81cee8c09850249a9d9d87ba4ebc128b0b..588531f4da72cc28e7bedde4ab3bd3a652752e80 100644
--- a/qtconnectivity/src/bluetooth/qlowenergycontroller_osx.mm
+++ b/qtconnectivity/src/bluetooth/qlowenergycontroller_osx.mm
@@ -163,7 +163,7 @@ QLowEnergyControllerPrivateOSX::QLowEnergyControllerPrivateOSX(QLowEnergyControl
 #endif
     } else {
         centralManager.reset([[ObjCCentralManager alloc] initWith:notifier.data()]);
-        if (!centralManager) {
+        if (!centralManager.data()) {
             qCWarning(QT_BT_OSX) << "failed to initialize central manager";
             return;
         }
@@ -198,9 +198,9 @@ QLowEnergyControllerPrivateOSX::~QLowEnergyControllerPrivateOSX()
 bool QLowEnergyControllerPrivateOSX::isValid() const
 {
 #ifdef Q_OS_TVOS
-    return centralManager;
+    return centralManager.data();
 #else
-    return centralManager || peripheralManager;
+    return centralManager.data() || peripheralManager.data();
 #endif
 }
 
