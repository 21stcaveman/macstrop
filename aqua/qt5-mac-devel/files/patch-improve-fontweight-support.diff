diff --git qtbase/src/gui/text/qfontdatabase.cpp qtbase/src/gui/text/qfontdatabase.cpp
index fcdb6ec..bb6740d 100644
--- qtbase/src/gui/text/qfontdatabase.cpp
+++ qtbase/src/gui/text/qfontdatabase.cpp
@@ -84,8 +84,10 @@ static int getFontWeight(const QString &weightString)
 {
     QString s = weightString.toLower();
 
-    // Test in decreasing order of commonness
-    if (s == QLatin1String("normal")
+    // Test in *rough* decreasing order of commonness (medium more common than bold??)
+    if (s == QLatin1String("regular") || s == QLatin1String("normal") || s == QLatin1String("roman")
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Regular"), Qt::CaseInsensitive) == 0
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Roman"), Qt::CaseInsensitive) == 0
         || s.compare(QCoreApplication::translate("QFontDatabase", "Normal"), Qt::CaseInsensitive) == 0)
         return QFont::Normal;
     if (s == QLatin1String("medium"))
@@ -94,22 +96,31 @@ static int getFontWeight(const QString &weightString)
         || s.compare(QCoreApplication::translate("QFontDatabase", "Bold"), Qt::CaseInsensitive) == 0)
         return QFont::Bold;
     if (s == QLatin1String("demibold") || s == QLatin1String("demi bold")
+        || s == QLatin1String("semibold") || s == QLatin1String("semi bold")
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Semi Bold"), Qt::CaseInsensitive) == 0
         || s.compare(QCoreApplication::translate("QFontDatabase", "Demi Bold"), Qt::CaseInsensitive) == 0)
         return QFont::DemiBold;
-    if (s == QLatin1String("black")
+    if (s == QLatin1String("black") || s == QLatin1String("heavy")
+        || s == QLatin1String("ultra") || s == QLatin1String("ultrabold")
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Heavy"), Qt::CaseInsensitive) == 0
+        || s.compare(QCoreApplication::translate("QFontDatabase", "UltraBold"), Qt::CaseInsensitive) == 0
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Ultra"), Qt::CaseInsensitive) == 0
         || s.compare(QCoreApplication::translate("QFontDatabase", "Black"), Qt::CaseInsensitive) == 0)
         return QFont::Black;
-    if (s == QLatin1String("light"))
+    // treat the Book weight as equivalent to Light
+    if (s == QLatin1String("light") || s == QLatin1String("book")
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Book"), Qt::CaseInsensitive) == 0)
         return QFont::Light;
     if (s == QLatin1String("thin"))
         return qt_thinFontWeight;
-    if (s == QLatin1String("extralight"))
+    if (s == QLatin1String("extralight") || s == QLatin1String("ultralight"))
         return qt_extralightFontWeight;
 
     if (s.contains(QLatin1String("bold"))
         || s.contains(QCoreApplication::translate("QFontDatabase", "Bold"), Qt::CaseInsensitive)) {
-        if (s.contains(QLatin1String("demi"))
-            || s.compare(QCoreApplication::translate("QFontDatabase", "Demi"), Qt::CaseInsensitive) == 0)
+        if (s.contains(QLatin1String("demi")) || s.contains(QLatin1String("semi"))
+            || s.compare(QCoreApplication::translate("QFontDatabase", "Demi"), Qt::CaseInsensitive) == 0
+            || s.compare(QCoreApplication::translate("QFontDatabase", "Semi"), Qt::CaseInsensitive) == 0)
             return (int) QFont::DemiBold;
         return (int) QFont::Bold;
     }
@@ -118,7 +129,12 @@ static int getFontWeight(const QString &weightString)
         || s.compare(QCoreApplication::translate("QFontDatabase", "Light"), Qt::CaseInsensitive) == 0)
         return (int) QFont::Light;
 
-    if (s.contains(QLatin1String("black"))
+    if (s.contains(QLatin1String("medium"))
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Medium"), Qt::CaseInsensitive) == 0)
+        return (int) qt_mediumFontWeight;
+
+    if (s.contains(QLatin1String("black")) || s.contains(QLatin1String("heavy"))
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Heavy"), Qt::CaseInsensitive) == 0
         || s.compare(QCoreApplication::translate("QFontDatabase", "Black"), Qt::CaseInsensitive) == 0)
         return (int) QFont::Black;
 
@@ -134,7 +150,8 @@ QFont::Weight weightFromInteger(int weight)
         return QFont::Normal;
     else if (weight < 700)
         return QFont::DemiBold;
-    else if (weight < 800)
+    // Ultra and ExtraBold are 750, and heavier than Bold (ex: Nanum, Novarese BQ)
+    else if (weight < 750)
         return QFont::Bold;
     else
         return QFont::Black;
@@ -1167,12 +1184,19 @@ static int match(int script, const QFontDef &request,
 static QString styleStringHelper(int weight, QFont::Style style)
 {
     QString result;
-    if (weight >= QFont::Black)
+    // The Apple-provided Avenir Black-Oblique has weight 81 when loaded through the xcb platform plugin
+    if (weight >= 81 /*QFont::Black*/)
         result = QCoreApplication::translate("QFontDatabase", "Black");
     else if (weight >= QFont::Bold)
         result = QCoreApplication::translate("QFontDatabase", "Bold");
     else if (weight >= QFont::DemiBold)
         result = QCoreApplication::translate("QFontDatabase", "Demi Bold");
+    else if (weight > QFont::Normal)
+        result = QCoreApplication::translate("QFontDatabase", "Medium");
+    else if (weight == qt_extralightFontWeight)
+        result = QCoreApplication::translate("QFontDatabase", "ExtraLight");
+    else if (weight == qt_thinFontWeight)
+        result = QCoreApplication::translate("QFontDatabase", "Thin");
     else if (weight < QFont::Normal)
         result = QCoreApplication::translate("QFontDatabase", "Light");
 
@@ -1184,6 +1208,8 @@ static QString styleStringHelper(int weight, QFont::Style style)
     if (result.isEmpty())
         result = QCoreApplication::translate("QFontDatabase", "Normal");
 
+    // RJVB
+    qDebug() << "styleStringHelper.weight=" << weight << "style=" << style << "=>" << result;
     return result.simplified();
 }
 
@@ -1689,6 +1715,9 @@ QFont QFontDatabase::font(const QString &family, const QString &style,
     if (!s) // no styles found?
         return QGuiApplication::font();
 
+    // RJVB
+//    qDebug() << "QFontDatabase::font(" << family << "," << style << "," << pointSize << ")"
+//             << "will load font with weight" << s->key.weight << "and style" << s->styleName << s->key.style;
     QFont fnt(family, pointSize, s->key.weight);
     fnt.setStyle((QFont::Style)s->key.style);
     if (!s->styleName.isEmpty())
diff --git qtbase/src/platformsupport/fontdatabases/basic/qbasicfontdatabase.cpp qtbase/src/platformsupport/fontdatabases/basic/qbasicfontdatabase.cpp
index 52505c5..33e93ff 100644
--- qtbase/src/platformsupport/fontdatabases/basic/qbasicfontdatabase.cpp
+++ qtbase/src/platformsupport/fontdatabases/basic/qbasicfontdatabase.cpp
@@ -293,7 +293,9 @@ QStringList QBasicFontDatabase::addTTFile(const QByteArray &fontData, const QByt
                 weight = QFont::Normal;
             else if (os2->usWeightClass < 550)
                     weight = qt_mediumFontWeight;
-            else if (os2->usWeightClass < 650)
+            // if these values are identical to the values expected by weightFromInteger,
+            // we should accept 650 as DemiBold
+            else if (os2->usWeightClass <= 650)
                 weight = QFont::DemiBold;
             else if (os2->usWeightClass < 750)
                 weight = QFont::Bold;
@@ -306,17 +308,22 @@ QStringList QBasicFontDatabase::addTTFile(const QByteArray &fontData, const QByt
                     weight = qt_thinFontWeight;
                 else if (w <= 2)
                     weight = qt_extralightFontWeight;
-                else if (w <= 3)
+                // Book (which is lighter than Normal) is 4, *if these values
+                // are identical to those returned by [NSFontManager weightOfFont:] on OS X*
+                else if (w <= 4)
                     weight = QFont::Light;
                 else if (w <= 5)
                     weight = QFont::Normal;
                 else if (w <= 6)
                     weight = qt_mediumFontWeight;
-                else if (w <= 7)
-                    weight = QFont::DemiBold;
+                // DemiBold goes up to (incl.) 8 according to [NSFontManager weightOfFont:] on OS X
                 else if (w <= 8)
+                    weight = QFont::DemiBold;
+                // Bold is 9 according to [NSFontManager weightOfFont:] on OS X
+                else if (w == 9)
                     weight = QFont::Bold;
-                else if (w <= 10)
+                // Black is 10 or 11 according to [NSFontManager weightOfFont:] on OS X
+                else if (w <= 11)
                     weight = QFont::Black;
             }
         }
diff --git qtbase/src/platformsupport/fontdatabases/mac/qcoretextfontdatabase.mm qtbase/src/platformsupport/fontdatabases/mac/qcoretextfontdatabase.mm
index fe40830..88af2e9 100644
--- qtbase/src/platformsupport/fontdatabases/mac/qcoretextfontdatabase.mm
+++ qtbase/src/platformsupport/fontdatabases/mac/qcoretextfontdatabase.mm
@@ -290,7 +290,15 @@ static void getFontDescription(CTFontDescriptorRef font, FontDescription *fd)
         if (CFNumberRef weightValue = (CFNumberRef) CFDictionaryGetValue(styles, kCTFontWeightTrait)) {
             double normalizedWeight;
             if (CFNumberGetValue(weightValue, kCFNumberDoubleType, &normalizedWeight)) {
-                if (normalizedWeight >= 0.62)
+                if (!qgetenv("QT_DUMP_FONT_STYLE_WEIGHTS").isEmpty()) {
+                    extern int getCTFontWeightFromDescriptor(CTFontDescriptorRef fontRef, int size);
+                    NSFont *nfont = [NSFont fontWithDescriptor:(NSFontDescriptor*)font size:(CGFloat)12];
+                    qDebug() << "Font" << QCFString::toQString(fd->familyName) << "style"
+                             << QCFString::toQString(fd->styleName) << "weight=" << normalizedWeight
+                             << "NSFont weight@12pt=" << [[NSFontManager sharedFontManager] weightOfFont:nfont];
+                }
+                // Treat ExtraBold and Ultra as Black too (they're heavier than regular Bold)
+                if (normalizedWeight >= 0.5)
                     fd->weight = QFont::Black;
                 else if (normalizedWeight >= 0.4)
                     fd->weight = QFont::Bold;
diff --git qtbase/src/platformsupport/fontdatabases/mac/qfontengine_coretext.mm qtbase/src/platformsupport/fontdatabases/mac/qfontengine_coretext.mm
index 23fe48b..3b945af 100644
--- qtbase/src/platformsupport/fontdatabases/mac/qfontengine_coretext.mm
+++ qtbase/src/platformsupport/fontdatabases/mac/qfontengine_coretext.mm
@@ -137,7 +137,8 @@ static QFont::Weight weightFromInteger(int weight)
         return QFont::Normal;
     else if (weight < 700)
         return QFont::DemiBold;
-    else if (weight < 800)
+    // Ultra and ExtraBold are 750, and heavier than Bold (ex: Nanum, Novarese BQ)
+    else if (weight < 750)
         return QFont::Bold;
     else
         return QFont::Black;
@@ -149,8 +150,19 @@ int getTraitValue(CFDictionaryRef allTraits, CFStringRef trait)
         CFNumberRef traitNum = (CFNumberRef) CFDictionaryGetValue(allTraits, trait);
         float v = 0;
         CFNumberGetValue(traitNum, kCFNumberFloatType, &v);
-        // the value we get from CFNumberRef is from -1.0 to 1.0
+        // the value we get from CFNumberRef is from -1.0 to 1.0:
+        // Thin (-0.6), Light (-0.4) or Book (-0.23 !)
+        // Normal or Regular : (0)
+        // Demi Bold, Semi Bold or Medium (0.23 or 0.3)
+        // Bold (0.4)
+        // ExtraBold or Ultra (0.5), Heavy or Black (0.62)
         int value = v * 500 + 500;
+        // value:
+        // Thin (200), Light (300) or Book (385 !)
+        // Normal or Regular : (500)
+        // Demi Bold, Semi Bold or Medium (615 or 650)
+        // Bold (700)
+        // ExtraBold or Ultra (750), Heavy or Black (810)
         return value;
     }
 
diff --git qtbase/src/plugins/platforms/cocoa/qcocoafontdialoghelper.mm qtbase/src/plugins/platforms/cocoa/qcocoafontdialoghelper.mm
index f5e22d1..c0053f0 100644
--- qtbase/src/plugins/platforms/cocoa/qcocoafontdialoghelper.mm
+++ qtbase/src/plugins/platforms/cocoa/qcocoafontdialoghelper.mm
@@ -442,19 +442,64 @@ public:
 
         int weight = 5;
         NSFontTraitMask mask = 0;
-        if (font.style() == QFont::StyleItalic) {
+        if (font.style() == QFont::StyleItalic || font.style() == QFont::StyleOblique) {
             mask |= NSItalicFontMask;
         }
-        if (font.weight() == QFont::Bold) {
-            weight = 9;
-            mask |= NSBoldFontMask;
-        }
+        // RJVB
+        // Thin,Light -> 3, Book -> 4
+        // Normal/Regular -> 5
+        // Medium/SemiBold/Demibold -> 6,7,8
+        // Bold -> 9
+        // Ultra/Black/Heavy -> 10,11
+        QByteArray *weights = NULL;
+        switch (font.weight()) {
+            case QFont::Light:
+            case qt_thinFontWeight:
+            case qt_extralightFontWeight:
+                weights = new QByteArray((const char[]){3,4});
+                break;
+            case QFont::Normal:
+                weights = new QByteArray((const char[]){5});
+                break;
+            case QFont::DemiBold:
+            case qt_mediumFontWeight:
+                weights = new QByteArray((const char[]){6,7,8});
+                break;
+            case QFont::Bold:
+                weights = new QByteArray((const char[]){9});
+                break;
+            case QFont::Black:
+                weights = new QByteArray((const char[]){10,11});
+                break;
+         }
 
         QFontInfo fontInfo(font);
-        nsFont = [mgr fontWithFamily:QCFString::toNSString(fontInfo.family())
-            traits:mask
-            weight:weight
-            size:fontInfo.pointSize()];
+        if (weights) {
+            for (int i = 0 ; i < weights->size() && !nsFont ; ++i) {
+                weight = (int) (*weights)[i];
+                nsFont = [mgr fontWithFamily:QCFString::toNSString(fontInfo.family())
+                         traits:mask
+                         weight:weight
+                         size:fontInfo.pointSize()];
+//                  qDebug() << "setCurrentFont: found" << font << "with Qt weight" << font.weight() << "as NSFont weight" << weight << "(index" << i << ")";
+//                  NSLog(@"NSFont=%@", nsFont);
+                 if ([mgr weightOfFont:const_cast<NSFont *>(nsFont)] != weight) {
+                     nsFont = NULL;
+                 }
+            }
+            delete weights;
+        }
+        if (!nsFont) {
+            // fallback to the older behaviour
+            if (font.weight() == QFont::Bold) {
+                weight = 9;
+                mask |= NSBoldFontMask;
+            }
+            nsFont = [mgr fontWithFamily:QCFString::toNSString(fontInfo.family())
+                     traits:mask
+                     weight:weight
+                     size:fontInfo.pointSize()];
+        }
 
         [mgr setSelectedFont:const_cast<NSFont *>(nsFont) isMultiple:NO];
         mDelegate->mQtFont = font;
diff --git qtbase/src/widgets/dialogs/qfontdialog.cpp qtbase/src/widgets/dialogs/qfontdialog.cpp
index d12b109..b78176b 100644
--- qtbase/src/widgets/dialogs/qfontdialog.cpp
+++ qtbase/src/widgets/dialogs/qfontdialog.cpp
@@ -552,6 +552,17 @@ void QFontDialogPrivate::updateFamilies()
     updateStyles();
 }
 
+static bool qstringContainsFromList(QString &style, QStringList &checkList, Qt::CaseSensitivity mode=Qt::CaseSensitive)
+{
+    QString pattern;
+    Q_FOREACH(pattern, checkList) {
+        if (style.contains(pattern,mode)) {
+            return true;
+        }
+    }
+    return false;
+}
+
 /*
     Updates the contents of the "font style" list box. This
     function can be reimplemented if you have special requirements.
@@ -561,6 +572,10 @@ void QFontDialogPrivate::updateStyles()
     Q_Q(QFontDialog);
     QStringList styles = fdb.styles(familyList->currentText());
     styleList->model()->setStringList(styles);
+    // RJVB
+    qDebug() << "QFontDialogPrivate::updateStyles() familyList="
+            << familyList->currentText() << "style=" << style
+            << "styles=" << styles << "styleList=" << styleList;
 
     if (styles.isEmpty()) {
         styleEdit->clear();
@@ -570,22 +585,54 @@ void QFontDialogPrivate::updateStyles()
             bool found = false;
             bool first = true;
             QString cstyle = style;
+            // RJVB 20150419
+            QStringList lightStyles, bookStyles, normalStyles, mediumStyles, demiBoldStyles, blackStyles, slantStyles;
+            lightStyles << "Thin" << "Light";
+            bookStyles << "Book";
+            normalStyles << "Normal" << "Regular" << "Roman";
+            mediumStyles << "Medium";
+            demiBoldStyles << "DemiBold" << "Demi Bold" << "SemiBold" << "Semi Bold";
+            blackStyles << "Black" << "Ultra" << "Heavy" << "UltraBold";
+            slantStyles << "Italic" << "Oblique";
 
         redo:
+            if (style.contains("Light", Qt::CaseInsensitive) && !styles.contains("Light", Qt::CaseInsensitive)) {
+                // this is a Book weight that was "demoted" to Light because Qt doesn't recognise Book as a separate style,
+                // so we add Book as a valid synonym to lightStyles.
+                lightStyles << "Book";
+            }
+            if (style.contains("Medium", Qt::CaseInsensitive) && !styles.contains("Medium", Qt::CaseInsensitive)) {
+                // this was a deduced Medium style which isn't called that way by the font family
+                demiBoldStyles << "Medium";
+            }
             for (int i = 0; i < (int)styleList->count(); i++) {
-                if (cstyle == styleList->text(i)) {
+                QString istyle = styleList->text(i);
+                if (cstyle == istyle) {
                      styleList->setCurrentItem(i);
                      found = true;
                      break;
                  }
+                // RJVB 20150419: handle style synonyms
+                if ((qstringContainsFromList(cstyle, lightStyles, Qt::CaseInsensitive) && qstringContainsFromList(istyle, lightStyles, Qt::CaseInsensitive))
+                        || (qstringContainsFromList(cstyle, bookStyles, Qt::CaseInsensitive) && qstringContainsFromList(istyle, bookStyles, Qt::CaseInsensitive))
+                        || (qstringContainsFromList(cstyle, normalStyles, Qt::CaseInsensitive) && qstringContainsFromList(istyle, normalStyles, Qt::CaseInsensitive))
+                        || (qstringContainsFromList(cstyle, mediumStyles, Qt::CaseInsensitive) && qstringContainsFromList(istyle, mediumStyles, Qt::CaseInsensitive))
+                        || (qstringContainsFromList(cstyle, demiBoldStyles, Qt::CaseInsensitive) && qstringContainsFromList(istyle, demiBoldStyles, Qt::CaseInsensitive))
+                        || (qstringContainsFromList(cstyle, blackStyles, Qt::CaseInsensitive) && qstringContainsFromList(istyle, blackStyles, Qt::CaseInsensitive))) {
+                    if ((qstringContainsFromList(cstyle, slantStyles, Qt::CaseInsensitive) == qstringContainsFromList(istyle, slantStyles, Qt::CaseInsensitive))) {
+                        styleList->setCurrentItem(i);
+                        found = true;
+                        break;
+                    }
+                }
             }
             if (!found && first) {
-                if (cstyle.contains(QLatin1String("Italic"))) {
-                    cstyle.replace(QLatin1String("Italic"), QLatin1String("Oblique"));
+                if (cstyle.contains(QLatin1String("Italic"), Qt::CaseInsensitive)) {
+                    cstyle.replace(QLatin1String("Italic"), QLatin1String("Oblique"), Qt::CaseInsensitive);
                     first = false;
                     goto redo;
-                } else if (cstyle.contains(QLatin1String("Oblique"))) {
-                    cstyle.replace(QLatin1String("Oblique"), QLatin1String("Italic"));
+                } else if (cstyle.contains(QLatin1String("Oblique"), Qt::CaseInsensitive)) {
+                    cstyle.replace(QLatin1String("Oblique"), QLatin1String("Italic"), Qt::CaseInsensitive);
                     first = false;
                     goto redo;
                 }
@@ -807,6 +854,8 @@ void QFontDialog::setCurrentFont(const QFont &font)
         QFontInfo fi(font);
         d->size = fi.pointSize();
     }
+    // RJVB
+    qDebug() << "QFontDialog::setCurrentFont" << font << "family=" << d->family << "style=" << d->style << "size=" << d->size;
     d->strikeout->setChecked(font.strikeOut());
     d->underline->setChecked(font.underline());
     d->updateFamilies();
