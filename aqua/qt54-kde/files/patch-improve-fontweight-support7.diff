diff --git qtbase/src/gui/text/qfont.h qtbase/src/gui/text/qfont.h
index 2a84fa6..d863908 100644
--- qtbase/src/gui/text/qfont.h
+++ qtbase/src/gui/text/qfont.h
@@ -87,8 +87,11 @@ public:
     };
 
     enum Weight {
+        Thin     = 0,
+        ExtraLight = 12,
         Light    = 25,
         Normal   = 50,
+        Medium   = 57,
         DemiBold = 63,
         Bold     = 75,
         Black    = 87
diff --git qtbase/src/gui/text/qfontdatabase.cpp qtbase/src/gui/text/qfontdatabase.cpp
index 99814db..e385606 100644
--- qtbase/src/gui/text/qfontdatabase.cpp
+++ qtbase/src/gui/text/qfontdatabase.cpp
@@ -84,43 +84,69 @@ static int getFontWeight(const QString &weightString)
 {
     QString s = weightString.toLower();
 
-    // Test in decreasing order of commonness
-    if (s == QLatin1String("normal")
-        || s.compare(QCoreApplication::translate("QFontDatabase", "Normal"), Qt::CaseInsensitive) == 0)
+    // Test in *rough* decreasing order of commonness (medium more common than bold??)
+    if (s == QLatin1String("regular") || s == QLatin1String("normal") // || s == QLatin1String("roman")
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Regular"), Qt::CaseInsensitive) == 0
+//         || s.compare(QCoreApplication::translate("QFontDatabase", "Roman"), Qt::CaseInsensitive) == 0
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Normal"), Qt::CaseInsensitive) == 0) {
         return QFont::Normal;
+    }
     if (s == QLatin1String("medium"))
-        return qt_mediumFontWeight;
+        return QFont::Medium;
     if (s == QLatin1String("bold")
-        || s.compare(QCoreApplication::translate("QFontDatabase", "Bold"), Qt::CaseInsensitive) == 0)
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Bold"), Qt::CaseInsensitive) == 0) {
         return QFont::Bold;
+    }
     if (s == QLatin1String("demibold") || s == QLatin1String("demi bold")
-        || s.compare(QCoreApplication::translate("QFontDatabase", "Demi Bold"), Qt::CaseInsensitive) == 0)
+        || s == QLatin1String("semibold") || s == QLatin1String("semi bold")
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Semi Bold"), Qt::CaseInsensitive) == 0
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Demi Bold"), Qt::CaseInsensitive) == 0) {
         return QFont::DemiBold;
-    if (s == QLatin1String("black")
-        || s.compare(QCoreApplication::translate("QFontDatabase", "Black"), Qt::CaseInsensitive) == 0)
+    }
+    if (s == QLatin1String("black") || s == QLatin1String("heavy")
+        || s == QLatin1String("ultra") || s == QLatin1String("ultrabold")
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Heavy"), Qt::CaseInsensitive) == 0
+        || s.compare(QCoreApplication::translate("QFontDatabase", "UltraBold"), Qt::CaseInsensitive) == 0
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Ultra"), Qt::CaseInsensitive) == 0
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Black"), Qt::CaseInsensitive) == 0) {
         return QFont::Black;
-    if (s == QLatin1String("light"))
+    }
+    // treat the Book weight as equivalent to Light
+    if (s == QLatin1String("light") || s == QLatin1String("book")
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Book"), Qt::CaseInsensitive) == 0) {
         return QFont::Light;
+    }
     if (s == QLatin1String("thin"))
-        return qt_thinFontWeight;
-    if (s == QLatin1String("extralight"))
-        return qt_extralightFontWeight;
+        return QFont::Thin;
+    if (s == QLatin1String("extralight") || s == QLatin1String("ultralight"))
+        return QFont::ExtraLight;
 
     if (s.contains(QLatin1String("bold"))
         || s.contains(QCoreApplication::translate("QFontDatabase", "Bold"), Qt::CaseInsensitive)) {
-        if (s.contains(QLatin1String("demi"))
-            || s.compare(QCoreApplication::translate("QFontDatabase", "Demi"), Qt::CaseInsensitive) == 0)
+        if (s.contains(QLatin1String("demi")) || s.contains(QLatin1String("semi"))
+            || s.compare(QCoreApplication::translate("QFontDatabase", "Demi"), Qt::CaseInsensitive) == 0
+            || s.compare(QCoreApplication::translate("QFontDatabase", "Semi"), Qt::CaseInsensitive) == 0) {
             return (int) QFont::DemiBold;
+        }
         return (int) QFont::Bold;
     }
 
-    if (s.contains(QLatin1String("light"))
-        || s.compare(QCoreApplication::translate("QFontDatabase", "Light"), Qt::CaseInsensitive) == 0)
+    if (s.contains(QLatin1String("light")) || s.contains(QLatin1String("book"))
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Light"), Qt::CaseInsensitive) == 0
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Book"), Qt::CaseInsensitive) == 0) {
         return (int) QFont::Light;
+    }
+
+    if (s.contains(QLatin1String("medium"))
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Medium"), Qt::CaseInsensitive) == 0) {
+        return (int) QFont::Medium;
+    }
 
-    if (s.contains(QLatin1String("black"))
-        || s.compare(QCoreApplication::translate("QFontDatabase", "Black"), Qt::CaseInsensitive) == 0)
+    if (s.contains(QLatin1String("black")) || s.contains(QLatin1String("heavy"))
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Heavy"), Qt::CaseInsensitive) == 0
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Black"), Qt::CaseInsensitive) == 0) {
         return (int) QFont::Black;
+    }
 
     return (int) QFont::Normal;
 }
@@ -134,7 +160,8 @@ QFont::Weight weightFromInteger(int weight)
         return QFont::Normal;
     else if (weight < 700)
         return QFont::DemiBold;
-    else if (weight < 800)
+    // Ultra and ExtraBold are 750, and heavier than Bold (ex: Nanum, Novarese BQ)
+    else if (weight < 750)
         return QFont::Bold;
     else
         return QFont::Black;
@@ -1167,14 +1194,24 @@ static int match(int script, const QFontDef &request,
 static QString styleStringHelper(int weight, QFont::Style style)
 {
     QString result;
-    if (weight >= QFont::Black)
-        result = QCoreApplication::translate("QFontDatabase", "Black");
-    else if (weight >= QFont::Bold)
-        result = QCoreApplication::translate("QFontDatabase", "Bold");
-    else if (weight >= QFont::DemiBold)
-        result = QCoreApplication::translate("QFontDatabase", "Demi Bold");
-    else if (weight < QFont::Normal)
-        result = QCoreApplication::translate("QFontDatabase", "Light");
+    if (weight > QFont::Normal) {
+        // The Apple-provided Avenir Black-Oblique has weight 81 when loaded through the xcb platform plugin
+        if (weight >= 81 /*QFont::Black*/)
+            result = QCoreApplication::translate("QFontDatabase", "Black");
+        else if (weight >= QFont::Bold)
+            result = QCoreApplication::translate("QFontDatabase", "Bold");
+        else if (weight >= QFont::DemiBold)
+            result = QCoreApplication::translate("QFontDatabase", "Demi Bold");
+        else if (weight >= QFont::Medium)
+            result = QCoreApplication::translate("QFontDatabase", "Medium", "The Medium font weight");
+    } else {
+        if (weight <= QFont::Thin)
+            result = QCoreApplication::translate("QFontDatabase", "Thin");
+        else if (weight <= QFont::ExtraLight)
+            result = QCoreApplication::translate("QFontDatabase", "Extra Light");
+        else if (weight <= QFont::Light)
+            result = QCoreApplication::translate("QFontDatabase", "Light");
+    }
 
     if (style == QFont::StyleItalic)
         result += QLatin1Char(' ') + QCoreApplication::translate("QFontDatabase", "Italic");
@@ -1182,8 +1219,10 @@ static QString styleStringHelper(int weight, QFont::Style style)
         result += QLatin1Char(' ') + QCoreApplication::translate("QFontDatabase", "Oblique");
 
     if (result.isEmpty())
-        result = QCoreApplication::translate("QFontDatabase", "Normal");
+        result = QCoreApplication::translate("QFontDatabase", "Normal", "The Normal or Regular font weight");
 
+    // RJVB
+//    qDebug() << "styleStringHelper.weight=" << weight << "style=" << style << "=>" << result;
     return result.simplified();
 }
 
@@ -1689,6 +1728,9 @@ QFont QFontDatabase::font(const QString &family, const QString &style,
     if (!s) // no styles found?
         return QGuiApplication::font();
 
+    // RJVB
+//    qDebug() << "QFontDatabase::font(" << family << "," << style << "," << pointSize << ")"
+//             << "will load font with weight" << s->key.weight << "and style" << s->styleName << s->key.style;
     QFont fnt(family, pointSize, s->key.weight);
     fnt.setStyle((QFont::Style)s->key.style);
     if (!s->styleName.isEmpty())
diff --git qtbase/src/platformsupport/fontdatabases/basic/qbasicfontdatabase.cpp qtbase/src/platformsupport/fontdatabases/basic/qbasicfontdatabase.cpp
index 52505c5..f4e5b58 100644
--- qtbase/src/platformsupport/fontdatabases/basic/qbasicfontdatabase.cpp
+++ qtbase/src/platformsupport/fontdatabases/basic/qbasicfontdatabase.cpp
@@ -284,16 +284,18 @@ QStringList QBasicFontDatabase::addTTFile(const QByteArray &fontData, const QByt
             if (os2->usWeightClass == 0)
                 ;
             else if (os2->usWeightClass < 150)
-                weight = qt_thinFontWeight;
+                weight = QFont::Thin;
             else if (os2->usWeightClass < 250)
-                weight = qt_extralightFontWeight;
+                weight = QFont::ExtraLight;
             else if (os2->usWeightClass < 350)
                 weight = QFont::Light;
             else if (os2->usWeightClass < 450)
                 weight = QFont::Normal;
             else if (os2->usWeightClass < 550)
-                    weight = qt_mediumFontWeight;
-            else if (os2->usWeightClass < 650)
+                    weight = QFont::Medium;
+            // if these values are identical to the values expected by weightFromInteger,
+            // we should accept 650 as DemiBold
+            else if (os2->usWeightClass <= 650)
                 weight = QFont::DemiBold;
             else if (os2->usWeightClass < 750)
                 weight = QFont::Bold;
@@ -303,21 +305,27 @@ QStringList QBasicFontDatabase::addTTFile(const QByteArray &fontData, const QByt
             if (os2->panose[2] >= 2) {
                 int w = os2->panose[2];
                 if (w <= 1)
-                    weight = qt_thinFontWeight;
+                    weight = QFont::Thin;
                 else if (w <= 2)
-                    weight = qt_extralightFontWeight;
-                else if (w <= 3)
+                    weight = QFont::ExtraLight;
+                // Book (which is lighter than Normal) is 4, *if these values
+                // are identical to those returned by [NSFontManager weightOfFont:] on OS X*
+                else if (w <= 4)
                     weight = QFont::Light;
                 else if (w <= 5)
                     weight = QFont::Normal;
                 else if (w <= 6)
-                    weight = qt_mediumFontWeight;
-                else if (w <= 7)
-                    weight = QFont::DemiBold;
+                    weight = QFont::Medium;
+                // DemiBold goes up to (incl.) 8 according to [NSFontManager weightOfFont:] on OS X
                 else if (w <= 8)
+                    weight = QFont::DemiBold;
+                // Bold is 9 according to [NSFontManager weightOfFont:] on OS X
+                else if (w == 9)
                     weight = QFont::Bold;
-                else if (w <= 10)
+                // Black is 10 or 11 according to [NSFontManager weightOfFont:] on OS X
+                else if (w <= 11)
                     weight = QFont::Black;
+//                 qDebug() << __FUNCTION__ << ": os2->panose=" << w << " weight=" << weight;
             }
         }
 
diff --git qtbase/src/platformsupport/fontdatabases/mac/qcoretextfontdatabase.mm qtbase/src/platformsupport/fontdatabases/mac/qcoretextfontdatabase.mm
index 191eb34..c3509de 100644
--- qtbase/src/platformsupport/fontdatabases/mac/qcoretextfontdatabase.mm
+++ qtbase/src/platformsupport/fontdatabases/mac/qcoretextfontdatabase.mm
@@ -290,22 +290,29 @@ static void getFontDescription(CTFontDescriptorRef font, FontDescription *fd)
         if (CFNumberRef weightValue = (CFNumberRef) CFDictionaryGetValue(styles, kCTFontWeightTrait)) {
             double normalizedWeight;
             if (CFNumberGetValue(weightValue, kCFNumberDoubleType, &normalizedWeight)) {
-                if (normalizedWeight >= 0.62)
+                if (!qgetenv("QT_DUMP_FONT_STYLE_WEIGHTS").isEmpty()) {
+                    NSFont *nfont = [NSFont fontWithDescriptor:(NSFontDescriptor*)font size:(CGFloat)12];
+                    qDebug() << "Font" << QCFString::toQString(fd->familyName) << "style"
+                             << QCFString::toQString(fd->styleName) << "weight=" << normalizedWeight
+                             << "NSFont weight@12pt=" << [[NSFontManager sharedFontManager] weightOfFont:nfont];
+                }
+                // Treat ExtraBold and Ultra as Black too (they're heavier than regular Bold)
+                if (normalizedWeight >= 0.5)
                     fd->weight = QFont::Black;
                 else if (normalizedWeight >= 0.4)
                     fd->weight = QFont::Bold;
                 else if (normalizedWeight >= 0.3)
                     fd->weight = QFont::DemiBold;
                 else if (normalizedWeight >= 0.2)
-                    fd->weight = qt_mediumFontWeight;
+                    fd->weight = QFont::Medium;
                 else if (normalizedWeight == 0.0)
                     fd->weight = QFont::Normal;
                 else if (normalizedWeight <= -0.4)
                     fd->weight = QFont::Light;
                 else if (normalizedWeight <= -0.6)
-                    fd->weight = qt_extralightFontWeight;
+                    fd->weight = QFont::ExtraLight;
                 else if (normalizedWeight <= -0.8)
-                    fd->weight = qt_thinFontWeight;
+                    fd->weight = QFont::Thin;
             }
         }
         if (CFNumberRef italic = (CFNumberRef) CFDictionaryGetValue(styles, kCTFontSlantTrait)) {
diff --git qtbase/src/platformsupport/fontdatabases/mac/qfontengine_coretext.mm qtbase/src/platformsupport/fontdatabases/mac/qfontengine_coretext.mm
index 23fe48b..45be637 100644
--- qtbase/src/platformsupport/fontdatabases/mac/qfontengine_coretext.mm
+++ qtbase/src/platformsupport/fontdatabases/mac/qfontengine_coretext.mm
@@ -137,7 +137,8 @@ static QFont::Weight weightFromInteger(int weight)
         return QFont::Normal;
     else if (weight < 700)
         return QFont::DemiBold;
-    else if (weight < 800)
+    // Ultra and ExtraBold are 750, and heavier than Bold (ex: Nanum, Novarese BQ)
+    else if (weight < 750)
         return QFont::Bold;
     else
         return QFont::Black;
@@ -149,8 +150,22 @@ int getTraitValue(CFDictionaryRef allTraits, CFStringRef trait)
         CFNumberRef traitNum = (CFNumberRef) CFDictionaryGetValue(allTraits, trait);
         float v = 0;
         CFNumberGetValue(traitNum, kCFNumberFloatType, &v);
-        // the value we get from CFNumberRef is from -1.0 to 1.0
+
+        // the value we get from CFNumberRef is from -1.0 to 1.0:
+        // Thin (-0.6), Light (-0.4) or Book (-0.23 !)
+        // Normal or Regular : (0)
+        // Demi Bold, Semi Bold or Medium (0.23 or 0.3)
+        // Bold (0.4)
+        // ExtraBold or Ultra (0.5), Heavy or Black (0.62)
+
         int value = v * 500 + 500;
+        // value:
+        // Thin (200), Light (300) or Book (385 !)
+        // Normal or Regular : (500)
+        // Demi Bold, Semi Bold or Medium (615 or 650)
+        // Bold (700)
+        // ExtraBold or Ultra (750), Heavy or Black (810)
+
         return value;
     }
 
diff --git qtbase/src/plugins/platforms/cocoa/qcocoafontdialoghelper.mm qtbase/src/plugins/platforms/cocoa/qcocoafontdialoghelper.mm
index f5e22d1..ad9329f 100644
--- qtbase/src/plugins/platforms/cocoa/qcocoafontdialoghelper.mm
+++ qtbase/src/plugins/platforms/cocoa/qcocoafontdialoghelper.mm
@@ -442,19 +442,61 @@ public:
 
         int weight = 5;
         NSFontTraitMask mask = 0;
-        if (font.style() == QFont::StyleItalic) {
+        if (font.style() == QFont::StyleItalic || font.style() == QFont::StyleOblique) {
             mask |= NSItalicFontMask;
         }
-        if (font.weight() == QFont::Bold) {
-            weight = 9;
-            mask |= NSBoldFontMask;
+        QVector<int> weights;
+        switch (font.weight()) {
+            case QFont::Thin:
+                weights << 2;
+                // fall through
+            case QFont::Light:
+            case QFont::ExtraLight:
+                weights << 3 << 4;
+                break;
+            case QFont::Normal:
+                weights << 5;
+                break;
+            case QFont::Medium:
+                weights << 6;
+                // fall through
+            case QFont::DemiBold:
+                weights << 7 << 8;
+                break;
+            case QFont::Bold:
+                weights << 9;
+                break;
+            case QFont::Black:
+                weights << 10 << 11;
+                break;
         }
 
         QFontInfo fontInfo(font);
-        nsFont = [mgr fontWithFamily:QCFString::toNSString(fontInfo.family())
-            traits:mask
-            weight:weight
-            size:fontInfo.pointSize()];
+        if (!weights.isEmpty()) {
+            for (int i = 0 ; i < weights.size() && !nsFont ; ++i) {
+                weight = weights[i];
+                nsFont = [mgr fontWithFamily:QCFString::toNSString(fontInfo.family())
+                         traits:mask
+                         weight:weight
+                         size:fontInfo.pointSize()];
+//                  qDebug() << "setCurrentFont: found" << font << "with Qt weight" << font.weight() << "as NSFont weight" << weight << "(index" << i << ")";
+//                  NSLog(@"NSFont=%@", nsFont);
+                 if ([mgr weightOfFont:const_cast<NSFont *>(nsFont)] != weight) {
+                     nsFont = NULL;
+                 }
+            }
+        }
+        if (!nsFont) {
+            // fallback to the older approach
+            if (font.weight() == QFont::Bold) {
+                weight = 9;
+                mask |= NSBoldFontMask;
+            }
+            nsFont = [mgr fontWithFamily:QCFString::toNSString(fontInfo.family())
+                     traits:mask
+                     weight:weight
+                     size:fontInfo.pointSize()];
+        }
 
         [mgr setSelectedFont:const_cast<NSFont *>(nsFont) isMultiple:NO];
         mDelegate->mQtFont = font;
diff --git qtbase/src/widgets/dialogs/qfontdialog.cpp qtbase/src/widgets/dialogs/qfontdialog.cpp
index d12b109..418ed39 100644
--- qtbase/src/widgets/dialogs/qfontdialog.cpp
+++ qtbase/src/widgets/dialogs/qfontdialog.cpp
@@ -323,6 +323,25 @@ void QFontDialogPrivate::init()
     familyList->setFocus();
     retranslateStrings();
     sampleEdit->setObjectName(QLatin1String("qt_fontDialog_sampleEdit"));
+    // RJVB 20150511
+    lightStyles << QCoreApplication::translate("QFontDatabase", "Thin").toLower()
+                << QCoreApplication::translate("QFontDatabase", "Light").toLower();
+    bookStyles << QCoreApplication::translate("QFontDatabase", "Book").toLower();
+    normalStyles << QCoreApplication::translate("QFontDatabase", "Normal").toLower()
+                << QCoreApplication::translate("QFontDatabase", "Regular").toLower()
+                << QCoreApplication::translate("QFontDatabase", "Roman").toLower();
+    mediumStyles << QCoreApplication::translate("QFontDatabase", "Medium").toLower();
+    demiBoldStyles << QCoreApplication::translate("QFontDatabase", "DemiBold").toLower()
+                << QCoreApplication::translate("QFontDatabase", "Demi Bold").toLower()
+                << QCoreApplication::translate("QFontDatabase", "SemiBold").toLower()
+                << QCoreApplication::translate("QFontDatabase", "Semi Bold").toLower();
+    blackStyles << QCoreApplication::translate("QFontDatabase", "Black").toLower()
+                << QCoreApplication::translate("QFontDatabase", "Ultra").toLower()
+                << QCoreApplication::translate("QFontDatabase", "Heavy").toLower()
+                << QCoreApplication::translate("QFontDatabase", "UltraBold").toLower();
+    italicStyle = QCoreApplication::translate("QFontDatabase", "Italic");
+    obliqueStyle = QCoreApplication::translate("QFontDatabase", "Oblique");
+    slantStyles << italicStyle << obliqueStyle;
 }
 
 /*!
@@ -552,6 +571,27 @@ void QFontDialogPrivate::updateFamilies()
     updateStyles();
 }
 
+QStringList QFontStyleSet::lastCheckList;
+// static inline bool qstringCompareToList(const QString &style, const QStringList &checkList, bool exact, Qt::CaseSensitivity mode = Qt::CaseInsensitive)
+// {
+//     if (exact) {
+//         foreach (const QString &pattern, checkList) {
+//             if (style.compare(pattern, mode) == 0) {
+// //                 lastCheckList = checkList;
+//                 return true;
+//             }
+//         }
+//     } else {
+//         foreach (const QString &pattern, checkList) {
+//             if (style.contains(pattern, mode)) {
+// //                 lastCheckList = checkList;
+//                 return true;
+//             }
+//         }
+//     }
+//     return false;
+// }
+
 /*
     Updates the contents of the "font style" list box. This
     function can be reimplemented if you have special requirements.
@@ -561,37 +601,91 @@ void QFontDialogPrivate::updateStyles()
     Q_Q(QFontDialog);
     QStringList styles = fdb.styles(familyList->currentText());
     styleList->model()->setStringList(styles);
+    // RJVB
+    qDebug() << "QFontDialogPrivate::updateStyles() familyList="
+            << familyList->currentText() << "style=" << style
+            << "styles=" << styles << "styleList=" << styleList;
 
     if (styles.isEmpty()) {
         styleEdit->clear();
         smoothScalable = false;
     } else {
+        QFontStyleSet lLightStyles = lightStyles, lDemiBoldStyles = demiBoldStyles;
+        QString lightStr = QCoreApplication::translate("QFontDatabase", "Light").toLower(),
+            mediumStr = QCoreApplication::translate("QFontDatabase", "Medium").toLower();
         if (!style.isEmpty()) {
             bool found = false;
             bool first = true;
-            QString cstyle = style;
-
-        redo:
-            for (int i = 0; i < (int)styleList->count(); i++) {
-                if (cstyle == styleList->text(i)) {
-                     styleList->setCurrentItem(i);
-                     found = true;
-                     break;
-                 }
+            QString cstyle = style.toLower();
+            bool compareExact = true;
+            QFontStyleSet styleSet = QFontStyleSet::fromList(styles);
+
+            // first do a fast, lookup of the exact style string in the list of exact styles provided by the font:
+            if (styleSet.contains(style)) {
+                for (int i = 0; i < (int)styleList->count(); i++) {
+                    if (style.compare(styleList->text(i), Qt::CaseSensitive) == 0) {
+                         qDebug() << "style=" << style << "exact-matches" << styleList->text(i)
+                            << "for weight in the font's styleList";
+                         styleList->setCurrentItem(i);
+                         found = true;
+                    }
+                }
             }
-            if (!found && first) {
-                if (cstyle.contains(QLatin1String("Italic"))) {
-                    cstyle.replace(QLatin1String("Italic"), QLatin1String("Oblique"));
-                    first = false;
-                    goto redo;
-                } else if (cstyle.contains(QLatin1String("Oblique"))) {
-                    cstyle.replace(QLatin1String("Oblique"), QLatin1String("Italic"));
-                    first = false;
-                    goto redo;
+
+            while (!found && first) {
+                if (style.contains(lightStr, Qt::CaseInsensitive) && !styles.contains(lightStr, Qt::CaseInsensitive)) {
+                    // this is a Book weight that was "demoted" to Light because Qt doesn't know Book as a separate style,
+                    // so we add Book as a valid synonym to lightStyles.
+                    lLightStyles << QCoreApplication::translate("QFontDatabase", "Book");
+                }
+                if (style.contains(mediumStr, Qt::CaseInsensitive) && !styles.contains(mediumStr, Qt::CaseInsensitive)) {
+                    // this was a deduced Medium style which isn't called that way by the font family
+                    lDemiBoldStyles << QCoreApplication::translate("QFontDatabase", "Medium");
+                }
+                for (int i = 0; i < (int)styleList->count(); i++) {
+                    QString istyle = styleList->text(i).toLower();
+                    if (cstyle == istyle) {
+                         styleList->setCurrentItem(i);
+                         found = true;
+                         break;
+                     }
+                    if ((lLightStyles.contains(cstyle, compareExact) && lLightStyles.contains(istyle, compareExact))
+                            || (bookStyles.contains(cstyle, compareExact) && bookStyles.contains(istyle, compareExact))
+                            || (normalStyles.contains(cstyle, compareExact) && normalStyles.contains(istyle, compareExact))
+                            || (mediumStyles.contains(cstyle, compareExact) && mediumStyles.contains(istyle, compareExact))
+                            || (lDemiBoldStyles.contains(cstyle, compareExact) && lDemiBoldStyles.contains(istyle, compareExact))
+                            || (blackStyles.contains(cstyle, compareExact) && blackStyles.contains(istyle, compareExact))) {
+                        qDebug() << "cstyle=" << cstyle << "matches istyle=" << istyle << "for weight; exact matching=" << compareExact
+                            << "hit in list" << QFontStyleSet::lastList();
+                        if ((slantStyles.contains(cstyle, false) == slantStyles.contains(istyle, false))) {
+                            qDebug() << "cstyle=" << cstyle << "also matches istyle=" << istyle << "for slant" << slantStyles;
+                            styleList->setCurrentItem(i);
+                            found = true;
+                            break;
+                        }
+    //                     else {
+    //                         qDebug() << "(" << cstyle << "," << istyle << ") vs" << slantStyles << "="
+    //                             << qstringCompareToList(cstyle, slantStyles, false) << qstringCompareToList(istyle, slantStyles, false);
+    //                     }
+                    }
+                }
+                if (!found) {
+                    if (compareExact)
+                        compareExact = false;
+                    else if (first) {
+                        if (cstyle.contains(italicStyle, Qt::CaseInsensitive)) {
+                            cstyle.replace(italicStyle, obliqueStyle, Qt::CaseInsensitive);
+                            compareExact = true;
+                        } else if (cstyle.contains(obliqueStyle, Qt::CaseInsensitive)) {
+                            cstyle.replace(obliqueStyle, italicStyle, Qt::CaseInsensitive);
+                            compareExact = true;
+                        }
+                        first = false;
+                    }
+                    else
+                        styleList->setCurrentItem(0);
                 }
             }
-            if (!found)
-                styleList->setCurrentItem(0);
         } else {
             styleList->setCurrentItem(0);
         }
@@ -807,6 +901,8 @@ void QFontDialog::setCurrentFont(const QFont &font)
         QFontInfo fi(font);
         d->size = fi.pointSize();
     }
+    // RJVB
+//    qDebug() << "QFontDialog::setCurrentFont" << font << "family=" << d->family << "style=" << d->style << "size=" << d->size;
     d->strikeout->setChecked(font.strikeOut());
     d->underline->setChecked(font.underline());
     d->updateFamilies();
diff --git qtbase/src/widgets/dialogs/qfontdialog_p.h qtbase/src/widgets/dialogs/qfontdialog_p.h
index 3af6f9f..06b5be1 100644
--- qtbase/src/widgets/dialogs/qfontdialog_p.h
+++ qtbase/src/widgets/dialogs/qfontdialog_p.h
@@ -51,6 +51,7 @@
 #include "qfontdialog.h"
 #include <qpa/qplatformdialoghelper.h>
 #include "qsharedpointer.h"
+#include <QSet>
 
 #ifndef QT_NO_FONTDIALOG
 
@@ -65,6 +66,64 @@ class QGroupBox;
 class QLabel;
 class QLineEdit;
 
+class QFontStyleSet : public QSet<QString>
+{
+public:
+    inline QFontStyleSet()
+        : QSet<QString>()
+    { 
+        checkList.clear();
+    }
+    inline QFontStyleSet(const QFontStyleSet &ref)
+        : QSet<QString>(ref)
+    {
+        checkList = ref.checkList;
+    }
+    inline QFontStyleSet(const QSet<QString> &ref)
+        : QSet<QString>(ref)
+    {
+        checkList = toList();
+    }
+    static inline QFontStyleSet fromList(QStringList &list)
+    {
+        QFontStyleSet newSet(QSet<QString>::fromList(list));
+        newSet.checkList = list;
+        return newSet;
+    }
+    inline bool contains(const QString &stylePattern) const
+    {
+        lastCheckList = checkList;
+        return QSet<QString>::contains(stylePattern);
+    }
+    inline bool contains(const QString &stylePattern, bool exact) const
+    {
+        if (exact) {
+            return contains(stylePattern);
+        } else {
+            foreach (const QString &pattern, checkList) {
+                if (stylePattern.contains(pattern)) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+    inline QFontStyleSet &operator<<(const QString &value)
+    {
+        insert(value);
+        checkList << value;
+        return *this;
+    }
+    static inline QStringList lastList()
+    {
+        return lastCheckList;
+    }
+private:
+    QStringList checkList;
+    static QStringList lastCheckList;
+};
+
+
 class QFontDialogPrivate : public QDialogPrivate
 {
     Q_DECLARE_PUBLIC(QFontDialog)
@@ -141,6 +200,9 @@ public:
 private:
     virtual void initHelper(QPlatformDialogHelper *);
     virtual void helperPrepareShow(QPlatformDialogHelper *);
+    // RJVB 20150511
+    QFontStyleSet lightStyles, bookStyles, normalStyles, mediumStyles, demiBoldStyles, blackStyles, slantStyles;
+    QString obliqueStyle, italicStyle;
 };
 
 #endif // QT_NO_FONTDIALOG
