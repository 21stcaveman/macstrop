diff --git a/src/RemoteDatabase.cpp b/src/RemoteDatabase.cpp
index 408b8d4411dbd6ead28a1bba578d9f7a46104b96..f384b93548e2a5f3792c9b0a2cac58258c05d0aa 100644
--- a/src/RemoteDatabase.cpp
+++ b/src/RemoteDatabase.cpp
@@ -451,11 +451,11 @@ void RemoteDatabase::prepareProgressDialog(QNetworkReply* reply, bool upload, co
 void RemoteDatabase::fetch(const QString& url, RequestType type, const QString& clientCert, QVariant userdata)
 {
     // Check if network is accessible. If not, abort right here
-    if(m_manager->networkAccessible() == QNetworkAccessManager::NotAccessible)
-    {
-        QMessageBox::warning(nullptr, qApp->applicationName(), tr("Error: The network is not accessible."));
-        return;
-    }
+//     if(m_manager->networkAccessible() == QNetworkAccessManager::NotAccessible)
+//     {
+//         QMessageBox::warning(nullptr, qApp->applicationName(), tr("Error: The network is not accessible."));
+//         return;
+//     }
 
     // If this is a request for a database there is a chance that we've already cloned that database. So check for that first
     if(type == RequestTypeDatabase)
@@ -482,7 +482,10 @@ void RemoteDatabase::fetch(const QString& url, RequestType type, const QString&
     {
         // If configuring the SSL connection fails, abort the request here
         if(!prepareSsl(&request, clientCert))
+        {
+            QMessageBox::warning(0, qApp->applicationName(), tr("Error: couldn't create SSL connection to \"%1\".").arg(url));
             return;
+        }
     }
 
     // Clear access cache if necessary
@@ -504,11 +507,11 @@ void RemoteDatabase::push(const QString& filename, const QString& url, const QSt
                           const QString& commitMessage, const QString& licence, bool isPublic, const QString& branch, bool forcePush)
 {
     // Check if network is accessible. If not, abort right here
-    if(m_manager->networkAccessible() == QNetworkAccessManager::NotAccessible)
-    {
-        QMessageBox::warning(nullptr, qApp->applicationName(), tr("Error: The network is not accessible."));
-        return;
-    }
+//     if(m_manager->networkAccessible() == QNetworkAccessManager::NotAccessible)
+//     {
+//         QMessageBox::warning(nullptr, qApp->applicationName(), tr("Error: The network is not accessible."));
+//         return;
+//     }
 
     // Open the file to send and check if it exists
     QFile* file = new QFile(filename);
@@ -546,6 +549,7 @@ void RemoteDatabase::push(const QString& filename, const QString& url, const QSt
         // If configuring the SSL connection fails, abort the request here
         if(!prepareSsl(&request, clientCert))
         {
+            QMessageBox::warning(0, qApp->applicationName(), tr("Error: couldn't create SSL connection to \"%1\".").arg(url));
             delete file;
             return;
         }
