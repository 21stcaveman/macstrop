# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id:$

PortSystem          1.0
PortGroup           cmake 1.1
PortGroup           github 1.0

platform linux {
#     v1.0-20-gefe8145
    github.setup    KDE clazy efe814561425177e0d210e04762e5428670f794f
    version         1.0.20
}
platform darwin {
#     v1.0-20-g0526201
    github.setup    KDE clazy 05262016a161d3a163ab94b5358ade7a1a1b5e78
    version         1.0.20
}
fetch.type          git

name                clazy
categories          devel
maintainers         @RJVB
license             LGPL-2
description         Qt oriented code checker based on LLVM.
long_description    The clazy static checker provides an LLVM plugin that can check and sometimes fix issues in C++ code. \
                    The included checks are oriented at development using Qt.
platforms           darwin

# fetching via git means a more convenient constant distname can be used.
distname            ${name}-git

patch.pre_args      -Np1

cmake.out_of_source yes

# define subports for the supported/available Clang versions. Those are not complete
# definitions, post-patch and post-destroot operations have to be done outside of
# the definition loop.
set llvm_versions {3.6 3.7 3.8 3.9}
foreach lv ${llvm_versions} {
    subport ${name}-${lv} {
        variant system_cxx description \
            {build using the system C++ compiler instead of the target clang++ version} {}
        depends_lib-append \
                port:llvm-${lv} port:clang-${lv}
        platform darwin {
            patchfiles-append \
                patch-CMakeLists.diff
        }
        patchfiles-append \
                patch-wrapper.diff
        configure.args-append \
                -DLLVM_ROOT=${prefix}/libexec/llvm-${lv} \
                -DCLAZY_INSTALL_NO_HEADERS=ON
        if {![variant_isset system_cxx]} {
            configure.args-append \
                -DCMAKE_C_COMPILER=${prefix}/bin/clang-mp-${lv} \
                -DCMAKE_CXX_COMPILER=${prefix}/bin/clang++-mp-${lv}
        }
        platform darwin {
            configure.args-append \
                -DCMAKE_INSTALL_LIBDIR=${prefix}/libexec/llvm-${lv}/lib
        }
        platform linux {
            foreach v ${llvm_versions} {
                if {${v} ne ${lv}} {
                    conflicts-append ${name}-${v}
                }
            }
            configure.args-append \
                -DCMAKE_PREFIX_PATH=${prefix} \
                -DCMAKE_INSTALL_LIBDIR=${prefix}/lib
        }
    }
}

subport ${name}-dev {
    description-append \
                    Development headers.
    long_description-append \
                    Development headers.
    installs_libs   no
    supported_archs noarch
    post-extract {
        file delete ${worksrcpath}/CMakeLists.txt
        xinstall -m 755 ${filespath}/CMakeLists-headers.txt ${worksrcpath}/CMakeLists.txt
    }
    build {}
}

if {${subport} eq "${name}"} {
    platform darwin {
        pre-fetch {
            ui_error "This port provides the LLVM version-specific subports and is not supposed to be installed"
            return -code error "This port is not installable"
        }
    }
    # rest is for ~darwin using whatever clang is provided by the system
} elseif {${subport} eq "${name}-dev"} {
    destroot {
        xinstall -m 755 -d ${destroot}${prefix}/include/clazy
        foreach h [glob -nocomplain ${worksrcpath}/*.h] {
            switch [file tail ${h}] {
                "MethodSignatureUtils.h" {}
                "" {}
                default {
                    xinstall -m 644 ${h} ${destroot}${prefix}/include/clazy/
                }
            }
        }
        xinstall -m 644 ${build.dir}/clazylib_export.h ${destroot}${prefix}/include/clazy/
    }
} else {
    array set lip {
        clazy-3.6 libexec/llvm-3.6
        clazy-3.7 libexec/llvm-3.7
        clazy-3.8 libexec/llvm-3.8
        clazy-3.9 libexec/llvm-3.9
    }
    array set ccxx {
        clazy-3.6 clang++-mp-3.6
        clazy-3.7 clang++-mp-3.7
        clazy-3.8 clang++-mp-3.8
        clazy-3.9 clang++-mp-3.9
    }
    array set wrappername {
        clazy-3.6 clazy-mp-3.6
        clazy-3.7 clazy-mp-3.7
        clazy-3.8 clazy-mp-3.8
        clazy-3.9 clazy-mp-3.9
    }
    post-patch {
        # cmake's "find_package(clang ...)" command will provide an LLVM_INSTALL_PREFIX
        # variable, but that variable will be the normalised (resolved) full path if ever
        # ${prefix} is a symlink to, say, a directory on a different partition.
        # Ultimately the ClangClazy plugin would end up at the same location, but "base"
        # will complain about a destroot violation.
        # We avoid this by ensuring the file gets installed going through the symlink.
        # This is done outside of the subport-definition loop above because that would
        # set the install prefix to the one for the last defined subport ...
        if {[info exists lip(${subport})]} {
            reinplace "s|@LLVM_INSTALL_PREFIX@|${prefix}/$lip(${subport})|g" \
                ${worksrcpath}/CMakeLists.txt
        } else {
            # this should only happen when a subport for a clang version was added or removed
            # above, and $lip wasn't updated.
            ui_error "post-patch for unknown subport ${subport}"
            return -code error "outdated Portfile"
        }
    }
    post-destroot {
        platform darwin {
            # reuse $lip(${subport}) without further need for testing if it exists
            system "install_name_tool -id ${prefix}/$lip(${subport})/lib/libclazylib.0.dylib \
                ${destroot}${prefix}/$lip(${subport})/lib/libclazylib.0.dylib"
            system "install_name_tool -id ${prefix}/$lip(${subport})/lib/ClangLazy.dylib \
                ${destroot}${prefix}/$lip(${subport})/lib/ClangLazy.dylib"
            system "install_name_tool -change ${prefix}/lib/libclazylib.0.dylib ${prefix}/$lip(${subport})/lib/libclazylib.0.dylib \
                ${destroot}${prefix}/$lip(${subport})/lib/ClangLazy.dylib"
        }
        reinplace "s|xCLANGPPx|$ccxx(${subport})|g" ${destroot}${prefix}/bin/clazy
        file rename ${destroot}${prefix}/bin/clazy ${destroot}${prefix}/bin/$wrappername(${subport})
#         file delete -force ${destroot}${prefix}/include/clazy
        file rename ${destroot}${prefix}/share/clazy/doc ${destroot}${prefix}/share/doc/${subport}
        xinstall -m 644 ${worksrcpath}/README.md ${worksrcpath}/HOWTO \
            ${destroot}${prefix}/share/doc/${subport}
    }
}
