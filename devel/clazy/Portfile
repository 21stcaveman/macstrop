# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           select 1.0

name                clazy

subport             ${name}_select {}
if {${subport} eq "${name}_select"} {
    version         1.0
    description		common files for selecting default clazy version
    long_description \
                    clazy_select installs files that allow 'port select' to \
                    switch the default version of clazy. \
                    It symlinks the standard clazy executables \
                    in the MacPorts prefix to the selected version.
    categories      sysutils
    platforms       darwin linux
    license         BSD
    maintainers     openmaintainer
    supported_archs noarch
    homepage        http://www.macports.org/
    distfiles

    use_configure   no
    build           {}

    destroot {
        select::install clazy ${filespath}/base
        select::install clazy ${filespath}/none
    }
    # nothing more to be done here
    return
}

PortGroup           cmake 1.1
PortGroup           github 1.0

#     v1.4-11-gc5f3df1
github.setup        KDE clazy c5f3df1e0997fd21b416b705f19d2fad1653f5bf
version             1.4.11
fetch.type          git

categories          devel
maintainers         gmail.com:rjvbertin
license             LGPL-2
description         Qt oriented code checker based on LLVM.
long_description    The clazy static checker provides an LLVM plugin that can check and sometimes fix issues in C++ code. \
                    The included checks are oriented at development using Qt.
platforms           darwin linux

# fetching via git means a more convenient constant distname can be used.
distname            ${name}-git

patch.pre_args      -Np1

# define subports for the supported/available Clang versions. Those are not complete
# definitions, post-patch and post-destroot operations have to be done outside of
# the definition loop.
set llvm_versions {3.9 4.0 5.0 6.0}
foreach lv ${llvm_versions} {
    subport ${name}-${lv} {
        variant system_cxx description \
            {build using the system C++ compiler instead of the target clang++ version} {}
#         variant reusable description \
#             {build a library so you can reuse clazy's utility functions} {}
        depends_lib-append \
                port:llvm-${lv} port:clang-${lv}
        depends_run-append \
                port:${name}_select
        patchfiles-append \
                patch-wrapper.diff
#                 patch-man-install-dir.diff
        configure.args-append \
                -DLLVM_ROOT=${prefix}/libexec/llvm-${lv}
        if {![variant_isset system_cxx]} {
            configure.args-append \
                -DCMAKE_C_COMPILER=${prefix}/bin/clang-mp-${lv} \
                -DCMAKE_CXX_COMPILER=${prefix}/bin/clang++-mp-${lv}
        }
#         if {[variant_isset reusable]} {
#             configure.args-append \
#                 -DCLAZY_BUILD_UTILS_LIB=ON
#         }
        if {${os.platform} eq "darwin"} {
            configure.args-append \
                -DCMAKE_INSTALL_LIBDIR=${prefix}/libexec/llvm-${lv}/lib
        } else {
            foreach v ${llvm_versions} {
                if {${v} ne ${lv}} {
                    conflicts-append ${name}-${v}
                }
            }
            configure.args-append \
                -DCMAKE_PREFIX_PATH=${prefix} \
                -DCMAKE_INSTALL_LIBDIR=${prefix}/lib
        }
        post-build {
            xinstall -m 755 ${filespath}/mp-clazy ${build.dir}/mp-${subport}
        }
        select.group clazy
        select.file ${build.dir}/mp-${subport}
    }
}

# configure.args-append \
#                     -DMAN_INSTALL_DIR=${prefix}/share/man/man1

# subport ${name}-dev {
#     PortGroup       obsolete 1.0
# }
# 
if {${subport} eq "${name}"} {
    platform darwin {
        pre-fetch {
            ui_error "This port provides the LLVM version-specific subports and is not supposed to be installed"
            return -code error "This port is not installable"
        }
    }
    # rest is for ~darwin using whatever clang is provided by the system
    post-build {
        xinstall -m 755 ${filespath}/mp-clazy ${build.dir}/mp-${subport}
    }
    select.group clazy
    select.file ${build.dir}/mp-${subport}
} else {
    array set lip {
        clazy-3.6 libexec/llvm-3.6
        clazy-3.7 libexec/llvm-3.7
        clazy-3.8 libexec/llvm-3.8
        clazy-3.9 libexec/llvm-3.9
        clazy-4.0 libexec/llvm-4.0
        clazy-5.0 libexec/llvm-5.0
    }
    array set cccc {
        clazy-3.6 clang-mp-3.6
        clazy-3.7 clang-mp-3.7
        clazy-3.8 clang-mp-3.8
        clazy-3.9 clang-mp-3.9
        clazy-4.0 clang-mp-4.0
        clazy-5.0 clang-mp-5.0
    }
    array set ccxx {
        clazy-3.6 clang++-mp-3.6
        clazy-3.7 clang++-mp-3.7
        clazy-3.8 clang++-mp-3.8
        clazy-3.9 clang++-mp-3.9
        clazy-4.0 clang++-mp-4.0
        clazy-5.0 clang++-mp-5.0
    }
    array set wrappername {
        clazy-3.6 clazy-mp-3.6
        clazy-3.7 clazy-mp-3.7
        clazy-3.8 clazy-mp-3.8
        clazy-3.9 clazy-mp-3.9
        clazy-4.0 clazy-mp-4.0
        clazy-5.0 clazy-mp-5.0
    }
    post-patch {
        # cmake's "find_package(clang ...)" command will provide an LLVM_INSTALL_PREFIX
        # variable, but that variable will be the normalised (resolved) full path if ever
        # ${prefix} is a symlink to, say, a directory on a different partition.
        # Ultimately the ClangClazy plugin would end up at the same location, but "base"
        # will complain about a destroot violation.
        # We avoid this by ensuring the file gets installed going through the symlink.
        # This is done outside of the subport-definition loop above because that would
        # set the install prefix to the one for the last defined subport ...
        if {[info exists lip(${subport})]} {
            reinplace "s|@LLVM_INSTALL_PREFIX@|${prefix}/$lip(${subport})|g" \
                ${worksrcpath}/CMakeLists.txt
        } else {
            # this should only happen when a subport for a clang version was added or removed
            # above, and $lip wasn't updated.
            ui_error "post-patch for unknown subport ${subport}"
            return -code error "outdated Portfile"
        }
    }
    post-destroot {
        platform darwin {
            system "install_name_tool -id ${prefix}/$lip(${subport})/lib/ClangLazy.dylib \
                ${destroot}${prefix}/$lip(${subport})/lib/ClangLazy.dylib"
            system "install_name_tool -change ${prefix}/lib/ClangLazy.dylib ${prefix}/$lip(${subport})/lib/ClangLazy.dylib \
                ${destroot}${prefix}/bin/clazy-standalone"
        }
        # make a C wrapper
        xinstall -m 755 ${destroot}${prefix}/bin/clazy ${destroot}${prefix}/bin/cclazy
        reinplace "s|clang++|$cccc(${subport})|g" ${destroot}${prefix}/bin/cclazy
        reinplace "s|xCLANGPPx|$cccc(${subport})|g" ${destroot}${prefix}/bin/cclazy
        reinplace "s|clang++|$ccxx(${subport})|g" ${destroot}${prefix}/bin/clazy
        reinplace "s|xCLANGPPx|$ccxx(${subport})|g" ${destroot}${prefix}/bin/clazy
        file rename ${destroot}${prefix}/bin/cclazy ${destroot}${prefix}/bin/[string map {clazy cclazy} $wrappername(${subport})]
        file rename ${destroot}${prefix}/bin/clazy ${destroot}${prefix}/bin/$wrappername(${subport})
        file rename ${destroot}${prefix}/bin/clazy-standalone \
            ${destroot}${prefix}/bin/[strsed $wrappername(${subport}) "s/clazy/clazy-standalone/"]
        # manpage and docs could be installed via a noarch subport registered as our own runtime dependency.
        # I'm too lazy to figure out how to do that now
        file rename ${destroot}${prefix}/share/man/man1/clazy.1 "${destroot}${prefix}/share/man/man1/$wrappername(${subport}).1"
        file rename ${destroot}${prefix}/share/doc/clazy ${destroot}${prefix}/share/doc/${subport}
        xinstall -m 644 ${worksrcpath}/README.md ${worksrcpath}/HOWTO \
            ${destroot}${prefix}/share/doc/${subport}
    }
}

if {[info proc cmake.save_configure_cmd] ne ""} {
    cmake.save_configure_cmd "log too"
}
