diff --git src/shared/clang/clang_installation.pri src/shared/clang/clang_installation.pri
index 863d29cf481217159a8c92edca19176b719c7475..6acc0c77e649de688bc04a2c2668609f9c642044 100644
--- src/shared/clang/clang_installation.pri
+++ src/shared/clang/clang_installation.pri
@@ -145,10 +145,10 @@ isEmpty(LLVM_VERSION) {
     $$llvmWarningOrError(\
         "Cannot determine clang version. Set LLVM_INSTALL_DIR to build the Clang Code Model",\
         "LLVM_INSTALL_DIR does not contain a valid llvm-config, candidate: $$llvm_config")
-} else:!versionIsAtLeast($$LLVM_VERSION, 6, 0, 0): {
+} else:!versionIsAtLeast($$LLVM_VERSION, 5, 0, 1): {
     # CLANG-UPGRADE-CHECK: Adapt minimum version numbers.
     $$llvmWarningOrError(\
-        "LLVM/Clang version >= 6.0.0 required, version provided: $$LLVM_VERSION")
+        "LLVM/Clang version >= 5.0.1 required, version provided: $$LLVM_VERSION")
     LLVM_VERSION =
 } else {
     # CLANG-UPGRADE-CHECK: Remove suppression if this warning is resolved.
diff --git src/tools/clangbackend/source/clangtype.cpp src/tools/clangbackend/source/clangtype.cpp
index 46ed23d54c02e4df03a186b5e7fdba0c09ec4b71..5fa8a7915db9ce84efed5892a1f0bc4aee6205a9 100644
--- src/tools/clangbackend/source/clangtype.cpp
+++ src/tools/clangbackend/source/clangtype.cpp
@@ -163,7 +163,9 @@ static const char *builtinTypeToText(CXTypeKind kind)
 
     // https://gcc.gnu.org/onlinedocs/gcc/Floating-Types.html
     case CXType_Float128: return "__float128";
+#if CINDEX_VERSION_MINOR > 43
     case CXType_Float16: return "_Float16";
+#endif
 
     // https://www.khronos.org/registry/OpenCL/sdk/2.1/docs/man/xhtml/scalarDataTypes.html
     case CXType_Half:
diff --git src/tools/clangbackend/source/fulltokeninfo.cpp src/tools/clangbackend/source/fulltokeninfo.cpp
index 3b3bba4a3db3e7e7c0cb53e8250be8ceda0f7f45..35ef34ec20d1c90ae8344d91b88785d501948673 100644
--- src/tools/clangbackend/source/fulltokeninfo.cpp
+++ src/tools/clangbackend/source/fulltokeninfo.cpp
@@ -107,6 +107,7 @@ static Utf8String getPropertyType(const SourceLocation &location, uint propertyP
     CXFile cxFile;
     uint offset;
     clang_getFileLocation(location.cx(), &cxFile, nullptr, nullptr, &offset);
+#if defined(CINDEX_VERSION_HAS_GETFILECONTENTS_BACKPORTED) || CINDEX_VERSION_MINOR >= 47
     const char *const contents = clang_getFileContents(location.tu(), cxFile, nullptr);
     const char *const lineContents = &contents[offset - propertyPosition];
 
@@ -119,6 +120,9 @@ static Utf8String getPropertyType(const SourceLocation &location, uint propertyP
                                 Utils::unequalTo(' '));
 
     return Utf8String(typeStart, static_cast<int>(&(*typeEnd) + 1 - typeStart));
+#else
+    return Utf8String();
+#endif
 }
 
 void FullTokenInfo::updatePropertyData()
diff --git src/tools/clangbackend/source/sourcelocation.cpp src/tools/clangbackend/source/sourcelocation.cpp
index 7fbe8c03eb9737bcda2b85b83135a8489875b869..303fe3d675b64ef157038d9f1a8d7029310caa04 100644
--- src/tools/clangbackend/source/sourcelocation.cpp
+++ src/tools/clangbackend/source/sourcelocation.cpp
@@ -103,6 +103,7 @@ void SourceLocation::evaluate() const
         return;
 
     m_filePath = ClangString(clang_getFileName(cxFile));
+#if defined(CINDEX_VERSION_HAS_GETFILECONTENTS_BACKPORTED) || CINDEX_VERSION_MINOR >= 47
     if (m_column > 1) {
         const uint lineStart = m_offset + 1 - m_column;
         const char *contents = clang_getFileContents(m_cxTranslationUnit, cxFile, nullptr);
@@ -114,6 +115,7 @@ void SourceLocation::evaluate() const
         m_column = static_cast<uint>(QString::fromUtf8(&contents[lineStart],
                                                        static_cast<int>(m_column) - 1).size()) + 1;
     }
+#endif
 }
 
 SourceLocation::SourceLocation(CXTranslationUnit cxTranslationUnit,
