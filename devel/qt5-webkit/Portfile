# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           qt5 1.0
PortGroup           cmake 1.1
PortGroup           github 1.0

set module          qtwebkit
set targetversion   5.212.0
set versiontag      ${targetversion}-alpha2
github.setup        annulen webkit ${module}-${versiontag}
github.tarball_from releases
name                qt5-webkit
# set a numeric version for "5.212.0-alpha2"
version             5.211.92

categories          devel
description         QtWebKit Reloaded
long_description    This port provides QtWebKit upgraded to the modern WebKit code base.
homepage            https://github.com/annulen/webkit/wiki
universal_variant   no

maintainers         gmail.com:rjvbertin openmaintainer
platforms           darwin linux
license             LGPL-2

# Share the distfiles dir with port:qt5
dist_subdir         qt5

# subport ${name}-devel {
#     description-append This port follows the development branch.
#     long_description-append This port follows the development branch.
# }
# 
if {${subport} eq "${name}"} {
    conflicts-append \
                    ${name}-devel

    distname        ${module}-${versiontag}
    use_xz          yes
    checksums       rmd160  33c3f7c68090fa16f72950ef85c20978432cc058 \
                    sha256  f8f901de567e11fc5659402b6b827eac75505ff9c5072d8e919aa306003f8f8a
} else {
    fetch.type      git
    git.branch      f53b6b8cfef091770dd3dccd8371420b63d89f83
    version         5.211.92.53
    distname        ${module}-git
    conflicts-append \
                    ${name}
}

# a convenience procedure to register conflicts among the different Qt5 ports:
# for instance: [qt5_port_conflicts {qtbase x11}]
# adapted from port:qt5-kde
proc qt5_port_conflicts {components} {
    global available_qt5_versions available_qt_versions name
    set cnfls {}
    if {![info exists available_qt5_versions]} {
        ui_debug "set available_qt5_versions ${available_qt_versions}"
        set available_qt5_versions ${available_qt_versions}
    }
    foreach suffix {"" "-devel"} {
        foreach comp ${components} {
            foreach v ${available_qt5_versions} {
                if {"${v}-${comp}" ne "${name}"} {
                    if {${comp} ne "" && ${comp} ne "qtbase"} {
                        set cnfls [lappend cnfls ${v}-${comp}]
                        set cnfls [lappend cnfls ${v}-kde${suffix}-${comp}]
                    } else {
                        set cnfls [lappend cnfls ${v}-qtbase]
                        set cnfls [lappend cnfls ${v}-kde${suffix}]
                    }
                }
            }
        }
    }
    return ${cnfls}
}
proc qt5.active_version {} {
    global prefix
    if {[file exists ${prefix}/bin/pkg-config]} {
        set av [exec ${prefix}/bin/pkg-config --modversion Qt5Core]
        return ${av}
    } else {
        return 0.0.0
    }
}

conflicts-append        [qt5_port_conflicts qtwebkit]

depends_lib-append      port:webp \
                        port:libxml2 \
                        port:libxslt \
                        port:zlib \
                        port:sqlite3
platform darwin {
    depends_lib-append  port:icu \
                        port:leveldb \
                        port:fontconfig \
                        port:hyphen
    depends_build-append \
                        port:bison \
                        port:perl5 \
                        port:gperf
    # we need ruby during the build; the system copy will do just
    # fine as long as it's at least v1.9 .
    depends_build-append \
                        bin:ruby:ruby19
}

if {![variant_isset minimal]} {
    qt5.depends_component \
                        qtdeclarative \
                        qtxmlpatterns \
                        qtlocation \
                        qtmultimedia \
                        qtsensors \
                        qtwebchannel
}

patch.pre_args          -Np1

# add the commits made to the qtwebkit-stable branch since the alpha release:
patchfiles-append       patch-upstream-20171112.diff

# make some modifications for OS X 10.9 (and earlier; untested)
patchfiles-append       patch-allow-pre-osx1010.diff
# make sure we use not only the ICU headerfiles from MacPorts, but also the library!
patchfiles-append       patch-use-icu.diff
# # we'll want to generate .pkg files
# # (NB: if those don't work, just provide copies in ${filespath})
# patchfiles-append       patch-generate-pkgconfigs.diff
# set the framework compatibility version to the same value as used
# by the Qt version against which we're building. The default 5.0.0
# version will be rejected by any app that was linked to a more recent
# Qt version.
patchfiles-append       patch-set-compatversion.diff

if {[info proc cmake.save_configure_cmd] ne ""} {
    cmake.save_configure_cmd "log too"
}

set branch              [join [lrange [split [qt5.active_version] .] 0 1] .]

configure.args-append   -DENABLE_API_TESTS=OFF \
                        -DENABLE_PRINT_SUPPORT=ON \
                        -DENABLE_DEVICE_ORIENTATION=ON \
                        -DENABLE_GEOLOCATION=ON \
                        -DENABLE_JIT=ON \
                        -DENABLE_OPENGL=ON \
                        -DENABLE_WEBKIT2=ON \
                        -DENABLE_QT_WEBCHANNEL=ON \
                        -DUSE_LIBHYPHEN=ON \
                        -DPORT=Qt
if {${os.platform} eq "darwin"} {
    configure.args-append \
                        -DUSE_QT_MULTIMEDIA=ON
} else {
    configure.args-append \
                        -DUSE_GSTREAMER=ON
}

variant docs description {build the API documentation} {}
if {[variant_isset docs]} {
    configure.args-append \
                        -DGENERATE_DOCUMENTATION=ON
}

variant minimal description {build a lean & mean variant, sufficient for documentation viewing} {}
if {[variant_isset minimal]} {
    configure.args-replace \
                        -DENABLE_DEVICE_ORIENTATION=ON \
                        -DENABLE_DEVICE_ORIENTATION=OFF
    configure.args-replace \
                        -DENABLE_GEOLOCATION=ON \
                        -DENABLE_GEOLOCATION=OFF
#     configure.args-replace \
#                         -DENABLE_JIT=ON \
#                         -DENABLE_JIT=OFF
    configure.args-replace \
                        -DENABLE_WEBKIT2=ON \
                        -DENABLE_WEBKIT2=OFF
    configure.args-replace \
                        -DENABLE_QT_WEBCHANNEL=ON \
                        -DENABLE_QT_WEBCHANNEL=OFF
    if {${os.platform} eq "darwin"} {
        configure.args-replace \
                        -DUSE_QT_MULTIMEDIA=ON \
                        -DUSE_QT_MULTIMEDIA=OFF
    } else {
        configure.args-replace \
                        -DUSE_GSTREAMER=ON \
                        -DUSE_GSTREAMER=OFF
    }
    configure.args-append \
                        -DENABLE_INSPECTOR_UI=OFF \
                        -DENABLE_DRAG_SUPPORT=OFF \
                        -DENABLE_SAMPLING_PROFILER=OFF \
                        -DENABLE_VIDEO=OFF \
                        -DENABLE_VIDEO_TRACK=OFF
}

configure.pre_args-delete \
                        -DCMAKE_INSTALL_NAME_DIR="${cmake.install_prefix}/lib"

configure.args-append   -DKDE_INSTALL_INCLUDEDIR=${qt_includes_dir} \
                        -DBIN_INSTALL_DIR=${qt_bins_dir}

if {${os.platform} eq "darwin"} {
    if {[variant_exists qt5kde] && [variant_isset qt5kde]} {
        variant x11 description {build the X11 target} {}
        if {[variant_isset x11]} {
            configure.args-append \
                        -DENABLE_X11_TARGET=ON
            depends_lib-append \
                        path:${qt_frameworks_dir}/QtX11Extras.framework/QtX11Extras:qt5-kde-x11
        }
    }

    configure.pre_args-append \
                        -DCMAKE_INSTALL_NAME_DIR="${qt_frameworks_dir}"
    configure.args-append \
                        -DLIB_INSTALL_DIR=${qt_frameworks_dir} \
                        -DCOMPATIBILITY_VERSION="${branch}.0"
    if {${os.major} == 13} {
        # this OS supports an almost complete build using the 10.10 SDK
        # (the allow-pre-1010 patch takes care of deactivating unsupported bits and pieces)
        set macosx_deployment_target 10.10
        if {[catch {configure.sdkroot [exec xcrun --show-sdk-path -sdk macosx10.10]} result]} {
            ui_warn "The SDK macosx10.10 is required on Mac OS X 10.9: ${result}"
            configure.args-append \
                        -DUSE_SYSTEM_MALLOC=ON
        } else {
            ui_debug "Using SDK macosx10.10 (${configure.sdkroot}): ${result}"
        }
    } elseif {${os.major} < 13} {
        configure.args-append \
                        -DUSE_SYSTEM_MALLOC=ON
    }
} else {
    configure.pre_args-append \
                        -DCMAKE_INSTALL_NAME_DIR="${qt_libs_dir}"
    configure.args-append \
                        -DLIB_INSTALL_DIR=${qt_libs_dir} \
                        -DCOMPATIBILITY_VERSION="5" \
                        -DUSE_LD_GOLD=OFF
}

post-destroot {
    if {[tbool qt5.using_kde]} {
        if {[info exists qt_cmake_module_dir]} {
            ui_info "fixing and moving the CMake files into ${qt_cmake_module_dir}"
            if {[file exists ${destroot}${qt_frameworks_dir}/cmake]} {
                set srcdir ${qt_frameworks_dir}
                # replace the *_install_prefix path with the correct path, but "take a detour" through ${qt_dir}
                # as an extra insurance and to show the expected Qt install location in case cmake ever finds
                # a .cmake script that doesn't below to this Qt5 port.
                set sedcmd "s|/../../../../|/../../../${qt_dir_rel}/|g"
            } else {
                set srcdir ${qt_libs_dir}
                set sedcmd "s|/../../../../../|/../../../${qt_dir_rel}/../../|g"
            }
            xinstall -v -m 755 -d ${destroot}${qt_cmake_module_dir}
            foreach d [glob -tails -nocomplain -directory ${destroot}${srcdir}/cmake *] {
                xinstall -m 755 -d ${destroot}${qt_cmake_module_dir}/${d}
                foreach f [glob -nocomplain -directory ${destroot}${srcdir}/cmake/${d} *.cmake] {
                    # ${qt_frameworks_dir} is  ${qt_dir}/Library/Frameworks while
                    # ${qt_libs_dir}       is  ${qt_dir}/lib
                    # unless modified, cmake files will point to a directory that is too high in the directory hierarchy
                    reinplace ${sedcmd} ${f}
                    # these cmake modules are generated with ECM and thus use a different way
                    # to set determine the prefix. After moving them like we just did we'll need
                    # to correct the fallback because it's what will be used.
                    reinplace "s|set(_IMPORT_PREFIX \"\")|set(_IMPORT_PREFIX \"${prefix}\")|g" ${f}
                    file rename ${f} ${destroot}${qt_cmake_module_dir}/${d}/
                }
            }
        }
        platform darwin {
            # we'll have ended up with the headers in $prefix/include/qt5 (qt_includes_dir) which
            # is where there should be a symlink to the framework headers dir instead. Fix that.
            file delete -force ${destroot}${qt_frameworks_dir}/QtWebKit.framework/Versions/5/Headers
            file delete -force ${destroot}${qt_frameworks_dir}/QtWebKitWidgets.framework/Versions/5/Headers
            file rename ${destroot}${qt_includes_dir}/QtWebKit ${destroot}${qt_frameworks_dir}/QtWebKit.framework/Versions/5/Headers/
            file rename ${destroot}${qt_includes_dir}/QtWebKitWidgets ${destroot}${qt_frameworks_dir}/QtWebKitWidgets.framework/Versions/5/Headers/
            ln -s ${qt_frameworks_dir}/QtWebKit.framework/Versions/5/Headers ${destroot}${qt_includes_dir}/QtWebKit
            ln -s ${qt_frameworks_dir}/QtWebKitWidgets.framework/Versions/5/Headers ${destroot}${qt_includes_dir}/QtWebKitWidgets
        }
    } else {
        # this comes from `port file qt5-qtbase`
        xinstall -d -m 0755 ${destroot}${prefix}/lib/cmake
        foreach cmakedir [glob -type d -nocomplain -tails -directory ${destroot}${qt_libs_dir}/cmake *] {
            xinstall -d -m 0755 ${destroot}${prefix}/lib/cmake/${cmakedir}
            foreach cmakefile [glob -tails -directory ${destroot}${qt_libs_dir}/cmake/${cmakedir} *.cmake] {
                ln -s ${qt_libs_dir}/cmake/${cmakedir}/${cmakefile} ${destroot}${prefix}/lib/cmake/${cmakedir}/
            }
        }

        # if cmake finds configuration files in ${prefix}/lib/cmake, CMAKE_CURRENT_LIST_DIR expands to ${prefix}/lib/cmake/xxx
        # cmake configuration files actually installed in ${qt_cmake_module_dir}/xxx
        foreach cmakedir [glob -type d -nocomplain -tails -directory ${destroot}${qt_libs_dir}/cmake *] {
            foreach cmakefile [glob -nocomplain -directory ${destroot}${qt_libs_dir}/cmake/${cmakedir} *.cmake] {
                reinplace "s|\\\${CMAKE_CURRENT_LIST_DIR}|${qt_cmake_module_dir}/${cmakedir}|g" ${cmakefile}
            }
        }
    }
    if {${os.platform} eq "darwin"} {
        xinstall -m 755 -d ${destroot}${qt_pkg_config_dir}
        xinstall -m 755 ${filespath}/Qt5WebKit.pc ${destroot}${qt_pkg_config_dir}
        xinstall -m 755 ${filespath}/Qt5WebKitWidgets.pc ${destroot}${qt_pkg_config_dir}
        reinplace "s|@PREFIX@|${prefix}|g" \
                     ${destroot}${qt_pkg_config_dir}/Qt5WebKit.pc \
                     ${destroot}${qt_pkg_config_dir}/Qt5WebKitWidgets.pc
        reinplace "s|@FRAMEWORKSDIR@|${qt_frameworks_dir}|g" \
                     ${destroot}${qt_pkg_config_dir}/Qt5WebKit.pc \
                     ${destroot}${qt_pkg_config_dir}/Qt5WebKitWidgets.pc
        reinplace "s|@INCLUDESDIR@|${qt_includes_dir}|g" \
                     ${destroot}${qt_pkg_config_dir}/Qt5WebKit.pc \
                     ${destroot}${qt_pkg_config_dir}/Qt5WebKitWidgets.pc
        reinplace "s|@VERSION@|${targetversion}|g" \
                     ${destroot}${qt_pkg_config_dir}/Qt5WebKit.pc \
                     ${destroot}${qt_pkg_config_dir}/Qt5WebKitWidgets.pc
    }
}

# optional support for HFS-compression of the source and build dirs
if {[file exists ${qt5::currentportgroupdir}/compress_workdir-1.0.tcl]} {
    PortGroup       compress_workdir 1.0
}
