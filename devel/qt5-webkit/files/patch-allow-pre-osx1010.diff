diff --git a/Source/WTF/wtf/OSObjectPtr.h b/Source/WTF/wtf/OSObjectPtr.h
index ed7eceb..3bfd1ed 100644
--- a/Source/WTF/wtf/OSObjectPtr.h
+++ b/Source/WTF/wtf/OSObjectPtr.h
@@ -30,6 +30,11 @@
 #include <wtf/Assertions.h>
 #include <wtf/StdLibExtras.h>
 
+#if (defined(__MAC_OS_X_VERSION_MIN_REQUIRED) && __MAC_OS_X_VERSION_MIN_REQUIRED < 101000) \
+        || (defined(__IPHONE_OS_VERSION_MIN_REQUIRED) && __IPHONE_OS_VERSION_MIN_REQUIRED < 80000)
+#include <CoreFoundation/CoreFoundation.h>
+#endif
+
 namespace WTF {
 
 template<typename T> class OSObjectPtr;
@@ -38,13 +43,25 @@ template<typename T> OSObjectPtr<T> adoptOSObject(T);
 template<typename T>
 static inline void retainOSObject(T ptr)
 {
+#if (defined(__MAC_OS_X_VERSION_MIN_REQUIRED) && __MAC_OS_X_VERSION_MIN_REQUIRED < 101000) \
+        || (defined(__IPHONE_OS_VERSION_MIN_REQUIRED) && __IPHONE_OS_VERSION_MIN_REQUIRED < 80000)
+    if (ptr)
+        CFRetain(ptr);
+#else
     os_retain(ptr);
+#endif
 }
 
 template<typename T>
 static inline void releaseOSObject(T ptr)
 {
+#if (defined(__MAC_OS_X_VERSION_MIN_REQUIRED) && __MAC_OS_X_VERSION_MIN_REQUIRED < 101000) \
+        || (defined(__IPHONE_OS_VERSION_MIN_REQUIRED) && __IPHONE_OS_VERSION_MIN_REQUIRED < 80000)
+    if (ptr)
+        CFRelease(ptr);
+#else
     os_release(ptr);
+#endif
 }
 
 template<typename T> class OSObjectPtr {
diff --git a/Source/WTF/wtf/OSRandomSource.cpp b/Source/WTF/wtf/OSRandomSource.cpp
index 529acf7..5b51edb 100644
--- a/Source/WTF/wtf/OSRandomSource.cpp
+++ b/Source/WTF/wtf/OSRandomSource.cpp
@@ -41,8 +41,13 @@
 #endif
 
 #if OS(DARWIN)
-#include <CommonCrypto/CommonCryptoError.h>
-#include <CommonCrypto/CommonRandom.h>
+#if (defined(__MAC_OS_X_VERSION_MIN_REQUIRED) && __MAC_OS_X_VERSION_MIN_REQUIRED < 101000) \
+        || (defined(__IPHONE_OS_VERSION_MIN_REQUIRED) && __IPHONE_OS_VERSION_MIN_REQUIRED < 80000)
+    #include "wtf/spi/darwin/CommonCryptoSPI.h"
+#else
+    #include <CommonCrypto/CommonCryptoError.h>
+    #include <CommonCrypto/CommonRandom.h>
+#endif
 #endif
 
 namespace WTF {
@@ -62,7 +67,12 @@ NEVER_INLINE NO_RETURN_DUE_TO_CRASH static void crashUnableToReadFromURandom()
 void cryptographicallyRandomValuesFromOS(unsigned char* buffer, size_t length)
 {
 #if OS(DARWIN)
+#if (defined(__MAC_OS_X_VERSION_MIN_REQUIRED) && __MAC_OS_X_VERSION_MIN_REQUIRED < 101000) \
+        || (defined(__IPHONE_OS_VERSION_MIN_REQUIRED) && __IPHONE_OS_VERSION_MIN_REQUIRED < 80000)
+    RELEASE_ASSERT(!CCRandomCopyBytes(kCCRandomDefault, buffer, length));
+#else
     RELEASE_ASSERT(!CCRandomGenerateBytes(buffer, length));
+#endif // MAC_OS_X_VERSION
 #elif OS(UNIX)
     int fd = open("/dev/urandom", O_RDONLY, 0);
     if (fd < 0)
diff --git a/Source/cmake/OptionsQt.cmake b/Source/cmake/OptionsQt.cmake
index 1ee60b7..7f5234c 100644
--- a/Source/cmake/OptionsQt.cmake
+++ b/Source/cmake/OptionsQt.cmake
@@ -398,9 +398,9 @@ elseif (MSVC AND MSVC_VERSION LESS 1900)
     message(FATAL_ERROR "MSVC 2015 is required to build QtWebKit, use a newer MSVC version")
 endif ()
 
-if (APPLE AND CMAKE_SYSTEM_VERSION VERSION_LESS 14.0.0)
-    message(FATAL_ERROR "macOS 10.10 or higher is required to build and run QtWebKit")
-endif ()
+# if (APPLE AND CMAKE_SYSTEM_VERSION VERSION_LESS 14.0.0)
+#     message(FATAL_ERROR "macOS 10.10 or higher is required to build and run QtWebKit")
+# endif ()
 
 set(ENABLE_WEBKIT ON)
 set(WTF_USE_UDIS86 1)
@@ -734,8 +734,10 @@ if (FORCE_DEBUG_INFO)
     endif ()
 endif ()
 
-if (APPLE)
+if (APPLE AND CMAKE_SYSTEM_VERSION VERSION_GREATER_EQUAL 14.0.0)
     SET_AND_EXPOSE_TO_BUILD(HAVE_QOS_CLASSES 1)
+else ()
+    SET_AND_EXPOSE_TO_BUILD(HAVE_QOS_CLASSES 0)
 endif ()
 
 if (ENABLE_MATHML)
diff --git a/Tools/qmake/mkspecs/features/functions.prf b/Tools/qmake/mkspecs/features/functions.prf
index e3f42ce..cd3276e 100644
--- a/Tools/qmake/mkspecs/features/functions.prf
+++ b/Tools/qmake/mkspecs/features/functions.prf
@@ -86,14 +86,14 @@ defineTest(isPlatformSupported) {
         }
     } else: macos {
         # We require macOS 10.10 (darwin version 14.0.0) or newer
-        darwin_major_version = $$section(QMAKE_HOST.version, ., 0, 0)
-        lessThan(darwin_major_version, 14) {
-            skipBuild("QtWebKit requires macOS version 10.10 or newer.")
-        }
-        sdk_version = $$appleSdkVersion()
-        !isVersionAtLeast($$sdk_version, "10.10") {
-            skipBuild("QtWebKit requires an macOS SDK version of 10.10 or newer. Current version is $${sdk_version}.")
-        }
+        # darwin_major_version = $$section(QMAKE_HOST.version, ., 0, 0)
+        # lessThan(darwin_major_version, 14) {
+        #     skipBuild("QtWebKit requires macOS version 10.10 or newer.")
+        # }
+        # sdk_version = $$appleSdkVersion()
+        # !isVersionAtLeast($$sdk_version, "10.10") {
+        #     skipBuild("QtWebKit requires an macOS SDK version of 10.10 or newer. Current version is $${sdk_version}.")
+        # }
     } else {
         android: skipBuild("Android is not supported.")
         uikit: skipBuild("UIKit platforms are not supported.")
