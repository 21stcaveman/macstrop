commit 0785dd4efa506a9cad3b043b9f81baea4429655c
Author: Oleg Shparber <oleg@zealdocs.org>
Date:   Fri Sep 28 00:45:16 2018 -0400

    REVERT

    fix(core): replace libarchive extraction with own logic (fixes #747)
    
    On Windows this allows to properly handle paths containing non-Latin
    characters.

diff --git a/src/libs/core/extractor.cpp b/src/libs/core/extractor.cpp
index 6516b91207bd05b7ff41aa964efe99991f732158..d5ea7a30e83dc12c8f1ff01b2a0cd81807f2823c 100644
--- a/src/libs/core/extractor.cpp
+++ b/src/libs/core/extractor.cpp
@@ -27,8 +27,6 @@
 #include <archive.h>
 #include <archive_entry.h>
 
-#include <sys/stat.h>
-
 using namespace Zeal::Core;
 
 Extractor::Extractor(QObject *parent) :
@@ -36,28 +34,31 @@ Extractor::Extractor(QObject *parent) :
 {
 }
 
-void Extractor::extract(const QString &sourceFile, const QString &destination, const QString &root)
+void Extractor::extract(const QString &filePath, const QString &destination, const QString &root)
 {
     ExtractInfo info = {
+        this, // extractor
         archive_read_new(), // archiveHandle
-        sourceFile, // filePath
-        QFileInfo(sourceFile).size(), // totalBytes
+        filePath, // filePath
+        QFileInfo(filePath).size(), // totalBytes
         0 // extractedBytes
     };
 
     archive_read_support_filter_all(info.archiveHandle);
     archive_read_support_format_all(info.archiveHandle);
 
-    int r = archive_read_open_filename(info.archiveHandle, qPrintable(sourceFile), 10240);
+    int r = archive_read_open_filename(info.archiveHandle, qPrintable(filePath), 10240);
     if (r) {
-        emit error(sourceFile, QString::fromLocal8Bit(archive_error_string(info.archiveHandle)));
+        emit error(filePath, QString::fromLocal8Bit(archive_error_string(info.archiveHandle)));
         return;
     }
 
+    archive_read_extract_set_progress_callback(info.archiveHandle, &Extractor::progressCallback,
+                                               &info);
+
     QDir destinationDir(destination);
-    if (!root.isEmpty()) {
+    if (!root.isEmpty())
         destinationDir = destinationDir.filePath(root);
-    }
 
     // TODO: Do not strip root directory in archive if it equals to 'root'
     archive_entry *entry;
@@ -68,64 +69,25 @@ void Extractor::extract(const QString &sourceFile, const QString &destination, c
         // TODO: Remove once https://github.com/libarchive/libarchive/issues/587 is resolved.
         QString pathname = QString::fromWCharArray(archive_entry_pathname_w(entry));
 #endif
-
-        if (!root.isEmpty()) {
+        if (!root.isEmpty())
             pathname.remove(0, pathname.indexOf(QLatin1String("/")) + 1);
-        }
-
-        const QString filePath = destinationDir.absoluteFilePath(pathname);
-
-        const auto filetype = archive_entry_filetype(entry);
-        if (filetype == S_IFDIR) {
-            QDir().mkpath(QFileInfo(filePath).absolutePath());
-            continue;
-        }
-
-        if (filetype != S_IFREG) {
-            qWarning("Unsupported filetype %d for %s!", filetype, qPrintable(pathname));
-            continue;
-        }
-
-        QScopedPointer<QFile> file(new QFile(filePath));
-        if (!file->open(QIODevice::WriteOnly)) {
-            qWarning("Cannot open file for writing: %s", qPrintable(pathname));
-            continue;
-        }
-
-        const void *buffer;
-        size_t size;
-        std::int64_t offset;
-        for (;;) {
-            int rc = archive_read_data_block(info.archiveHandle, &buffer, &size, &offset);
-            if (rc != ARCHIVE_OK) {
-                if (rc == ARCHIVE_EOF) {
-                    break;
-                }
-
-                qWarning("Cannot read from archive: %s", archive_error_string(info.archiveHandle));
-                emit error(sourceFile,
-                           QString::fromLocal8Bit(archive_error_string(info.archiveHandle)));
-                return;
-            }
-
-            file->write(static_cast<const char *>(buffer), size);
-        }
-
-        emitProgress(info);
+        archive_entry_set_pathname(entry, qPrintable(destinationDir.filePath(pathname)));
+        archive_read_extract(info.archiveHandle, entry, ARCHIVE_EXTRACT_FFLAGS|ARCHIVE_EXTRACT_XATTR|ARCHIVE_EXTRACT_MAC_METADATA|ARCHIVE_EXTRACT_HFS_COMPRESSION_FORCED);
     }
 
-    emit completed(sourceFile);
+    emit completed(filePath);
     archive_read_free(info.archiveHandle);
 }
 
-void Extractor::emitProgress(ExtractInfo &info)
+void Extractor::progressCallback(void *ptr)
 {
-    const qint64 extractedBytes = archive_filter_bytes(info.archiveHandle, -1);
-    if (extractedBytes == info.extractedBytes) {
+    ExtractInfo *info = static_cast<ExtractInfo *>(ptr);
+
+    const qint64 extractedBytes = archive_filter_bytes(info->archiveHandle, -1);
+    if (extractedBytes == info->extractedBytes)
         return;
-    }
 
-    info.extractedBytes = extractedBytes;
+    info->extractedBytes = extractedBytes;
 
-    emit progress(info.filePath, extractedBytes, info.totalBytes);
+    emit info->extractor->progress(info->filePath, extractedBytes, info->totalBytes);
 }
diff --git a/src/libs/core/extractor.h b/src/libs/core/extractor.h
index 8b2503cd48d30c2d53d4dedc195d0bf781f82c5d..455f76cf0185df605efd7743bfae80b9bf189601 100644
--- a/src/libs/core/extractor.h
+++ b/src/libs/core/extractor.h
@@ -38,9 +38,7 @@ public:
     explicit Extractor(QObject *parent = nullptr);
 
 public slots:
-    void extract(const QString &sourceFile,
-                 const QString &destination,
-                 const QString &root = QString());
+    void extract(const QString &filePath, const QString &destination, const QString &root = QString());
 
 signals:
     void error(const QString &filePath, const QString &message);
@@ -49,13 +47,14 @@ signals:
 
 private:
     struct ExtractInfo {
+        Extractor *extractor;
         archive *archiveHandle;
         QString filePath;
         qint64 totalBytes;
         qint64 extractedBytes;
     };
 
-    void emitProgress(ExtractInfo &info);
+    static void progressCallback(void *ptr);
 };
 
 } // namespace Core
