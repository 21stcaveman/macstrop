diff --git a/mscore/file.cpp b/mscore/file.cpp
index b6ed45a27a276a5b5de031d01b6cfa5eb12703fe..c0b5ca33645956d68cfed3b6d11983be0643a89d 100644
--- a/mscore/file.cpp
+++ b/mscore/file.cpp
@@ -92,6 +92,7 @@
 #include "libmscore/mscore.h"
 #include "thirdparty/qzip/qzipreader_p.h"
 
+#include <QPrintPreviewDialog>
 
 namespace Ms {
 
@@ -1737,39 +1738,43 @@ void MuseScore::printFile()
             printerDev.setOutputFileName(cs->masterScore()->fileInfo()->path() + "/" + cs->excerpt()->title() + ".pdf");
 #endif
 
-      QPrintDialog pd(&printerDev, 0);
+        const auto printFnc = [&]() { QPainter p(&printerDev);
+        p.setRenderHint(QPainter::Antialiasing, true);
+        p.setRenderHint(QPainter::TextAntialiasing, true);
+        double mag_ = printerDev.logicalDpiX() / DPI;
+
+        double pr = MScore::pixelRatio;
+        MScore::pixelRatio = 1.0 / mag_;
+        p.scale(mag_, mag_);
+
+        int fromPage = printerDev.fromPage() - 1;
+        int toPage   = printerDev.toPage() - 1;
+        if (fromPage < 0)
+              fromPage = 0;
+        if ((toPage < 0) || (toPage >= pages))
+              toPage = pages - 1;
+
+        for (int copy = 0; copy < printerDev.numCopies(); ++copy) {
+              bool firstPage = true;
+              for (int n = fromPage; n <= toPage; ++n) {
+                    if (!firstPage)
+                          printerDev.newPage();
+                    firstPage = false;
+
+                    cs->print(&p, n);
+                    if ((copy + 1) < printerDev.numCopies())
+                          printerDev.newPage();
+                    }
+              }
+        p.end();
+        MScore::pixelRatio = pr;
+        };
+
+      QPrintPreviewDialog pd(&printerDev, 0);
+      connect(&pd, &QPrintPreviewDialog::paintRequested, printFnc);
 
       if (pd.exec()) {
-            QPainter p(&printerDev);
-            p.setRenderHint(QPainter::Antialiasing, true);
-            p.setRenderHint(QPainter::TextAntialiasing, true);
-            double mag_ = printerDev.logicalDpiX() / DPI;
-
-            double pr = MScore::pixelRatio;
-            MScore::pixelRatio = 1.0 / mag_;
-            p.scale(mag_, mag_);
-
-            int fromPage = printerDev.fromPage() - 1;
-            int toPage   = printerDev.toPage() - 1;
-            if (fromPage < 0)
-                  fromPage = 0;
-            if ((toPage < 0) || (toPage >= pages))
-                  toPage = pages - 1;
-
-            for (int copy = 0; copy < printerDev.numCopies(); ++copy) {
-                  bool firstPage = true;
-                  for (int n = fromPage; n <= toPage; ++n) {
-                        if (!firstPage)
-                              printerDev.newPage();
-                        firstPage = false;
-
-                        cs->print(&p, n);
-                        if ((copy + 1) < printerDev.numCopies())
-                              printerDev.newPage();
-                        }
-                  }
-            p.end();
-            MScore::pixelRatio = pr;
+            printFnc();
             }
 
       if (layoutMode != cs->layoutMode()) {
