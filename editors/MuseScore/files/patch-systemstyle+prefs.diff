diff --git a/audio/midi/fluid/fluid.cpp b/audio/midi/fluid/fluid.cpp
index 1e87746ca..a36156aad 100644
--- a/audio/midi/fluid/fluid.cpp
+++ b/audio/midi/fluid/fluid.cpp
@@ -116,6 +116,7 @@ Fluid::~Fluid()
       qDeleteAll(sfonts);
       qDeleteAll(channel);
       qDeleteAll(patches);
+      mutex.unlock();
       }
 
 //---------------------------------------------------------
@@ -935,6 +936,7 @@ QFileInfoList Fluid::sfFiles()
 
       QStringList pl = preferences.getString(PREF_APP_PATHS_MYSOUNDFONTS).split(";");
       pl.prepend(QFileInfo(QString("%1%2").arg(mscoreGlobalShare).arg("sound")).absoluteFilePath());
+      pl.prepend(QStringLiteral("@PREFIX@/share/sounds/sf2"));
 
       // append extensions directory
       QStringList extensionsDir = Ms::Extension::getDirectoriesByType(Ms::Extension::soundfontsDir);
diff --git a/build/MacOSXBundleInfo.plist.in b/build/MacOSXBundleInfo.plist.in
index 26ee6c5cb..914cb01ba 100644
--- a/build/MacOSXBundleInfo.plist.in
+++ b/build/MacOSXBundleInfo.plist.in
@@ -376,6 +376,7 @@
 		<string>de</string>
 		<string>el</string>
 		<string>en</string>
+		<string>en_GB</string>
 		<string>es</string>
 		<string>fi</string>
 		<string>fr</string>
diff --git a/mscore/mixer/mixertrackchannel.cpp b/mscore/mixer/mixertrackchannel.cpp
index 73a9020fb..f90e3805f 100644
--- a/mscore/mixer/mixertrackchannel.cpp
+++ b/mscore/mixer/mixertrackchannel.cpp
@@ -128,14 +128,16 @@ void MixerTrackChannel::applyStyle()
       QString style;
       switch (preferences.globalStyle()){
             case MuseScoreStyleType::DARK_FUSION:
+            case MuseScoreStyleType::SYSTEM_STYLE_IS_DARK:
                   style = _selected ? selStyleDark : unselStyleDark;
+                  setStyleSheet(style);
                   break;
             case MuseScoreStyleType::LIGHT_FUSION:
                   style = _selected ? selStyleLight : unselStyleLight;
+                  setStyleSheet(style);
                   break;
             }
 
-      setStyleSheet(style);
       }
 
 //---------------------------------------------------------
diff --git a/mscore/mixer/mixertrackpart.cpp b/mscore/mixer/mixertrackpart.cpp
index 16fcaf9b3..5c1b0e603 100644
--- a/mscore/mixer/mixertrackpart.cpp
+++ b/mscore/mixer/mixertrackpart.cpp
@@ -145,14 +145,16 @@ void MixerTrackPart::applyStyle()
       QString style;
       switch (preferences.globalStyle()){
             case MuseScoreStyleType::DARK_FUSION:
+            case MuseScoreStyleType::SYSTEM_STYLE_IS_DARK:
                   style = _selected ? selStyleDark : unselStyleDark;
+                  setStyleSheet(style);
                   break;
             case MuseScoreStyleType::LIGHT_FUSION:
                   style = _selected ? selStyleLight : unselStyleLight;
+                  setStyleSheet(style);
                   break;
             }
 
-      setStyleSheet(style);
       }
 
 //---------------------------------------------------------
diff --git a/mscore/musescore.cpp b/mscore/musescore.cpp
index a1e306004eea86ada94acb88e353fb8ec069d4ce..a4fe26fbfbb95bd51ac3557e7a29005507604130 100644
--- a/mscore/musescore.cpp
+++ b/mscore/musescore.cpp
@@ -1580,9 +1580,9 @@ MuseScore::MuseScore()
       a = getAction("fullscreen");
       a->setCheckable(true);
       a->setChecked(false);
-#ifndef Q_OS_MAC
+// #ifndef Q_OS_MAC
       menuView->addAction(a);
-#endif
+// #endif
 
       //---------------------
       //    Menu Add
@@ -1877,7 +1877,7 @@ MuseScore::MuseScore()
       menuHelp->addAction(aboutMusicXMLAction);
       Workspace::addActionAndString(aboutMusicXMLAction, "about-musicxml");
 
-#if defined(Q_OS_MAC) || defined(Q_OS_WIN)
+#if /*defined(Q_OS_MAC) ||*/ defined(Q_OS_WIN)
 #if (!defined(FOR_WINSTORE)) && (!defined(WIN_PORTABLE))
       checkForUpdateAction = new QAction("", 0);
       connect(checkForUpdateAction, SIGNAL(triggered()), this, SLOT(checkForUpdatesUI()));
@@ -7407,70 +7407,83 @@ void tryToRequestTelemetryPermission()
 
 void MuseScore::updateUiStyleAndTheme()
       {
-      // set UI Theme
-      QApplication::setStyle(QStyleFactory::create("Fusion"));
+      const auto globalStyle = preferences.globalStyle();
+      static auto systemStyle = QApplication::style()->objectName();
+      static auto systemPalette = QApplication::palette();
+
+      if (globalStyle == MuseScoreStyleType::DARK_FUSION || globalStyle == MuseScoreStyleType::LIGHT_FUSION) {
+          // set UI Theme
+          auto mstyle = QStyleFactory::create("KFusion");
+          if (!mstyle) {
+              mstyle = QStyleFactory::create("Fusion");
+          }
+          QApplication::setStyle(mstyle);
 
 #if defined(WIN_PORTABLE)
-      QString wd = QDir::cleanPath(QString("%1/../../../Data/%2").arg(QCoreApplication::applicationDirPath()).arg(QCoreApplication::applicationName()));
+          QString wd = QDir::cleanPath(QString("%1/../../../Data/%2").arg(QCoreApplication::applicationDirPath()).arg(QCoreApplication::applicationName()));
 #else
-      QString wd = QString("%1/%2").arg(QStandardPaths::writableLocation(QStandardPaths::DocumentsLocation)).arg(QCoreApplication::applicationName());
+          QString wd = QString("%1/%2").arg(QStandardPaths::writableLocation(QStandardPaths::DocumentsLocation)).arg(QCoreApplication::applicationName());
 #endif
 
-      // set UI Color Palette
-      QPalette p(QApplication::palette());
-      QString jsonPaletteFilename = preferences.isThemeDark() ? "palette_dark_fusion.json" : "palette_light_fusion.json";;
-      QFile jsonPalette(QString(":/themes/%1").arg(jsonPaletteFilename));
-      // read from Documents TODO: remove this
-      if (QFile::exists(QString("%1/%2").arg(wd, "ms_palette.json")))
-            jsonPalette.setFileName(QString("%1/%2").arg(wd, "ms_palette.json"));
-      if (jsonPalette.open(QFile::ReadOnly | QFile::Text)) {
-            QJsonDocument d = QJsonDocument::fromJson(jsonPalette.readAll());
-            QJsonObject o = d.object();
-            QMetaEnum metaEnum = QMetaEnum::fromType<QPalette::ColorRole>();
-            for (int i = 0; i < metaEnum.keyCount(); ++i) {
-                  QJsonValue v = o.value(metaEnum.valueToKey(i));
-                  if (!v.isUndefined())
-                        p.setColor(static_cast<QPalette::ColorRole>(metaEnum.value(i)), QColor(v.toString()));
-                  }
-            }
-      QApplication::setPalette(p);
-
-      // set UI Style
-      QString css;
-      QString styleFilename = preferences.isThemeDark() ? "style_dark_fusion.css" : "style_light_fusion.css";
-      QFile fstyle(QString(":/themes/%1").arg(styleFilename));
-      // read from Documents TODO: remove this
-      if (QFile::exists(QString("%1/%2").arg(wd, "ms_style.css")))
-            fstyle.setFileName(QString("%1/%2").arg(wd, "ms_style.css"));
-      if (fstyle.open(QFile::ReadOnly | QFile::Text)) {
-            QTextStream in(&fstyle);
-            css = in.readAll();
-            }
-
-      css.replace("$voice1-bgcolor", MScore::selectColor[0].name(QColor::HexRgb));
-      css.replace("$voice2-bgcolor", MScore::selectColor[1].name(QColor::HexRgb));
-      css.replace("$voice3-bgcolor", MScore::selectColor[2].name(QColor::HexRgb));
-      css.replace("$voice4-bgcolor", MScore::selectColor[3].name(QColor::HexRgb));
-
-      if (preferences.isThemeDark()) {
-            css.replace("$buttonHighlightDisabledOff", Ms::preferences.getColor(PREF_UI_BUTTON_HIGHLIGHT_COLOR_DISABLED_DARK_OFF).name().toLatin1());
-            css.replace("$buttonHighlightDisabledOn", Ms::preferences.getColor(PREF_UI_BUTTON_HIGHLIGHT_COLOR_DISABLED_DARK_ON).name().toLatin1());
-            css.replace("$buttonHighlightEnabledOff", Ms::preferences.getColor(PREF_UI_BUTTON_HIGHLIGHT_COLOR_ENABLED_DARK_OFF).name().toLatin1());
-            css.replace("$buttonHighlightEnabledOn", Ms::preferences.getColor(PREF_UI_BUTTON_HIGHLIGHT_COLOR_ENABLED_DARK_ON).name().toLatin1());
-            }
-      else {
-            css.replace("$buttonHighlightDisabledOff", Ms::preferences.getColor(PREF_UI_BUTTON_HIGHLIGHT_COLOR_DISABLED_LIGHT_OFF).name().toLatin1());
-            css.replace("$buttonHighlightDisabledOn", Ms::preferences.getColor(PREF_UI_BUTTON_HIGHLIGHT_COLOR_DISABLED_LIGHT_ON).name().toLatin1());
-            css.replace("$buttonHighlightEnabledOff", Ms::preferences.getColor(PREF_UI_BUTTON_HIGHLIGHT_COLOR_ENABLED_LIGHT_OFF).name().toLatin1());
-            css.replace("$buttonHighlightEnabledOn", Ms::preferences.getColor(PREF_UI_BUTTON_HIGHLIGHT_COLOR_ENABLED_LIGHT_ON).name().toLatin1());
-            }
+          // set UI Color Palette
+          QPalette p(QApplication::palette());
+          QString jsonPaletteFilename = preferences.isThemeDark() ? "palette_dark_fusion.json" : "palette_light_fusion.json";;
+          QFile jsonPalette(QString(":/themes/%1").arg(jsonPaletteFilename));
+          // read from Documents TODO: remove this
+          if (QFile::exists(QString("%1/%2").arg(wd, "ms_palette.json")))
+                jsonPalette.setFileName(QString("%1/%2").arg(wd, "ms_palette.json"));
+          if (jsonPalette.open(QFile::ReadOnly | QFile::Text)) {
+                QJsonDocument d = QJsonDocument::fromJson(jsonPalette.readAll());
+                QJsonObject o = d.object();
+                QMetaEnum metaEnum = QMetaEnum::fromType<QPalette::ColorRole>();
+                for (int i = 0; i < metaEnum.keyCount(); ++i) {
+                      QJsonValue v = o.value(metaEnum.valueToKey(i));
+                      if (!v.isUndefined())
+                            p.setColor(static_cast<QPalette::ColorRole>(metaEnum.value(i)), QColor(v.toString()));
+                      }
+                }
+          QApplication::setPalette(p);
+
+          // set UI Style
+          QString css;
+          QString styleFilename = preferences.isThemeDark() ? "style_dark_fusion.css" : "style_light_fusion.css";
+          QFile fstyle(QString(":/themes/%1").arg(styleFilename));
+          // read from Documents TODO: remove this
+          if (QFile::exists(QString("%1/%2").arg(wd, "ms_style.css")))
+                fstyle.setFileName(QString("%1/%2").arg(wd, "ms_style.css"));
+          if (fstyle.open(QFile::ReadOnly | QFile::Text)) {
+                QTextStream in(&fstyle);
+                css = in.readAll();
+                }
+
+          css.replace("$voice1-bgcolor", MScore::selectColor[0].name(QColor::HexRgb));
+          css.replace("$voice2-bgcolor", MScore::selectColor[1].name(QColor::HexRgb));
+          css.replace("$voice3-bgcolor", MScore::selectColor[2].name(QColor::HexRgb));
+          css.replace("$voice4-bgcolor", MScore::selectColor[3].name(QColor::HexRgb));
 
-      qApp->setStyleSheet(css);
+          if (preferences.isThemeDark()) {
+                css.replace("$buttonHighlightDisabledOff", Ms::preferences.getColor(PREF_UI_BUTTON_HIGHLIGHT_COLOR_DISABLED_DARK_OFF).name().toLatin1());
+                css.replace("$buttonHighlightDisabledOn", Ms::preferences.getColor(PREF_UI_BUTTON_HIGHLIGHT_COLOR_DISABLED_DARK_ON).name().toLatin1());
+                css.replace("$buttonHighlightEnabledOff", Ms::preferences.getColor(PREF_UI_BUTTON_HIGHLIGHT_COLOR_ENABLED_DARK_OFF).name().toLatin1());
+                css.replace("$buttonHighlightEnabledOn", Ms::preferences.getColor(PREF_UI_BUTTON_HIGHLIGHT_COLOR_ENABLED_DARK_ON).name().toLatin1());
+                }
+          else {
+                css.replace("$buttonHighlightDisabledOff", Ms::preferences.getColor(PREF_UI_BUTTON_HIGHLIGHT_COLOR_DISABLED_LIGHT_OFF).name().toLatin1());
+                css.replace("$buttonHighlightDisabledOn", Ms::preferences.getColor(PREF_UI_BUTTON_HIGHLIGHT_COLOR_DISABLED_LIGHT_ON).name().toLatin1());
+                css.replace("$buttonHighlightEnabledOff", Ms::preferences.getColor(PREF_UI_BUTTON_HIGHLIGHT_COLOR_ENABLED_LIGHT_OFF).name().toLatin1());
+                css.replace("$buttonHighlightEnabledOn", Ms::preferences.getColor(PREF_UI_BUTTON_HIGHLIGHT_COLOR_ENABLED_LIGHT_ON).name().toLatin1());
+                }
 
-      QString style = QString("*, QSpinBox { font: %1pt \"%2\" } ")
-                  .arg(QString::number(preferences.getInt(PREF_UI_THEME_FONTSIZE)), preferences.getString(PREF_UI_THEME_FONTFAMILY))
-                  + qApp->styleSheet();
-      qApp->setStyleSheet(style);
+          qApp->setStyleSheet(css);
+
+          QString style = QString("*, QSpinBox { font: %1pt \"%2\" } ")
+                      .arg(QString::number(preferences.getInt(PREF_UI_THEME_FONTSIZE)), preferences.getString(PREF_UI_THEME_FONTFAMILY))
+                      + qApp->styleSheet();
+          qApp->setStyleSheet(style);
+      } else if (QApplication::style()->objectName() != systemStyle) {
+          QApplication::setStyle(QStyleFactory::create(systemStyle));
+          QApplication::setPalette(systemPalette);
+      }
 
       genIcons();
       Shortcut::refreshIcons();
diff --git a/mscore/pianoroll/pianolevels.cpp b/mscore/pianoroll/pianolevels.cpp
index 2ea7806e8..ef815e0de 100644
--- a/mscore/pianoroll/pianolevels.cpp
+++ b/mscore/pianoroll/pianolevels.cpp
@@ -128,6 +128,7 @@ void PianoLevels::paintEvent(QPaintEvent* e)
 
       switch (preferences.globalStyle()) {
             case MuseScoreStyleType::DARK_FUSION:
+            case MuseScoreStyleType::SYSTEM_STYLE_IS_DARK:
                   colPianoBg = QColor(preferences.getColor(PREF_UI_PIANOROLL_DARK_BG_BASE_COLOR));
                   noteDeselected = QColor(preferences.getColor(PREF_UI_PIANOROLL_DARK_NOTE_UNSEL_COLOR));
                   noteSelected = QColor(preferences.getColor(PREF_UI_PIANOROLL_DARK_NOTE_SEL_COLOR));
diff --git a/mscore/pianoroll/pianoview.cpp b/mscore/pianoroll/pianoview.cpp
index baae0fa0e..cdb781387 100644
--- a/mscore/pianoroll/pianoview.cpp
+++ b/mscore/pianoroll/pianoview.cpp
@@ -200,6 +200,7 @@ void PianoItem::paintNoteBlock(QPainter* painter, NoteEvent* evt)
 
       switch (preferences.globalStyle()) {
             case MuseScoreStyleType::DARK_FUSION:
+            case MuseScoreStyleType::SYSTEM_STYLE_IS_DARK:
                   noteDeselected = QColor(preferences.getColor(PREF_UI_PIANOROLL_DARK_NOTE_UNSEL_COLOR));
                   noteSelected = QColor(preferences.getColor(PREF_UI_PIANOROLL_DARK_NOTE_SEL_COLOR));
                   tieColor = QColor(preferences.getColor(PREF_UI_PIANOROLL_DARK_BG_TIE_COLOR));
@@ -344,6 +345,7 @@ void PianoView::drawBackground(QPainter* p, const QRectF& r)
 
       switch (preferences.globalStyle()) {
             case MuseScoreStyleType::DARK_FUSION:
+            case MuseScoreStyleType::SYSTEM_STYLE_IS_DARK:
                   colSelectionBox = QColor(preferences.getColor(PREF_UI_PIANOROLL_DARK_SELECTION_BOX_COLOR));
 
                   colHilightKeyBg = QColor(preferences.getColor(PREF_UI_PIANOROLL_DARK_BG_KEY_HIGHLIGHT_COLOR));
diff --git a/mscore/preferences.cpp b/mscore/preferences.cpp
index 2c3c64cce..e7a6e0a3b 100644
--- a/mscore/preferences.cpp
+++ b/mscore/preferences.cpp
@@ -63,7 +63,7 @@ void Preferences::init(bool storeInMemoryOnly)
 
       _storeInMemoryOnly = storeInMemoryOnly;
 
-#if defined(Q_OS_MAC) || (defined(Q_OS_WIN) && !defined(FOR_WINSTORE))
+#if /*defined(Q_OS_MAC) ||*/ (defined(Q_OS_WIN) && !defined(FOR_WINSTORE))
       bool checkUpdateStartup = true;
       bool checkExtensionsUpdateStartup = true;
 #else
@@ -463,7 +463,8 @@ MuseScoreStyleType Preferences::globalStyle() const
 
 bool Preferences::isThemeDark() const
       {
-      return globalStyle() == MuseScoreStyleType::DARK_FUSION;
+      const auto style = globalStyle();
+      return style == MuseScoreStyleType::DARK_FUSION || style == MuseScoreStyleType::SYSTEM_STYLE_IS_DARK;
       }
 
 void Preferences::setToDefaultValue(const QString key)
diff --git a/mscore/preferences.h b/mscore/preferences.h
index f68a40fe1..e4b070b34 100644
--- a/mscore/preferences.h
+++ b/mscore/preferences.h
@@ -66,7 +66,10 @@ enum {
 
 enum class MuseScoreStyleType : char {
       DARK_FUSION = 0,
-      LIGHT_FUSION
+      LIGHT_FUSION,
+      // added keys for the system theme and system theme with dark palette
+      SYSTEM_STYLE,
+      SYSTEM_STYLE_IS_DARK
       };
 
 // MusicXML export break values
diff --git a/mscore/prefsdialog.ui b/mscore/prefsdialog.ui
index d8a518ed6..4a8c674d5 100644
--- a/mscore/prefsdialog.ui
+++ b/mscore/prefsdialog.ui
@@ -474,6 +474,16 @@
               <string>Light</string>
              </property>
             </item>
+            <item>
+             <property name="text">
+              <string>System Default</string>
+             </property>
+            </item>
+            <item>
+             <property name="text">
+              <string>System Default (with dark palette)</string>
+             </property>
+            </item>
            </widget>
           </item>
           <item row="2" column="3">
