--- src/orig.dispatch_common.c	2017-06-19 22:02:04.000000000 +0200
+++ src/dispatch_common.c	2017-06-19 22:12:39.000000000 +0200
@@ -189,6 +189,10 @@
 #define EGL_LIB "libEGL.dll"
 #define GLES1_LIB "libGLES_CM.dll"
 #define GLES2_LIB "libGLESv2.dll"
+#elif defined __APPLE__
+#define EGL_LIB "@PREFIX@/lib/libEGL.1.dylib"
+#define GLES1_LIB "@PREFIX@/lib/libGLESv1_CM.1.dylib"
+#define GLES2_LIB "@PREFIX@/lib/libGLESv2.2.dylib"
 #else
 #define EGL_LIB "libEGL.so.1"
 #define GLES1_LIB "libGLESv1_CM.so.1"
--- test/orig.dlwrap.c	2017-03-02 19:26:58.000000000 +0100
+++ test/dlwrap.c	2017-06-19 22:13:22.000000000 +0200
@@ -64,9 +64,15 @@
     const char *symbol_prefix;
     void *handle;
 } wrapped_libs[] = {
+#ifdef __APPLE__
+    { "@PREFIX@/lib/libGL.dylib", "GL", NULL },
+    { "@PREFIX@/lib/libEGL.dylib", "EGL", NULL },
+    { "@PREFIX@/lib/libGLESv2.dylib", "GLES2", NULL },
+#else
     { "libGL.so", "GL", NULL },
     { "libEGL.so", "EGL", NULL },
     { "libGLESv2.so", "GLES2", NULL },
+#endif
 };
 
 /* Match 'filename' against an internal list of libraries for which
@@ -313,6 +319,11 @@
             return symbol;
     }
 
+#ifdef __APPLE__
+    return DEFER_TO_GL("@PREFIX@/lib/libEGL.1.dylib", override_EGL_eglGetProcAddress,
+                       "eglGetProcAddress", (name));
+#else
     return DEFER_TO_GL("libEGL.so.1", override_EGL_eglGetProcAddress,
                        "eglGetProcAddress", (name));
+#endif
 }
--- test/orig.egl_without_glx.c	2017-03-02 19:26:58.000000000 +0100
+++ test/egl_without_glx.c	2017-06-19 22:13:29.000000000 +0200
@@ -81,7 +81,11 @@
 static EGLBoolean
 override_eglBindAPI(EGLenum api)
 {
+#ifdef __APPLE__
+    void *egl = dlopen("@PREFIX@/lib/libEGL.1.dylib", RTLD_LAZY | RTLD_LOCAL);
+#else
     void *egl = dlopen("libEGL.so.1", RTLD_LAZY | RTLD_LOCAL);
+#endif
     EGLBoolean (*real_eglBindAPI)(EGLenum api) = dlsym(egl, "eglBindAPI");
 
     last_api = api;
@@ -102,7 +106,11 @@
 static EGLint
 override_eglGetError(void)
 {
+#ifdef __APPLE__
+    void *egl = dlopen("@PREFIX@/lib/libEGL.1.dylib", RTLD_LAZY | RTLD_LOCAL);
+#else
     void *egl = dlopen("libEGL.so.1", RTLD_LAZY | RTLD_LOCAL);
+#endif
     EGLint (*real_eglGetError)(void) = dlsym(egl, "eglGetError");
 
     if (extra_error != EGL_SUCCESS) {
