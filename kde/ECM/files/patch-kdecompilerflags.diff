diff --git kde-modules/KDECompilerSettings.cmake kde-modules/KDECompilerSettings.cmake
index c713cc2..60d91d5 100644
--- kde-modules/KDECompilerSettings.cmake
+++ kde-modules/KDECompilerSettings.cmake
@@ -186,6 +186,48 @@ endif()
 # Language and toolchain features
 ############################################################
 
+include(CheckCXXCompilerFlag)
+include(CheckCCompilerFlag)
+
+# usage: kde_check_cxx_compilerflag(RESULTVAR -foo Compiler_Expression)
+# where Compiler_Expression is an expression you'd pass to if(), e.g.
+# CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 6.0.0
+macro (KDE_CHECK_CXX_COMPILER_FLAG _RESULT _FLAG)
+    # treat the arguments following _FLAG as a boolean expression
+    # to determine if we're dealing with a compiler/version that
+    # is expected to support _FLAG.
+    if (${ARGN})
+        set(COMPILER_OK TRUE)
+    endif()
+    if (COMPILER_OK)
+        if(APPLE AND CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+            # Clang on APPLE needs verification because of Apple's
+            # llvm versions which cannot be matched easily to
+            # stock llvm versions.
+            set(HASFLAG "${CMAKE_CXX_COMPILER_ID}++_ACCEPTS${_FLAG}")
+            check_cxx_compiler_flag(${_FLAG} ${HASFLAG})
+            set(${_RESULT} ${${HASFLAG}})
+        else()
+            set(${_RESULT} TRUE)
+        endif()
+    endif()
+endmacro()
+
+macro (KDE_CHECK_C_COMPILER_FLAG _RESULT _FLAG)
+    if (${ARGN})
+        set(COMPILER_OK TRUE)
+    endif()
+    if (COMPILER_OK)
+        if(APPLE AND CMAKE_C_COMPILER_ID MATCHES "Clang")
+            set(HASFLAG "${CMAKE_C_COMPILER_ID}_ACCEPTS${_FLAG}")
+            check_c_compiler_flag(${_FLAG} ${HASFLAG})
+            set(${_RESULT} ${${HASFLAG}})
+        else()
+            set(${_RESULT} TRUE)
+        endif()
+    endif()
+endmacro()
+
 # Pick sensible versions of the C and C++ standards.
 # Note that MSVC does not have equivalent flags; the features are either
 # supported or they are not.
@@ -369,19 +411,19 @@ if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang"
     # Make some warnings errors
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror=return-type")
 endif()
-if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR
+kde_check_cxx_compiler_flag(HAVE_WVLA -Wvla
+    CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR
     (CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.5))
+if (HAVE_WVLA)
     # -Wvla: use of variable-length arrays (an extension to C++)
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wvla")
 endif()
-if ((CMAKE_CXX_COMPILER_ID STREQUAL "GNU" AND NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.0) OR
+kde_check_cxx_compiler_flag(HAVE_WDATE_TIME -Wdate-time
+    (CMAKE_CXX_COMPILER_ID STREQUAL "GNU" AND NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.0) OR
     (CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.5))
-    include(CheckCXXCompilerFlag)
-    check_cxx_compiler_flag(-Wdate-time HAVE_DATE_TIME)
-    if (HAVE_DATE_TIME)
-        # -Wdate-time: warn if we use __DATE__ or __TIME__ (we want to be able to reproduce the exact same binary)
-        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wdate-time")
-    endif()
+if (HAVE_WDATE_TIME)
+    # -Wdate-time: warn if we use __DATE__ or __TIME__ (we want to be able to reproduce the exact same binary)
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wdate-time")
 endif()
 
 # -w1 turns on warnings and errors
@@ -486,12 +528,15 @@ if (MINGW AND CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
     set (CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -Wl,--export-all-symbols")
 endif()
 
-if (CMAKE_GENERATOR STREQUAL "Ninja" AND
-    ((CMAKE_CXX_COMPILER_ID STREQUAL "GNU" AND NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.9) OR
-     (CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.5)))
+if (CMAKE_GENERATOR STREQUAL "Ninja")
     # Force colored warnings in Ninja's output, if the compiler has -fdiagnostics-color support.
     # Rationale in https://github.com/ninja-build/ninja/issues/814
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fdiagnostics-color=always")
+    kde_check_cxx_compiler_flag(HAVE_DIAGNOSTIC_COLORS -fdiagnostics-color=always
+        ((CMAKE_CXX_COMPILER_ID STREQUAL "GNU" AND NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.9) OR
+         (CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.5)))
+    if (HAVE_DIAGNOSTIC_COLORS)
+        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fdiagnostics-color=always")
+    endif()
 endif()
 
 include("${ECM_MODULE_DIR}/ECMEnableSanitizers.cmake")
diff --git kde-modules/KDEFrameworkCompilerSettings.cmake kde-modules/KDEFrameworkCompilerSettings.cmake
index b191e55..552299f 100644
--- kde-modules/KDEFrameworkCompilerSettings.cmake
+++ kde-modules/KDEFrameworkCompilerSettings.cmake
@@ -71,8 +71,7 @@ if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    endif()
 endif()
 
-if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
-   if (NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS "5.0.0")
-      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wzero-as-null-pointer-constant" )
-   endif()
+kde_check_cxx_compiler_flag(HAS_WZERO_AS_NULLPTR_CONSTANT "-Wzero-as-null-pointer-constant" CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+if (HAS_WZERO_AS_NULLPTR_CONSTANT)
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wzero-as-null-pointer-constant" )
 endif()
