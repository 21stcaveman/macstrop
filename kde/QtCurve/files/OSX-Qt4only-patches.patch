diff --git CMakeLists.txt CMakeLists.txt
index f76fd1b..ff2573f 100644
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -136,11 +136,16 @@ cmake_c_fix_include_path(lib/cairo qtcurve-cairo)
 cmake_c_add_flags(CMAKE_C_FLAGS -Wall -Wextra -std=gnu99)
 # Register storage class is deprecated in C++11 but is still used in Qt.
 # Use compiler option to suppress the warning in clang++.
+if(NOT APPLE)
 # -std=c++0x is deprecated but gcc < 4.7 do not recognise c++11 ....
 cmake_c_add_flags(CMAKE_CXX_FLAGS -Wall -Wextra
   -Wno-deprecated-register -std=c++0x)
 cmake_c_add_flags(CMAKE_SHARED_LINKER_FLAGS -Wl,--as-needed -Wl,--no-undefined)
 cmake_c_add_flags(CMAKE_MODULE_LINKER_FLAGS -Wl,--as-needed -Wl,--no-undefined)
+else()
+cmake_c_add_flags(CMAKE_CXX_FLAGS -Wall -Wextra
+  -Wno-deprecated-register -std=c++11)
+endif(NOT APPLE)
 add_definitions("-D_GNU_SOURCE -pthread")
 
 if(NOT DEFINED LIB_INSTALL_DIR)
diff --git gtk2/common/config_file.c gtk2/common/config_file.c
index d732ca9..f8ed1ba 100644
--- gtk2/common/config_file.c
+++ gtk2/common/config_file.c
@@ -31,6 +31,65 @@
 #define OLD_CONFIG_FILE           "qtcurvestylerc"
 #define VERSION_KEY               "version"
 
+#if defined(__MACH__) || defined(darwin)
+/* This code is public domain -- Will Hartung 4/9/09 */
+// http://stackoverflow.com/questions/735126/are-there-alternate-implementations-of-gnu-getline-interface
+#include <stdio.h>
+#include <stdlib.h>
+
+static size_t getline(char **lineptr, size_t *n, FILE *stream) {
+    char *bufptr = NULL;
+    char *p = bufptr;
+    size_t size;
+    int c;
+
+    if (lineptr == NULL) {
+        return -1;
+    }
+    if (stream == NULL) {
+        return -1;
+    }
+    if (n == NULL) {
+        return -1;
+    }
+    bufptr = *lineptr;
+    size = *n;
+
+    c = fgetc(stream);
+    if (c == EOF) {
+        return -1;
+    }
+    if (bufptr == NULL) {
+        bufptr = malloc(128);
+        if (bufptr == NULL) {
+            return -1;
+        }
+        size = 128;
+    }
+    p = bufptr;
+    while(c != EOF) {
+        if ((p - bufptr) > (size - 1)) {
+            size = size + 128;
+            bufptr = realloc(bufptr, size);
+            if (bufptr == NULL) {
+                return -1;
+            }
+        }
+        *p++ = c;
+        if (c == '\n') {
+            break;
+        }
+        c = fgetc(stream);
+    }
+
+    *p++ = '\0';
+    *lineptr = bufptr;
+    *n = size;
+
+    return p - bufptr - 1;
+}
+#endif
+
 static const char*
 determineFileName(const char *file)
 {
diff --git gtk2/style/CMakeLists.txt gtk2/style/CMakeLists.txt
index 01e8891..146af50 100644
--- gtk2/style/CMakeLists.txt
+++ gtk2/style/CMakeLists.txt
@@ -72,7 +72,9 @@ set(qtcurve_SRCS ${qtcurve_SRCS} ${qtcurve_style_common_SRCS})
 add_library(qtcurve-gtk2 MODULE ${qtcurve_SRCS})
 
 set_target_properties(qtcurve-gtk2 PROPERTIES
+if(NOT APPLE)
   LINK_FLAGS "-Wl,--no-undefined"
+endif(NOT APPLE)
   LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
   OUTPUT_NAME "qtcurve")
 add_dependencies(qtcurve-gtk2 qtc_gtk2_check_on_hdr qtc_gtk2_check_x_on_hdr
diff --git gtk2/style/qt_settings.c gtk2/style/qt_settings.c
index f5a5c98..00bc7c5 100644
--- gtk2/style/qt_settings.c
+++ gtk2/style/qt_settings.c
@@ -49,6 +49,65 @@ Options opts;
 #define qtc_gtkrc_printf(args...)                       \
     gtk_rc_parse_string(QTC_LOCAL_BUFF_PRINTF(args))
 
+#if defined(__MACH__) || defined(darwin)
+/* This code is public domain -- Will Hartung 4/9/09 */
+// http://stackoverflow.com/questions/735126/are-there-alternate-implementations-of-gnu-getline-interface
+#include <stdio.h>
+#include <stdlib.h>
+
+static size_t getline(char **lineptr, size_t *n, FILE *stream) {
+    char *bufptr = NULL;
+    char *p = bufptr;
+    size_t size;
+    int c;
+
+    if (lineptr == NULL) {
+        return -1;
+    }
+    if (stream == NULL) {
+        return -1;
+    }
+    if (n == NULL) {
+        return -1;
+    }
+    bufptr = *lineptr;
+    size = *n;
+
+    c = fgetc(stream);
+    if (c == EOF) {
+        return -1;
+    }
+    if (bufptr == NULL) {
+        bufptr = malloc(128);
+        if (bufptr == NULL) {
+            return -1;
+        }
+        size = 128;
+    }
+    p = bufptr;
+    while(c != EOF) {
+        if ((p - bufptr) > (size - 1)) {
+            size = size + 128;
+            bufptr = realloc(bufptr, size);
+            if (bufptr == NULL) {
+                return -1;
+            }
+        }
+        *p++ = c;
+        if (c == '\n') {
+            break;
+        }
+        c = fgetc(stream);
+    }
+
+    *p++ = '\0';
+    *lineptr = bufptr;
+    *n = size;
+
+    return p - bufptr - 1;
+}
+#endif
+
 static char*
 getKdeHome()
 {
diff --git lib/cairo/CMakeLists.txt lib/cairo/CMakeLists.txt
index c66c63c..11ae6fa 100644
--- lib/cairo/CMakeLists.txt
+++ lib/cairo/CMakeLists.txt
@@ -22,6 +22,8 @@ set_target_properties(qtcurve-cairo PROPERTIES
   VERSION 0.1
   SOVERSION 0
   COMPILE_FLAGS "-fvisibility=hidden"
+if(NOT APPLE)
   LINK_FLAGS "-Wl,--no-undefined"
+end(NOT APPLE)
   LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}")
 install(TARGETS qtcurve-cairo LIBRARY DESTINATION "${LIB_INSTALL_DIR}")
diff --git lib/utils/CMakeLists.txt lib/utils/CMakeLists.txt
index 15757ed..2bffae3 100644
--- lib/utils/CMakeLists.txt
+++ lib/utils/CMakeLists.txt
@@ -12,8 +12,13 @@ set(qtcurve_utils_SRCS
   x11utils.c
   x11helpers.c
   x11wrap.c)
+if(APPLE)
+set(qtcurve_utils_LINKS
+  ${LIBEXECINFO_LIBRARIES} pthread)
+else()
 set(qtcurve_utils_LINKS
   m rt dl ${LIBEXECINFO_LIBRARIES} pthread)
+endif(APPLE)
 
 include_directories("${CMAKE_CURRENT_BINARY_DIR}")
 
@@ -34,7 +39,9 @@ set_target_properties(qtcurve-utils PROPERTIES
   VERSION 1.0
   SOVERSION 1
   COMPILE_FLAGS "-fvisibility=hidden"
+if(NOT APPLE)
   LINK_FLAGS "-Wl,--no-undefined"
+endif(NOT APPLE)
   LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}")
 install(TARGETS qtcurve-utils LIBRARY
   DESTINATION "${LIB_INSTALL_DIR}")
diff --git lib/utils/process.c lib/utils/process.c
index f2490ef..94ee85d 100644
--- lib/utils/process.c
+++ lib/utils/process.c
@@ -23,7 +23,11 @@
 #include "fd_utils.h"
 #include "timer.h"
 #include <unistd.h>
+#if !defined(__APPLE__) && !defined(__MACH__)
 #include <wait.h>
+#else
+#include <signal.h>
+#endif //__APPLE__
 #include <sys/stat.h>
 #include <sys/socket.h>
 #include <fcntl.h>
diff --git lib/utils/timer.c lib/utils/timer.c
index 879451e..84d058f 100644
--- lib/utils/timer.c
+++ lib/utils/timer.c
@@ -25,6 +25,35 @@
 #include <time.h>
 #include <pthread.h>
 
+#if defined(__APPLE__) || defined(__MACH__)
+
+#include <mach/mach.h>
+#include <mach/mach_time.h>
+#include <mach/mach_init.h>
+#include <sys/sysctl.h>
+
+static mach_timebase_info_data_t sTimebaseInfo;
+static double calibrator= 0;
+
+#include <stdio.h>
+__attribute__((constructor)) static void init_HRTime()
+{
+    if( !calibrator ){
+        mach_timebase_info(&sTimebaseInfo);
+        /* go from absolute time units to nanoseconds: */
+        calibrator= ((double)sTimebaseInfo.numer / (double)sTimebaseInfo.denom);
+        fprintf( stderr, "init_HRTime(): calibrator=%g\n", calibrator );
+    }
+}
+
+QTC_EXPORT uint64_t qtcGetTime()
+{
+    return (uint64_t) mach_absolute_time() * calibrator;
+}
+
+#else
+// other = Linux ...
+
 #ifdef CLOCK_THREAD_CPUTIME_ID
 #  define CLOCK_ID CLOCK_THREAD_CPUTIME_ID
 #else
@@ -38,6 +67,7 @@ qtcGetTime()
     clock_gettime(CLOCK_ID, &time_spec);
     return ((uint64_t)time_spec.tv_sec) * 1000000000 + time_spec.tv_nsec;
 }
+#endif // __APPLE__
 
 QTC_EXPORT uint64_t
 qtcGetElapse(uint64_t prev)
diff --git qt4/config/CMakeLists.txt qt4/config/CMakeLists.txt
index 15454e6..3cf7ab0 100644
--- qt4/config/CMakeLists.txt
+++ qt4/config/CMakeLists.txt
@@ -50,7 +50,9 @@ kde4_add_ui_files(kstyle_qtcurve_config_PART_SRCS
 kde4_add_plugin(kstyle_qtcurve_config_kde4
   ${kstyle_qtcurve_config_PART_SRCS})
 set_target_properties(kstyle_qtcurve_config_kde4 PROPERTIES
+if(NOT APPLE)
   LINK_FLAGS "-Wl,--no-undefined"
+endif(NOT APPLE)
   LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
   OUTPUT_NAME "kstyle_qtcurve_config")
 target_link_libraries(kstyle_qtcurve_config_kde4
diff --git qt4/config/exportthemedialog.cpp qt4/config/exportthemedialog.cpp
index f39b86d..1ffbc12 100644
--- qt4/config/exportthemedialog.cpp
+++ qt4/config/exportthemedialog.cpp
@@ -29,7 +29,11 @@
 #include <QDir>
 #include <QGridLayout>
 #include <QLabel>
+#ifdef Q_OS_MAC
+#include "common/config_file.h"
+#else
 #include "config_file.h"
+#endif //Q_OS_MAC
 
 CExportThemeDialog::CExportThemeDialog(QWidget *parent)
                   : KDialog(parent)
diff --git qt4/config/exportthemedialog.h qt4/config/exportthemedialog.h
index 42590ec..093b8fd 100644
--- qt4/config/exportthemedialog.h
+++ qt4/config/exportthemedialog.h
@@ -24,7 +24,11 @@
 #define __EXPORT_THEME_DIALOG_H__
 
 #include <kdialog.h>
+#ifdef Q_OS_MAC
+#include "common/common.h"
+#else
 #include "common.h"
+#endif //Q_OS_MAC
 
 class KUrlRequester;
 class QLineEdit;
diff --git qt4/kwin/CMakeLists.txt qt4/kwin/CMakeLists.txt
index 654604b..b9199a2 100644
--- qt4/kwin/CMakeLists.txt
+++ qt4/kwin/CMakeLists.txt
@@ -33,7 +33,9 @@ include_directories(
   ${QT_QTCORE_INCLUDE_DIR})
 kde4_add_plugin(kwin3_qtcurve_kde4 ${kwin3_qtcurve_PART_SRCS})
 set_target_properties(kwin3_qtcurve_kde4 PROPERTIES
+if(NOT APPLE)
   LINK_FLAGS "-Wl,--no-undefined"
+endif(NOT APPLE)
   LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
   OUTPUT_NAME "kwin3_qtcurve")
 target_link_libraries(kwin3_qtcurve_kde4 kdecorations
diff --git qt4/kwinconfig/CMakeLists.txt qt4/kwinconfig/CMakeLists.txt
index cbd8b62..f558538 100644
--- qt4/kwinconfig/CMakeLists.txt
+++ qt4/kwinconfig/CMakeLists.txt
@@ -21,7 +21,9 @@ kde4_add_ui_files(kwin_qtcurve_config_PART_SRCS
   ${kwin_qtcurve_config_PART_UIS})
 kde4_add_plugin(kwin_qtcurve_config_kde4 ${kwin_qtcurve_config_PART_SRCS})
 set_target_properties(kwin_qtcurve_config_kde4 PROPERTIES
+if(NOT APPLE)
   LINK_FLAGS "-Wl,--no-undefined"
+endif(NOT APPLE)
   LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
   OUTPUT_NAME "kwin_qtcurve_config")
 include_directories("${CMAKE_CURRENT_BINARY_DIR}")
diff --git qt4/style/CMakeLists.txt qt4/style/CMakeLists.txt
index f38d029..7025ece 100644
--- qt4/style/CMakeLists.txt
+++ qt4/style/CMakeLists.txt
@@ -56,7 +56,9 @@ qt4_wrap_cpp(qtcurve_MOC_SRCS ${qtcurve_MOC_HDRS})
 add_library(qtcurve-qt4 MODULE ${qtcurve_SRCS} ${qtcurve_MOC_SRCS})
 add_dependencies(qtcurve-qt4 qtc_qt4_check_on_hdr qtc_qt4_check_x_on_hdr)
 set_target_properties(qtcurve-qt4 PROPERTIES
+if(NOT APPLE)
   LINK_FLAGS "-Wl,--no-undefined"
+endif(NOT APPLE)
   LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
   OUTPUT_NAME "qtcurve"
   PREFIX "")
diff --git qt4/style/qtcurve.cpp qt4/style/qtcurve.cpp
index 7346c2f..fa2036a 100644
--- qt4/style/qtcurve.cpp
+++ qt4/style/qtcurve.cpp
@@ -72,7 +72,9 @@
 #include "macmenu.h"
 #include "shadowhelper.h"
 #include <sys/time.h>
+#ifdef Q_WS_X11
 #include <qtcurve-utils/x11qtc.h>
+#endif
 
 #include <QDebug>
 
@@ -577,7 +579,9 @@ void
 setOpacityProp(QWidget *w, unsigned short opacity)
 {
     if (WId wid = qtcGetWid(w->window())) {
+#ifdef Q_WS_X11
         qtcX11SetOpacity(wid, opacity);
+#endif
     }
 }
 
@@ -589,8 +593,9 @@ setBgndProp(QWidget *w, EAppearance app, bool haveBgndImage)
             (((qtcIsFlatBgnd(app) ? (haveBgndImage ? APPEARANCE_RAISED :
                                      APPEARANCE_FLAT) : app) & 0xFF) |
              (w->palette().background().color().rgb() & 0x00FFFFFF) << 8);
-
+#ifdef Q_WS_X11
         qtcX11SetBgnd(wid, prop);
+#endif
     }
 }
 
@@ -603,7 +608,9 @@ setSbProp(QWidget *w)
 
         if (!prop.isValid() || !prop.toBool()) {
             w->setProperty(constStatusBarProperty, true);
+#ifdef Q_WS_X11
             qtcX11SetStatusBar(wid);
+#endif
         }
     }
 }
@@ -13362,9 +13369,11 @@ void Style::emitMenuSize(QWidget *w, unsigned short size, bool force)
 
         if (oldSize != size) {
             w->setProperty(constMenuSizeProperty, size);
+#ifdef Q_WS_X11
             qtcX11SetMenubarSize(wid, size);
             getKWinDBus()->call(QDBus::NoBlock, "menuBarSize",
                                 (unsigned int)wid, (int)size);
+#endif
         }
     }
 }
diff --git qt4/style/qtcurve_plugin.cpp qt4/style/qtcurve_plugin.cpp
index f390da4..8339536 100644
--- qt4/style/qtcurve_plugin.cpp
+++ qt4/style/qtcurve_plugin.cpp
@@ -31,9 +31,15 @@
 #  include <QX11Info>
 #endif
 
+#include <QTypeInfo>
+#include <QFileInfo>
+
 namespace QtCurve {
 
 #ifdef QTC_QT4_STYLE_SUPPORT
+
+#include <QDir>
+
 static void
 getStyles(const QString &dir, const char *sub, QSet<QString> &styles)
 {
diff --git qt5/style/CMakeLists.txt qt5/style/CMakeLists.txt
index b6cb222..6314968 100644
--- qt5/style/CMakeLists.txt
+++ qt5/style/CMakeLists.txt
@@ -56,7 +56,9 @@ include_directories(
 qt5_wrap_cpp(qtcurve_MOC_SRCS ${qtcurve_MOC_HDRS})
 add_library(qtcurve-qt5 MODULE ${qtcurve_SRCS} ${qtcurve_MOC_SRCS})
 set_target_properties(qtcurve-qt5 PROPERTIES
+if(NOT APPLE)
   LINK_FLAGS "-Wl,--no-undefined"
+endif(NOT APPLE)
   OUTPUT_NAME "qtcurve"
   LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
   PREFIX "")
