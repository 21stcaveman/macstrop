diff --git qt5/common/common.h qt5/common/common.h
index bb103fd..a23be01 100644
--- qt5/common/common.h
+++ qt5/common/common.h
@@ -878,6 +878,7 @@ typedef struct {
                      useQtFileDialogApps,
                      windowDragWhiteList,
                      windowDragBlackList;
+     bool            onlyTicksInMenu;
 } Options;
 
 void qtcSetupGradient(Gradient *grad, EGradientBorder border, int numStops, ...);
diff --git qt5/common/config_file.cpp qt5/common/config_file.cpp
index 362381a..98c40fc 100644
--- qt5/common/config_file.cpp
+++ qt5/common/config_file.cpp
@@ -1275,6 +1275,7 @@ bool qtcReadConfig(const QString &file, Options *opts, Options *defOpts, bool ch
             CFG_READ_BOOL(thinSbarGroove);
             CFG_READ_BOOL(colorSliderMouseOver);
             CFG_READ_BOOL(menuIcons);
+            CFG_READ_BOOL(onlyTicksInMenu);
             CFG_READ_BOOL(forceAlternateLvCols);
             CFG_READ_BOOL(invertBotTab);
             CFG_READ_INT_BOOL(menubarHiding, HIDE_KEYBOARD);
@@ -1624,6 +1625,12 @@ void qtcDefaultSettings(Options *opts)
     opts->titlebarAppearance=APPEARANCE_CUSTOM1;
     opts->inactiveTitlebarAppearance=APPEARANCE_CUSTOM1;
     opts->titlebarButtonAppearance=APPEARANCE_GRADIENT;
+#ifdef Q_OS_OSX
+    opts->onlyTicksInMenu=true;
+#else
+    opts->onlyTicksInMenu=false;
+#endif
+
     /* Read system config file... */
     {
     static const char * systemFilename=nullptr;
@@ -2292,6 +2299,7 @@ bool qtcWriteConfig(KConfig *cfg, const Options &opts, const Options &def, bool
         CFG_WRITE_ENTRY(thinSbarGroove);
         CFG_WRITE_ENTRY(colorSliderMouseOver);
         CFG_WRITE_ENTRY(menuIcons);
+        CFG_WRITE_ENTRY(onlyTicksInMenu);
         CFG_WRITE_ENTRY(forceAlternateLvCols);
         CFG_WRITE_ENTRY_NUM(square);
         CFG_WRITE_ENTRY(invertBotTab);
diff --git qt5/style/qtcurve_api.cpp qt5/style/qtcurve_api.cpp
index b8535da..b747587 100644
--- qt5/style/qtcurve_api.cpp
+++ qt5/style/qtcurve_api.cpp
@@ -3046,7 +3046,7 @@ Style::drawControl(ControlElement element, const QStyleOption *option,
                 checkRect = visualRect(menuItem->direction, menuItem->rect,
                                        checkRect);
                 if (checkable) {
-                    if ((menuItem->checkType &
+                    if (!opts.onlyTicksInMenu && (menuItem->checkType &
                          QStyleOptionMenuItem::Exclusive) &&
                         menuItem->icon.isNull()) {
                         QStyleOptionButton button;
@@ -3065,7 +3065,7 @@ Style::drawControl(ControlElement element, const QStyleOption *option,
                             if (checked)
                                 button.state |= State_On;
                             button.palette = palette;
-                            drawPrimitive(PE_IndicatorCheckBox, &button,
+                            drawPrimitive(PE_IndicatorMenuCheckMark, &button,
                                           painter, widget);
                         } else if (checked) {
                             int iconSize = qMax(menuItem->maxIconWidth, 20);
@@ -3078,9 +3078,9 @@ Style::drawControl(ControlElement element, const QStyleOption *option,
                             sunkenRect = visualRect(menuItem->direction,
                                                     menuItem->rect, sunkenRect);
                             opt.state = menuItem->state;
-                            opt.state |= State_Raised | State_Horizontal;
-                            if (checked)
-                                opt.state |= State_On;
+                            opt.state |= State_Raised | State_Horizontal | State_On;
+//                             if (checked)
+//                                 opt.state |= State_On;
                             drawLightBevel(painter, sunkenRect, &opt, widget,
                                            ROUNDED_ALL,
                                            getFill(&opt, m_buttonCols),
diff --git qt5/style/qtcurve_primitive.cpp qt5/style/qtcurve_primitive.cpp
index a8a2bed..856218a 100644
--- qt5/style/qtcurve_primitive.cpp
+++ qt5/style/qtcurve_primitive.cpp
@@ -1658,6 +1658,8 @@ Style::drawPrimitiveIndicatorCheckBox(PrimitiveElement element,
                                  State_Selected));
     int crSize = opts.crSize + (doEtch ? 2 : 0);
     QRect rect(r.x(), r.y() + (view ? -1 : 0), crSize, crSize);
+    // render checkable menu items with only a tick if so requested
+    bool onlyTicksInMenu = menu && opts.onlyTicksInMenu;
 
     // For OO.o 3.2 need to fill widget background!
     if (isOO) {
@@ -1675,7 +1677,8 @@ Style::drawPrimitiveIndicatorCheckBox(PrimitiveElement element,
         if (r == QRect(0, 0, 15, 15)) {
             rect.adjust(-1, -1, -1, -1);
         }
-    } else {
+    } else if (!onlyTicksInMenu) {
+        // don't do this when rendering a regular menu so we get just a tick
         if (isOO && r == QRect(0, 0, opts.crSize, opts.crSize)) {
             rect.adjust(0, -1, 0, -1);
         }
@@ -1764,10 +1767,34 @@ Style::drawPrimitiveIndicatorCheckBox(PrimitiveElement element,
         }
     }
     if (state & State_On || selectedOOMenu) {
-        QPixmap *pix = getPixmap(checkRadioCol(option), PIX_CHECK, 1.0);
+        if (onlyTicksInMenu) {
+            // only tickmarks (= without the box) in menu; adjust its horizontal position
+            rect.adjust(6, 0, 0, 0);
+            // get the font for adjusting; widget will be the menu holding the menuitem
+            // but that uses the same font as the menuitem.
+            QFont font(widget->font());
+#ifndef Q_OS_OSX
+            font.setBold(true);
+#else
+            // not that there is much variation in the CheckMark symbol on OS X, but
+            // we pick one from a font that's always supposed to be there and that's
+            // a good choice functionally speaking.
+            font.setFamily(QStringLiteral("Apple Symbols"));
+#endif
+            // adjust the size so the tickmark looks just about right
+            font.setPointSizeF(font.pointSizeF() * 1.3);
+            painter->save();
+            painter->setFont(font);
+            // render the tickmark using the Unicode "Check Mark" symbol (âœ“)
+            drawItemTextWithRole(painter, rect, Qt::AlignHCenter|Qt::AlignVCenter, palette, true,
+                             QString(QChar(0x2713)), QPalette::Text);
+            painter->restore();
+        } else {
+            QPixmap *pix = getPixmap(checkRadioCol(option), PIX_CHECK, 1.0);
 
-        painter->drawPixmap(rect.center().x() - pix->width() / 2,
-                            rect.center().y() - pix->height() / 2, *pix);
+            painter->drawPixmap(rect.center().x() - pix->width() / 2,
+                                rect.center().y() - pix->height() / 2, *pix);
+        }
     } else if (state & State_NoChange) {
         // tri-state
         int x(rect.center().x()), y(rect.center().y());
diff --git qt4/common/common.h qt4/common/common.h
index 313db33..e32e76c 100644
--- qt4/common/common.h
+++ qt4/common/common.h
@@ -886,6 +886,7 @@ typedef struct {
                      useQtFileDialogApps,
                      windowDragWhiteList,
                      windowDragBlackList;
+    bool             onlyTicksInMenu;
 } Options;
 
 void qtcSetupGradient(Gradient *grad, EGradientBorder border, int numStops, ...);
diff --git qt4/common/config_file.cpp qt4/common/config_file.cpp
index c58ad1a..acad221 100644
--- qt4/common/config_file.cpp
+++ qt4/common/config_file.cpp
@@ -1277,6 +1277,7 @@ bool qtcReadConfig(const QString &file, Options *opts, Options *defOpts, bool ch
             CFG_READ_BOOL(thinSbarGroove);
             CFG_READ_BOOL(colorSliderMouseOver);
             CFG_READ_BOOL(menuIcons);
+            CFG_READ_BOOL(onlyTicksInMenu);
             CFG_READ_BOOL(forceAlternateLvCols);
             CFG_READ_BOOL(invertBotTab);
             CFG_READ_INT_BOOL(menubarHiding, HIDE_KEYBOARD);
@@ -1567,6 +1568,11 @@ void qtcDefaultSettings(Options *opts)
     opts->thinSbarGroove=true;
     opts->colorSliderMouseOver=false;
     opts->menuIcons=true;
+#ifdef Q_OS_OSX
+    opts->onlyTicksInMenu=true;
+#else
+    opts->onlyTicksInMenu=false;
+#endif
     opts->forceAlternateLvCols=false;
     opts->invertBotTab=true;
     opts->menubarHiding=HIDE_NONE;
@@ -2295,6 +2301,7 @@ bool qtcWriteConfig(KConfig *cfg, const Options &opts, const Options &def, bool
         CFG_WRITE_ENTRY(thinSbarGroove);
         CFG_WRITE_ENTRY(colorSliderMouseOver);
         CFG_WRITE_ENTRY(menuIcons);
+        CFG_WRITE_ENTRY(onlyTicksInMenu);
         CFG_WRITE_ENTRY(forceAlternateLvCols);
         CFG_WRITE_ENTRY_NUM(square);
         CFG_WRITE_ENTRY(invertBotTab);
diff --git qt4/style/qtcurve.cpp qt4/style/qtcurve.cpp
index 951ec1a..c9fa418 100644
--- qt4/style/qtcurve.cpp
+++ qt4/style/qtcurve.cpp
@@ -4315,6 +4315,8 @@ void Style::drawPrimitive(PrimitiveElement element, const QStyleOption *option,
                                 ((State_Sunken|State_Enabled)==state || (State_Sunken|State_Enabled|State_Selected)==state));
             int   crSize(opts.crSize+(doEtch ? 2 : 0));
             QRect rect(r.x(), r.y()+(view ? -1 : 0), crSize, crSize);
+            // render checkable menu items with only a tick; should become an option
+            bool onlyTicksInMenu = menu && opts.onlyTicksInMenu;
 
             painter->save();
 
@@ -4332,7 +4334,7 @@ void Style::drawPrimitive(PrimitiveElement element, const QStyleOption *option,
                 if(r==QRect(0, 0, 15, 15))
                     rect.adjust(-1, -1, -1, -1);
             }
-            else
+            else if (!onlyTicksInMenu)
             {
                 if(isOO && r==QRect(0, 0, opts.crSize, opts.crSize))
                     rect.adjust(0, -1, 0, -1);
@@ -4414,9 +4416,34 @@ void Style::drawPrimitive(PrimitiveElement element, const QStyleOption *option,
 
             if(state&State_On || selectedOOMenu)
             {
-                QPixmap *pix(getPixmap(checkRadioCol(option), PIX_CHECK, 1.0));
-
-                painter->drawPixmap(rect.center().x()-(pix->width()/2), rect.center().y()-(pix->height()/2), *pix);
+                if (onlyTicksInMenu) {
+                    // only tickmarks (= without the box) in menu; adjust its horizontal position
+                    rect.adjust(6, 0, 0, 0);
+                    // get the font for adjusting; widget will be the menu holding the menuitem
+                    // but that uses the same font as the menuitem.
+                    QFont font(widget->font());
+#ifndef Q_OS_OSX
+                    font.setBold(true);
+#else
+                    // not that there is much variation in the CheckMark symbol on OS X, but
+                    // we pick one from a font that's always supposed to be there and that's
+                    // a good choice functionally speaking.
+                    font.setFamily(QStringLiteral("Apple Symbols"));
+#endif
+                    // adjust the size so the tickmark looks just about right
+                    font.setPointSizeF(font.pointSizeF() * 1.3);
+                    painter->save();
+                    painter->setFont(font);
+                    // render the tickmark using the Unicode "Check Mark" symbol (âœ“)
+                    drawItemTextWithRole(painter, rect, Qt::AlignHCenter|Qt::AlignVCenter, palette, true,
+                                     QString(QChar(0x2713)), QPalette::Text);
+                    painter->restore();
+                }
+                else
+                {
+                        QPixmap *pix(getPixmap(checkRadioCol(option), PIX_CHECK, 1.0));
+                        painter->drawPixmap(rect.center().x()-(pix->width()/2), rect.center().y()-(pix->height()/2), *pix);
+                }
             }
             else if (state&State_NoChange)    // tri-state
             {
@@ -6141,12 +6168,13 @@ void Style::drawControl(ControlElement element, const QStyleOption *option, QPai
                 }
                 else
                 {
+                    bool onlyTicksInMenu = true;
                     // Check
                     QRect checkRect(r.left() + 3, r.center().y() - 6, opts.crSize, opts.crSize);
                     checkRect = visualRect(menuItem->direction, menuItem->rect, checkRect);
                     if (checkable)
                     {
-                        if ((menuItem->checkType & QStyleOptionMenuItem::Exclusive) && menuItem->icon.isNull())
+                        if (!onlyTicksInMenu && (menuItem->checkType & QStyleOptionMenuItem::Exclusive) && menuItem->icon.isNull())
                         {
                             QStyleOptionButton button;
                             button.rect = checkRect;
@@ -6166,7 +6194,7 @@ void Style::drawControl(ControlElement element, const QStyleOption *option, QPai
                                 if (checked)
                                     button.state |= State_On;
                                 button.palette = palette;
-                                drawPrimitive(PE_IndicatorCheckBox, &button, painter, widget);
+                                drawPrimitive(PE_IndicatorMenuCheckMark, &button, painter, widget);
                             }
                             else if (checked)
                             {
@@ -6177,9 +6205,9 @@ void Style::drawControl(ControlElement element, const QStyleOption *option, QPai
 
                                 sunkenRect = visualRect(menuItem->direction, menuItem->rect, sunkenRect);
                                 opt.state = menuItem->state;
-                                opt.state|=State_Raised|State_Horizontal;
-                                if (checked)
-                                    opt.state |= State_On;
+                                opt.state|=State_Raised|State_Horizontal|State_On;
+//                                 if (checked)
+//                                     opt.state |= State_On;
                                 drawLightBevel(painter, sunkenRect, &opt, widget, ROUNDED_ALL, getFill(&opt, m_buttonCols), m_buttonCols);
                             }
                         }
