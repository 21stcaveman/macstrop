diff --git qt5/style/qtcurve.cpp qt5/style/qtcurve.cpp
index 1e17882..38c5152 100644
--- qt5/style/qtcurve.cpp
+++ qt5/style/qtcurve.cpp
@@ -98,6 +98,12 @@
 
 namespace QtCurve {
 
+static inline void setPainterPen(QPainter *p, const QColor &colour, const qreal width=1.0)
+{
+    QPen pen(colour, width);
+    p->setPen(pen);
+}
+
 static Style::Icon
 pix2Icon(QStyle::StandardPixmap pix)
 {
@@ -1193,7 +1199,7 @@ Style::drawFadedLine(QPainter *p, const QRect &r, const QColor &col,
         if(fadeSizeEnd>=0 && fadeSizeEnd<=1.0)
             grad.setColorAt(1.0-fadeSizeEnd, col);
         grad.setColorAt(1, fadeEnd && opts.fadeLines ? fade : col);
-        p->setPen(QPen(QBrush(grad), 1));
+        p->setPen(QPen(QBrush(grad), QPenWidth1));
     }
     else
         p->setPen(col);
@@ -1211,8 +1217,8 @@ void Style::drawLines(QPainter *p, const QRect &r, bool horiz, int nLines, int o
         x2(r.x()+r.width()-1),
         y2(r.y()+r.height()-1),
         i;
-    QPen dp(cols[dark], 1),
-        lp(cols[0], 1);
+    QPen dp(cols[dark], QPenWidth1),
+        lp(cols[0], QPenWidth1);
 
     if(opts.fadeLines && (horiz ? r.width() : r.height())>16)
     {
@@ -1225,7 +1231,7 @@ void Style::drawLines(QPainter *p, const QRect &r, bool horiz, int nLines, int o
         grad.setColorAt(0.6, cols[dark]);
         grad.setColorAt(1, fade);
 
-        dp=QPen(QBrush(grad), 1);
+        dp=QPen(QBrush(grad), QPenWidth1);
 
         if(LINE_FLAT!=type)
         {
@@ -1236,7 +1242,7 @@ void Style::drawLines(QPainter *p, const QRect &r, bool horiz, int nLines, int o
             grad.setColorAt(0.4, cols[0]);
             grad.setColorAt(0.6, cols[0]);
             grad.setColorAt(1, fade);
-            lp=QPen(QBrush(grad), 1);
+            lp=QPen(QBrush(grad), QPenWidth1);
         }
     }
 
@@ -1770,7 +1776,7 @@ Style::drawLightBevelReal(QPainter *p, const QRect &rOrig,
                         bool horizontal((horiz && WIDGET_SB_BUTTON!=w)|| (!horiz && WIDGET_SB_BUTTON==w)),
                             thin(WIDGET_SB_BUTTON==w || WIDGET_SPIN==w || ((horiz ? r.height() : r.width())<16));
 
-                        p->setPen(m_mouseOverCols[MO_PLASTIK_DARK(w)]);
+                        setPainterPen(p, m_mouseOverCols[MO_PLASTIK_DARK(w)], QPenWidth1);
                         if(horizontal)
                         {
                             drawAaLine(p, r.x()+1, r.y()+1, r.x()+r.width()-2, r.y()+1);
@@ -1783,7 +1789,7 @@ Style::drawLightBevelReal(QPainter *p, const QRect &rOrig,
                         }
                         if(!thin)
                         {
-                            p->setPen(m_mouseOverCols[MO_PLASTIK_LIGHT(w)]);
+                            setPainterPen(p, m_mouseOverCols[MO_PLASTIK_LIGHT(w)], QPenWidth1);
                             if(horizontal)
                             {
                                 drawAaLine(p, r.x()+1, r.y()+2, r.x()+r.width()-2, r.y()+2);
@@ -1889,7 +1895,7 @@ Style::drawLightBevelReal(QPainter *p, const QRect &rOrig,
     }
 
     if (!colouredMouseOver && lightBorder) {
-        p->setPen(cols[LIGHT_BORDER(app)]);
+        setPainterPen(p, cols[LIGHT_BORDER(app)], QPenWidth1);
         p->drawPath(buildPath(r, w, round,
                               qtcGetRadius(&opts, r.width(),
                                            r.height(), w, RADIUS_INTERNAL)));
@@ -1901,11 +1907,11 @@ Style::drawLightBevelReal(QPainter *p, const QRect &rOrig,
         buildSplitPath(r, round, qtcGetRadius(&opts, r.width(), r.height(), w, RADIUS_INTERNAL),
                        innerTlPath, innerBrPath);
 
-        p->setPen(border[colouredMouseOver ? MO_STD_LIGHT(w, sunken) : (sunken ? dark : 0)]);
+        setPainterPen(p, border[colouredMouseOver ? MO_STD_LIGHT(w, sunken) : (sunken ? dark : 0)], QPenWidth1);
         p->drawPath(innerTlPath);
         if(colouredMouseOver || bevelledButton || draw3dfull)
         {
-            p->setPen(border[colouredMouseOver ? MO_STD_DARK(w) : (sunken ? 0 : dark)]);
+            setPainterPen(p, border[colouredMouseOver ? MO_STD_DARK(w) : (sunken ? 0 : dark)], QPenWidth1);
             p->drawPath(innerBrPath);
         }
     }
@@ -1967,7 +1973,7 @@ void Style::drawGlow(QPainter *p, const QRect &r, EWidget w, const QColor *cols)
     col.setAlphaF(GLOW_ALPHA(defShade));
     p->setBrush(Qt::NoBrush);
     p->setRenderHint(QPainter::Antialiasing, true);
-    p->setPen(col);
+    setPainterPen(p, col, QPenWidth1);
     p->drawPath(buildPath(r, w, ROUNDED_ALL, qtcGetRadius(&opts, r.width(), r.height(), w, RADIUS_ETCH)));
     p->setRenderHint(QPainter::Antialiasing, QPAINTER_ANTIALIAS_MAYBE_ON);
 }
@@ -1986,7 +1992,7 @@ void Style::drawEtch(QPainter *p, const QRect &r, const QWidget *widget,  EWidge
     col.setAlphaF(USE_CUSTOM_ALPHAS(opts) ? opts.customAlphas[ALPHA_ETCH_DARK] : ETCH_TOP_ALPHA);
     p->setBrush(Qt::NoBrush);
     p->setRenderHint(QPainter::Antialiasing, true);
-    p->setPen(col);
+    setPainterPen(p, col, QPenWidth1);
 
     if(!raised && WIDGET_SLIDER!=w)
     {
@@ -1995,10 +2001,10 @@ void Style::drawEtch(QPainter *p, const QRect &r, const QWidget *widget,  EWidge
         {
             QColor col(Qt::white);
             col.setAlphaF(USE_CUSTOM_ALPHAS(opts) ? opts.customAlphas[ALPHA_ETCH_LIGHT] : ETCH_BOTTOM_ALPHA); // 0.25);
-            p->setPen(col);
+            setPainterPen(p, col, QPenWidth1);
         }
         else
-            p->setPen(getLowerEtchCol(widget));
+            setPainterPen(p, getLowerEtchCol(widget), QPenWidth1);
     }
 
     p->drawPath(br);
@@ -2012,13 +2018,16 @@ void Style::drawBgndRing(QPainter &painter, int x, int y, int size, int size2, b
     QColor col(Qt::white);
 
     col.setAlphaF(RINGS_INNER_ALPHA(isWindow ? opts.bgndImage.type : opts.menuBgndImage.type));
+    if (width == 1) {
+        width = QPenWidth1;
+    }
     painter.setPen(QPen(col, width));
     painter.drawEllipse(QRectF(x+width2, y+width2, size-width, size-width));
 
     if(IMG_BORDERED_RINGS==(isWindow ? opts.bgndImage.type : opts.menuBgndImage.type))
     {
         col.setAlphaF(RINGS_OUTER_ALPHA);
-        painter.setPen(QPen(col, 1));
+        painter.setPen(QPen(col, QPenWidth1));
         painter.drawEllipse(QRectF(x, y, size, size));
         if(size2)
             painter.drawEllipse(QRectF(x+width, y+width, size2, size2));
@@ -2048,23 +2057,23 @@ QPixmap Style::drawStripes(const QColor &color, int opacity) const
         if(100!=opacity)
         {
             col2.setAlphaF(opacity/100.0);
-            pixPainter.setPen(col);
+            pixPainter.setPen(QPen(col, QPenWidth1));
             for(int i=0; i<pix.height(); i+=4)
                 pixPainter.drawLine(0, i, pix.width()-1, i);
         }
         else
             pixPainter.fillRect(pix.rect(), col);
-        pixPainter.setPen(QColor((3*col.red()+col2.red())/4,
+        pixPainter.setPen(QPen(QColor((3*col.red()+col2.red())/4,
                                  (3*col.green()+col2.green())/4,
                                  (3*col.blue()+col2.blue())/4,
-                                 100!=opacity ? col2.alpha() : 255));
+                                 100!=opacity ? col2.alpha() : 255), QPenWidth1));
 
         for(int i=1; i<pix.height(); i+=4)
         {
             pixPainter.drawLine(0, i, pix.width()-1, i);
             pixPainter.drawLine(0, i+2, pix.width()-1, i+2);
         }
-        pixPainter.setPen(col2);
+        pixPainter.setPen(QPen(col2, QPenWidth1));
         for(int i=2; i<pix.height()-1; i+=4)
             pixPainter.drawLine(0, i, pix.width()-1, i);
 
@@ -2554,24 +2563,24 @@ Style::drawBorder(QPainter *p, const QRect &r, const QStyleOption *option,
 
             buildSplitPath(inner, round, qtcGetRadius(&opts, inner.width(), inner.height(), w, RADIUS_INTERNAL), topPath, botPath);
 
-            p->setPen((enabled || BORDER_SUNKEN==borderProfile) /*&&
+            setPainterPen(p, (enabled || BORDER_SUNKEN==borderProfile) /*&&
                                                                   (BORDER_RAISED==borderProfile || BORDER_LIGHT==borderProfile || hasFocus || APPEARANCE_FLAT!=app)*/
                       ? tl
-                      : option->palette.background().color());
+                      : option->palette.background().color(), QPenWidth1);
             p->drawPath(topPath);
             if(WIDGET_SCROLLVIEW==w || // Because of list view headers, need to draw dark line on right!
                (! ( (WIDGET_ENTRY==w && !hasFocus && !hasMouseOver) ||
                     (WIDGET_ENTRY!=w && doBlend && BORDER_SUNKEN==borderProfile) ) ) )
             {
                 if(!hasFocus && !hasMouseOver && BORDER_LIGHT!=borderProfile && WIDGET_SCROLLVIEW!=w)
-                    p->setPen(/*WIDGET_SCROLLVIEW==w && !hasFocus
+                    setPainterPen(p, /*WIDGET_SCROLLVIEW==w && !hasFocus
                                 ? checkColour(option, QPalette::Window)
                                 : WIDGET_ENTRY==w && !hasFocus
                                 ? checkColour(option, QPalette::Base)
                                 : */enabled && (BORDER_SUNKEN==borderProfile || hasFocus || /*APPEARANCE_FLAT!=app ||*/
                                                 WIDGET_TAB_TOP==w || WIDGET_TAB_BOT==w)
                                 ? br
-                                : checkColour(option, QPalette::Window));
+                                : checkColour(option, QPalette::Window), QPenWidth1);
                 p->drawPath(botPath);
             }
         }
@@ -2586,7 +2595,7 @@ Style::drawBorder(QPainter *p, const QRect &r, const QStyleOption *option,
 
         col.setAlphaF(LOWER_BORDER_ALPHA);
         buildSplitPath(r, round, qtcGetRadius(&opts, r.width(), r.height(), w, RADIUS_EXTERNAL), topPath, botPath);
-        p->setPen(/*enabled ? */border/* : col*/);
+        p->setPen(QPen(/*enabled ? */border/* : col*/, QPenWidth1));
         p->drawPath(topPath);
 //         if(enabled)
         p->setPen(col);
@@ -2594,7 +2603,7 @@ Style::drawBorder(QPainter *p, const QRect &r, const QStyleOption *option,
     }
     else
     {
-        p->setPen(border);
+        p->setPen(QPen(border, QPenWidth1));
         p->drawPath(buildPath(r, w, round, qtcGetRadius(&opts, r.width(), r.height(), w, RADIUS_EXTERNAL)));
     }
 
diff --git qt5/style/qtcurve_api.cpp qt5/style/qtcurve_api.cpp
index f418d10..7a555f0 100644
--- qt5/style/qtcurve_api.cpp
+++ qt5/style/qtcurve_api.cpp
@@ -5309,7 +5309,7 @@ void Style::drawComplexControl(ComplexControl control, const QStyleOptionComplex
 
                     grad.setColorAt(0, dark);
                     grad.setColorAt(1, m_backgroundCols[QTC_STD_BORDER]);
-                    painter->setPen(QPen(QBrush(grad), 1));
+                    painter->setPen(QPen(QBrush(grad), QPenWidth1));
                     painter->drawLine(r.x(), start.y(), r.x(), end.y());
                     painter->drawLine(r.x()+r.width()-1, start.y(), r.x()+r.width()-1, end.y());
 
@@ -5317,7 +5317,7 @@ void Style::drawComplexControl(ComplexControl control, const QStyleOptionComplex
                     {
                         grad.setColorAt(0, light);
                         grad.setColorAt(1, m_backgroundCols[0]);
-                        painter->setPen(QPen(QBrush(grad), 1));
+                        painter->setPen(QPen(QBrush(grad), QPenWidth1));
                         painter->drawLine(r.x()+1, start.y(), r.x()+1, end.y());
                     }
                 }
diff --git qt5/style/qtcurve_p.h qt5/style/qtcurve_p.h
index 6f2ee31..7f38291 100644
--- qt5/style/qtcurve_p.h
+++ qt5/style/qtcurve_p.h
@@ -284,6 +284,8 @@ void adjustToolbarButtons(const QWidget *widget, const QToolBar *toolbar,
                           int &bottomAdjust, int &round);
 bool isA(const QObject *w, const char *type);
 
+// test: avoid a pen width of exactly 1 as Qt5 (tends to) disrespect(s) anti-alias settings for that width
+static const qreal QPenWidth1 = 1;
 }
 
 #define QPAINTER_ANTIALIAS_MAYBE_ON true
diff --git qt5/style/qtcurve_primitive.cpp qt5/style/qtcurve_primitive.cpp
index c014df8..51698bc 100644
--- qt5/style/qtcurve_primitive.cpp
+++ qt5/style/qtcurve_primitive.cpp
@@ -48,6 +48,14 @@
 #endif
 
 namespace QtCurve {
+
+static inline void setPainterPen(QPainter *p, const QColor &colour, const qreal width=1.0)
+{
+    QPen pen(colour);
+    pen.setWidthF(width);
+    p->setPen(pen);
+}
+
 bool
 Style::drawPrimitiveIndicatorTabClose(PrimitiveElement,
                                       const QStyleOption*option,
@@ -493,7 +501,7 @@ Style::drawPrimitiveFrameGroupBox(PrimitiveElement,
                     col.setAlphaF(0.0);
                     grad.setColorAt(1, col);
                     painter->setRenderHint(QPainter::Antialiasing, true);
-                    painter->setPen(QPen(QBrush(grad), 1));
+                    painter->setPen(QPen(QBrush(grad), QPenWidth1));
                     painter->drawPath(path);
                 }
                 if (opts.gbLabel & (GB_LBL_INSIDE | GB_LBL_OUTSIDE)) {
@@ -1234,7 +1242,7 @@ Style::drawPrimitiveButton(PrimitiveElement element, const QStyleOption *option,
             path.lineTo(xd + offset + etchOffset, yd + offset + 6 + etchOffset);
             path.lineTo(xd + offset + etchOffset, yd + offset + etchOffset);
             painter->setBrush(cols[isDown ? 0 : 4]);
-            painter->setPen(cols[isDown ? 0 : 4]);
+            setPainterPen(painter, cols[isDown ? 0 : 4], QPenWidth1);
             painter->setRenderHint(QPainter::Antialiasing, true);
             painter->drawPath(path);
             painter->setRenderHint(QPainter::Antialiasing, QPAINTER_ANTIALIAS_MAYBE_ON);
@@ -1580,7 +1588,7 @@ Style::drawPrimitiveIndicatorRadioButton(PrimitiveElement,
             painter->setRenderHint(QPainter::Antialiasing, true);
             if (coloredMo) {
                 painter->setBrush(Qt::NoBrush);
-                painter->setPen(use[CR_MO_FILL]);
+                setPainterPen(painter, use[CR_MO_FILL], QPenWidth1);
                 painter->drawArc(QRectF(x + 1, y + 1, opts.crSize - 2,
                                         opts.crSize - 2), 0, 360 * 16);
                 painter->drawArc(QRectF(x + 2, y + 2, opts.crSize - 4,
@@ -1593,7 +1601,7 @@ Style::drawPrimitiveIndicatorRadioButton(PrimitiveElement,
                 if (!glow) {
                     topCol.setAlphaF(ETCH_RADIO_TOP_ALPHA);
                 }
-                painter->setPen(topCol);
+                setPainterPen(painter, topCol, QPenWidth1);
                 painter->drawArc(QRectF(x - 0.5, y - 0.5, opts.crSize + 1,
                                         opts.crSize + 1), 45 * 16, 180 * 16);
                 if (!glow) {
@@ -1602,11 +1610,11 @@ Style::drawPrimitiveIndicatorRadioButton(PrimitiveElement,
                 painter->drawArc(QRectF(x - 0.5, y - 0.5, opts.crSize + 1,
                                         opts.crSize + 1), 225 * 16, 180 * 16);
             }
-            painter->setPen(use[BORDER_VAL(state & State_Enabled)]);
+            setPainterPen(painter, use[BORDER_VAL(state & State_Enabled)], QPenWidth1);
             painter->drawArc(QRectF(x + 0.25, y + 0.25, opts.crSize - 0.5,
                                     opts.crSize - 0.5), 0, 360 * 16);
             if (!coloredMo) {
-                painter->setPen(btn[state & State_MouseOver ? 3 : 4]);
+                setPainterPen(painter, btn[state & State_MouseOver ? 3 : 4], QPenWidth1);
                 painter->drawArc(QRectF(x + 0.75, y + 0.75, opts.crSize - 1.5,
                                         opts.crSize - 1.5),
                                  lightBorder ? 0 : 45 * 16,
@@ -1661,8 +1669,8 @@ Style::drawPrimitiveIndicatorCheckBox(PrimitiveElement element,
         if (r == QRect(0, 0, 14, 15)) { // OO.o 3.2 =14x15?
             rect.adjust(-1, -1, -1, -1);
         }
-        painter->setPen(option ? option->palette.text().color() :
-                        QApplication::palette().text().color());
+        setPainterPen(painter, option ? option->palette.text().color() :
+                        QApplication::palette().text().color(), QPenWidth1);
         drawRect(painter, r);
         // LibreOffice its 15x15 - and arrow is not centred, so adjust this...
         if (r == QRect(0, 0, 15, 15)) {
@@ -1721,13 +1729,13 @@ Style::drawPrimitiveIndicatorCheckBox(PrimitiveElement element,
 
             if (opts.coloredMouseOver != MO_NONE && !glow && mo) {
                 painter->setRenderHint(QPainter::Antialiasing, true);
-                painter->setPen(use[CR_MO_FILL]);
+                setPainterPen(painter, use[CR_MO_FILL], QPenWidth1);
                 drawAaRect(painter, rect.adjusted(1, 1, -1, -1));
                 painter->setRenderHint(QPainter::Antialiasing, QPAINTER_ANTIALIAS_MAYBE_ON);
             } else {
-                painter->setPen(midColor(state & State_Enabled ?
+                setPainterPen(painter, midColor(state & State_Enabled ?
                                          palette.base().color() :
-                                         palette.background().color(), use[3]));
+                                         palette.background().color(), use[3]), QPenWidth1);
                 if (lightBorder) {
                     drawRect(painter, rect.adjusted(1, 1, -1, -1));
                 } else {
@@ -1762,7 +1770,7 @@ Style::drawPrimitiveIndicatorCheckBox(PrimitiveElement element,
         // tri-state
         int x(rect.center().x()), y(rect.center().y());
 
-        painter->setPen(checkRadioCol(option));
+        setPainterPen(painter, checkRadioCol(option), QPenWidth1);
         painter->drawLine(x - 3, y, x + 3, y);
         painter->drawLine(x - 3, y + 1, x + 3, y + 1);
     }
