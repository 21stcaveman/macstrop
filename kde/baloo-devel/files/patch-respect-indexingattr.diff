diff --git a/src/pim/agent/agent.cpp b/src/pim/agent/agent.cpp
index 7558127..3ca27e0 100644
--- a/src/pim/agent/agent.cpp
+++ b/src/pim/agent/agent.cpp
@@ -37,6 +37,10 @@
 #include <Akonadi/AgentManager>
 #include <Akonadi/ServerManager>
 
+#include <Akonadi/CollectionFetchScope>
+#include <akonadi/indexpolicyattribute.h>
+#include <Akonadi/AttributeFactory>
+
 #include <KStandardDirs>
 #include <KConfig>
 #include <KConfigGroup>
@@ -79,6 +83,8 @@ BalooIndexingAgent::BalooIndexingAgent(const QString& id)
     lowerSchedulingPriority();
     lowerPriority();
 
+    Akonadi::AttributeFactory::registerAttribute<Akonadi::IndexPolicyAttribute>();
+
     KConfig config(QLatin1String("baloorc"));
     KConfigGroup group = config.group("Akonadi");
     const int agentIndexingVersion = group.readEntry("agentIndexingVersion", 0);
@@ -117,6 +123,10 @@ BalooIndexingAgent::BalooIndexingAgent(const QString& id)
     changeRecorder()->itemFetchScope().setAncestorRetrieval(Akonadi::ItemFetchScope::Parent);
     changeRecorder()->itemFetchScope().setFetchRemoteIdentification(false);
     changeRecorder()->itemFetchScope().setFetchModificationTime(false);
+    changeRecorder()->itemFetchScope().fetchFullPayload(true);
+//     changeRecorder()->collectionFetchScope().fetchAttribute<Akonadi::IndexPolicyAttribute>();
+    changeRecorder()->collectionFetchScope().setAncestorRetrieval(Akonadi::CollectionFetchScope::All);
+    changeRecorder()->collectionFetchScope().setListFilter(Akonadi::CollectionFetchScope::Index);
     changeRecorder()->setChangeRecordingEnabled(false);
 
     new BalooIndexerAdaptor(this);
@@ -276,6 +286,7 @@ void BalooIndexingAgent::findUnindexedItems()
 
     Akonadi::CollectionFetchJob* job = new Akonadi::CollectionFetchJob(Akonadi::Collection::root(),
                                                                         Akonadi::CollectionFetchJob::Recursive);
+//     job->fetchScope().fetchAttribute<Akonadi::IndexPolicyAttribute>();
     connect(job, SIGNAL(finished(KJob*)), this, SLOT(slotRootCollectionsFetched(KJob*)));
     job->start();
 }
@@ -287,6 +298,10 @@ void BalooIndexingAgent::slotRootCollectionsFetched(KJob* kjob)
 
     status(Running, i18n("Indexing PIM data"));
     Q_FOREACH (const Akonadi::Collection& c, cList) {
+        if (!shouldIndex(c)) {
+            qDebug() << Q_FUNC_INFO << "Collection" << c << "is virtual or has indexing disabled";
+            continue;
+        }
         Akonadi::ItemFetchJob* job = new Akonadi::ItemFetchJob(c);
         job->setProperty("collectionsCount", cList.size());
 
@@ -302,6 +317,8 @@ void BalooIndexingAgent::slotRootCollectionsFetched(KJob* kjob)
         job->fetchScope().setFetchModificationTime(true);
         job->fetchScope().setAncestorRetrieval(Akonadi::ItemFetchScope::Parent);
         job->setDeliveryOption(Akonadi::ItemFetchJob::EmitItemsIndividually);
+        // CHECK: is this right/necessary?
+        job->fetchScope().fetchAttribute<Akonadi::IndexPolicyAttribute>();
 
         connect(job, SIGNAL(itemsReceived(Akonadi::Item::List)),
                 this, SLOT(slotItemsReceived(Akonadi::Item::List)));
@@ -314,7 +331,10 @@ void BalooIndexingAgent::slotRootCollectionsFetched(KJob* kjob)
 
 void BalooIndexingAgent::itemAdded(const Akonadi::Item& item, const Akonadi::Collection& collection)
 {
-    Q_UNUSED(collection);
+    if (!shouldIndex(collection)) {
+        qDebug() << Q_FUNC_INFO << "not indexing collection" << collection;
+        return;
+    }
 
     m_items << item;
     m_timer.start();
@@ -322,6 +342,11 @@ void BalooIndexingAgent::itemAdded(const Akonadi::Item& item, const Akonadi::Col
 
 void BalooIndexingAgent::itemChanged(const Akonadi::Item& item, const QSet<QByteArray>& partIdentifiers)
 {
+    if (!shouldIndex(item)) {
+        qDebug() << Q_FUNC_INFO << "not indexing item" << item.url();
+        return;
+    }
+
     // We don't index certain parts so we don't care when they change
     QSet<QByteArray> pi = partIdentifiers;
     QMutableSetIterator<QByteArray> it(pi);
@@ -351,6 +376,14 @@ void BalooIndexingAgent::itemsFlagsChanged(const Akonadi::Item::List& items,
                                            const QSet<QByteArray>& addedFlags,
                                            const QSet<QByteArray>& removedFlags)
 {
+    // We optimize and skip the "shouldIndex" call for each item here, since it's
+    // cheaper to just let Xapian throw an exception for items that were not
+    // indexed.
+    // In most cases the entire batch comes from the same collection, so we will
+    // only suffer penalty in case of larger batches from non-indexed collections,
+    // but we assume that that's a much less common case than collections with
+    // indexing enabled.
+
     // Akonadi always sends batch of items of the same type
     AbstractIndexer *indexer = indexerForItem(items.first());
     if (!indexer) {
@@ -374,6 +407,10 @@ void BalooIndexingAgent::itemsRemoved(const Akonadi::Item::List& items)
         return;
     }
 
+    // We optimize and skip the "shouldIndex" call for each item here, since it's
+    // cheaper to just let Xapian throw an exception for items that were not
+    // indexed instead of filtering the list here.
+
     Q_FOREACH (const Akonadi::Item& item, items) {
         try {
             indexer->remove(item);
@@ -386,6 +423,9 @@ void BalooIndexingAgent::itemsRemoved(const Akonadi::Item::List& items)
 
 void BalooIndexingAgent::collectionRemoved(const Akonadi::Collection& collection)
 {
+    // We don't call "shouldIndex" here intentionally to make absolutely sure
+    // that all items are wiped from the index
+
     Q_FOREACH (AbstractIndexer *indexer, indexersForCollection(collection)) {
         try {
             indexer->remove(collection);
@@ -403,14 +443,37 @@ void BalooIndexingAgent::itemsMoved(const Akonadi::Item::List& items,
     AbstractIndexer *indexer = indexerForItem(items.first());
     if (!indexer)
        return;
-    Q_FOREACH (const Akonadi::Item& item, items) {
-        try {
-            indexer->move(item.id(), sourceCollection.id(), destinationCollection.id());
-        } catch (const Xapian::Error &e) {
-            kWarning() << "Xapian error in indexer" << indexer << ":" << e.get_msg().c_str();
+    const bool indexSource = shouldIndex(sourceCollection);
+    const bool indexDest = shouldIndex(destinationCollection);
+    if (indexSource && indexDest) {
+        Q_FOREACH (const Akonadi::Item& item, items) {
+            try {
+                indexer->move(item.id(), sourceCollection.id(), destinationCollection.id());
+            } catch (const Xapian::Error &e) {
+                kWarning() << "Xapian error in indexer" << indexer << ":" << e.get_msg().c_str();
+            }
+        }
+        m_commitTimer.start();
+    } else if (!indexSource && indexDest) {
+        qDebug() << Q_FUNC_INFO << "only indexing destinationCollection" << destinationCollection;
+        // CHECK: should we clear m_items first here?
+        Q_FOREACH (const Akonadi::Item& item, items) {
+            m_items << item;
+        }
+        m_timer.start();
+    } else if (indexSource && !indexDest) {
+        qDebug() << Q_FUNC_INFO << "only indexing sourceCollection" << sourceCollection;
+        Q_FOREACH (const Akonadi::Item& item, items) {
+            try {
+                indexer->remove(item);
+            } catch (const Xapian::Error &e) {
+                kWarning() << "Xapian error in indexer" << indexer << ":" << e.get_msg().c_str();
+            }
         }
+        m_commitTimer.start();
+    } else {
+        // nothing to do
     }
-    m_commitTimer.start();
 }
 
 void BalooIndexingAgent::cleanup()
@@ -445,6 +508,10 @@ void BalooIndexingAgent::slotItemsReceived(const Akonadi::Item::List& items)
     QDateTime dt = loadLastItemMTime(QDateTime::fromMSecsSinceEpoch(1));
 
     Q_FOREACH (const Akonadi::Item& item, items) {
+        if (!shouldIndex(item)) {
+            qDebug() << Q_FUNC_INFO << "Indexing disabled for item" << item.url();
+            continue;
+        }
         AbstractIndexer *indexer = indexerForItem(item);
         if (!indexer) {
             continue;
@@ -515,4 +582,16 @@ void BalooIndexingAgent::onOnlineChanged(bool online)
     }
 }
 
+bool BalooIndexingAgent::shouldIndex(const Akonadi::Collection &col) const
+{
+    return !col.isVirtual()
+            && (!col.hasAttribute<Akonadi::IndexPolicyAttribute>()
+                || col.attribute<Akonadi::IndexPolicyAttribute>()->indexingEnabled());
+}
+
+bool BalooIndexingAgent::shouldIndex(const Akonadi::Item &item) const
+{
+    return shouldIndex(item.parentCollection());
+}
+
 AKONADI_AGENT_MAIN(BalooIndexingAgent)
diff --git a/src/pim/agent/agent.h b/src/pim/agent/agent.h
index b8ebd71..80dcce7 100644
--- a/src/pim/agent/agent.h
+++ b/src/pim/agent/agent.h
@@ -81,6 +81,8 @@ private:
     void addIndexer(AbstractIndexer *indexer);
     AbstractIndexer* indexerForItem(const Akonadi::Item& item) const;
     QList<AbstractIndexer*> indexersForCollection(const Akonadi::Collection& collection) const;
+    bool shouldIndex(const Akonadi::Item &item) const;
+    bool shouldIndex(const Akonadi::Collection &collection) const;
 
     Akonadi::Item::List m_items;
     QTimer m_timer;
