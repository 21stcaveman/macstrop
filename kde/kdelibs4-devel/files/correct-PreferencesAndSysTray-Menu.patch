diff --git kdeui/actions/kaction.cpp kdeui/actions/kaction.cpp
index 9e8f7fb..d09aeac 100644
--- kdelibs-git/kdeui/actions/kaction.cpp
+++ kdelibs-git/kdeui/actions/kaction.cpp
@@ -142,11 +142,47 @@ KAction::KAction(QObject *parent)
   d->init(this);
 }

+#ifdef Q_OS_MAC
+
+#include <kaboutdata.h>
+
+static void setTextWithCorrectMenuRole( KAction *action, const QString &text )
+{
+    // texts containing "config, options, setup, settings or preferences" will get PreferencesRole
+    // from Qt unless they have a role set. We prevent that, because KDE has its own way of
+    // defining a the application preferences menu ("Configure <appName>") which should go under the OS X Preferences menu.
+    // But when a KAction is created with the standard preferences title ("Configure <appName>..."), this action
+    // is set to PreferencesRole .
+    action->setText(text);
+    if( text.contains("config", Qt::CaseInsensitive)
+        || text.contains("options", Qt::CaseInsensitive)
+        || text.contains("setup", Qt::CaseInsensitive)
+        || text.contains("settings", Qt::CaseInsensitive)
+        || text.contains("preferences", Qt::CaseInsensitive)
+    ){
+        const KAboutData *aboutData = KGlobal::mainComponent().aboutData();
+        QString prefsText = i18n( "Configure %1...", (aboutData) ? aboutData->programName() : qApp->applicationName() );
+        if( text == prefsText || text == "&" % prefsText ){
+            kDebug() << "### Setting QAction::PreferencesRole from" << action->menuRole() << "for menuAction with text" << text;
+            action->setMenuRole(QAction::PreferencesRole);
+        }
+        else{
+            kDebug() << "### Setting QAction::NoRole from" << action->menuRole() << "for menuAction with text" << text;
+            action->setMenuRole(QAction::NoRole);
+        }
+    }
+}
+#endif //Q_OS_MAC
+
 KAction::KAction(const QString &text, QObject *parent)
   : QWidgetAction(parent), d(new KActionPrivate)
 {
   d->init(this);
+#ifdef Q_OS_MAC
+  setTextWithCorrectMenuRole(this, text);
+#else
   setText(text);
+#endif
 }

 KAction::KAction(const KIcon &icon, const QString &text, QObject *parent)
@@ -154,7 +190,11 @@ KAction::KAction(const KIcon &icon, const QString &text, QObject *parent)
 {
   d->init(this);
   setIcon(icon);
+#ifdef Q_OS_MAC
+  setTextWithCorrectMenuRole(this, text);
+#else
   setText(text);
+#endif
 }

 KAction::~KAction()
diff --git kdeui/actions/kstandardaction.cpp kdeui/actions/kstandardaction.cpp
index 7de0c6f..df61bff 100644
--- kdelibs-git/kdeui/actions/kstandardaction.cpp
+++ kdelibs-git/kdeui/actions/kstandardaction.cpp
@@ -170,6 +170,10 @@ KAction *create(StandardAction id, const QObject *recvr, const char *slot, QObje
       break;
     }

+    // Set the text before setting the MenuRole, as on OS X setText will do some heuristic setting of itself,
+    // to prevent user menu items to get promoted to one of the following special roles.
+    pAction->setText(sLabel);
+
     switch ( id ) {
     case Quit:
       pAction->setMenuRole(QAction::QuitRole);
@@ -188,7 +192,6 @@ KAction *create(StandardAction id, const QObject *recvr, const char *slot, QObje
       break;
     }

-    pAction->setText(sLabel);
     if (pInfo->psToolTip) {
         pAction->setToolTip(i18n(pInfo->psToolTip));
     }
diff --git kdeui/notifications/kstatusnotifieritem.cpp kdeui/notifications/kstatusnotifieritem.cpp
index 1b15d40..920ba27 100644
--- kdelibs-git/kdeui/notifications/kstatusnotifieritem.cpp
+++ kdelibs-git/kdeui/notifications/kstatusnotifieritem.cpp
@@ -683,6 +683,9 @@ bool KStatusNotifierItemPrivate::checkVisibility(QPoint pos, bool perform)

         return false;
     }
+#else
+    Q_UNUSED(pos);
+    Q_UNUSED(perform);
 #endif

     return true;
@@ -722,6 +725,10 @@ KStatusNotifierItemPrivate::KStatusNotifierItemPrivate(KStatusNotifierItem *item
 {
 }

+#ifdef Q_OS_MAC
+#   include <kconfiggroup.h>
+#endif
+
 void KStatusNotifierItemPrivate::init(const QString &extraId)
 {
     // Ensure that closing the last KMainWindow doesn't exit the application
@@ -745,8 +752,21 @@ void KStatusNotifierItemPrivate::init(const QString &extraId)

     //create a default menu, just like in KSystemtrayIcon
     KMenu *m = new KMenu(associatedWidget);
+#ifdef Q_OS_MAC
+    // emulate addTitle/setTitle by adding an inactive menu item.
+    titleAction = new QAction( KGlobal::mainComponent().aboutData()->programName(), NULL );
+    titleAction->setEnabled(false);
+    titleAction->setIcon(qApp->windowIcon());
+    titleAction->setIconVisibleInMenu(true);
+    m->addAction( titleAction );
+    m->addSeparator();
+//     qDebug() << "### Added SystemTray titleAction=" << titleAction;
+//     qDebug() << "### SystemTray for app" << qApp << "=" << KGlobal::mainComponent().aboutData()->programName()
+//         << "/" << KGlobal::caption() << "with icon" << qApp->windowIcon().name();
+#else
     titleAction = m->addTitle(qApp->windowIcon(), KGlobal::caption());
     m->setTitle(KGlobal::mainComponent().aboutData()->programName());
+#endif
     q->setContextMenu(m);

     KStandardAction::quit(q, SLOT(maybeQuit()), actionCollection);
diff --git kdeui/widgets/kmenu.cpp kdeui/widgets/kmenu.cpp
index 7dab149..94a7751 100644
--- kdelibs-git/kdeui/widgets/kmenu.cpp
+++ kdelibs-git/kdeui/widgets/kmenu.cpp
@@ -167,6 +167,40 @@ KMenu::~KMenu()
     delete d;
 }

+#ifdef Q_OS_MAC
+void KMenu::addAction(QAction *action)
+{
+    if( action ){
+        if( !action->isIconVisibleInMenu() ){
+            action->setIcon(QIcon());
+        }
+        QMenu::addAction(action);
+    }
+}
+
+#   ifdef Q_NO_USING_KEYWORD
+QAction *KMenu::addAction(const QString &text)
+{
+    return QMenu::addAction(text);
+}
+
+QAction *KMenu::addAction(const QIcon &icon, const QString &text)
+{
+    return QMenu::addAction(icon,text);
+}
+
+QAction *KMenu::addAction(const QString &text, const QObject *receiver, const char* member, const QKeySequence &shortcut)
+{
+    return QMenu::addAction(text, receiver, member, shortcut);
+}
+
+QAction *KMenu::addAction(const QIcon &icon, const QString &text, const QObject *receiver, const char* member, const QKeySequence &shortcut)
+{
+    return QMenu::addAction(icon, text, receiver, member, shortcut);
+}
+#   endif // Q_NO_USING_KEYWORD
+#endif // Q_OS_MAC
+
 QAction* KMenu::addTitle(const QString &text, QAction* before)
 {
     return addTitle(QIcon(), text, before);
diff --git kdeui/widgets/kmenu.h kdeui/widgets/kmenu.h
index f96e263..79be594 100644
--- kdelibs-git/kdeui/widgets/kmenu.h
+++ kdelibs-git/kdeui/widgets/kmenu.h
@@ -60,6 +60,22 @@ public:
      */
     ~KMenu();

+#ifdef Q_OS_MAC
+#   ifndef Q_NO_USING_KEYWORD
+    using QMenu::addAction;
+#   endif
+    /**
+     * Appends the action action to the menu's list of actions.
+     * Overloaded from QMenu to force Qt to honour action->isIconVisibleInMenu().
+     */
+    void addAction(QAction *action);
+#   ifdef Q_NO_USING_KEYWORD
+    QAction *addAction(const QString &text);
+    QAction *addAction(const QIcon &icon, const QString &text);
+    QAction *addAction(const QString &text, const QObject *receiver, const char* member, const QKeySequence &shortcut = 0);
+    QAction *addAction(const QIcon &icon, const QString &text, const QObject *receiver, const char* member, const QKeySequence &shortcut = 0);
+#   endif //Q_NO_USING_KEYWORD
+#endif //Q_OS_MAC
     /**
      * Inserts a title item with no icon.
      */
