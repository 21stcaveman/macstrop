diff --git noteshared/attributes/attributeregistrar.cpp noteshared/attributes/attributeregistrar.cpp
index cdcc949..56a61c0 100644
--- noteshared/attributes/attributeregistrar.cpp
+++ noteshared/attributes/attributeregistrar.cpp
@@ -22,19 +22,46 @@
 
 #include <akonadi/attributefactory.h>
 
+#include <KGlobal>
+#include <KDebug>
+
 namespace {
 
 // Anonymous namespace; function is invisible outside this file.
+
+class NoteSharedRegistrar {
+public:
+    NoteSharedRegistrar()
+    {
+      kDebug(5500) << Q_FUNC_INFO << this;
+      displayAttr = Akonadi::AttributeFactory::getRegisteredAttribute<NoteShared::NoteDisplayAttribute>();
+      alarmAttr = Akonadi::AttributeFactory::getRegisteredAttribute<NoteShared::NoteAlarmAttribute>();
+      lockAttr = Akonadi::AttributeFactory::getRegisteredAttribute<NoteShared::NoteLockAttribute>();
+      showAttr = Akonadi::AttributeFactory::getRegisteredAttribute<NoteShared::ShowFolderNotesAttribute>();
+    }
+    ~NoteSharedRegistrar()
+    {
+      kDebug(5500) << Q_FUNC_INFO << this;
+      Akonadi::AttributeFactory::deRegisterAttribute(displayAttr);
+      Akonadi::AttributeFactory::deRegisterAttribute(alarmAttr);
+      Akonadi::AttributeFactory::deRegisterAttribute(lockAttr);
+      Akonadi::AttributeFactory::deRegisterAttribute(showAttr);
+    }
+    NoteShared::NoteDisplayAttribute *displayAttr;
+    NoteShared::NoteAlarmAttribute *alarmAttr;
+    NoteShared::NoteLockAttribute *lockAttr;
+    NoteShared::ShowFolderNotesAttribute *showAttr;
+};
+K_GLOBAL_STATIC(NoteSharedRegistrar, s_registrarInstance)
+
 bool dummy()
 {
-  Akonadi::AttributeFactory::registerAttribute<NoteShared::NoteDisplayAttribute>();
-  Akonadi::AttributeFactory::registerAttribute<NoteShared::NoteAlarmAttribute>();
-  Akonadi::AttributeFactory::registerAttribute<NoteShared::NoteLockAttribute>();
-  Akonadi::AttributeFactory::registerAttribute<NoteShared::ShowFolderNotesAttribute>();
-  return true;
+    kDebug(5500) << "NoteSharedRegistrar=" << s_registrarInstance;
+    return s_registrarInstance != NULL;
 }
 
 // Called when this library is loaded.
 const bool registered = dummy();
 
+
 } // namespace
