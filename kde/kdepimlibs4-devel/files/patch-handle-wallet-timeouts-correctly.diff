diff --git mailtransport/transportmanager.cpp mailtransport/transportmanager.cpp
index d13f879..93a0a12 100644
--- mailtransport/transportmanager.cpp
+++ mailtransport/transportmanager.cpp
@@ -73,6 +73,7 @@ class TransportManagerPrivate
 
     ~TransportManagerPrivate() {
       delete config;
+      delete wallet;
       qDeleteAll( transports );
     }
 
@@ -573,12 +574,15 @@ int TransportManagerPrivate::createId() const
 
 KWallet::Wallet * TransportManager::wallet()
 {
-  if ( d->wallet && d->wallet->isOpen() ) {
-    return d->wallet;
+  // do not return False is a previous attempt to open the NetworkWallet failed; most likely that was
+  // just a transient failure. However, no need to consider an existing d->wallet if !Wallet::isEnabled() .
+  // RJVB: We could however return NULL too if (walletAsyncOpen && walletOpenFailed)
+  if ( !Wallet::isEnabled() ) {
+    return 0;
   }
 
-  if ( !Wallet::isEnabled() || d->walletOpenFailed ) {
-    return 0;
+  if ( d->wallet && d->wallet->isOpen() ) {
+    return d->wallet;
   }
 
   WId window = 0;
@@ -594,6 +598,10 @@ KWallet::Wallet * TransportManager::wallet()
   if ( !d->wallet ) {
     d->walletOpenFailed = true;
     return 0;
+  } else {
+    // we just opened a wallet in synchronous mode; record the state
+    d->walletAsyncOpen = false;
+    d->walletOpenFailed = false;
   }
 
   d->prepareWallet();
@@ -644,7 +652,8 @@ void TransportManager::loadPasswordsAsync()
   }
 
   // async wallet opening
-  if ( !d->wallet && !d->walletOpenFailed ) {
+  // RJVB: don't be discouraged by a previous failure opening a wallet, but check if the system is enabled first
+  if ( !d->wallet && Wallet::isEnabled() ) {
     WId window = 0;
     if ( qApp->activeWindow() ) {
       window = qApp->activeWindow()->winId();
@@ -657,7 +666,11 @@ void TransportManager::loadPasswordsAsync()
     if ( d->wallet ) {
       connect( d->wallet, SIGNAL(walletOpened(bool)), SLOT(slotWalletOpened(bool)) );
       d->walletAsyncOpen = true;
+      d->walletOpenFailed = false;
+      // RJVB: passwords will be loaded the next time we're called (?)
     } else {
+      // RJVB: record the exact state:
+      d->walletAsyncOpen = false;
       d->walletOpenFailed = true;
       loadPasswords();
     }
@@ -677,6 +690,8 @@ void TransportManagerPrivate::slotWalletOpened( bool success )
     delete wallet;
     wallet = 0;
   } else {
+    // RJVB: unset the error flag
+    walletOpenFailed = false;
     prepareWallet();
   }
   q->loadPasswords();
