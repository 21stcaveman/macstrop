diff --git a/CMakeLists.txt b/CMakeLists.txt
index 18ecfc0..fb81368 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -8,6 +8,7 @@ set(KDEVPYTHON_VERSION_PATCH 1)
 set( KDEVPLATFORM_VERSION "${KDEVPYTHON_VERSION_MAJOR}.${KDEVPYTHON_VERSION_MINOR}.${KDEVPYTHON_VERSION_PATCH}" )

 set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${kdevpython_SOURCE_DIR}/cmake/)
+set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules )

 cmake_minimum_required(VERSION 2.8.9)

@@ -16,7 +17,7 @@ find_package(KDevPlatform ${KDEVPLATFORM_VERSION} REQUIRED)


 # find the system python 3 interpreter, only used for determining search paths.
-find_package(PythonInterp 3.0 REQUIRED)
+find_package(Python3Interp 3.0 REQUIRED)
 configure_file( "${kdevpython_SOURCE_DIR}/kdevpythonversion.h.cmake" "${kdevpython_BINARY_DIR}/kdevpythonversion.h" @ONLY )


diff --git a/cmake/CMakeLists.txt b/cmake/CMakeLists.txt
new file mode 100644
index 0000000..1e36769
--- /dev/null
+++ b/cmake/CMakeLists.txt
@@ -0,0 +1,2 @@
+add_subdirectory(modules)
+
diff --git a/cmake/modules/FindPython3Interp.cmake b/cmake/modules/FindPython3Interp.cmake
new file mode 100644
index 0000000..4628bf0
--- /dev/null
+++ b/cmake/modules/FindPython3Interp.cmake
@@ -0,0 +1,48 @@
+# - Find python interpreter
+# This module finds if Python interpreter is installed and determines where the
+# executables are. This code sets the following variables:
+#
+#  PYTHONINTERP3_FOUND - Was the Python executable found
+#  PYTHON3_EXECUTABLE  - path to the Python interpreter
+#
+
+#=============================================================================
+# Copyright 2005-2009 Kitware, Inc.
+#
+# Distributed under the OSI-approved BSD License (the "License");
+# see accompanying file Copyright.txt for details.
+#
+# This software is distributed WITHOUT ANY WARRANTY; without even the
+# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+# See the License for more information.
+#=============================================================================
+# (To distributed this file outside of CMake, substitute the full
+#  License text for the above reference.)
+
+FIND_PROGRAM(PYTHON3_EXECUTABLE
+  NAMES python3.4m python3.4 python3.3 python3.2mu python3.2m python3.2u python3.2 python3.1 python3.0 python3
+  PATHS
+  [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\3.2\\InstallPath]
+  [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\3.1\\InstallPath]
+  [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\3.0\\InstallPath]
+  )
+
+FIND_PROGRAM(PYTHON3_DBG_EXECUTABLE
+  NAMES python3.4dm python3.4d python3.3d python3.2dmu python3.2dm python3.2du python3.2d python3.1-dbg python3.0-dbg python3-dbg
+  PATHS
+  [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\3.2\\InstallPath]
+  [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\3.1\\InstallPath]
+  [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\3.0\\InstallPath]
+  )
+
+
+# handle the QUIETLY and REQUIRED arguments and set PYTHONINTERP_FOUND to TRUE if
+# all listed variables are TRUE
+INCLUDE(FindPackageHandleStandardArgs)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(Python3Interp DEFAULT_MSG PYTHON3_EXECUTABLE)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(Python3InterpDbg DEFAULT_MSG PYTHON3_DBG_EXECUTABLE)
+
+MARK_AS_ADVANCED(PYTHON3_EXECUTABLE)
+MARK_AS_ADVANCED(PYTHON3_DBG_EXECUTABLE)
+
+
diff --git a/cmake/modules/FindPython3Libs.cmake b/cmake/modules/FindPython3Libs.cmake
new file mode 100644
index 0000000..1f894bc
--- /dev/null
+++ b/cmake/modules/FindPython3Libs.cmake
@@ -0,0 +1,213 @@
+# - Find python libraries
+# This module finds if Python is installed and determines where the
+# include files and libraries are. It also determines what the name of
+# the library is. This code sets the following variables:
+#
+#  PYTHONLIBS3_FOUND       - have the Python libs been found
+#  PYTHON3_LIBRARIES       - path to the python library
+#  PYTHON3_INCLUDE_DIRS    - path to where Python.h is found
+#  PYTHON3_DEBUG_LIBRARIES - path to the debug library
+#
+
+#=============================================================================
+# Copyright 2001-2009 Kitware, Inc.
+#
+# Distributed under the OSI-approved BSD License (the "License");
+# see accompanying file Copyright.txt for details.
+#
+# This software is distributed WITHOUT ANY WARRANTY; without even the
+# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+# See the License for more information.
+#=============================================================================
+# (To distributed this file outside of CMake, substitute the full
+#  License text for the above reference.)
+
+INCLUDE(CMakeFindFrameworks)
+# Is there a python3 framework? How do we search for it?
+# Search for the python framework on Apple.
+# CMAKE_FIND_FRAMEWORKS(Python)
+
+FOREACH(_CURRENT_VERSION 3.4 3.3 3.2 3.1 3.0)
+  IF(_CURRENT_VERSION GREATER 3.1)
+      SET(_32FLAGS "m" "u" "mu" "dm" "du" "dmu" "")
+  ELSE()
+      SET(_32FLAGS "")
+  ENDIF()
+  FOREACH(_COMPILATION_FLAGS ${_32FLAGS})
+      STRING(REPLACE "." "" _CURRENT_VERSION_NO_DOTS ${_CURRENT_VERSION})
+      IF(WIN32)
+        IF(_CURRENT_VERSION GREATER 3.1)
+            FIND_LIBRARY(PYTHON3_DEBUG_LIBRARY
+                NAMES python${_CURRENT_VERSION_NO_DOTS}d${_COMPILATION_FLAGS} python
+              PATHS
+              [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\${_CURRENT_VERSION}\\InstallPath]/libs/Debug
+              [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\${_CURRENT_VERSION}\\InstallPath]/libs )
+        ELSE()
+            FIND_LIBRARY(PYTHON3_DEBUG_LIBRARY
+                NAMES python${_CURRENT_VERSION_NO_DOTS}${_COMPILATION_FLAGS}_d python
+              PATHS
+              [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\${_CURRENT_VERSION}\\InstallPath]/libs/Debug
+              [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\${_CURRENT_VERSION}\\InstallPath]/libs )
+        ENDIF()
+      ENDIF(WIN32)
+
+      FIND_LIBRARY(PYTHON3_LIBRARY
+          NAMES python${_CURRENT_VERSION_NO_DOTS}${_COMPILATION_FLAGS} python${_CURRENT_VERSION}${_COMPILATION_FLAGS}
+        PATHS
+          [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\${_CURRENT_VERSION}\\InstallPath]/libs
+          # Avoid finding the .dll in the PATH.  We want the .lib.
+          NO_SYSTEM_ENVIRONMENT_PATH
+      PATH_SUFFIXES Library/Frameworks/Python.framework/Versions/${_CURRENT_VERSION}/lib
+      )
+      # Look for the static library in the Python config directory
+      FIND_LIBRARY(PYTHON3_LIBRARY
+        NAMES python${_CURRENT_VERSION_NO_DOTS}${_COMPILATION_FLAGS} python${_CURRENT_VERSION}${_COMPILATION_FLAGS}
+        # Avoid finding the .dll in the PATH.  We want the .lib.
+        NO_SYSTEM_ENVIRONMENT_PATH
+        # This is where the static library is usually located
+        PATH_SUFFIXES python${_CURRENT_VERSION}/config
+       Library/Frameworks/Python.framework/Versions/${_CURRENT_VERSION}/lib/python${_CURRENT_VERSION}/config-${_CURRENT_VERSION}m
+      )
+
+      IF(_CURRENT_VERSION GREATER 3.1)
+          FIND_LIBRARY(PYTHON3_DEBUG_LIBRARY
+              NAMES python${_CURRENT_VERSION_NO_DOTS}d${_COMPILATION_FLAGS} python${_CURRENT_VERSION}d${_COMPILATION_FLAGS}
+            PATHS
+              [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\${_CURRENT_VERSION}\\InstallPath]/libs
+              # Avoid finding the .dll in the PATH.  We want the .lib.
+              NO_SYSTEM_ENVIRONMENT_PATH
+          )
+          # Look for the static library in the Python config directory
+          FIND_LIBRARY(PYTHON3_DEBUG_LIBRARY
+            NAMES python${_CURRENT_VERSION_NO_DOTS}d${_COMPILATION_FLAGS} python${_CURRENT_VERSION}d${_COMPILATION_FLAGS}
+            # Avoid finding the .dll in the PATH.  We want the .lib.
+            NO_SYSTEM_ENVIRONMENT_PATH
+            # This is where the static library is usually located
+            PATH_SUFFIXES python${_CURRENT_VERSION}/config
+          )
+      ENDIF()
+
+      SET(PYTHON_FRAMEWORK_INCLUDES)
+      IF(Python_FRAMEWORKS AND NOT PYTHON_INCLUDE_DIR)
+        FOREACH(dir ${Python_FRAMEWORKS})
+          SET(PYTHON_FRAMEWORK_INCLUDES ${PYTHON_FRAMEWORK_INCLUDES}
+            ${dir}/Versions/${_CURRENT_VERSION}/include/python${_CURRENT_VERSION})
+        ENDFOREACH(dir)
+      ENDIF(Python_FRAMEWORKS AND NOT PYTHON_INCLUDE_DIR)
+
+      FIND_PATH(PYTHON3_INCLUDE_DIR
+        NAMES Python.h
+        PATHS
+          ${PYTHON_FRAMEWORK_INCLUDES}
+          [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\${_CURRENT_VERSION}\\InstallPath]/include
+        PATH_SUFFIXES
+        Library/Frameworks/Python.framework/Versions/${_CURRENT_VERSION}/Headers
+          python${_CURRENT_VERSION}${_COMPILATION_FLAGS}
+      )
+
+      # For backward compatibility, set PYTHON_INCLUDE_PATH, but make it internal.
+      SET(PYTHON_INCLUDE_PATH "${PYTHON_INCLUDE_DIR}" CACHE INTERNAL
+        "Path to where Python.h is found (deprecated)")
+  ENDFOREACH(_COMPILATION_FLAGS)
+ENDFOREACH(_CURRENT_VERSION)
+
+MARK_AS_ADVANCED(
+  PYTHON3_DEBUG_LIBRARY
+  PYTHON3_LIBRARY
+  PYTHON3_INCLUDE_DIR
+)
+
+# We use PYTHON3_INCLUDE_DIR, PYTHON3_LIBRARY and PYTHON3_DEBUG_LIBRARY for the
+# cache entries because they are meant to specify the location of a single
+# library. We now set the variables listed by the documentation for this
+# module.
+SET(PYTHON3_INCLUDE_DIRS "${PYTHON3_INCLUDE_DIR}")
+SET(PYTHON3_LIBRARIES "${PYTHON3_LIBRARY}")
+SET(PYTHON3_DEBUG_LIBRARIES "${PYTHON3_DEBUG_LIBRARY}")
+
+
+INCLUDE(FindPackageHandleStandardArgs)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(Python3Libs DEFAULT_MSG PYTHON3_LIBRARIES PYTHON3_INCLUDE_DIRS)
+
+
+# PYTHON_ADD_MODULE(<name> src1 src2 ... srcN) is used to build modules for python.
+# PYTHON_WRITE_MODULES_HEADER(<filename>) writes a header file you can include
+# in your sources to initialize the static python modules
+
+GET_PROPERTY(_TARGET_SUPPORTS_SHARED_LIBS
+  GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS)
+
+FUNCTION(PYTHON3_ADD_MODULE _NAME )
+  OPTION(PYTHON3_ENABLE_MODULE_${_NAME} "Add module ${_NAME}" TRUE)
+  OPTION(PYTHON3_MODULE_${_NAME}_BUILD_SHARED
+    "Add module ${_NAME} shared" ${_TARGET_SUPPORTS_SHARED_LIBS})
+
+  # Mark these options as advanced
+  MARK_AS_ADVANCED(PYTHON3_ENABLE_MODULE_${_NAME}
+    PYTHON3_MODULE_${_NAME}_BUILD_SHARED)
+
+  IF(PYTHON3_ENABLE_MODULE_${_NAME})
+    IF(PYTHON3_MODULE_${_NAME}_BUILD_SHARED)
+      SET(PY_MODULE_TYPE MODULE)
+    ELSE(PYTHON3_MODULE_${_NAME}_BUILD_SHARED)
+      SET(PY_MODULE_TYPE STATIC)
+      SET_PROPERTY(GLOBAL  APPEND  PROPERTY  PY_STATIC_MODULES_LIST ${_NAME})
+    ENDIF(PYTHON3_MODULE_${_NAME}_BUILD_SHARED)
+
+    SET_PROPERTY(GLOBAL  APPEND  PROPERTY  PY_MODULES_LIST ${_NAME})
+    ADD_LIBRARY(${_NAME} ${PY_MODULE_TYPE} ${ARGN})
+#    TARGET_LINK_LIBRARIES(${_NAME} ${PYTHON_LIBRARIES})
+
+  ENDIF(PYTHON3_ENABLE_MODULE_${_NAME})
+ENDFUNCTION(PYTHON3_ADD_MODULE)
+
+FUNCTION(PYTHON3_WRITE_MODULES_HEADER _filename)
+
+  GET_PROPERTY(PY_STATIC_MODULES_LIST  GLOBAL  PROPERTY PY_STATIC_MODULES_LIST)
+
+  GET_FILENAME_COMPONENT(_name "${_filename}" NAME)
+  STRING(REPLACE "." "_" _name "${_name}")
+  STRING(TOUPPER ${_name} _nameUpper)
+
+  SET(_filenameTmp "${_filename}.in")
+  FILE(WRITE ${_filenameTmp} "/*Created by cmake, do not edit, changes will be lost*/\n")
+  FILE(APPEND ${_filenameTmp}
+"#ifndef ${_nameUpper}
+#define ${_nameUpper}
+
+#include <Python.h>
+
+#ifdef __cplusplus
+extern \"C\" {
+#endif /* __cplusplus */
+
+")
+
+  FOREACH(_currentModule ${PY_STATIC_MODULES_LIST})
+    FILE(APPEND ${_filenameTmp} "extern void init${PYTHON_MODULE_PREFIX}${_currentModule}(void);\n\n")
+  ENDFOREACH(_currentModule ${PY_STATIC_MODULES_LIST})
+
+  FILE(APPEND ${_filenameTmp}
+"#ifdef __cplusplus
+}
+#endif /* __cplusplus */
+
+")
+
+
+  FOREACH(_currentModule ${PY_STATIC_MODULES_LIST})
+    FILE(APPEND ${_filenameTmp} "int ${_name}_${_currentModule}(void) \n{\n  static char name[]=\"${PYTHON_MODULE_PREFIX}${_currentModule}\"; return PyImport_AppendInittab(name, init${PYTHON_MODULE_PREFIX}${_currentModule});\n}\n\n")
+  ENDFOREACH(_currentModule ${PY_STATIC_MODULES_LIST})
+
+  FILE(APPEND ${_filenameTmp} "void ${_name}_LoadAllPythonModules(void)\n{\n")
+  FOREACH(_currentModule ${PY_STATIC_MODULES_LIST})
+    FILE(APPEND ${_filenameTmp} "  ${_name}_${_currentModule}();\n")
+  ENDFOREACH(_currentModule ${PY_STATIC_MODULES_LIST})
+  FILE(APPEND ${_filenameTmp} "}\n\n")
+  FILE(APPEND ${_filenameTmp} "#ifndef EXCLUDE_LOAD_ALL_FUNCTION\nvoid CMakeLoadAllPythonModules(void)\n{\n  ${_name}_LoadAllPythonModules();\n}\n#endif\n\n#endif\n")
+
+# with CONFIGURE_FILE() cmake complains that you may not use a file created using FILE(WRITE) as input file for CONFIGURE_FILE()
+  EXECUTE_PROCESS(COMMAND ${CMAKE_COMMAND} -E copy_if_different "${_filenameTmp}" "${_filename}" OUTPUT_QUIET ERROR_QUIET)
+
+ENDFUNCTION(PYTHON3_WRITE_MODULES_HEADER)
+
diff --git a/parser/CMakeLists.txt b/parser/CMakeLists.txt
index 1058d76..81e9c98 100644
--- a/parser/CMakeLists.txt
+++ b/parser/CMakeLists.txt
@@ -13,19 +13,20 @@ set(parser_STAT_SRCS
     cythonsyntaxremover.cpp
 )

-find_package(PythonLibs 3.4 REQUIRED)
-if ( NOT ${PYTHONLIBS_FOUND} OR ${PYTHON_VERSION_MINOR} GREATER 4 )
+find_package(Python3Libs 3.4 REQUIRED)
+# TODO: figure out how to get a version indicator from FindPython3Libs before Python 3.5 becomes common...
+if ( NOT ${PYTHONLIBS3_FOUND} ) # OR ${PYTHON_VERSION_MINOR} GREATER 4 )
     message(FATAL_ERROR "Python 3.4 with --enable-shared is required to build kdev-python")
 endif()

-include_directories(kdev4pythonparser ${PYTHON_INCLUDE_DIRS})
+include_directories(kdev4pythonparser ${PYTHON3_INCLUDE_DIRS})

 kde4_add_library( kdev4pythonparser SHARED ${parser_SRCS} ${parser_STAT_SRCS} )
 target_link_libraries(kdev4pythonparser LINK_PRIVATE
     ${KDE4_KDECORE_LIBS}
     ${KDEVPLATFORM_LANGUAGE_LIBRARIES}
     ${QT_QTCORE_LIBRARY}
-    ${PYTHON_LIBRARY}
+    ${PYTHON3_LIBRARY}
 )

 add_dependencies(kdev4pythonparser parser)
