diff --git a/pythonlanguagesupport.cpp b/pythonlanguagesupport.cpp
index d8a720f..c7e40df 100644
--- a/pythonlanguagesupport.cpp
+++ b/pythonlanguagesupport.cpp
@@ -182,11 +182,23 @@ SourceFormatterItemList LanguageSupport::sourceFormatterItems() const
     autopep8.setDescription(i18n("Format source with the pep8ify formatter."));
     autopep8.setOverrideSample("class klass:\n def method(arg1,arg2):\n  a=3+5\n"
                                "def function(arg,*vararg,**kwargs): return arg+kwarg[0]\nfunction(3, 5, 7)");
+#ifdef Q_COMPILER_INITIALIZER_LISTS
     using P = SourceFormatterStyle::MimeHighlightPair;
     autopep8.setMimeTypes(SourceFormatterStyle::MimeList{ P{"text/x-python", "Python"} });
+#else
+    SourceFormatterStyle::MimeList PV;
+    PV.append({"text/x-python", "Python"});
+    autopep8.setMimeTypes(PV);
+#endif
     autopep8.setContent("/usr/bin/pep8ify -w $TMPFILE");
 
+#ifdef Q_COMPILER_INITIALIZER_LISTS
     return SourceFormatterItemList{SourceFormatterStyleItem{"customscript", autopep8}};
+#else
+    SourceFormatterItemList ret;
+    ret.append({"customscript", autopep8});
+    return ret;
+#endif
 }
 
 KDevelop::ILanguage *LanguageSupport::language()
@@ -208,7 +220,13 @@ ILanguageSupport::WhitespaceSensitivity LanguageSupport::whitespaceSensititivy()
 QList<ILanguageCheck*> LanguageSupport::providedChecks()
 {
     qDebug() << "checks requested";
+#ifdef Q_COMPILER_INITIALIZER_LISTS
     return {new BasicCheck()};
+#else
+    QList<ILanguageCheck*> ret;
+    ret.append(new BasicCheck());
+    return *ret;
+#endif
 }
 
 }
