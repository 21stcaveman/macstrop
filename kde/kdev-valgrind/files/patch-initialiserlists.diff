diff --git a/duchain/contextbuilder.cpp b/duchain/contextbuilder.cpp
index 40e344b..a86db1c 100644
--- a/duchain/contextbuilder.cpp
+++ b/duchain/contextbuilder.cpp
@@ -367,7 +369,14 @@ QPair<KUrl, QStringList> ContextBuilder::findModulePath(const QString& name, con

             // we can only parse those, so we don't care about anything else for now.
             // Any C modules (.so, .dll) will be ignored, and highlighted as "not found". TODO fix this
+#ifdef Q_COMPILER_INITIALIZER_LISTS
             static QStringList valid_extensions{".py", ".pyx"};
+#else
+            QList<QString> ext;
+            ext.append(".py");
+            ext.append(".pyx");
+            static QStringList valid_extensions(ext);
+#endif
             for(auto extension: valid_extensions) {
                 QFile sourcefile(testFilename + extension);
                 if ( ! sourcedir.exists() || ! sourcedir.isDir() || leftNameComponents.isEmpty() ) {
diff --git a/duchain/tests/pyduchaintest.cpp b/duchain/tests/pyduchaintest.cpp
index 173a5cb..65769df 100644
--- a/duchain/tests/pyduchaintest.cpp
+++ b/duchain/tests/pyduchaintest.cpp
@@ -1322,6 +1322,7 @@ void PyDUChainTest::testVariableCreation_data()
     QTest::addColumn<QStringList>("expected_types");

     QTest::newRow("simple") << "a = 3" << QStringList{"a"} << QStringList{"int"};
+#ifdef Q_COMPILER_INITIALIZER_LISTS
     QTest::newRow("tuple_wrong") << "a, b = 3" << QStringList{"a", "b"} << QStringList{"mixed", "mixed"};
     QTest::newRow("tuple_unpack_inplace") << "a, b = 3, 5.5" << QStringList{"a", "b"} << QStringList{"int", "float"};
     QTest::newRow("tuple_unpack_indirect") << "c = 3, 3.5\na, b = c" << QStringList{"a", "b"} << QStringList{"int", "float"};
@@ -1337,5 +1338,6 @@ void PyDUChainTest::testVariableCreation_data()
                                                                        << QStringList{"int", "float"};
     QTest::newRow("for_loop_stacked") << "for a, (b, c) in [(1, 2, 3.5)]: pass" << QStringList{"a", "b", "c"}
                                                                                 << QStringList{"int", "int", "float"};
+#endif
 }

diff --git a/pythonlanguagesupport.cpp b/pythonlanguagesupport.cpp
index d8a720f..b68e6ac 100644
--- a/pythonlanguagesupport.cpp
+++ b/pythonlanguagesupport.cpp
@@ -182,11 +182,23 @@ SourceFormatterItemList LanguageSupport::sourceFormatterItems() const
     autopep8.setDescription(i18n("Format source with the pep8ify formatter."));
     autopep8.setOverrideSample("class klass:\n def method(arg1,arg2):\n  a=3+5\n"
                                "def function(arg,*vararg,**kwargs): return arg+kwarg[0]\nfunction(3, 5, 7)");
+#ifdef Q_COMPILER_INITIALIZER_LISTS
     using P = SourceFormatterStyle::MimeHighlightPair;
     autopep8.setMimeTypes(SourceFormatterStyle::MimeList{ P{"text/x-python", "Python"} });
+#else
+    SourceFormatterStyle::MimeList PV;
+    PV.append({"text/x-python", "Python"});
+    autopep8.setMimeTypes(PV);
+#endif
     autopep8.setContent("/usr/bin/pep8ify -w $TMPFILE");

+#ifdef Q_COMPILER_INITIALIZER_LISTS
     return SourceFormatterItemList{SourceFormatterStyleItem{"customscript", autopep8}};
+#else
+    SourceFormatterItemList *ret = new SourceFormatterItemList;
+    ret->append({"customscript", autopep8});
+    return *ret;
+#endif
 }

 KDevelop::ILanguage *LanguageSupport::language()
@@ -208,7 +220,13 @@ ILanguageSupport::WhitespaceSensitivity LanguageSupport::whitespaceSensititivy()
 QList<ILanguageCheck*> LanguageSupport::providedChecks()
 {
     qDebug() << "checks requested";
+#ifdef Q_COMPILER_INITIALIZER_LISTS
     return {new BasicCheck()};
+#else
+    QList<ILanguageCheck*> *ret = new QList<ILanguageCheck*>;
+    ret->append(new BasicCheck());
+    return *ret;
+#endif
 }

 }
