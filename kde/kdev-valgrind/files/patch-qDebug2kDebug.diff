diff --git a/duchain/contextbuilder.cpp b/duchain/contextbuilder.cpp
index f9d11e5..57ccb88 100644
--- a/duchain/contextbuilder.cpp
+++ b/duchain/contextbuilder.cpp
@@ -64,14 +64,14 @@ ReferencedTopDUContext ContextBuilder::build(const IndexedString& url, Ast* node
         }
     }
     if (updateContext) {
-        qDebug() << " ====> DUCHAIN ====>     rebuilding duchain for" << url.str() << "(was built before)";
+        kDebug() << " ====> DUCHAIN ====>     rebuilding duchain for" << url.str() << "(was built before)";
         DUChainWriteLocker lock(DUChain::lock());
         Q_ASSERT(updateContext->type() == DUContext::Global);
         updateContext->clearImportedParentContexts();
         updateContext->parsingEnvironmentFile()->clearModificationRevisions();
         updateContext->clearProblems();
     } else {
-        qDebug() << " ====> DUCHAIN ====>     building duchain for" << url.str();
+        kDebug() << " ====> DUCHAIN ====>     building duchain for" << url.str();
     }
     return ContextBuilderBase::build(url, node, updateContext);
 }
diff --git a/parser/astbuilder.cpp b/parser/astbuilder.cpp
index 3e0fe0d..6009d9c 100644
--- a/parser/astbuilder.cpp
+++ b/parser/astbuilder.cpp
@@ -383,7 +383,7 @@ struct PythonInitializer : private QMutexLocker {
 
 CodeAst::Ptr AstBuilder::parse(KUrl filename, QString &contents)
 {
-    qDebug() << " ====> AST     ====>     building abstract syntax tree for " << filename.path();
+    kDebug() << " ====> AST     ====>     building abstract syntax tree for " << filename.path();
     
     Py_NoSiteFlag = 1;
     
@@ -411,7 +411,7 @@ CodeAst::Ptr AstBuilder::parse(KUrl filename, QString &contents)
     mod_ty syntaxtree = PyParser_ASTFromString(contents.toUtf8().data(), "<kdev-editor-contents>", file_input, &flags, arena);
 
     if ( ! syntaxtree ) {
-        qDebug() << " ====< parse error, trying to fix";
+        kDebug() << " ====< parse error, trying to fix";
         
         PyErr_Fetch(&exception, &value, &backtrace);
         kDebug() << "Error objects: " << exception << value << backtrace;
@@ -419,7 +419,7 @@ CodeAst::Ptr AstBuilder::parse(KUrl filename, QString &contents)
         
         PyObject* errorMessage_str = PyTuple_GetItem(value, 0);
         PyObject* errorDetails_tuple = PyTuple_GetItem(value, 1);
-        qDebug() << "Eventual errors while extracting tuple: ";
+        kDebug() << "Eventual errors while extracting tuple: ";
         PyObject_Print(errorMessage_str, stderr, Py_PRINT_RAW);
        
         if ( ! errorDetails_tuple ) {
diff --git a/pythonparsejob.cpp b/pythonparsejob.cpp
index 59d86de..73090c6 100644
--- a/pythonparsejob.cpp
+++ b/pythonparsejob.cpp
@@ -87,7 +87,7 @@ void ParseJob::run()
         return abortJob();
     }
     
-    qDebug() << " ====> PARSING ====> parsing file " << document().toUrl() << "; has priority" << parsePriority();
+    kDebug() << " ====> PARSING ====> parsing file " << document().toUrl() << "; has priority" << parsePriority();
     
     // lock the URL so no other parse job can run on this document
     QReadLocker parselock(languageSupport()->language()->parseLock());
@@ -103,7 +103,7 @@ void ParseJob::run()
                 continue;
             }
             if ( ! file->needsUpdate() && file->featuresSatisfied(minimumFeatures()) && file->topContext() ) {
-                qDebug() << " ====> NOOP    ====> Already up to date:" << document().str();
+                kDebug() << " ====> NOOP    ====> Already up to date:" << document().str();
                 setDuChain(file->topContext());
                 if ( ICore::self()->languageController()->backgroundParser()->trackerForUrl(document()) ) {
                     lock.unlock();
