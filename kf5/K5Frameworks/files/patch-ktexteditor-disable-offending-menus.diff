diff --git src/utils/katebookmarks.cpp src/utils/katebookmarks.cpp
index 2fcf924..04b0f5d 100644
--- src/utils/katebookmarks.cpp
+++ src/utils/katebookmarks.cpp
@@ -50,7 +50,9 @@ KateBookmarks::KateBookmarks(KTextEditor::ViewPrivate *view, Sorting sort)
     setObjectName(QLatin1String("kate bookmarks"));
     connect(view->doc(), SIGNAL(marksChanged(KTextEditor::Document*)), this, SLOT(marksChanged()));
     _tries = 0;
+#ifndef Q_OS_OSX
     m_bookmarksMenu = 0L;
+#endif
 }
 
 KateBookmarks::~KateBookmarks()
@@ -85,11 +87,13 @@ void KateBookmarks::createActions(KActionCollection *ac)
     m_goPrevious->setWhatsThis(i18n("Go to the previous bookmark."));
     connect(m_goPrevious, SIGNAL(triggered()), this, SLOT(goPrevious()));
 
+#ifndef Q_OS_OSX
     KActionMenu *actionMenu = new KActionMenu(i18n("&Bookmarks"), this);
     ac->addAction(QLatin1String("bookmarks"), actionMenu);
     m_bookmarksMenu = actionMenu->menu();
 
     connect(m_bookmarksMenu, SIGNAL(aboutToShow()), this, SLOT(bookmarkMenuAboutToShow()));
+#endif
 
     marksChanged();
 
@@ -236,6 +240,7 @@ void KateBookmarks::gotoLine(int line)
 
 void KateBookmarks::bookmarkMenuAboutToShow()
 {
+#ifndef Q_OS_OSX
     m_bookmarksMenu->clear();
     m_bookmarkToggle->setChecked(m_view->doc()->mark(m_view->cursorPosition().line())
                                  & KTextEditor::MarkInterface::markType01);
@@ -246,6 +251,7 @@ void KateBookmarks::bookmarkMenuAboutToShow()
     m_goPrevious->setText(i18n("Previous Bookmark"));
 
     insertBookmarks(*m_bookmarksMenu);
+#endif
 }
 
 void KateBookmarks::goNext()
diff --git src/utils/katebookmarks.h src/utils/katebookmarks.h
index 040fb31..591da18 100644
--- src/utils/katebookmarks.h
+++ src/utils/katebookmarks.h
@@ -75,7 +75,9 @@ private:
     QAction                     *m_goPrevious;
 
     Sorting                      m_sorting;
+#ifndef Q_OS_OSX
     QMenu                       *m_bookmarksMenu;
+#endif
 
     uint _tries;
 };
diff --git src/view/kateview.cpp src/view/kateview.cpp
index 7e828fe..de14d7d 100644
--- src/view/kateview.cpp
+++ src/view/kateview.cpp
@@ -476,8 +476,10 @@ void KTextEditor::ViewPrivate::setupActions()
     m_copy = a = ac->addAction(KStandardAction::Copy, this, SLOT(copy()));
     a->setWhatsThis(i18n("Use this command to copy the currently selected text to the system clipboard."));
 
+#ifndef Q_OS_OSX
     m_pasteMenu = ac->addAction(QLatin1String("edit_paste_menu"), new KatePasteMenu(i18n("Clipboard &History"), this));
     connect(KTextEditor::EditorPrivate::self(), SIGNAL(clipboardHistoryChanged()), this, SLOT(slotClipboardHistoryChanged()));
+#endif
 
     if (!m_doc->readOnly()) {
         a = ac->addAction(KStandardAction::Save, m_doc, SLOT(documentSave()));
@@ -579,7 +581,9 @@ void KTextEditor::ViewPrivate::setupActions()
     } else {
         m_cut->setEnabled(false);
         m_paste->setEnabled(false);
+#ifndef Q_OS_OSX
         m_pasteMenu->setEnabled(false);
+#endif
         m_editUndo = 0;
         m_editRedo = 0;
     }
@@ -1404,7 +1408,9 @@ void KTextEditor::ViewPrivate::slotReadWriteChanged()
 
     m_cut->setEnabled(m_doc->isReadWrite() && (selection() || m_config->smartCopyCut()));
     m_paste->setEnabled(m_doc->isReadWrite());
+#ifndef Q_OS_OSX
     m_pasteMenu->setEnabled(m_doc->isReadWrite() && !KTextEditor::EditorPrivate::self()->clipboardHistory().isEmpty());
+#endif
     m_setEndOfLine->setEnabled(m_doc->isReadWrite());
 
     QStringList l;
@@ -1443,7 +1449,9 @@ void KTextEditor::ViewPrivate::slotReadWriteChanged()
 
 void KTextEditor::ViewPrivate::slotClipboardHistoryChanged()
 {
+#ifndef Q_OS_OSX
     m_pasteMenu->setEnabled(m_doc->isReadWrite() && !KTextEditor::EditorPrivate::self()->clipboardHistory().isEmpty());
+#endif
 }
 
 void KTextEditor::ViewPrivate::slotUpdateUndo()
diff --git src/view/kateview.h src/view/kateview.h
index 08db0df..6eedb25 100644
--- src/view/kateview.h
+++ src/view/kateview.h
@@ -622,7 +622,9 @@ private:
     QList<QAction *>        m_editActions;
     QAction               *m_editUndo;
     QAction               *m_editRedo;
+#ifndef Q_OS_OSX
     QAction               *m_pasteMenu;
+#endif
     KToggleAction         *m_toggleFoldingMarkers;
     KToggleAction         *m_toggleIconBar;
     KToggleAction         *m_toggleLineNumbers;
