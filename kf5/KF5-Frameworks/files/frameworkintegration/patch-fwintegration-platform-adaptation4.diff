diff --git src/platformtheme/CMakeLists.txt src/platformtheme/CMakeLists.txt
index 23f590e..0b9bec7 100644
--- src/platformtheme/CMakeLists.txt
+++ src/platformtheme/CMakeLists.txt
@@ -28,8 +28,19 @@ set(platformtheme_SRCS
     kdeplatformsystemtrayicon.cpp
     kfiletreeview.cpp
     kdirselectdialog.cpp
-    main.cpp
 )
+if(APPLE)
+    set(platformtheme_SRCS ${platformtheme_SRCS}
+        kdemactheme.mm
+        kfontsettingsdatamac.mm
+        khintssettingsmac.mm
+        main_mac.cpp
+    )
+else()
+    set(platformtheme_SRCS ${platformtheme_SRCS}
+        main.cpp
+    )
+endif()
 
 include_directories(
     ${Qt5Gui_PRIVATE_INCLUDE_DIRS}
@@ -54,6 +65,9 @@ target_link_libraries(KDEPlatformTheme
 if(HAVE_X11)
   target_link_libraries(KDEPlatformTheme PRIVATE Qt5::X11Extras XCB::XCB ${X11_Xcursor_LIB})
 endif()
+if(APPLE)
+  target_link_libraries(KDEPlatformTheme PRIVATE "-framework AppKit")
+endif()
 
 install(TARGETS KDEPlatformTheme DESTINATION ${KDE_INSTALL_QTPLUGINDIR}/platformthemes)
 
diff --git src/platformtheme/kdemactheme.h src/platformtheme/kdemactheme.h
new file mode 100644
index 0000000..9d3e7ad
--- /dev/null
+++ src/platformtheme/kdemactheme.h
@@ -0,0 +1,65 @@
+/*  This file is part of the KDE libraries
+ *  Copyright 2013 Kevin Ottens <ervin+bluesystems@kde.org>
+ *  Copyright 2015 René J.V. Bertin <rjvbertin@gmail.com>
+ *
+ *  This library is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU Lesser General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License or ( at
+ *  your option ) version 3 or, at the discretion of KDE e.V. ( which shall
+ *  act as a proxy as in section 14 of the GPLv3 ), any later version.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Library General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public License
+ *  along with this library; see the file COPYING.LIB.  If not, write to
+ *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ *  Boston, MA 02110-1301, USA.
+ */
+
+#ifndef KDEMACTHEME_H
+#define KDEMACTHEME_H
+
+#include "kdeplatformtheme.h"
+#include "kfontsettingsdatamac.h"
+
+class KHintsSettingsMac;
+class QIconEngine;
+
+class KdeMacTheme : public KdePlatformTheme
+{
+public:
+    KdeMacTheme();
+    ~KdeMacTheme();
+
+    // KdeMacTheme must provide platform menu methods or else there will be no menus
+    QPlatformMenuItem* createPlatformMenuItem() const Q_DECL_OVERRIDE;
+    QPlatformMenu* createPlatformMenu() const Q_DECL_OVERRIDE;
+    QPlatformMenuBar* createPlatformMenuBar() const Q_DECL_OVERRIDE;
+
+    QVariant themeHint(ThemeHint hint) const Q_DECL_OVERRIDE;
+    const QPalette *palette(Palette type = SystemPalette) const Q_DECL_OVERRIDE;
+    const QFont *font(Font type) const Q_DECL_OVERRIDE;
+    QList<QKeySequence> keyBindings(QKeySequence::StandardKey key) const Q_DECL_OVERRIDE;
+
+    QPlatformDialogHelper *createPlatformDialogHelper(DialogType type) const Q_DECL_OVERRIDE;
+    bool usePlatformNativeDialog(DialogType type) const Q_DECL_OVERRIDE;
+
+    QString standardButtonText(int button) const Q_DECL_OVERRIDE;
+
+    QPlatformSystemTrayIcon *createPlatformSystemTrayIcon() const Q_DECL_OVERRIDE;
+
+protected:
+    void loadSettings();
+    KFontSettingsDataMac::FontTypes fontType(Font type) const;
+
+private:
+    KHintsSettingsMac *m_hints;
+    KFontSettingsDataMac *m_fontsData;
+    // this will hold the instance of the native theme that will be used as a fallback
+    QPlatformTheme *nativeTheme;
+};
+
+#endif // KDEMACTHEME_H
diff --git src/platformtheme/kdemactheme.mm src/platformtheme/kdemactheme.mm
new file mode 100644
index 0000000..b2cddf8
--- /dev/null
+++ src/platformtheme/kdemactheme.mm
@@ -0,0 +1,274 @@
+/*  This file is part of the KDE libraries
+ *  Copyright 2013 Kevin Ottens <ervin+bluesystems@kde.org>
+ *  Copyright 2013 Aleix Pol Gonzalez <aleixpol@blue-systems.com>
+ *  Copyright 2014 Lukáš Tinkl <ltinkl@redhat.com>
+ *  Copyright 2015 René J.V. Bertin <rjvbertin@gmail.com>
+ *
+ *  This library is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU Lesser General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License or ( at
+ *  your option ) version 3 or, at the discretion of KDE e.V. ( which shall
+ *  act as a proxy as in section 14 of the GPLv3 ), any later version.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Library General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public License
+ *  along with this library; see the file COPYING.LIB.  If not, write to
+ *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ *  Boston, MA 02110-1301, USA.
+ */
+
+#include "kdemactheme.h"
+#include "kfontsettingsdatamac.h"
+#include "khintssettingsmac.h"
+#include "kdeplatformfiledialoghelper.h"
+#include "kdeplatformsystemtrayicon.h"
+
+#include <QCoreApplication>
+#include <QMessageBox>
+#include <QFont>
+#include <QPalette>
+#include <QString>
+#include <QStringList>
+#include <QVariant>
+#include <QDebug>
+
+// instantiating the natice platform theme requires the use of private APIs
+#include <QtGui/private/qguiapplication_p.h>
+#include <QtGui/qpa/qplatformintegration.h>
+
+
+#include <kiconengine.h>
+#include <kiconloader.h>
+#include <kstandardshortcut.h>
+#include <KStandardGuiItem>
+#include <KLocalizedString>
+
+#include <AppKit/AppKit.h>
+
+static void warnNoNativeTheme()
+{
+    const char *msg = "The KdePlatformThemePlugin is being used and the native Cocoa theme failed to load.\n"
+                    "Applications will function but lack functionality available only through the native theme,\n"
+                    "including the menu bar at the top of the screen(s).";
+    // Make sure the warning appears somewhere. qWarning() isn't guaranteed to be recorded when we're
+    // not called from a terminal session.
+    NSLog(@"%s", msg);
+}
+
+KdeMacTheme::KdeMacTheme()
+{
+    if (strcasecmp(QT_VERSION_STR, qVersion())) {
+        NSLog(@"Warning: the KDE Platform Plugin for Mac was built against Qt %s but is running with Qt %s!",
+            QT_VERSION_STR, qVersion());
+    }
+    QPlatformIntegration *pi = QGuiApplicationPrivate::platformIntegration();
+    if (pi) {
+        nativeTheme = pi->createPlatformTheme(QString::fromLatin1("cocoa"));
+    } else {
+        nativeTheme = Q_NULLPTR;
+    }
+    if (!nativeTheme) {
+        warnNoNativeTheme();
+    }
+    m_fontsData = Q_NULLPTR;
+    m_hints = Q_NULLPTR;
+    loadSettings();
+}
+
+KdeMacTheme::~KdeMacTheme()
+{
+//     delete m_fontsData;
+//     delete m_hints;
+    delete nativeTheme;
+}
+
+QPlatformMenuItem* KdeMacTheme::createPlatformMenuItem() const
+{
+    if (nativeTheme) {
+        return nativeTheme->createPlatformMenuItem();
+    } else {
+        warnNoNativeTheme();
+        return QPlatformTheme::createPlatformMenuItem();
+    }
+}
+
+QPlatformMenu* KdeMacTheme::createPlatformMenu() const
+{
+    if (nativeTheme) {
+        return nativeTheme->createPlatformMenu();
+    } else {
+        warnNoNativeTheme();
+        return QPlatformTheme::createPlatformMenu();
+    }
+}
+
+QPlatformMenuBar* KdeMacTheme::createPlatformMenuBar() const
+{
+    if (nativeTheme) {
+        return nativeTheme->createPlatformMenuBar();
+    } else {
+        warnNoNativeTheme();
+        return QPlatformTheme::createPlatformMenuBar();
+    }
+}
+
+QVariant KdeMacTheme::themeHint(QPlatformTheme::ThemeHint hintType) const
+{
+    QVariant hint = m_hints->hint(hintType);
+    if (hint.isValid()) {
+        return hint;
+    } else {
+        if (nativeTheme) {
+            return nativeTheme->themeHint(hintType);
+        }
+        return QPlatformTheme::themeHint(hintType);
+    }
+}
+
+const QPalette *KdeMacTheme::palette(Palette type) const
+{
+    QPalette *palette = m_hints->palette(type);
+    if (palette) {
+        return palette;
+    } else {
+        if (nativeTheme) {
+            return nativeTheme->palette(type);
+        }
+        return QPlatformTheme::palette(type);
+    }
+}
+
+KFontSettingsDataMac::FontTypes KdeMacTheme::fontType(QPlatformTheme::Font type) const
+{
+    KFontSettingsDataMac::FontTypes ftype;
+    switch (type) {
+        default:
+            ftype = KFontSettingsDataMac::FontTypes(KdePlatformTheme::fontType(type));
+            break;
+        case MessageBoxFont:
+            ftype = KFontSettingsDataMac::MessageBoxFont;
+            break;
+    }
+    return ftype;
+}
+
+const QFont *KdeMacTheme::font(Font type) const
+{
+    // when using the platform-default fonts, try returning a bold version of the 
+    // standard system font; it's the only one where Qt/OS X really deviates.
+    return m_fontsData->font(fontType(type));
+}
+
+void KdeMacTheme::loadSettings()
+{
+    if (!m_fontsData) {
+        m_fontsData = new KFontSettingsDataMac;
+        m_hints = new KHintsSettingsMac;
+    }
+}
+
+QList<QKeySequence> KdeMacTheme::keyBindings(QKeySequence::StandardKey key) const
+{
+    // return a native keybinding if we can determine what that is
+    if (nativeTheme) {
+        return nativeTheme->keyBindings(key);
+    }
+    // or else we return whatever KDE applications expect elsewhere
+    return KdePlatformTheme::keyBindings(key);
+}
+
+bool KdeMacTheme::usePlatformNativeDialog(QPlatformTheme::DialogType type) const
+{
+    if (nativeTheme) {
+        return nativeTheme->usePlatformNativeDialog(type);
+    }
+    return type == QPlatformTheme::FileDialog;
+}
+
+QString KdeMacTheme::standardButtonText(int button) const
+{
+    // assume that button text is a domain where cross-platform application
+    // coherence primes over native platform look and feel. IOW, function over form.
+    // It's impossible to use the parent's method since we use
+    // the nativeTheme in the default case
+    switch (static_cast<QPlatformDialogHelper::StandardButton>(button)) {
+    case QPlatformDialogHelper::NoButton:
+        qWarning() << Q_FUNC_INFO << "Unsupported standard button:" << button;
+        return QString();
+    case QPlatformDialogHelper::Ok:
+        return KStandardGuiItem::ok().text();
+    case QPlatformDialogHelper::Save:
+        return KStandardGuiItem::save().text();
+    case QPlatformDialogHelper::SaveAll:
+        return i18nc("@action:button", "Save All");
+    case QPlatformDialogHelper::Open:
+        return KStandardGuiItem::open().text();
+    case QPlatformDialogHelper::Yes:
+        return KStandardGuiItem::yes().text();
+    case QPlatformDialogHelper::YesToAll:
+        return i18nc("@action:button", "Yes to All");
+    case QPlatformDialogHelper::No:
+        return KStandardGuiItem::no().text();
+    case QPlatformDialogHelper::NoToAll:
+        return i18nc("@action:button", "No to All");
+    case QPlatformDialogHelper::Abort:
+        // FIXME KStandardGuiItem::stop() doesn't seem right here
+        return i18nc("@action:button", "Abort");
+    case QPlatformDialogHelper::Retry:
+        return i18nc("@action:button", "Retry");
+    case QPlatformDialogHelper::Ignore:
+        return i18nc("@action:button", "Ignore");
+    case QPlatformDialogHelper::Close:
+        return KStandardGuiItem::close().text();
+    case QPlatformDialogHelper::Cancel:
+        return KStandardGuiItem::cancel().text();
+    case QPlatformDialogHelper::Discard:
+        return KStandardGuiItem::discard().text();
+    case QPlatformDialogHelper::Help:
+        return KStandardGuiItem::help().text();
+    case QPlatformDialogHelper::Apply:
+        return KStandardGuiItem::apply().text();
+    case QPlatformDialogHelper::Reset:
+        return KStandardGuiItem::reset().text();
+    case QPlatformDialogHelper::RestoreDefaults:
+        return KStandardGuiItem::defaults().text();
+    default:
+        if (nativeTheme) {
+            // something not foreseen by Qt/KDE: now see if OS X
+            // has an opinion about the text.
+            return nativeTheme->standardButtonText(button);
+        }
+        return QPlatformTheme::defaultStandardButtonText(button);
+    }
+}
+
+QPlatformDialogHelper *KdeMacTheme::createPlatformDialogHelper(QPlatformTheme::DialogType type) const
+{
+    // always prefer native dialogs
+    // NOTE: somehow, the "don't use native dialog" option that Qt's example "standarddialogs"
+    // provides does not modify our usePlatformNativeDialog() return value, but *does* cause
+    // a Qt dialog to be created instead of the native one. Weird.
+    if (nativeTheme) {
+        return nativeTheme->createPlatformDialogHelper(type);
+    }
+    QPlatformDialogHelper *helper = KdePlatformTheme::createPlatformDialogHelper(type);
+    if (helper) {
+        return helper;
+    } else {
+        return QPlatformTheme::createPlatformDialogHelper(type);
+    }
+}
+
+QPlatformSystemTrayIcon *KdeMacTheme::createPlatformSystemTrayIcon() const
+{
+    if (nativeTheme) {
+        return nativeTheme->createPlatformSystemTrayIcon();
+    }
+    // TODO: figure out if it makes sense to return something other than 
+    // nativeTheme->createPlatformSystemTrayIcon() or even NULL
+    return KdePlatformTheme::createPlatformSystemTrayIcon();
+}
diff --git src/platformtheme/kdeplatformtheme.cpp src/platformtheme/kdeplatformtheme.cpp
index 80dbcb7..c3bf771 100644
--- src/platformtheme/kdeplatformtheme.cpp
+++ src/platformtheme/kdeplatformtheme.cpp
@@ -42,6 +42,8 @@
 
 KdePlatformTheme::KdePlatformTheme()
 {
+    m_fontsData = Q_NULLPTR;
+    m_hints = Q_NULLPTR;
     loadSettings();
 }
 
@@ -71,7 +73,7 @@ const QPalette *KdePlatformTheme::palette(Palette type) const
     }
 }
 
-const QFont *KdePlatformTheme::font(Font type) const
+KFontSettingsData::FontTypes KdePlatformTheme::fontType(Font type) const
 {
     KFontSettingsData::FontTypes fdtype;
     switch (type) {
@@ -107,7 +109,12 @@ const QFont *KdePlatformTheme::font(Font type) const
         fdtype = KFontSettingsData::GeneralFont; break;
     }
 
-    return m_fontsData->font(fdtype);
+    return fdtype;
+}
+
+const QFont *KdePlatformTheme::font(Font type) const
+{
+    return m_fontsData->font(fontType(type));
 }
 
 QIconEngine *KdePlatformTheme::createIconEngine(const QString &iconName) const
@@ -117,8 +124,10 @@ QIconEngine *KdePlatformTheme::createIconEngine(const QString &iconName) const
 
 void KdePlatformTheme::loadSettings()
 {
-    m_fontsData = new KFontSettingsData;
-    m_hints = new KHintsSettings;
+    if (!m_fontsData) {
+        m_fontsData = new KFontSettingsData;
+        m_hints = new KHintsSettings;
+    }
 }
 
 QList<QKeySequence> KdePlatformTheme::keyBindings(QKeySequence::StandardKey key) const
diff --git src/platformtheme/kdeplatformtheme.h src/platformtheme/kdeplatformtheme.h
index 97d09df..ee21043 100644
--- src/platformtheme/kdeplatformtheme.h
+++ src/platformtheme/kdeplatformtheme.h
@@ -22,13 +22,13 @@
 #define KDEPLATFORMTHEME_H
 
 #include <qpa/qplatformtheme.h>
+#include "kfontsettingsdata.h"
 
 #include <QHash>
 #include <QObject>
 #include <QKeySequence>
 
 class KHintsSettings;
-class KFontSettingsData;
 class QIconEngine;
 
 class KdePlatformTheme : public QPlatformTheme
@@ -52,9 +52,11 @@ public:
 
     QPlatformSystemTrayIcon *createPlatformSystemTrayIcon() const Q_DECL_OVERRIDE;
 
-private:
+protected:
     void loadSettings();
+    KFontSettingsData::FontTypes fontType(Font type) const;
 
+private:
     KHintsSettings *m_hints;
     KFontSettingsData *m_fontsData;
 };
diff --git src/platformtheme/kfontsettingsdata.cpp src/platformtheme/kfontsettingsdata.cpp
index b0a4bbf..0a884d7 100644
--- src/platformtheme/kfontsettingsdata.cpp
+++ src/platformtheme/kfontsettingsdata.cpp
@@ -61,6 +61,14 @@ static const KFontData DefaultFontData[KFontSettingsData::FontTypesCount] = {
     { GeneralId, "smallestReadableFont", DefaultFont,  8, -1, QFont::SansSerif }
 };
 
+KSharedConfigPtr &KFontSettingsData::kdeGlobals()
+{
+    if (!mKdeGlobals) {
+        mKdeGlobals = KSharedConfig::openConfig(QStringLiteral("kdeglobals"), KConfig::NoGlobals);
+    }
+    return mKdeGlobals;
+}
+
 QFont *KFontSettingsData::font(FontTypes fontType)
 {
     QFont *cachedFont = mFonts[fontType];
@@ -70,10 +78,7 @@ QFont *KFontSettingsData::font(FontTypes fontType)
         cachedFont = new QFont(fontData.FontName, fontData.Size, fontData.Weight);
         cachedFont->setStyleHint(fontData.StyleHint);
 
-        if (!mKdeGlobals) {
-            mKdeGlobals = KSharedConfig::openConfig(QStringLiteral("kdeglobals"), KConfig::NoGlobals);
-        }
-        const KConfigGroup configGroup(mKdeGlobals, fontData.ConfigGroupKey);
+        const KConfigGroup configGroup(kdeGlobals(), fontData.ConfigGroupKey);
         QString fontInfo = configGroup.readEntry(fontData.ConfigKey, QString());
 
         //If we have serialized information for this font, restore it
diff --git src/platformtheme/kfontsettingsdata.h src/platformtheme/kfontsettingsdata.h
index 4b92c7d..4c14f54 100644
--- src/platformtheme/kfontsettingsdata.h
+++ src/platformtheme/kfontsettingsdata.h
@@ -57,12 +57,15 @@ public:
 public Q_SLOTS:
     void dropFontSettingsCache();
 
-private Q_SLOTS:
+protected Q_SLOTS:
     void delayedDBusConnects();
 
 public: // access, is not const due to caching
     QFont *font(FontTypes fontType);
 
+protected:
+    KSharedConfigPtr &kdeGlobals();
+
 private:
     QFont *mFonts[FontTypesCount];
     KSharedConfigPtr mKdeGlobals;
diff --git src/platformtheme/kfontsettingsdatamac.h src/platformtheme/kfontsettingsdatamac.h
new file mode 100644
index 0000000..ee99919
--- /dev/null
+++ src/platformtheme/kfontsettingsdatamac.h
@@ -0,0 +1,59 @@
+/* This file is part of the KDE libraries
+   Copyright (C) 2000, 2006 David Faure <faure@kde.org>
+   Copyright 2008 Friedrich W. H. Kossebau <kossebau@kde.org>
+   Copyright 2013 Aleix Pol Gonzalez <aleixpol@blue-systems.com>
+   Copyright 2015 René J.V. Bertin <rjvbertin@gmail.com>
+
+   This library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Library General Public
+   License version 2 as published by the Free Software Foundation.
+
+   This library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Library General Public License for more details.
+
+   You should have received a copy of the GNU Library General Public License
+   along with this library; see the file COPYING.LIB.  If not, write to
+   the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+   Boston, MA 02110-1301, USA.
+*/
+
+#ifndef KFONTSETTINGSDATAMAC_H
+#define KFONTSETTINGSDATAMAC_H
+
+#include "kfontsettingsdata.h"
+
+class KFontSettingsDataMac : public KFontSettingsData
+{
+    Q_OBJECT
+public:
+    // if adding a new type here also add an entry to DefaultFontData
+    enum FontTypes {
+        GeneralFont = 0,
+        FixedFont,
+        ToolbarFont,
+        MenuFont,
+        WindowTitleFont,
+        TaskbarFont,
+        SmallestReadableFont,
+        MessageBoxFont,
+        FontTypesCount
+    };
+
+    KFontSettingsDataMac();
+    ~KFontSettingsDataMac();
+
+public Q_SLOTS:
+    void dropFontSettingsCache();
+
+protected Q_SLOTS:
+    void delayedDBusConnects();
+
+public:
+    QFont *font(FontTypes fontType);
+private:
+    QFont *mFonts[FontTypesCount];
+};
+
+#endif // KFONTSETTINGSDATAMAC_H
diff --git src/platformtheme/kfontsettingsdatamac.mm src/platformtheme/kfontsettingsdatamac.mm
new file mode 100644
index 0000000..e728a40
--- /dev/null
+++ src/platformtheme/kfontsettingsdatamac.mm
@@ -0,0 +1,210 @@
+/* This file is part of the KDE libraries
+   Copyright (C) 2000, 2006 David Faure <faure@kde.org>
+   Copyright 2008 Friedrich W. H. Kossebau <kossebau@kde.org>
+   Copyright 2013 Aleix Pol Gonzalez <aleixpol@blue-systems.com>
+   Copyright 2015 René J.V. Bertin <rjvbertin@gmail.com>
+
+   This library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Library General Public
+   License version 2 as published by the Free Software Foundation.
+
+   This library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Library General Public License for more details.
+
+   You should have received a copy of the GNU Library General Public License
+   along with this library; see the file COPYING.LIB.  If not, write to
+   the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+   Boston, MA 02110-1301, USA.
+*/
+
+#include "kfontsettingsdatamac.h"
+
+#include <QDebug>
+#include <QCoreApplication>
+#include <QFontDatabase>
+#include <QFont>
+#include <QString>
+#include <QVariant>
+#include <QApplication>
+#include <QDBusMessage>
+#include <QDBusConnection>
+#include <qpa/qwindowsysteminterface.h>
+
+#include <ksharedconfig.h>
+#include <kconfiggroup.h>
+
+// NOTE: keep in sync with plasma-desktop/kcms/fonts/fonts.cpp
+static const char GeneralId[] =      "General";
+// NOTE: the default system font changed with OS X 10.11, from Lucida Grande to
+// San Francisco. With luck this will be caught by QFontDatabase::GeneralFont
+static const char DefaultFont[] =    "Lucida Grande";
+static char *LocalDefaultFont = NULL;
+
+/* Default fonts on OS X <= 10.9 :
+    System: Lucida Grande 13pt
+    System headlines: <System>,Bold
+    Application: Helvetica 12pt
+    Fixed width: Monaco 10pt
+    Messages: <system>
+    Labels: <system>,11pt
+    Help tags: <system>,11pt
+    Window title bars: <system>
+    Utility window title bars: <system>,11pt
+    --- Dumped from the native QPlatformTheme::themeFont() function:
+    (themeFont QPlatformTheme::Font : CoreText font role)
+    themeFont 0 : 2 = ".Lucida Grande UI" style "Regular" NSFont weight@12pt= 5 QFont= ".Lucida Grande UI,13,-1,5,50,0,0,0,0,0"
+    themeFont 1 : 12 = ".Lucida Grande UI" style "Regular" NSFont weight@12pt= 5 QFont= ".Lucida Grande UI,14,-1,5,50,0,0,0,0,0"
+    themeFont 2 : 12 = ".Lucida Grande UI" style "Regular" NSFont weight@12pt= 5 QFont= ".Lucida Grande UI,14,-1,5,50,0,0,0,0,0"
+    themeFont 3 : 12 = ".Lucida Grande UI" style "Regular" NSFont weight@12pt= 5 QFont= ".Lucida Grande UI,14,-1,5,50,0,0,0,0,0"
+    themeFont 4 : 3 = ".Lucida Grande UI" style "Bold" NSFont weight@12pt= 9 QFont= ".Lucida Grande UI,13,-1,5,75,0,0,0,0,0"
+    themeFont 5 : 2 = ".Lucida Grande UI" style "Regular" NSFont weight@12pt= 5 QFont= ".Lucida Grande UI,13,-1,5,50,0,0,0,0,0"
+    themeFont 6 : 25 = ".Lucida Grande UI" style "Regular" NSFont weight@12pt= 5 QFont= ".Lucida Grande UI,11,-1,5,50,0,0,0,0,0"
+    themeFont 7 : 2 = ".Lucida Grande UI" style "Regular" NSFont weight@12pt= 5 QFont= ".Lucida Grande UI,13,-1,5,50,0,0,0,0,0"
+    themeFont 8 : 15 = ".Lucida Grande UI" style "Regular" NSFont weight@12pt= 5 QFont= ".Lucida Grande UI,13,-1,5,50,0,0,0,0,0"
+    themeFont 9 : 2 = ".Lucida Grande UI" style "Regular" NSFont weight@12pt= 5 QFont= ".Lucida Grande UI,13,-1,5,50,0,0,0,0,0"
+    themeFont 10 : 2 = ".Lucida Grande UI" style "Regular" NSFont weight@12pt= 5 QFont= ".Lucida Grande UI,13,-1,5,50,0,0,0,0,0"
+    themeFont 11 : 16 = ".Lucida Grande UI" style "Regular" NSFont weight@12pt= 5 QFont= ".Lucida Grande UI,13,-1,5,50,0,0,0,0,0"
+    themeFont 12 : 2 = ".Lucida Grande UI" style "Regular" NSFont weight@12pt= 5 QFont= ".Lucida Grande UI,13,-1,5,50,0,0,0,0,0"
+    themeFont 13 : 2 = ".Lucida Grande UI" style "Regular" NSFont weight@12pt= 5 QFont= ".Lucida Grande UI,13,-1,5,50,0,0,0,0,0"
+    themeFont 14 : 22 = ".Lucida Grande UI" style "Regular" NSFont weight@12pt= 5 QFont= ".Lucida Grande UI,10,-1,5,50,0,0,0,0,0"
+    themeFont 15 : 2 = ".Lucida Grande UI" style "Regular" NSFont weight@12pt= 5 QFont= ".Lucida Grande UI,13,-1,5,50,0,0,0,0,0"
+    themeFont 16 : 8 = ".Lucida Grande UI" style "Regular" NSFont weight@12pt= 5 QFont= ".Lucida Grande UI,12,-1,5,50,0,0,0,0,0"
+    themeFont 17 : 4 = ".Lucida Grande UI" style "Regular" NSFont weight@12pt= 5 QFont= ".Lucida Grande UI,11,-1,5,50,0,0,0,0,0"
+    themeFont 18 : 8 = ".Lucida Grande UI" style "Regular" NSFont weight@12pt= 5 QFont= ".Lucida Grande UI,12,-1,5,50,0,0,0,0,0"
+    themeFont 19 : 2 = ".Lucida Grande UI" style "Regular" NSFont weight@12pt= 5 QFont= ".Lucida Grande UI,13,-1,5,50,0,0,0,0,0"
+    themeFont 20 : 8 = ".Lucida Grande UI" style "Regular" NSFont weight@12pt= 5 QFont= ".Lucida Grande UI,12,-1,5,50,0,0,0,0,0"
+    themeFont 21 : 4 = ".Lucida Grande UI" style "Regular" NSFont weight@12pt= 5 QFont= ".Lucida Grande UI,11,-1,5,50,0,0,0,0,0"
+    themeFont 22 : 6 = ".Lucida Grande UI" style "Regular" NSFont weight@12pt= 5 QFont= ".Lucida Grande UI,9,-1,5,50,0,0,0,0,0"
+    themeFont 23 : 1 = "Monaco" style "Regular" NSFont weight@12pt= 5 QFont= "Monaco,10,-1,5,50,0,0,0,0,0"
+ */
+
+static KFontData DefaultFontData[KFontSettingsDataMac::FontTypesCount] = {
+    // Note: we use 
+    { GeneralId, "font",                 DefaultFont,  12, -1, QFont::SansSerif },
+    { GeneralId, "fixed",                "Monaco",     10, -1, QFont::Monospace },
+    { GeneralId, "toolBarFont",          DefaultFont,  11, -1, QFont::SansSerif },
+    { GeneralId, "menuFont",             DefaultFont,  14, -1, QFont::SansSerif },
+    { "WM",      "activeFont",           DefaultFont,  13, -1, QFont::SansSerif },
+    { GeneralId, "taskbarFont",          DefaultFont,   9, -1, QFont::SansSerif },
+    { GeneralId, "smallestReadableFont", DefaultFont,   9, -1, QFont::SansSerif },
+    // this one is to accomodate for the MessageBoxFont which should be bold on OS X
+    // when using the native theme fonts.
+    { GeneralId, "messageBoxFont",       DefaultFont,  13, QFont::Bold, QFont::SansSerif }
+};
+
+static const char *fontNameFor(QFontDatabase::SystemFont role)
+{
+    QFont qf = QFontDatabase::systemFont(role);
+    const char *fn = qf.defaultFamily().toLocal8Bit().constData();
+    if (role == QFontDatabase::FixedFont && !qf.fixedPitch()) {
+        fn = "Monaco";
+    }
+    if (strcmp(fn, ".Lucida Grande UI") == 0) {
+        return "Lucida Grande";
+    } else {
+        return fn;
+    }
+}
+
+KFontSettingsDataMac::KFontSettingsDataMac()
+{
+    QMetaObject::invokeMethod(this, "delayedDBusConnects", Qt::QueuedConnection);
+    if (!LocalDefaultFont) {
+        LocalDefaultFont = strdup(fontNameFor(QFontDatabase::GeneralFont));
+    }
+    for (int i = 0 ; i < KFontSettingsDataMac::FontTypesCount ; ++i) {
+        const char *fn;
+        switch(i) {
+            case FixedFont:
+                fn = strdup(fontNameFor(QFontDatabase::FixedFont));
+                break;
+            case WindowTitleFont:
+                fn = strdup(fontNameFor(QFontDatabase::TitleFont));
+                break;
+            case SmallestReadableFont:
+                fn = strdup(fontNameFor(QFontDatabase::SmallestReadableFont));
+                break;
+            default:
+                fn = LocalDefaultFont;
+                break;
+        }
+        DefaultFontData[i].FontName = fn;
+    }
+    for (int i = 0; i < FontTypesCount; ++i) {
+        // remove any information that already have been cached by our parent
+        // IFF we don't have our own mFonts copy
+        // delete mFonts[i];
+        mFonts[i] = 0;
+    }
+}
+
+KFontSettingsDataMac::~KFontSettingsDataMac()
+{
+    for (int i = 0 ; i < KFontSettingsDataMac::FontTypesCount ; ++i) {
+        if (DefaultFontData[i].FontName != DefaultFont) {
+            if (DefaultFontData[i].FontName != LocalDefaultFont) {
+                delete DefaultFontData[i].FontName;
+            }
+            DefaultFontData[i].FontName = DefaultFont;
+        }
+    }
+    delete LocalDefaultFont;
+    LocalDefaultFont = NULL;
+}
+
+QFont *KFontSettingsDataMac::font(FontTypes fontType)
+{
+    QFont *cachedFont = mFonts[fontType];
+
+    if (!cachedFont) {
+        const KConfigGroup configGroup(kdeGlobals(), DefaultFontData[fontType].ConfigGroupKey);
+        QString fontInfo;
+        bool forceBold = false;
+
+        if (fontType == MessageBoxFont) {
+            // OS X special: the MessageBoxFont is by default a bold version of the GeneralFont
+            // and that's what is cached in DefaultFontData[MessageBoxFont].
+            // NB: we can use a single configGroup for this hack as long as MessageBoxFont and
+            // GeneralFont share the same ConfigGroupKey (or MessageBoxFont cannot be configured).
+            fontInfo = configGroup.readEntry(DefaultFontData[GeneralFont].ConfigKey, QString());
+            if (!fontInfo.isEmpty()) {
+                // However, if the user has configured a GeneralFont (MessageBoxFont cannot be configured),
+                // we respect his/her choice but maintain the bold aspect dictated by the platform.
+                fontType = GeneralFont;
+                forceBold = true;
+            }
+        }
+
+        const KFontData &fontData = DefaultFontData[fontType];
+
+        cachedFont = new QFont(fontData.FontName, fontData.Size, forceBold? QFont::Bold : fontData.Weight);
+        cachedFont->setStyleHint(fontData.StyleHint);
+
+        fontInfo = configGroup.readEntry(fontData.ConfigKey, QString());
+
+        if (!fontInfo.isEmpty()) {
+            cachedFont->fromString(fontInfo);
+        }
+
+        mFonts[fontType] = cachedFont;
+    }
+
+    return cachedFont;
+}
+
+void KFontSettingsDataMac::dropFontSettingsCache()
+{
+    if (qobject_cast<QApplication *>(QCoreApplication::instance())) {
+        QApplication::setFont(*font(KFontSettingsDataMac::GeneralFont));
+    } else {
+        QGuiApplication::setFont(*font(KFontSettingsDataMac::GeneralFont));
+    }
+}
+
+void KFontSettingsDataMac::delayedDBusConnects()
+{
+    QDBusConnection::sessionBus().connect(QString(), QStringLiteral("/KDEPlatformTheme"), QStringLiteral("org.kde.KDEPlatformTheme"),
+                                          QStringLiteral("refreshFonts"), this, SLOT(dropFontSettingsCache()));
+}
diff --git src/platformtheme/khintssettings.cpp src/platformtheme/khintssettings.cpp
index 8adf6c5..bd30bbb 100644
--- src/platformtheme/khintssettings.cpp
+++ src/platformtheme/khintssettings.cpp
@@ -55,9 +55,17 @@
 
 static const QString defaultLookAndFeelPackage = QStringLiteral("org.kde.breeze.desktop");
 
+KSharedConfigPtr &KHintsSettings::kdeGlobals()
+{
+    if (!mKdeGlobals) {
+        mKdeGlobals = KSharedConfig::openConfig(QStringLiteral("kdeglobals"), KConfig::NoGlobals);
+    }
+    return mKdeGlobals;
+}
+
 KHintsSettings::KHintsSettings() : QObject(0)
 {
-    mKdeGlobals = KSharedConfig::openConfig(QStringLiteral("kdeglobals"), KConfig::NoGlobals);
+    kdeGlobals();
     KConfigGroup cg(mKdeGlobals, "KDE");
 
     // try to extract the proper defaults file from a lookandfeel package
diff --git src/platformtheme/khintssettings.h src/platformtheme/khintssettings.h
index ec064d3..a04a8a2 100644
--- src/platformtheme/khintssettings.h
+++ src/platformtheme/khintssettings.h
@@ -64,13 +64,14 @@ public:
         return m_palettes[type];
     }
 
-private Q_SLOTS:
+protected Q_SLOTS:
     void delayedDBusConnects();
     void setupIconLoader();
     void toolbarStyleChanged();
     void slotNotifyChange(int type, int arg);
 
-private:
+protected:
+    KSharedConfigPtr &kdeGlobals();
     QVariant readConfigValue(const QString &group, const QString &key, const QVariant &defaultValue);
     void loadPalettes();
     void iconChanged(int group);
@@ -79,6 +80,17 @@ private:
     void updateCursorTheme();
 
     QStringList xdgIconThemePaths() const;
+
+    inline QHash<QPlatformTheme::Palette, QPalette *> &palettes()
+    {
+        return m_palettes;
+    }
+    inline QHash<QPlatformTheme::ThemeHint, QVariant> &hints()
+    {
+        return m_hints;
+    }
+
+private:
     QHash<QPlatformTheme::Palette, QPalette *> m_palettes;
     QHash<QPlatformTheme::ThemeHint, QVariant> m_hints;
     KSharedConfigPtr mKdeGlobals;
diff --git src/platformtheme/khintssettingsmac.h src/platformtheme/khintssettingsmac.h
new file mode 100644
index 0000000..7c3c87e
--- /dev/null
+++ src/platformtheme/khintssettingsmac.h
@@ -0,0 +1,50 @@
+/*  This file is part of the KDE libraries
+ *  Copyright 2013 Alejandro Fiestas Olivares <afiestas@kde.org>
+ *  Copyright 2015 René J.V. Bertin <rjvbertin@gmail.com
+ *
+ *  This library is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU Lesser General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License or ( at
+ *  your option ) version 3 or, at the discretion of KDE e.V. ( which shall
+ *  act as a proxy as in section 14 of the GPLv3 ), any later version.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Library General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public License
+ *  along with this library; see the file COPYING.LIB.  If not, write to
+ *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ *  Boston, MA 02110-1301, USA.
+ */
+
+#ifndef KHINTS_SETTINGS_MAC_H
+#define KHINTS_SETTINGS_MAC_H
+
+#include "khintssettings.h"
+
+class KConfigGroup;
+
+class QPalette;
+class KHintsSettingsMac : public KHintsSettings
+{
+    Q_OBJECT
+public:
+    explicit KHintsSettingsMac();
+    virtual ~KHintsSettingsMac();
+
+protected Q_SLOTS:
+    void delayedDBusConnects();
+    void slotNotifyChange(int type, int arg);
+
+protected:
+    void loadPalettes();
+    void iconChanged(int group);
+    Qt::ToolButtonStyle toolButtonStyle(const KConfigGroup &cg) const;
+    void updateCursorTheme();
+
+    QStringList xdgIconThemePaths() const;
+};
+
+#endif //KHINTS_SETTINGS_MAC_H
diff --git src/platformtheme/khintssettingsmac.mm src/platformtheme/khintssettingsmac.mm
new file mode 100644
index 0000000..370ed77
--- /dev/null
+++ src/platformtheme/khintssettingsmac.mm
@@ -0,0 +1,229 @@
+/*  This file is part of the KDE libraries
+ *  Copyright 2013 Kevin Ottens <ervin+bluesystems@kde.org>
+ *  Copyright 2013 Aleix Pol Gonzalez <aleixpol@blue-systems.com>
+ *  Copyright 2013 Alejandro Fiestas Olivares <afiestas@kde.org>
+ *  Copyright 2015 René J.V. Bertin <rjvbertin@gmail.com
+ *
+ *  This library is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU Lesser General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License or ( at
+ *  your option ) version 3 or, at the discretion of KDE e.V. ( which shall
+ *  act as a proxy as in section 14 of the GPLv3 ), any later version.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Library General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public License
+ *  along with this library; see the file COPYING.LIB.  If not, write to
+ *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ *  Boston, MA 02110-1301, USA.
+ */
+
+#include "khintssettingsmac.h"
+
+#include <QDebug>
+#include <QDir>
+#include <QString>
+#include <QFileInfo>
+#include <QToolBar>
+#include <QPalette>
+#include <QToolButton>
+#include <QMainWindow>
+#include <QApplication>
+#include <QGuiApplication>
+#include <QDialogButtonBox>
+#include <QScreen>
+
+#include <QDBusConnection>
+#include <QDBusInterface>
+
+#include <kiconloader.h>
+#include <kconfiggroup.h>
+#include <ksharedconfig.h>
+#include <kcolorscheme.h>
+
+#ifndef UNIT_TEST
+#include <config-platformtheme.h>
+#endif
+
+KHintsSettingsMac::KHintsSettingsMac()
+{
+    KSharedConfigPtr mKdeGlobals = kdeGlobals();
+
+    KConfigGroup cg(mKdeGlobals, "KDE");
+    // we're overriding whatever the parent class configured
+    hints().clear();
+    KConfigGroup cgToolbar(mKdeGlobals, "Toolbar style");
+    hints()[QPlatformTheme::ToolButtonStyle] = toolButtonStyle(cgToolbar);
+
+    KConfigGroup cgToolbarIcon(mKdeGlobals, "MainToolbarIcons");
+    hints()[QPlatformTheme::ToolBarIconSize] = cgToolbarIcon.readEntry("Size", 22);
+
+    hints()[QPlatformTheme::ItemViewActivateItemOnSingleClick] = cg.readEntry("SingleClick", true);
+
+    // The new default Breeze icon theme is svg based and looks more out of place than the older Oxygen theme
+    // which is PNG-based, and thus easier to use with/in the Finder.
+    hints()[QPlatformTheme::SystemIconThemeName] = readConfigValue(QStringLiteral("Icons"), QStringLiteral("Theme"), "oxygen");
+
+    hints()[QPlatformTheme::IconThemeSearchPaths] = xdgIconThemePaths();
+
+    QStringList styleNames;
+    styleNames << cg.readEntry("widgetStyle", QString())
+               << QStringLiteral("macintosh")
+               << QStringLiteral("fusion")
+               << QStringLiteral("windows");
+    const QString lnfStyle = readConfigValue(QStringLiteral("KDE"), QStringLiteral("widgetStyle"), QString()).toString();
+    if (!lnfStyle.isEmpty()) {
+        styleNames.removeOne(lnfStyle);
+        styleNames.prepend(lnfStyle);
+    }
+    hints()[QPlatformTheme::StyleNames] = styleNames;
+
+    hints()[QPlatformTheme::DialogButtonBoxLayout] = QDialogButtonBox::MacLayout;
+    hints()[QPlatformTheme::DialogButtonBoxButtonsHaveIcons] = cg.readEntry("ShowIconsOnPushButtons", false);
+    hints()[QPlatformTheme::UseFullScreenForPopupMenu] = true;
+    hints()[QPlatformTheme::KeyboardScheme] = QPlatformTheme::MacKeyboardScheme;
+    hints()[QPlatformTheme::UiEffects] = cg.readEntry("GraphicEffectsLevel", 0) != 0 ? QPlatformTheme::GeneralUiEffect : 0;
+// this would be what we should return for IconPixmapSizes if we wanted to copy the system defaults
+//     qreal devicePixelRatio = qGuiApp->devicePixelRatio();
+//     QList<int> sizes;
+//     sizes << 16 * devicePixelRatio
+//           << 32 * devicePixelRatio
+//           << 64 * devicePixelRatio
+//           << 128 * devicePixelRatio;
+//     hints()[QPlatformTheme::IconPixmapSizes] = QVariant::fromValue(sizes);
+
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 5, 0))
+    hints()[QPlatformTheme::WheelScrollLines] = cg.readEntry("WheelScrollLines", 3);
+#endif
+    if (qobject_cast<QApplication *>(QCoreApplication::instance())) {
+        QApplication::setWheelScrollLines(cg.readEntry("WheelScrollLines", 3));
+    }
+
+    bool showIcons = cg.readEntry("ShowIconsInMenuItems", !QApplication::testAttribute(Qt::AA_DontShowIconsInMenus));
+    QCoreApplication::setAttribute(Qt::AA_DontShowIconsInMenus, !showIcons);
+
+    QMetaObject::invokeMethod(this, "delayedDBusConnects", Qt::QueuedConnection);
+
+    loadPalettes();
+}
+
+KHintsSettingsMac::~KHintsSettingsMac()
+{
+}
+
+// adapted from QGenericUnixTheme::xdgIconThemePaths()
+QStringList KHintsSettingsMac::xdgIconThemePaths() const
+{
+    QStringList paths;
+    // Add home directory first in search path
+    const QFileInfo homeIconDir(QDir::homePath() + QStringLiteral("/.icons"));
+    if (homeIconDir.isDir()) {
+        paths.prepend(homeIconDir.absoluteFilePath());
+    }
+
+    QStringList xdgDirs = QStandardPaths::standardLocations(QStandardPaths::GenericDataLocation);
+    if (xdgDirs.isEmpty()) {
+        xdgDirs << "/opt/local/share"
+            << "/usr/local/share"
+            << "/usr/share";
+    }
+    foreach (const QString &xdgDir, xdgDirs) {
+        const QFileInfo xdgIconsDir(xdgDir + QStringLiteral("/icons"));
+        if (xdgIconsDir.isDir()) {
+            paths.append(xdgIconsDir.absoluteFilePath());
+        }
+        const QFileInfo pixmapsIconsDir(xdgDir + QStringLiteral("/pixmaps"));
+        if (pixmapsIconsDir.isDir()) {
+            paths.append(pixmapsIconsDir.absoluteFilePath());
+        }
+    }
+    return paths;
+}
+
+void KHintsSettingsMac::delayedDBusConnects()
+{
+    QDBusConnection::sessionBus().connect(QString(), QStringLiteral("/KToolBar"), QStringLiteral("org.kde.KToolBar"),
+                                          QStringLiteral("styleChanged"), this, SLOT(toolbarStyleChanged()));
+    QDBusConnection::sessionBus().connect(QString(), QStringLiteral("/KGlobalSettings"), QStringLiteral("org.kde.KGlobalSettings"),
+                                          QStringLiteral("notifyChange"), this, SLOT(slotNotifyChange(int,int)));
+}
+
+void KHintsSettingsMac::slotNotifyChange(int type, int arg)
+{
+    KHintsSettings::slotNotifyChange(type,arg);
+    KSharedConfigPtr mKdeGlobals = kdeGlobals();
+    KConfigGroup cg(mKdeGlobals, "KDE");
+
+    switch (type) {
+    case SettingsChanged: {
+
+        SettingsCategory category = static_cast<SettingsCategory>(arg);
+        if (category == SETTINGS_STYLE) {
+            hints()[QPlatformTheme::DialogButtonBoxButtonsHaveIcons] = cg.readEntry("ShowIconsOnPushButtons", false);
+        }
+        break;
+    }
+    case StyleChanged: {
+        QApplication *app = qobject_cast<QApplication *>(QCoreApplication::instance());
+        if (!app) {
+            return;
+        }
+
+        const QString theme = cg.readEntry("widgetStyle", QString());
+        if (theme.isEmpty()) {
+            return;
+        }
+
+        QStringList styleNames;
+        styleNames << cg.readEntry("widgetStyle", QString())
+                << QStringLiteral("macintosh")
+                << QStringLiteral("fusion")
+                << QStringLiteral("windows");
+        const QString lnfStyle = readConfigValue(QStringLiteral("KDE"), QStringLiteral("widgetStyle"), QString()).toString();
+        if (!lnfStyle.isEmpty() && !styleNames.contains(lnfStyle)) {
+            styleNames.prepend(lnfStyle);
+        }
+        hints()[QPlatformTheme::StyleNames] = styleNames;
+        break;
+    }
+    }
+}
+
+void KHintsSettingsMac::iconChanged(int group)
+{
+    KIconLoader::Group iconGroup = (KIconLoader::Group) group;
+    if (iconGroup != KIconLoader::MainToolbar) {
+        hints()[QPlatformTheme::SystemIconThemeName] = readConfigValue(QStringLiteral("Icons"), QStringLiteral("Theme"), "oxygen");
+        return;
+    }
+    return KHintsSettings::iconChanged(group);
+}
+
+Qt::ToolButtonStyle KHintsSettingsMac::toolButtonStyle(const KConfigGroup &cg) const
+{
+    const QString buttonStyle = cg.readEntry("ToolButtonStyle", "TextUnderIcon").toLower();
+    return buttonStyle == QLatin1String("textbesideicon") ? Qt::ToolButtonTextBesideIcon
+           : buttonStyle == QLatin1String("icontextright") ? Qt::ToolButtonTextBesideIcon
+           : buttonStyle == QLatin1String("textundericon") ? Qt::ToolButtonTextUnderIcon
+           : buttonStyle == QLatin1String("icontextbottom") ? Qt::ToolButtonTextUnderIcon
+           : buttonStyle == QLatin1String("textonly") ? Qt::ToolButtonTextOnly
+           : Qt::ToolButtonIconOnly;
+}
+
+void KHintsSettingsMac::loadPalettes()
+{
+    qDeleteAll(palettes());
+    palettes().clear();
+
+    KSharedConfigPtr mKdeGlobals = kdeGlobals();
+    if (mKdeGlobals->hasGroup("Colors:View")) {
+        palettes()[QPlatformTheme::SystemPalette] = new QPalette(KColorScheme::createApplicationPalette(mKdeGlobals));
+    }
+}
+
+void KHintsSettingsMac::updateCursorTheme()
+{
+}
diff --git src/platformtheme/main_mac.cpp src/platformtheme/main_mac.cpp
new file mode 100644
index 0000000..2141cd5
--- /dev/null
+++ src/platformtheme/main_mac.cpp
@@ -0,0 +1,44 @@
+/*  This file is part of the KDE libraries
+ *  Copyright 2013 Kevin Ottens <ervin+bluesystems@kde.org>
+ *  Copyright 2015 René J.V. Bertin <rjvbertin@gmail.com>
+ *
+ *  This library is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU Lesser General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License or ( at
+ *  your option ) version 3 or, at the discretion of KDE e.V. ( which shall
+ *  act as a proxy as in section 14 of the GPLv3 ), any later version.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Library General Public License for more details.
+ *
+ *  You should have received a copy of the GNU Lesser General Public License
+ *  along with this library; see the file COPYING.LIB.  If not, write to
+ *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ *  Boston, MA 02110-1301, USA.
+ */
+
+#include <qpa/qplatformthemeplugin.h>
+
+#include "kdemactheme.h"
+
+#include <config-platformtheme.h>
+
+class KdePlatformThemePlugin : public QPlatformThemePlugin
+{
+    Q_OBJECT
+    Q_PLUGIN_METADATA(IID "org.qt-project.Qt.QPA.QPlatformThemeFactoryInterface.5.1" FILE "kdeplatformtheme.json")
+public:
+    KdePlatformThemePlugin(QObject *parent = Q_NULLPTR)
+        : QPlatformThemePlugin(parent) {}
+
+    QPlatformTheme *create(const QString &key, const QStringList &paramList) Q_DECL_OVERRIDE
+    {
+        Q_UNUSED(key)
+        Q_UNUSED(paramList)
+        return new KdeMacTheme;
+    }
+};
+
+#include "main_mac.moc"
