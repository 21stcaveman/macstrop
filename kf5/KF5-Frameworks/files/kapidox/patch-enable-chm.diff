diff --git src/kapidox/argparserutils.py src/kapidox/argparserutils.py
index 9a8e271f95d475088589785a41fc10c4ec166b55..88093d89b76a98b4b9adfb7bd9691bd7a3c41e06 100644
--- src/kapidox/argparserutils.py
+++ src/kapidox/argparserutils.py
@@ -78,6 +78,8 @@ def add_output_group(parser):
             help='Generate man page documentation.')
     group.add_argument('--qhp', action='store_true',
             help='Generate Qt Compressed Help documentation.')
+    group.add_argument('--chm', action='store_true', default=False,
+            help='Generate Compressed HTML Help (chm) documentation.')
     return group
 
 
@@ -103,6 +105,8 @@ def add_paths_group(parser):
             help='(Path to) the doxygen executable.')
     group.add_argument('--qhelpgenerator', default='qhelpgenerator',
             help='(Path to) the qhelpgenerator executable.')
+    group.add_argument('--chmcompiler', default='',
+            help='(Path to) the HTML help (chm) compiler executable.')
     return group
 
 
diff --git src/kapidox/generator.py src/kapidox/generator.py
index 3346a47429a4f1d1b0f86b0b938c5a1b49921192..82b4000657632922a3187a8137fbf2a91a922e99 100644
--- src/kapidox/generator.py
+++ src/kapidox/generator.py
@@ -105,9 +105,11 @@ class Context(object):
         # Output options
         'man_pages',
         'qhp',
+        'chm',
         # Binaries
         'doxygen',
         'qhelpgenerator',
+        'chmcompiler',
     )
 
     def __init__(self, args, **kwargs):
@@ -118,9 +120,11 @@ class Context(object):
         # Output options
         self.man_pages = args.man_pages
         self.qhp = args.qhp
+        self.chm = args.chm
         # Binaries
         self.doxygen = args.doxygen
         self.qhelpgenerator = args.qhelpgenerator
+        self.chmcompiler = args.chmcompiler
 
         for key in self.__slots__:
             if not hasattr(self, key):
@@ -585,6 +589,13 @@ def generate_apidocs(ctx, tmp_dir, doxyfile_entries=None, keep_temp_dirs=False):
         writer.write_entries(
                 GENERATE_MAN=ctx.man_pages,
                 GENERATE_QHP=ctx.qhp)
+        if ctx.chmcompiler != '' and ctx.chm:
+            writer.write_entries(
+                GENERATE_HTMLHELP="YES",
+                GENERATE_CHI="NO",
+                HHC_LOCATION=ctx.chmcompiler,
+                CHM_FILE=ctx.fancyname + ".chm",
+                SEARCHENGINE="NO")
 
         if doxyfile_entries:
             writer.write_entries(**doxyfile_entries)
@@ -743,6 +754,7 @@ def finish_fw_apidocs(ctx, group_menu):
     copyright = '1996-' + str(datetime.date.today().year) + ' The KDE developers'
     mapping = {
             'qch': ctx.qhp,
+            'chm': ctx.chm,
             'doxygencss': 'doxygen.css',
             'resources': ctx.resourcedir,
             'title': ctx.title,
@@ -779,25 +791,28 @@ def indexer(lib):
     """
 
     doclist = []
-    tree = xmlET.parse(lib.outputdir + '/searchdata.xml')
-    for doc_child in tree.getroot():
-        field = {}
-        for child in doc_child:
-            if child.attrib['name'] == "type":
-                if child.text == 'source':
-                    field = None
-                    break; # We go to next <doc>
-                field['type'] = child.text
-            elif child.attrib['name'] == "name":
-                field['name'] = child.text
-            elif child.attrib['name'] == "url":
-                field['url'] = child.text
-            elif child.attrib['name'] == "keywords":
-                field['keyword'] = child.text
-            elif child.attrib['name'] == "text":
-                field['text'] = "" if child.text is None else child.text
-        if field is not None:
-            doclist.append(field)
+    try:
+        tree = xmlET.parse(lib.outputdir + '/searchdata.xml')
+        for doc_child in tree.getroot():
+            field = {}
+            for child in doc_child:
+                if child.attrib['name'] == "type":
+                    if child.text == 'source':
+                        field = None
+                        break; # We go to next <doc>
+                    field['type'] = child.text
+                elif child.attrib['name'] == "name":
+                    field['name'] = child.text
+                elif child.attrib['name'] == "url":
+                    field['url'] = child.text
+                elif child.attrib['name'] == "keywords":
+                    field['keyword'] = child.text
+                elif child.attrib['name'] == "text":
+                    field['text'] = "" if child.text is None else child.text
+            if field is not None:
+                doclist.append(field)
+    except:
+        pass
 
     indexdic = {
         'name': lib.name,
