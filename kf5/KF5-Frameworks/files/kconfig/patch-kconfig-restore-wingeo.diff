diff --git src/gui/kwindowconfig.cpp src/gui/kwindowconfig.cpp
index d2f355c..2cdf801 100644
--- src/gui/kwindowconfig.cpp
+++ src/gui/kwindowconfig.cpp
@@ -1,6 +1,7 @@
 /*
    This file is part of the KDE libraries
    Copyright (c) 2012 Benjamin Port <benjamin.port@ben2367.fr>
+   Copyright (c) 2015,18 René J.V. Bertin <rjvbertin@gmail.com>
 
    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
@@ -24,6 +25,155 @@
 #include <QScreen>
 #include <QWindow>
 
+#if defined(Q_OS_WIN) || defined(Q_OS_MACOS)
+
+#include <QGuiApplication>
+#include <QDebug>
+
+class GeometryData
+{
+public:
+    // create an instance and initialise it with geometry data from the given window
+    GeometryData(const QWindow *window)
+    {
+        geometryData.clear();
+        if (window) {
+            QDataStream geoDStream(&geometryData, QIODevice::WriteOnly);
+            geoDStream << magicTag
+                    << window->frameGeometry()
+                    << window->geometry()
+                    << quint8(window->windowState());
+        }
+        associatedWindow = window;
+    }
+    // create an instance from already encoded geometry data. As a convenience,
+    // this constructor attempts to determine if the entry QByteArray
+    // is encoded in Base64, and if so, decode it automatically.
+    GeometryData(const QByteArray &data)
+    {
+        if (data.size() > 4) {
+            geometryData = data;
+            quint32 magic;
+            bool ok = false;
+            while (geometryData.size() > 0 && !ok) {
+                QDataStream dstream(geometryData);
+                dstream >> magic;
+                if (magic == magicTag) {
+                    ok = true;
+                } else if(geometryData == data) {
+                    geometryData = QByteArray::fromBase64(data);
+                } else {
+                    geometryData.clear();
+                    qDebug() << Q_FUNC_INFO << "magic=" << magic << "invalid data; dstream=" << dstream;
+                }
+            }
+        } else {
+            geometryData.clear();
+        }
+        associatedWindow = 0;
+    }
+
+    QByteArray data()
+    {
+        return geometryData;
+    }
+
+    bool applyToWindow(QWindow *window)
+    {
+        bool ret = false;
+        if (window && geometryData.size() > 4) {
+            QDataStream geoDStream(geometryData);
+            QRect frameGeo,
+                winGeo;
+            quint32 magic;
+            quint8 winState;
+            geoDStream >> magic
+                    >> frameGeo
+                    >> winGeo
+                    >> winState;
+            if (frameGeo.isValid() && winGeo.isValid()) {
+                // there can be interplay between window position and size; at least on OS X
+                // the window server can apply a different size as a result of window position,
+                // or it could refuse to move the window to its exact position.
+                // Therefore, first move the window to its intended position, then resize it,
+                // and ultimately set the position once more (hoping it will be a noop).
+                // If needed, further inspiration can be obtained from the QWidget::restoreGeometry code.
+                window->setFramePosition(frameGeo.topLeft());
+                window->resize(winGeo.size());
+                window->setFramePosition(frameGeo.topLeft());
+                if (winState) {
+                    window->setWindowState(Qt::WindowState(winState));
+                }
+                associatedWindow = window;
+                ret = true;
+            }
+        }
+        return ret;
+    }
+private:
+    QByteArray geometryData;
+    // a pointer to the source of the data, or the window to which
+    // the data have last been applied.
+    const QWindow *associatedWindow;
+    static const quint32 magicTag;
+};
+const quint32 GeometryData::magicTag = 0xDADACAFE;
+
+void KWindowConfig::saveWindowSize(const QWindow *window, KConfigGroup &config, KConfigGroup::WriteConfigFlags options)
+{
+    // QWindow::screen() shouldn't return null, but it sometimes does due to bugs.
+    if (!window || !window->screen()) {
+        return;
+    }
+    if (!(window->windowState() & Qt::WindowMaximized)) {
+#ifdef Q_OS_WIN
+        const QRect desk = window->screen()->geometry();
+        // geometry is saved separately for each resolution
+        QString geometryKey = QStringLiteral("geometry-%1-%2").arg(desk.width()).arg(desk.height());
+#else
+        // geometry is saved separately for each supported/used platform, and specific to
+        // $DISPLAY under X11.
+        const auto platformName = QGuiApplication::platformName();
+        QString geometryKey = QStringLiteral("geometry-") + platformName;
+        if (platformName == QStringLiteral("xcb")) {
+            geometryKey += QStringLiteral("-") + QLatin1String(getenv("DISPLAY"));
+        }
+#endif
+        config.writeEntry(geometryKey, GeometryData(window).data().toBase64(), options );
+    }
+}
+
+void KWindowConfig::restoreWindowSize(QWindow *window, const KConfigGroup &config)
+{
+    if (!window) {
+        return;
+    }
+
+    const QRect desk = window->screen()->geometry();
+#ifdef Q_OS_WIN
+    const QString geometryKey = QStringLiteral("geometry-%1-%2").arg(desk.width()).arg(desk.height());
+    const QByteArray geometryValue = config.readEntry(geometryKey, QByteArray());
+#else
+    const auto platformName = QGuiApplication::platformName();
+    const QString geometryKey = QStringLiteral("geometry-") + platformName;
+    QByteArray geometryValue;
+    if (platformName == QStringLiteral("xcb")) {
+        QString geometryPrefKey = geometryKey + QStringLiteral("-") + QLatin1String(getenv("DISPLAY"));
+        geometryValue = config.readEntry(geometryPrefKey, QByteArray());
+    }
+    if (geometryValue.isEmpty()) {
+        geometryValue = config.readEntry(geometryKey, QByteArray());
+    }
+#endif
+    if (!GeometryData::GeometryData(geometryValue).applyToWindow(window)) {
+        // if first time run, centre the window
+        window->setFramePosition(QPoint((desk.width() - window->frameGeometry().width()) / 2,
+                                      (desk.height() - window->frameGeometry().height()) / 2));
+    }
+}
+
+#else
+
 static const char s_initialSizePropertyName[] = "_kconfig_initial_size";
 static const char s_initialScreenSizePropertyName[] = "_kconfig_initial_screen_size";
 
@@ -85,3 +235,5 @@ void KWindowConfig::restoreWindowSize(QWindow *window, const KConfigGroup &confi
         window->setWindowState(Qt::WindowMaximized);
     }
 }
+
+#endif
diff --git src/gui/kwindowconfig.h src/gui/kwindowconfig.h
index 48a8f3c..027e852 100644
--- src/gui/kwindowconfig.h
+++ src/gui/kwindowconfig.h
@@ -1,6 +1,7 @@
 /*
    This file is part of the KDE libraries
    Copyright (c) 2012 Benjamin Port <benjamin.port@ben2367.fr>
+   Copyright (c) 2015,18 René J.V. Bertin <rjvbertin@gmail.com>
 
    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
@@ -34,7 +35,8 @@ namespace KWindowConfig
 {
 /**
  * Saves the window's size dependent on the screen dimension either to the
- * global or application config file.
+ * global or application config file. On MS Windows and Mac OS X this also
+ * saves the window position as users will expect that on those platforms.
  *
  * @note the group must be set before calling
  *
@@ -47,7 +49,8 @@ KCONFIGGUI_EXPORT void saveWindowSize(const QWindow *window, KConfigGroup &confi
 
 /**
  * Restores the dialog's size from the configuration according to
- * the screen size.
+ * the screen size. On MS Windows and Mac OS X this also restores
+ * the dialog position as users will expect that on those platforms.
  *
  * If you're calling this from a constructor (for a mainwindow or dialog, for instance)
  * you should first call winId() so that a QWindow is created, then you can call windowHandle()
