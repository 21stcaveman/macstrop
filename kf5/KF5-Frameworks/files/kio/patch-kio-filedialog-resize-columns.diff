KIO: make file dialog columns resizable again

File dialog detailed view columns were made fixed-size in commit #e504bc1fd56412ee7e9748a0dfafa537977ec1b5, leading to bug 401506.

This patch restores the interactive mode users expect in detailed file list views but preserves the "ideal" column sizing.

Qt doesn't allow combining modes (`QHeaderView::Stretch|QHeaderView::Interactive`) so a bit of a ruse is required to activate interactive mode after the definitive sizes have been set. This patch achieves that as follows:

1 A slot is connected to `QHeaderView::sectionResized` when a Polish event is received, and state member variables are initialised.
2 The handler (slot) stores new, positive sizes for individual columns (sections) under condition that the QTreeView contains entries. No attempt i made to change the QHeaderView settings directly from here. All this happens before the widget will be drawn (evidently(?)).
3 The state information is checked just before the widget is to be drawn (when the 1st Paint event is received); if sizing information is available the corresponding columns are resized to their respective stored sizes explicitly, and the entire QHeaderView is set to interactive resize mode.

In my testing the first paint event always comes after the final column sizes have been determined, and it is not too late to change resize mode here.

Currently the handler slot from 1) is a lambda insteead of a member function. A member function could be disconnected once the required information is obtained and acted upon but handler overhead is negligible and file dialogs are typically not long-lived.

Possible and welcome future development: save and restore user-defined column sizes. The resize handler would have to remain in place for that (and track new sizes signalled when resizeMode==Interactive).

BUG: 401506

==========================

diff --git src/filewidgets/kdiroperatordetailview.cpp src/filewidgets/kdiroperatordetailview.cpp
index fa8094f8e19a9323184ce124e1582ad394586cba..d96c150673975ee2eb6df9da66e4be82cba9dcb8 100644
--- src/filewidgets/kdiroperatordetailview.cpp
+++ src/filewidgets/kdiroperatordetailview.cpp
@@ -19,7 +19,6 @@
 #include "kdiroperatordetailview_p.h"
 
 #include <kdirlister.h>
-#include <kdirmodel.h>
 #include <QDebug>
 
 #include <QEvent>
@@ -32,6 +31,84 @@
 #include <QResizeEvent>
 #include <QScrollBar>
 
+class KDirHeaderView : public QHeaderView
+{
+    Q_OBJECT
+public:
+    explicit KDirHeaderView(KDirOperatorDetailView *view, Qt::Orientation orientation, QWidget *parent = nullptr)
+        : QHeaderView(orientation, parent),
+        q(view),
+        m_minimalNameColumnWidth(-1),
+        m_setInteractiveResizeMode(false),
+        m_checkMinimalNameColumnWidth(false)
+    {
+        for (int i = 0 ; i < KDirModel::ColumnCount ; ++i) {
+            m_currentColumnWidth[i] = -1;
+        }
+        auto pw = view->parentWidget();
+        for (int pn = 0; pw && pn < 3; ++pn) {
+            pw = pw->parentWidget();
+        }
+        m_isFileWidget = pw ? strcmp(pw->metaObject()->className(), "KFileWidget") == 0 : false;
+    }
+
+    void resetWidthTracking(bool all)
+    {
+        m_setInteractiveResizeMode = false;
+        m_checkMinimalNameColumnWidth = true;
+        if (all) {
+            for (int i = 0 ; i < KDirModel::ColumnCount ; ++i) {
+                m_currentColumnWidth[i] = -1;
+            }
+            m_minimalNameColumnWidth = -1;
+        }
+    }
+
+    void setMinimumNameColumnWidth()
+    {
+        if (m_minimalNameColumnWidth < 0) {
+            m_minimalNameColumnWidth = sectionSize(2) * 1.33 + 0.5;
+        }
+    }
+
+    virtual QSize sectionSizeFromContents(int logicalIndex) const
+    {
+        auto size = QHeaderView::sectionSizeFromContents(logicalIndex);
+        if (logicalIndex == 0 && size.width() < m_minimalNameColumnWidth) {
+            size.setWidth(m_minimalNameColumnWidth);
+        }
+        return size;
+    }
+
+    void sectionResizeHandler(int column, int, int newSize)
+    {
+        if (newSize > 0 && model()->rowCount() > 0) {
+            if (column == 0 && newSize < m_minimalNameColumnWidth) {
+                resizeSection(0, m_minimalNameColumnWidth);
+            } else {
+                // store the new width; note that we may be called multiple times
+                // for columns in Stretch mode, with increasingly accurate sizes.
+                m_currentColumnWidth[column] = newSize;
+            }
+            // for some reason making a selective ResizeMode setting here 
+            // has no effect; we need to set interactive mode on all sections
+            // at a later stage. Queue that now, and don't touch any
+            // section settings directly.
+            m_setInteractiveResizeMode = true;
+            // also set this flag here because we may be called even if the
+            // user isn't resizing the parent widget.
+            m_checkMinimalNameColumnWidth = true;
+        }
+    }
+
+    KDirOperatorDetailView* q;
+    int m_currentColumnWidth[KDirModel::ColumnCount];
+    int m_minimalNameColumnWidth;
+    bool m_setInteractiveResizeMode;
+    bool m_checkMinimalNameColumnWidth;
+    bool m_isFileWidget;
+};
+
 KDirOperatorDetailView::KDirOperatorDetailView(QWidget *parent) :
     QTreeView(parent),
     m_hideDetailColumns(false)
@@ -44,6 +121,8 @@ KDirOperatorDetailView::KDirOperatorDetailView(QWidget *parent) :
     setEditTriggers(QAbstractItemView::NoEditTriggers);
     setVerticalScrollMode(QListView::ScrollPerPixel);
     setHorizontalScrollMode(QListView::ScrollPerPixel);
+    const auto currentHeader = header();
+    setHeader(new KDirHeaderView(this, currentHeader->orientation(), currentHeader->parentWidget()));
 }
 
 KDirOperatorDetailView::~KDirOperatorDetailView()
@@ -85,27 +164,91 @@ bool KDirOperatorDetailView::setViewMode(KFile::FileView viewMode)
 
 bool KDirOperatorDetailView::event(QEvent *event)
 {
-    if (event->type() == QEvent::Polish) {
-        QHeaderView *headerView = header();
-        headerView->setSectionResizeMode(0, QHeaderView::Stretch);
-        headerView->setSectionResizeMode(1, QHeaderView::ResizeToContents);
-        headerView->setSectionResizeMode(2, QHeaderView::ResizeToContents);
-        headerView->setStretchLastSection(false);
-        headerView->setSectionsMovable(false);
-
-        setColumnHidden(KDirModel::Size, m_hideDetailColumns);
-        setColumnHidden(KDirModel::ModifiedTime, m_hideDetailColumns);
-        hideColumn(KDirModel::Type);
-        hideColumn(KDirModel::Permissions);
-        hideColumn(KDirModel::Owner);
-        hideColumn(KDirModel::Group);
-    } else if (event->type() == QEvent::UpdateRequest) {
-        // A wheel movement will scroll 4 items
-        if (model()->rowCount()) {
-            verticalScrollBar()->setSingleStep((sizeHintForRow(0) / 3) * 4);
-        }
-    }
+    KDirHeaderView *headerView = qobject_cast<KDirHeaderView*>(header());
+    switch (auto type = event->type()) {
+        case QEvent::Resize:
+        case QEvent::Polish:
+            if (type == QEvent::Polish) {
+                // the polish event seems to arrive only once during our lifetime so
+                // this is a good moment for some JIT initialisation.
+                headerView->resetWidthTracking(true);
+                // install the section resize handler
+                connect(headerView, &QHeaderView::sectionResized, headerView, &KDirHeaderView::sectionResizeHandler);
+            } else {
+                headerView->resetWidthTracking(false);
+            }
+            headerView->setSectionResizeMode(0, QHeaderView::Stretch);
+            headerView->setSectionResizeMode(1, QHeaderView::ResizeToContents);
+            headerView->setSectionResizeMode(2, QHeaderView::ResizeToContents);
+            headerView->setStretchLastSection(false);
+            headerView->setSectionsMovable(false);
+
+            setColumnHidden(KDirModel::Size, m_hideDetailColumns);
+            setColumnHidden(KDirModel::ModifiedTime, m_hideDetailColumns);
+            hideColumn(KDirModel::Type);
+            hideColumn(KDirModel::Permissions);
+            hideColumn(KDirModel::Owner);
+            hideColumn(KDirModel::Group);
+            if (type == QEvent::Resize && !headerView->m_isFileWidget) {
+                // force an explicit resize here for column 0; without that,
+                // this column could be resized to and shown at a width less
+                // than m_minimalNameColumnWidth. This can happen outside of
+                // our control when resizing Kate's file browser sidebar in
+                // detailed tree view. It doesn't happen in KFileWidgets
+                // (open/save dialogs) which are common enough to detect them
+                // and skip this potentially expensive operation.
+                resizeColumnToContents(0);
+            }
+            break;
+        case QEvent::UpdateRequest:
+            // A wheel movement will scroll 4 items
+            if (model()->rowCount()) {
+                verticalScrollBar()->setSingleStep((sizeHintForRow(0) / 3) * 4);
+            }
+            break;
+        case QEvent::Paint:
+            // event analysis confirms that the 1st paint event arrives after all headers have
+            // had a size set, so we can now set the definitive section size explicitly and
+            // activate interactive mode. The results is that section size is set once according
+            // to the principles defined above (Polish case) but can then be adapted by the user,
+            // for instance when navigating to a different directory.
 
+            // define a minimum width for the name column when we have the 1st valid reference, 
+            // here a third more than the width of the date column.
+            if (headerView->m_setInteractiveResizeMode) {
+                headerView->setMinimumNameColumnWidth();
+                headerView->setSectionResizeMode(QHeaderView::Interactive);
+                headerView->setSectionsMovable(true);
+                // we only do this once after receiving a Polish or Resize event,
+                // both of which reset the column size mode.
+                headerView->m_setInteractiveResizeMode = false;
+            }
+            if (headerView->m_checkMinimalNameColumnWidth) {
+                // compensation for very narrow views: impose a minimum name column width and
+                // reduce letterspacing by a small amount. NB: here we use sectionSize() to obtain
+                // current widths.
+                if (headerView->sectionSize(0) > 0 && headerView->sectionSize(0) < headerView->m_minimalNameColumnWidth) {
+                    headerView->m_checkMinimalNameColumnWidth = false;
+                    headerView->m_currentColumnWidth[0] = headerView->m_minimalNameColumnWidth;
+                }
+            }
+            // set the values we want to set explicitly
+            for (int i = 0 ; i < KDirModel::ColumnCount ; ++i) {
+                if (headerView->m_currentColumnWidth[i] > 0) {
+                    headerView->setSectionResizeMode(i, QHeaderView::Interactive);
+                    headerView->resizeSection(i, headerView->m_currentColumnWidth[i]);
+                }
+            }
+            if (headerView->m_currentColumnWidth[0] > 0 && headerView->sectionResizeMode(0) != QHeaderView::Interactive) {
+                qWarning() << "!!!";
+            }
+            // if ever we get still non-resizable sections we could make them resizable
+            // here if columns 1-3 have been resized explicitly.
+            break;
+        default:
+            // noop
+            break;
+    }
     return QTreeView::event(event);
 }
 
@@ -133,3 +276,5 @@ void KDirOperatorDetailView::currentChanged(const QModelIndex &current, const QM
 {
     QTreeView::currentChanged(current, previous);
 }
+
+#include "kdiroperatordetailview.moc"
diff --git src/filewidgets/kdiroperatordetailview_p.h src/filewidgets/kdiroperatordetailview_p.h
index 2f177cd50cbfe2db1827d3836bd4052041c69911..57fcb16712340186619fb8f694513fc8cdf0f2d7 100644
--- src/filewidgets/kdiroperatordetailview_p.h
+++ src/filewidgets/kdiroperatordetailview_p.h
@@ -22,6 +22,7 @@
 #include <QTreeView>
 
 #include <kfile.h>
+#include <kdirmodel.h>
 
 class QAbstractItemModel;
 
