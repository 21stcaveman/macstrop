diff --git src/kioslave/CMakeLists.txt src/kioslave/CMakeLists.txt
index e02febd..9931869 100644
--- src/kioslave/CMakeLists.txt
+++ src/kioslave/CMakeLists.txt
@@ -4,5 +4,9 @@ ecm_mark_nongui_executable(kioslave)
 target_link_libraries(kioslave
    KF5::KIOCore
 )
+if (APPLE)
+   target_link_libraries(kioslave "-framework CoreFoundation")
+endif ()
+
 
 install(TARGETS kioslave DESTINATION ${KDE_INSTALL_LIBEXECDIR_KF5} )
diff --git src/kioslave/kioslave.cpp src/kioslave/kioslave.cpp
index be5b34c..a2f4e2a 100644
--- src/kioslave/kioslave.cpp
+++ src/kioslave/kioslave.cpp
@@ -46,6 +46,10 @@
 #endif
 #endif
 
+#ifdef Q_OS_OSX
+#include <CoreFoundation/CoreFoundation.h>
+#endif
+
 #ifndef Q_OS_WIN
 /* These are to link libkio even if 'smart' linker is used */
 #include <kio/authinfo.h>
@@ -57,6 +61,20 @@ extern "C" KIO::AuthInfo *_kioslave_init_kio()
 
 int main(int argc, char **argv)
 {
+#ifdef Q_OS_OSX
+    CFBundleRef mainBundle = CFBundleGetMainBundle();
+    if (mainBundle) {
+        // get the application's Info Dictionary. For app bundles this would live in the bundle's Info.plist,
+        // for regular executables it is obtained in another way.
+        CFMutableDictionaryRef infoDict = (CFMutableDictionaryRef) CFBundleGetInfoDictionary(mainBundle);
+        if (infoDict) {
+            // Add or set the "LSUIElement" key with/to value "1". This can simply be a CFString.
+            CFDictionarySetValue(infoDict, CFSTR("LSUIElement"), CFSTR("1"));
+            // That's it. We're now considered as an "agent" by the window server, and thus will have
+            // neither menubar nor presence in the Dock or App Switcher.
+        }
+    }
+#endif
     if (argc < 5) {
         fprintf(stderr, "Usage: kioslave <slave-lib> <protocol> <klauncher-socket> <app-socket>\n\nThis program is part of KDE.\n");
         return 1;
@@ -79,7 +97,7 @@ int main(int argc, char **argv)
         return 1;
     }
 
-    qDebug() << "trying to load" << libname << "from" << libpath;
+//     qDebug() << "trying to load" << libname << "from" << libpath;
     QLibrary lib(libpath);
     if (!lib.load()) {
         fprintf(stderr, "could not open %s: %s\n", qPrintable(libname),
