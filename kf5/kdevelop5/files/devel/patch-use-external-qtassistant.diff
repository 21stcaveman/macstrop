diff --git documentation/qthelp/qthelpproviderabstract.cpp documentation/qthelp/qthelpproviderabstract.cpp
index 2d42cb9..fdcd88a 100644
--- documentation/qthelp/qthelpproviderabstract.cpp
+++ documentation/qthelp/qthelpproviderabstract.cpp
@@ -27,6 +27,10 @@
 
 #include <QStandardPaths>
 
+#include <QString>
+#include <QProcess>
+#include <QApplication>
+
 #include <language/duchain/duchain.h>
 #include <language/duchain/declaration.h>
 #include <language/duchain/duchainlock.h>
@@ -37,6 +41,44 @@
 
 using namespace KDevelop;
 
+class ExternalViewerProcess : public QProcess
+{
+    Q_OBJECT
+public:
+    ExternalViewerProcess(QObject* parent);
+    ~ExternalViewerProcess()
+    {
+        qint64 pid = processId();
+        if (pid > 0) {
+            QProcess *hup = new QProcess(this);
+            hup->start(QString::fromLatin1("kill -1 %1").arg(pid));
+            hup->waitForFinished(500);
+        }
+        QProcess::waitForFinished(500);
+    }
+public slots:
+    void externalViewerExit(int exitCode, QProcess::ExitStatus exitStatus);
+};
+
+static ExternalViewerProcess* externalViewerProcess = Q_NULLPTR;
+
+ExternalViewerProcess::ExternalViewerProcess(QObject *parent)
+    : QProcess(parent)
+{
+    connect(this, static_cast<void(ExternalViewerProcess::*)(int, QProcess::ExitStatus)>(&ExternalViewerProcess::finished),
+            &ExternalViewerProcess::externalViewerExit);
+}
+
+void ExternalViewerProcess::externalViewerExit(int exitCode, QProcess::ExitStatus exitStatus)
+{
+    if (this == externalViewerProcess) {
+        qCDebug(QTHELP) << Q_FUNC_INFO << "externalViewer" << this << "has exited with code"
+            << exitCode << "and status" << exitStatus;
+        deleteLater();
+        externalViewerProcess = Q_NULLPTR;
+    }
+}
+
 QtHelpProviderAbstract::QtHelpProviderAbstract(QObject *parent, const QString &collectionFileName, const QVariantList &args)
     : QObject(parent)
     , m_engine(QStandardPaths::writableLocation(QStandardPaths::DataLocation)+'/'+collectionFileName)
@@ -47,11 +89,25 @@ QtHelpProviderAbstract::QtHelpProviderAbstract(QObject *parent, const QString &c
     }
 }
 
-
 QtHelpProviderAbstract::~QtHelpProviderAbstract()
 {
 }
 
+ExternalViewerProcess* QtHelpProviderAbstract::externalViewer() const
+{
+    if (!externalViewerProcess) {
+        externalViewerProcess = new ExternalViewerProcess(qApp);
+        QStringList args = {"-enableRemoteControl"};
+        externalViewerProcess->start(QStandardPaths::findExecutable(QLatin1String("kdevelop-qthelp-viewer")),
+            args, QIODevice::WriteOnly|QIODevice::Append);
+        if (!externalViewerProcess->waitForStarted()) {
+            externalViewerProcess->deleteLater();
+            externalViewerProcess = NULL;
+        }
+    }
+    return externalViewerProcess;
+}
+
 IDocumentation::Ptr QtHelpProviderAbstract::documentationForDeclaration(Declaration* dec) const
 {
     QtHelpDocumentation::s_provider = const_cast<QtHelpProviderAbstract*>(this);
@@ -69,8 +125,22 @@ IDocumentation::Ptr QtHelpProviderAbstract::documentationForDeclaration(Declarat
         if (!id.isEmpty()) {
             QMap<QString, QUrl> links = m_engine.linksForIdentifier(id);
 
-            if(!links.isEmpty())
+            if(!links.isEmpty()) {
+                if (externalViewer()) {
+                    QByteArray ba;
+                    QList<QUrl> urls = links.values();
+                    foreach (const auto url, urls) {
+                        if (!url.isEmpty()) {
+                            ba.append(QString::fromLatin1("setSource ") + url.toString() + QLatin1String("\n"));
+                        }
+                    }
+                    qCDebug(QTHELP) << Q_FUNC_INFO << "Id=" << id << "links=" << links << "->" << ba;
+                    externalViewer()->write(ba);
+                    externalViewer()->write("show contents\n");
+                    externalViewer()->write("syncContents\n");
+                }
                 return IDocumentation::Ptr(new QtHelpDocumentation(id, links));
+            }
         }
     }
 
@@ -87,7 +157,21 @@ IDocumentation::Ptr QtHelpProviderAbstract::documentationForIndex(const QModelIn
 {
     QtHelpDocumentation::s_provider = const_cast<QtHelpProviderAbstract*>(this);
     QString name=idx.data(Qt::DisplayRole).toString();
-    return IDocumentation::Ptr(new QtHelpDocumentation(name, m_engine.indexModel()->linksForKeyword(name)));
+    QMap<QString, QUrl> links = m_engine.indexModel()->linksForKeyword(name);
+    if(!links.isEmpty() && externalViewer()) {
+        QByteArray ba;
+        QList<QUrl> urls = links.values();
+        foreach (const auto url, urls) {
+            if (!url.isEmpty()) {
+                ba.append(QString::fromLatin1("setSource ") + url.toString() + QLatin1String("\n"));
+                ba.append(QLatin1String("show contents\n"));
+            }
+        }
+        qCDebug(QTHELP) << Q_FUNC_INFO << "name=" << name << "->" << ba;
+        externalViewer()->write(ba);
+        externalViewer()->write("syncContents\n");
+    }
+    return IDocumentation::Ptr(new QtHelpDocumentation(name, links));
 }
 
 void QtHelpProviderAbstract::jumpedTo(const QUrl& newUrl) const
@@ -109,3 +193,5 @@ bool QtHelpProviderAbstract::isValid() const
 {
     return !m_engine.registeredDocumentations().isEmpty();
 }
+
+#include "qthelpproviderabstract.moc"
diff --git documentation/qthelp/qthelpproviderabstract.h documentation/qthelp/qthelpproviderabstract.h
index 1f5f1b2..04bb142 100644
--- documentation/qthelp/qthelpproviderabstract.h
+++ documentation/qthelp/qthelpproviderabstract.h
@@ -29,6 +29,8 @@
 #include <QVariantList>
 #include <QHelpEngine>
 
+class ExternalViewerProcess;
+
 class QtHelpProviderAbstract : public QObject, public KDevelop::IDocumentationProvider
 {
     Q_OBJECT
@@ -46,6 +48,8 @@ public:
     /// @return False in case we failed to load any documentation files, else true
     bool isValid() const;
 
+    ExternalViewerProcess *externalViewer() const;
+
     QHelpEngine* engine() { return &m_engine; }
 public slots:
     void jumpedTo(const QUrl& newUrl) const;
