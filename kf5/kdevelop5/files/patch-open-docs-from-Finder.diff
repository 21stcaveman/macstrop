diff --git app/Info.plist.in app/Info.plist.in
index be256f9..ffe65a6 100644
--- app/Info.plist.in
+++ app/Info.plist.in
@@ -40,5 +40,165 @@
     <string>True</string>
     <key>NSHumanReadableCopyright</key>
     <string>${MACOSX_BUNDLE_COPYRIGHT}</string>
+    <key>LSMultipleInstancesProhibited</key>
+    <false/>
+    <key>CFBundleDocumentTypes</key>
+    <array>
+        <dict>
+            <key>CFBundleTypeExtensions</key>
+            <array>
+                <string>h</string>
+            </array>
+            <key>CFBundleTypeName</key>
+            <string>C Header Source</string>
+            <key>CFBundleTypeRole</key>
+            <string>Editor</string>
+            <key>LSItemContentTypes</key>
+            <array>
+                <string>public.c-header</string>
+            </array>
+        </dict>
+        <dict>
+            <key>CFBundleTypeExtensions</key>
+            <array>
+                <string>hh</string>
+                <string>hp</string>
+                <string>hpp</string>
+                <string>hxx</string>
+                <string>h++</string>
+            </array>
+            <key>CFBundleTypeName</key>
+            <string>C++ Header Source</string>
+            <key>CFBundleTypeRole</key>
+            <string>Editor</string>
+            <key>LSItemContentTypes</key>
+            <array>
+                <string>public.c-plus-plus-header</string>
+            </array>
+        </dict>
+        <dict>
+            <key>CFBundleTypeExtensions</key>
+            <array>
+                <string>c</string>
+            </array>
+            <key>CFBundleTypeName</key>
+            <string>C Source</string>
+            <key>CFBundleTypeRole</key>
+            <string>Editor</string>
+            <key>LSItemContentTypes</key>
+            <array>
+                <string>public.c-source</string>
+            </array>
+        </dict>
+        <dict>
+            <key>CFBundleTypeExtensions</key>
+            <array>
+                <string>cc</string>
+                <string>cp</string>
+                <string>cpp</string>
+                <string>cxx</string>
+                <string>c++</string>
+            </array>
+            <key>CFBundleTypeName</key>
+            <string>C++ Source</string>
+            <key>CFBundleTypeRole</key>
+            <string>Editor</string>
+            <key>LSItemContentTypes</key>
+            <array>
+                <string>public.c-plus-plus-source</string>
+            </array>
+        </dict>
+        <dict>
+            <key>CFBundleTypeExtensions</key>
+            <array>
+                <string>m</string>
+            </array>
+            <key>CFBundleTypeName</key>
+            <string>Objective-C Source</string>
+            <key>CFBundleTypeRole</key>
+            <string>Editor</string>
+            <key>LSItemContentTypes</key>
+            <array>
+                <string>public.objective-c-source</string>
+            </array>
+        </dict>
+        <dict>
+            <key>CFBundleTypeExtensions</key>
+            <array>
+                <string>mm</string>
+                <string>M</string>
+            </array>
+            <key>CFBundleTypeName</key>
+            <string>Objective-C++ Source</string>
+            <key>CFBundleTypeRole</key>
+            <string>Editor</string>
+            <key>LSItemContentTypes</key>
+            <array>
+                <string>public.objective-c-plus-plus-source</string>
+            </array>
+        </dict>
+        <dict>
+            <key>CFBundleTypeExtensions</key>
+            <array>
+                <string>make</string>
+            </array>
+            <key>CFBundleTypeName</key>
+            <string>Makefile</string>
+            <key>CFBundleTypeRole</key>
+            <string>Editor</string>
+            <key>LSItemContentTypes</key>
+            <array>
+                <string>com.apple.xcode.make-script</string>
+            </array>
+        </dict>
+        <dict>
+            <key>CFBundleTypeExtensions</key>
+            <array>
+                <string>plist</string>
+            </array>
+            <key>CFBundleTypeName</key>
+            <string>XML Property List</string>
+            <key>CFBundleTypeRole</key>
+            <string>Editor</string>
+            <key>LSItemContentTypes</key>
+            <array>
+                <string>com.apple.xml-property-list</string>
+            </array>
+        </dict>
+        <dict>
+            <key>CFBundleTypeName</key>
+            <string>Source Code</string>
+            <key>CFBundleTypeRole</key>
+            <string>Editor</string>
+            <key>LSItemContentTypes</key>
+            <array>
+                <string>public.source-code</string>
+            </array>
+        </dict>
+        <dict>
+            <key>CFBundleTypeName</key>
+            <string>Text Document</string>
+            <key>CFBundleTypeRole</key>
+            <string>Editor</string>
+            <key>LSItemContentTypes</key>
+            <array>
+                <string>public.text</string>
+            </array>
+        </dict>
+        <dict>
+            <key>CFBundleTypeExtensions</key>
+            <array>
+                <string>*</string>
+            </array>
+            <key>CFBundleTypeName</key>
+            <string>Anything</string>
+            <key>CFBundleTypeOSTypes</key>
+            <array>
+                <string>****</string>
+            </array>
+            <key>CFBundleTypeRole</key>
+            <string>Viewer</string>
+        </dict>
+    </array>
 </dict>
 </plist>
diff --git app/main.cpp app/main.cpp
index b5f7bb9..c2b92fa 100644
--- app/main.cpp
+++ app/main.cpp
@@ -71,14 +71,18 @@ Q_LOGGING_CATEGORY(APP, "kdevelop.app")
 
 #include "splash.h"
 
-#ifdef Q_OS_MAC
+#ifdef Q_OS_OSX
+#include <QFileOpenEvent>
 #include <CoreFoundation/CoreFoundation.h>
+#include <unistd.h>
+#include <stdio.h>
 #endif
 
 using namespace KDevelop;
 
 class KDevelopApplication: public QApplication
 {
+    Q_OBJECT
 public:
     explicit KDevelopApplication(int &argc, char **argv, bool GUIenabled = true)
         : QApplication(argc, argv, GUIenabled)
@@ -86,6 +90,27 @@ public:
             connect(this, &QGuiApplication::saveStateRequest, this, &KDevelopApplication::saveState);
         }
 
+    void startHandlingFileOpenEvents() {
+        queueFileOpenEvents = true;
+        installEventFilter(this);
+        // let the eventFilter construct a list of all files to open, from any pending
+        // FileOpen events:
+        processEvents();
+        queueFileOpenEvents = false;
+        qCDebug(APP) << "initial FileOpen events processed:" << fileOpenRequestList.count();
+        // process the list of files to open:
+        handleQueuedFileOpenRequests();
+    }
+
+    void handleQueuedFileOpenRequests();
+
+protected:
+    /**
+     * Event filter for QApplication to handle Mac OS X style file open requests
+     * which Qt translates into FileOpen application events.
+     */
+    bool eventFilter(QObject *obj, QEvent *event);
+
 private Q_SLOTS:
     void saveState( QSessionManager& sm ) {
         if (KDevelop::Core::self() && KDevelop::Core::self()->sessionController()) {
@@ -95,6 +120,11 @@ private Q_SLOTS:
             sm.setRestartCommand(QStringList() << QCoreApplication::applicationFilePath() << "-session" << x11SessionId << "-s" << kdevelopSessionId);
         }
     }
+public:
+    QString session;
+private:
+    bool queueFileOpenEvents;
+    QVector<struct UrlInfo> fileOpenRequestList;
 };
 
 /// Tries to find a session identified by @p data in @p sessions.
@@ -175,7 +205,7 @@ static int openFilesInRunningInstance(const QVector<UrlInfo>& files, int pid)
 
 /// Gets the PID of a running KDevelop instance, eventually asking the user if there is more than one.
 /// Returns -1 in case there are no running sessions.
-static int getRunningSessionPid()
+static int getRunningSessionPid(QString &sessionName)
 {
     QList<KDevelop::SessionInfo> candidates;
     foreach( const KDevelop::SessionInfo& si, KDevelop::SessionController::availableSessionInfo() ) {
@@ -187,15 +217,14 @@ static int getRunningSessionPid()
         return -1;
     }
 
-    QString sessionUuid;
     if ( candidates.size() == 1 ) {
-        sessionUuid = candidates.first().uuid.toString();
+        sessionName = candidates.first().uuid.toString();
     }
     else {
         const QString title = i18n("Select the session to open the document in");
-        sessionUuid = KDevelop::SessionController::showSessionChooserDialog(title, true);
+        sessionName = KDevelop::SessionController::showSessionChooserDialog(title, true);
     }
-    return KDevelop::SessionController::sessionRunInfo(sessionUuid).holderPid;
+    return KDevelop::SessionController::sessionRunInfo(sessionName).holderPid;
 }
 
 static QString findSessionId(const QString& session)
@@ -232,10 +261,62 @@ static qint64 findSessionPid(const QString &sessionId)
     return sessionInfo.holderPid;
 }
 
+void KDevelopApplication::handleQueuedFileOpenRequests()
+{
+    if ( ! fileOpenRequestList.isEmpty() ){
+        int pid = getRunningSessionPid(session);
+        if ( pid > 0 ) {
+            qCDebug(APP) << "opening" << fileOpenRequestList.count() << "file(s) in session" << session << "pid=" << pid;
+            openFilesInRunningInstance(fileOpenRequestList, pid);
+            // in a more subtle implementation, openFilesInRunningInstance() would return a list
+            // containing the documents that failed to open, and we could reininitialise fileOpenRequestList
+            // from that list.
+            fileOpenRequestList.clear();
+        }
+    }
+}
+
+bool KDevelopApplication::eventFilter(QObject *obj, QEvent *event)
+{
+    if (event->type() == QEvent::FileOpen) {
+        QFileOpenEvent *foe = static_cast<QFileOpenEvent*>(event);
+        qCDebug(APP) << "FileOpen event for" << foe->url();
+        fileOpenRequestList.append(UrlInfo(foe->file()));
+        if ( ! queueFileOpenEvents ){
+            handleQueuedFileOpenRequests();
+        }
+        // don't eat the event
+        return false;
+    }
+
+    /**
+     * else: pass over to default implementation
+     */
+    return QObject::eventFilter(obj, event);
+}
+
+static bool shouldSimulatePSOption(int argc, char *argv[])
+{
+#ifdef Q_OS_OSX
+    if ((argc == 2 && qstrncmp(argv[1], "-psn_", 5) == 0)
+        || (argc== 1 && !isatty(fileno(stdin)))){
+        // this is a pure start from the Finder or Dock, without any arguments to open.
+        // Present the session selection dialog (= simulate the --ps option) if the user
+        // holds the Command (sic) key while we start. Without that modified we'd also
+        // be doing this instead of handling the FileOpen event associate with a file-open
+        // request from the Finder or the Dock.
+        if (QApplication::queryKeyboardModifiers() & Qt::ControlModifier) {
+            return true;
+        }
+    }
+#endif
+    return false;
+}
+
 int main( int argc, char *argv[] )
 {
     // TODO: Maybe generalize, add KDEVELOP_STANDALONE build option
-#if defined(Q_OS_WIN) || defined(Q_OS_MAC)
+#if defined(Q_OS_WIN) || defined(Q_OS_OSX)
     qputenv("KDE_FORK_SLAVES", "1"); // KIO slaves will be forked off instead of being started via DBus
 #endif
 
@@ -254,7 +335,7 @@ int main( int argc, char *argv[] )
     KLocalizedString::setApplicationDomain("kdevelop");
     QCoreApplication::setAttribute(Qt::AA_DontCreateNativeWidgetSiblings);
 
-#ifdef Q_OS_MAC
+#ifdef Q_OS_OSX
     CFBundleRef mainBundle = CFBundleGetMainBundle();
     if (mainBundle) {
         // get the application's Info Dictionary. For app bundles this would live in the bundle's Info.plist,
@@ -428,14 +509,14 @@ int main( int argc, char *argv[] )
     {
         int pid = -1;
         if (parser.isSet("open-session")) {
-            const QString session = findSessionId(parser.value("open-session"));
-            if (session.isEmpty()) {
+            app.session = findSessionId(parser.value("open-session"));
+            if (app.session.isEmpty()) {
                 return 1;
-            } else if (KDevelop::SessionController::isSessionRunning(session)) {
-                pid = findSessionPid(session);
+            } else if (KDevelop::SessionController::isSessionRunning(app.session)) {
+                pid = findSessionPid(app.session);
             }
         } else {
-            pid = getRunningSessionPid();
+            pid = getRunningSessionPid(app.session);
         }
         if ( pid > 0 ) {
             return openFilesInRunningInstance(initialFiles, pid);
@@ -444,7 +525,6 @@ int main( int argc, char *argv[] )
     }
 
     // if empty, restart kdevelop with last active session, see SessionController::defaultSessionId
-    QString session;
 
     if(parser.isSet("pss"))
     {
@@ -463,7 +543,7 @@ int main( int argc, char *argv[] )
 
         if(candidates.size() == 1 && parser.isSet("pid"))
         {
-            session = candidates[0].uuid.toString();
+            app.session = candidates[0].uuid.toString();
         }else{
             for(int i = 0; i < candidates.size(); ++i)
                 qerr << "[" << i << "]: " << candidates[i].description << endl;
@@ -472,7 +552,7 @@ int main( int argc, char *argv[] )
             std::cin >> chosen;
             if(std::cin.good() && (chosen >= 0 && chosen < candidates.size()))
             {
-                session = candidates[chosen].uuid.toString();
+                app.session = candidates[chosen].uuid.toString();
             }else{
                 qerr << "invalid selection" << endl;
                 return 1;
@@ -480,12 +560,13 @@ int main( int argc, char *argv[] )
         }
     }
 
-    if(parser.isSet("ps"))
+    const bool simulatePS = shouldSimulatePSOption(argc, argv);
+    if(parser.isSet("ps") || simulatePS)
     {
         bool onlyRunning = parser.isSet("pid");
-        session = KDevelop::SessionController::showSessionChooserDialog(i18n("Select the session you would like to use"), onlyRunning);
-        if(session.isEmpty())
-            return 1;
+        app.session = KDevelop::SessionController::showSessionChooserDialog(i18n("Select the session you would like to use"), onlyRunning);
+        if(app.session.isEmpty())
+            return simulatePS ? 0 : 1;
     }
 
     if ( parser.isSet("debug") ) {
@@ -495,28 +576,28 @@ int main( int argc, char *argv[] )
             return 1;
         }
         debugeeName = i18n("Debug %1", QUrl( debugArgs.first() ).fileName());
-        session = debugeeName;
+        app.session = debugeeName;
     } else if ( parser.isSet("new-session") )
     {
-        session = parser.value("new-session");
+        app.session = parser.value("new-session");
         foreach(const KDevelop::SessionInfo& si, KDevelop::SessionController::availableSessionInfo())
         {
-            if ( session == si.name ) {
+            if ( app.session == si.name ) {
                 QTextStream qerr(stderr);
-                qerr << endl << i18n("A session with the name %1 exists already. Use the -s switch to open it.", session) << endl;
+                qerr << endl << i18n("A session with the name %1 exists already. Use the -s switch to open it.", app.session) << endl;
                 return 1;
             }
         }
         // session doesn't exist, we can create it
     } else if ( parser.isSet("open-session") ) {
-        session = findSessionId(parser.value("open-session"));
-        if (session.isEmpty()) {
+        app.session = findSessionId(parser.value("open-session"));
+        if (app.session.isEmpty()) {
             return 1;
         }
     }
 
     QList<KDevelop::SessionInfo> sessions = KDevelop::SessionController::availableSessionInfo();
-    const KDevelop::SessionInfo* sessionData = findSessionInList( sessions, session );
+    const KDevelop::SessionInfo* sessionData = findSessionInList( sessions, app.session );
 
     if(parser.isSet("pid")) {
         if( !sessionData ) {
@@ -537,18 +618,38 @@ int main( int argc, char *argv[] )
 
     KDevIDEExtension::init();
 
+    // start filtering events, so that on OS X we can handle file open requests
+    // sent through LaunchServices (i.e. the Finder)
+    // startHandlingFileOpenEvents() will call processEvents(), and if a FileOpen event
+    // was already queued it may present a session selection dialog and thus change
+    // app.session. This happens on OS X when we were started because the user asked
+    // the Finder or Dock to open a file with KDevelop.
+    // startHandlingFileOpenEvents() will cause all pending FileOpen events to be appended
+    // to a list, and will then attempt to open the documents in that list. If that attempt
+    // succeeds (because at least 1 session is already open and running), app.session will
+    // have been set to the session where the document(s) was/were opened.
+    app.startHandlingFileOpenEvents();
+
     KDevSplashScreen* splash = nullptr;
     if (!QProcessEnvironment::systemEnvironment().contains("KDEV_DISABLE_SPLASH")) {
         splash = new KDevSplashScreen;
         splash->show();
     }
 
-    if(!Core::initialize(splash, Core::Default, session))
+    if(!Core::initialize(splash, Core::Default, app.session))
         return 5;
 
     // register a DBUS service for this process, so that we can open files in it from other invocations
     QDBusConnection::sessionBus().registerService(QString("org.kdevelop.kdevelop-%1").arg(app.applicationPid()));
 
+    // When the user requests to open a file (or multiple files) in KDevelop on OS X, and no KDevelop instance is
+    // already running, the initial attempt to open these files may fail because getRunningSessionPid() fails.
+    // In that case the FileOpen requests are still queued, and we should be able to process them now.
+    // NB: it is not impossible that another session was opened between this point and the initial call to
+    // startHandlingFileOpenEvents(). If that happens, the user will probably be asked to pick a session to open
+    // the queued document(s) in, meaning app.session could change.
+    app.handleQueuedFileOpenRequests();
+
 //     TODO: port to kf5
 //     KGlobal::locale()->insertCatalog( Core::self()->componentData().catalogName() );
     Core* core = Core::self();
@@ -651,3 +752,5 @@ int main( int argc, char *argv[] )
     qCDebug(APP) << "Done startup";
     return app.exec();
 }
+
+#include "main.moc"
