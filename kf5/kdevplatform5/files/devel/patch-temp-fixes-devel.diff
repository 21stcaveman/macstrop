diff --git shell/textdocument.cpp shell/textdocument.cpp
index 4c6f6e4..e6ccf0c 100644
--- shell/textdocument.cpp
+++ shell/textdocument.cpp
@@ -265,7 +265,7 @@ bool TextDocument::isTextDocument() const
     {
         /// @todo Somehow it can happen that d->document is zero, which makes
         /// code relying on "isTextDocument() == (bool)textDocument()" crash
-        qWarning() << "Broken text-document: " << url();
+//         qWarning() << "Broken text-document: " << url();
         return false;
     }
 
diff --git shell/filteredproblemstore.cpp shell/filteredproblemstore.cpp
index 40962a6..e4b4a03 100644
--- shell/filteredproblemstore.cpp
+++ shell/filteredproblemstore.cpp
@@ -24,6 +24,8 @@
 
 #include <KLocalizedString>
 
+#include <QDebug>
+
 using namespace KDevelop;
 
 namespace
@@ -33,10 +35,14 @@ namespace
 void addDiagnostics(ProblemStoreNode *node, const QVector<IProblem::Ptr> &diagnostics)
 {
     foreach (const IProblem::Ptr &ptr, diagnostics) {
-        ProblemNode *child = new ProblemNode(node, ptr);
-        node->addChild(child);
+        if (ptr.data()) {
+            ProblemNode *child = new ProblemNode(node, ptr);
+            node->addChild(child);
 
-        addDiagnostics(child, ptr->diagnostics());
+            addDiagnostics(child, ptr->diagnostics());
+        } else {
+            qWarning() << Q_FUNC_INFO << "caught NULL ptr in" << diagnostics;
+        }
     }
 }
 
diff --git vcs/dvcs/dvcsjob.cpp vcs/dvcs/dvcsjob.cpp
index 481febf01..135340be2 100644
--- vcs/dvcs/dvcsjob.cpp
+++ vcs/dvcs/dvcsjob.cpp
@@ -158,6 +158,16 @@ QVariant DVcsJob::fetchResults()
 void DVcsJob::start()
 {
     Q_ASSERT_X(d->status != JobRunning, "DVCSjob::start", "Another proccess was started using this job class");
+    if( d->status == JobRunning ) {
+        QString error = i18n( "Another process was started using this job class" );
+        d->model->appendLine(error);
+        setError( 255 );
+        setErrorText(error);
+        d->status = JobFailed;
+        emitResult();
+        qCWarning(VCS) << "DVCSjob::start:" << error;
+        return;
+    }
 
     const QDir& workingdir = directory();
     if( !workingdir.exists() ) {
@@ -167,6 +177,7 @@ void DVcsJob::start()
         setErrorText(error);
         d->status = JobFailed;
         emitResult();
+        qCWarning(VCS) << "DVCSjob::start:" << error;
         return;
     }
     if( !workingdir.isAbsolute() ) {
@@ -176,6 +187,7 @@ void DVcsJob::start()
         setErrorText(error);
         d->status = JobFailed;
         emitResult();
+        qCWarning(VCS) << "DVCSjob::start:" << error;
         return;
     }
 
@@ -193,6 +205,16 @@ void DVcsJob::start()
     d->childproc->start();
 
     d->model->appendLine(directory().path() + "> " + commandDisplay);
+
+    if (!d->childproc->waitForStarted(100)) {
+        QString error = i18n("DVCSJob::start: %1 failed to start: %2", commandDisplay, d->childproc->errorString());
+        d->model->appendLine(error);
+        setError( 255 );
+        setErrorText(error);
+        d->status = JobFailed;
+        emitResult();
+        qCWarning(VCS) << error;
+    }
 }
 
 void DVcsJob::setCommunicationMode(KProcess::OutputChannelMode comm)
@@ -212,9 +234,11 @@ void DVcsJob::slotProcessError( QProcess::ProcessError err )
     setError(OutputJob::FailedShownError); //we don't want to trigger a message box
 
     d->errorOutput = d->childproc->readAllStandardError();
+    QByteArray stdOut = d->childproc->readAllStandardOutput();
 
     QString displayCommand = KShell::joinArgs(dvcsCommand());
-    QString completeErrorText = i18n("Process '%1' exited with status %2\n%3", displayCommand, d->childproc->exitCode(), QString::fromLocal8Bit(d->errorOutput) );
+    QString completeErrorText = i18n("Process '%1' exited with status %2\n\"%3\"\n\"%4\"",
+        displayCommand, d->childproc->exitCode(), QString::fromLocal8Bit(stdOut), QString::fromLocal8Bit(d->errorOutput) );
     setErrorText( completeErrorText );
 
     QString errorValue;
@@ -241,11 +265,11 @@ void DVcsJob::slotProcessError( QProcess::ProcessError err )
         errorValue = QStringLiteral("UnknownError");
         break;
     }
-    qCDebug(VCS) << "Found an error while running" << displayCommand << ":" << errorValue
+    qCWarning(VCS) << "Found an error while running" << displayCommand << ":" << errorValue
                                                      << "Exit code is:" << d->childproc->exitCode();
-    qCDebug(VCS) << "Error:" << completeErrorText;
-    displayOutput(QString::fromLocal8Bit(d->errorOutput));
-    d->model->appendLine(i18n("Command finished with error %1.", errorValue));
+    qCWarning(VCS) << "Error:" << completeErrorText;
+//     displayOutput(QString::fromLocal8Bit(d->errorOutput));
+    d->model->appendLine(i18n("%1 (%2).", completeErrorText, errorValue));
 
     if(verbosity()==Silent) {
         setVerbosity(Verbose);
diff --git language/duchain/duchain.cpp language/duchain/duchain.cpp
index ec801c27b..75f627743 100644
--- language/duchain/duchain.cpp
+++ language/duchain/duchain.cpp
@@ -723,7 +723,7 @@ public:
       //Here we wait for all parsing-threads to stop their processing
       foreach(const auto language, languages) {
         if (lockFlag == TryLock) {
-          if (!language->parseLock()->tryLockForWrite()) {
+          if (!language->parseLock() || !language->parseLock()->tryLockForWrite()) {
             qCDebug(LANGUAGE) << "Aborting cleanup because language plugin is still parsing:" << language->name();
             // some language is still parsing, don't interfere with the cleanup
             foreach(auto* lock, locked) {
