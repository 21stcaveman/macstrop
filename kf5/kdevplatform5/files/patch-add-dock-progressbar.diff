diff --git shell/CMakeLists.txt shell/CMakeLists.txt
index 19a9560..29e78c2 100644
--- shell/CMakeLists.txt
+++ shell/CMakeLists.txt
@@ -83,6 +83,12 @@ set(KDevPlatformShell_LIB_SRCS
 
 )
 
+if(APPLE)
+    set(KDevPlatformShell_LIB_SRCS ${KDevPlatformShell_LIB_SRCS}
+        macdockprogressview.mm
+    )
+endif()
+
 kconfig_add_kcfg_files(KDevPlatformShell_LIB_SRCS
     settings/uiconfig.kcfgc
     settings/projectconfig.kcfgc
@@ -141,6 +147,9 @@ LINK_PRIVATE
     KDev::Util
     KDev::Documentation
 )
+if(APPLE)
+    target_link_libraries(KDevPlatformShell PRIVATE "-framework AppKit")
+endif()
 
 install(FILES
     mainwindow.h
diff --git shell/macdockprogressview.h shell/macdockprogressview.h
new file mode 100644
index 0000000..58b6ed5
--- /dev/null
+++ shell/macdockprogressview.h
@@ -0,0 +1,40 @@
+/*
+ * Copyright 2016 René J.V. Bertin <rjvbertin@gmail.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) version 3, or any
+ * later version accepted by the membership of KDE e.V. (or its
+ * successor approved by the membership of KDE e.V.), which shall
+ * act as a proxy defined in Section 6 of version 3 of the license.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#ifndef MACDOCKPROGRESSVIEW_H
+
+namespace KDevelop
+{
+
+class MacDockProgressView
+{
+public:
+    static void setRange(int min, int max);
+
+    static void setProgress(int value);
+
+    static void setProgressVisible(bool visible);
+};
+
+}
+
+#define MACDOCKPROGRESSVIEW_H
+#endif
diff --git shell/macdockprogressview.mm shell/macdockprogressview.mm
new file mode 100644
index 0000000..bfb0942
--- /dev/null
+++ shell/macdockprogressview.mm
@@ -0,0 +1,155 @@
+/*
+ * Copyright 2016 René J.V. Bertin <rjvbertin@gmail.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) version 3, or any
+ * later version accepted by the membership of KDE e.V. (or its
+ * successor approved by the membership of KDE e.V.), which shall
+ * act as a proxy defined in Section 6 of version 3 of the license.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "macdockprogressview.h"
+#include <QtGlobal>
+
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5
+#import <AppKit/NSDockTile.h>
+#import <AppKit/NSApplication.h>
+#import <AppKit/NSImageView.h>
+#import <AppKit/NSCIImageRep.h>
+#import <AppKit/NSBezierPath.h>
+#import <AppKit/NSColor.h>
+
+using namespace KDevelop;
+
+@interface MacDockProgressViewPrivate : NSView {
+    int min;
+    int max;
+    int value;
+}
+
++ (MacDockProgressViewPrivate *)sharedProgressView;
+
+- (void)rangeStartsAt:(int)v1 endsAt:(int)v2;
+- (void)setValue:(int)v;
+- (void)updateBadge;
+
+@end
+
+static MacDockProgressViewPrivate *sharedProgressView = nil;
+
+@implementation MacDockProgressViewPrivate
+
++ (MacDockProgressViewPrivate *)sharedProgressView
+{
+    if (sharedProgressView == nil) {
+        sharedProgressView = [[MacDockProgressViewPrivate alloc] init];
+        [sharedProgressView rangeStartsAt:0 endsAt:100];
+    }
+    return sharedProgressView;
+}
+
+- (void)rangeStartsAt:(int)v1 endsAt:(int)v2
+{
+    min = v1;
+    max = v2;
+    [self updateBadge];
+}
+
+- (void)setValue:(int)v
+{
+    value = v;
+    [self updateBadge];
+}
+
+- (void)updateBadge
+{
+    [[NSApp dockTile] display];
+}
+
+- (void)drawRect:(NSRect)rect
+{
+    Q_UNUSED(rect)
+    NSRect boundary = [self bounds];
+    [[NSApp applicationIconImage] drawInRect:boundary
+                                fromRect:NSZeroRect
+                                operation:NSCompositeCopy
+                                fraction:1.0];
+    NSRect progressBoundary = boundary;
+    progressBoundary.size.height *= 0.1;
+    progressBoundary.size.width *= 0.8;
+    progressBoundary.origin.x = (NSWidth(boundary) - NSWidth(progressBoundary)) / 2.0;
+    progressBoundary.origin.y = NSHeight(boundary) * 0.1;
+
+    double range = max - min;
+    double percent = 0.50;
+    if (range != 0) {
+        percent = (value - min) / range;
+    }
+    if (percent > 1) {
+        percent = 1;
+    } else if (percent < 0) {
+        percent = 0;
+    }
+
+    NSRect currentProgress = progressBoundary;
+    currentProgress.size.width *= percent;
+    [[NSColor blackColor] setFill];
+    [NSBezierPath fillRect:progressBoundary];
+    [[NSColor lightGrayColor] setFill];
+    [NSBezierPath fillRect:currentProgress];
+    [[NSColor blackColor] setStroke];
+    [NSBezierPath strokeRect:progressBoundary];
+}
+
+@end
+
+void MacDockProgressView::setRange(int min, int max)
+{
+    [[MacDockProgressViewPrivate sharedProgressView] rangeStartsAt:min endsAt:max];
+}
+
+void MacDockProgressView::setProgress(int value)
+{
+    [[MacDockProgressViewPrivate sharedProgressView] setValue:value];
+}
+
+void MacDockProgressView::setProgressVisible(bool visible)
+{
+    if (visible) {
+        [[NSApp dockTile] setContentView:[MacDockProgressViewPrivate sharedProgressView]];
+    } else {
+        [[NSApp dockTile] setContentView:nil];
+    }
+    [[NSApp dockTile] display];
+}
+
+#else
+
+void MacDockProgressView::setRange(int min, int max)
+{
+    Q_UNUSED(min)
+    Q_UNUSED(max)
+}
+
+void MacDockProgressView::setProgress(int value)
+{
+    Q_UNUSED(value)
+}
+
+void MacDockProgressView::setProgressVisible(bool visible)
+{
+    Q_UNUSED(visible)
+}
+
+#endif
diff --git shell/progresswidget/statusbarprogresswidget.cpp shell/progresswidget/statusbarprogresswidget.cpp
index 1a32ea8..e637e71 100644
--- shell/progresswidget/statusbarprogresswidget.cpp
+++ shell/progresswidget/statusbarprogresswidget.cpp
@@ -37,6 +37,9 @@
 #include "statusbarprogresswidget.h"
 #include "progressdialog.h"
 #include "progressmanager.h"
+#ifdef Q_OS_OSX
+#include "../macdockprogressview.h"
+#endif
 
 #include <KLocalizedString>
 
@@ -49,6 +52,10 @@
 #include <QPushButton>
 #include <QStackedWidget>
 #include <QTimer>
+#include <QApplication>
+#include <QStyle>
+
+#include <QDebug>
 
 using namespace KDevelop;
 
@@ -64,22 +71,49 @@ StatusbarProgressWidget::StatusbarProgressWidget( ProgressDialog* progressDialog
     box->setSpacing(0);
 
     m_pButton = new QPushButton( this );
-    m_pButton->setAttribute(Qt::WA_MacMiniSize);
     m_pButton->setSizePolicy( QSizePolicy( QSizePolicy::Minimum,
                                            QSizePolicy::Minimum ) );
     QIcon smallIcon = QIcon::fromTheme( QStringLiteral("go-up") );
     m_pButton->setIcon( smallIcon );
-    box->addWidget( m_pButton  );
-    stack = new QStackedWidget( this );
-    int maximumHeight = fontMetrics().height();
-    stack->setMaximumHeight( maximumHeight );
-    box->addWidget( stack );
 
-    m_pButton->setToolTip( i18n("Open detailed progress dialog") );
+    // allow for a 1 pixel margin above and below the reference text
+    int maximumHeight = fontMetrics().height() + 2;
 
     m_pProgressBar = new QProgressBar( this );
     m_pProgressBar->installEventFilter( this );
     m_pProgressBar->setMinimumWidth( w );
+    m_pProgressBar->setMinimumHeight( maximumHeight );
+    m_pProgressBar->setAttribute( Qt::WA_LayoutUsesWidgetRect, true );
+
+    // Even Mac/OS X users can have started us using the -style option, or even use the Xcb QPA
+    bool macWidgetStyle = QApplication::style()->objectName() == QLatin1String("macintosh");
+    QSize iconSize = m_pButton->iconSize();
+    if (macWidgetStyle) {
+        // QProgressBar height is fixed with the macintosh native widget style; get
+        // the closest height estimate. For a flat button (icon without button outline)
+        // that is from sizeHint(), for a regular button that's from minimumSizeHint().
+        int pbHeight = m_pProgressBar->sizeHint().height();
+        if (pbHeight > maximumHeight) {
+            maximumHeight = pbHeight;
+        }
+        iconSize.scale( pbHeight, pbHeight, Qt::KeepAspectRatio );
+        // this gives a button that is slightly too high and not perfectly
+        // aligned. Annoyingly calling setMaximumHeight() doesn't improve this
+        // and causes the button to change shape. So we use a "flat" button,
+        // which is more in line with platform practices anyway.
+        m_pButton->setFlat( true );
+    } else {
+        // scale the icon to fontMetrics().height() with 1 pixel margins on each side
+        iconSize.scale( maximumHeight - 2, maximumHeight - 2, Qt::KeepAspectRatio );
+    }
+    m_pButton->setIconSize(iconSize);
+    box->addWidget( m_pButton  );
+
+    m_pButton->setToolTip( i18n("Open detailed progress dialog") );
+
+    stack = new QStackedWidget( this );
+    box->addWidget( stack );
+
     stack->insertWidget( 1,m_pProgressBar );
 
     m_pLabel = new QLabel( QString(), this );
@@ -88,11 +122,13 @@ StatusbarProgressWidget::StatusbarProgressWidget( ProgressDialog* progressDialog
     m_pLabel->setMinimumWidth( w );
     stack->insertWidget( 2, m_pLabel );
 
-#ifndef Q_OS_MAC
-    // Currently on OSX this causes the button to be cut-off
-    // It isn't necessary because on OSX the button's minimumSizeHint is small enough
     m_pButton->setMaximumHeight( maximumHeight );
-#endif
+    if (!macWidgetStyle) {
+        m_pButton->setAttribute( Qt::WA_LayoutUsesWidgetRect, true );
+        stack->setMaximumHeight( maximumHeight );
+    } else {
+        m_pButton->setMaximumWidth( m_pButton->iconSize().width() + 2 );
+    }
     setMinimumWidth( minimumSizeHint().width() );
 
     mode = None;
@@ -178,6 +214,9 @@ void StatusbarProgressWidget::activateSingleItemMode()
     m_pProgressBar->setMaximum( 100 );
     m_pProgressBar->setValue( mCurrentItem->progress() );
     m_pProgressBar->setTextVisible( true );
+#ifdef Q_OS_OSX
+    MacDockProgressView::setProgress( mCurrentItem->progress() );
+#endif
 }
 
 void StatusbarProgressWidget::slotShowItemDelayed()
@@ -201,6 +240,9 @@ void StatusbarProgressWidget::slotProgressItemProgress( ProgressItem *item, unsi
     Q_ASSERT( item == mCurrentItem); // the only one we should be connected to
     Q_UNUSED( item );
     m_pProgressBar->setValue( value );
+#ifdef Q_OS_OSX
+    MacDockProgressView::setProgress( value );
+#endif
 }
 
 void StatusbarProgressWidget::setMode() {
@@ -212,6 +254,9 @@ void StatusbarProgressWidget::setMode() {
         // show the empty label in order to make the status bar look better
         stack->show();
         stack->setCurrentWidget( m_pLabel );
+#ifdef Q_OS_OSX
+        MacDockProgressView::setProgressVisible( false );
+#endif
         break;
 
     case Progress:
@@ -220,6 +265,9 @@ void StatusbarProgressWidget::setMode() {
         if ( m_bShowButton ) {
             m_pButton->show();
         }
+#ifdef Q_OS_OSX
+        MacDockProgressView::setProgressVisible( true );
+#endif
         break;
     }
 }
