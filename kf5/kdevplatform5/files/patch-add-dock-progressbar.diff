diff --git shell/CMakeLists.txt shell/CMakeLists.txt
index 19a9560..29e78c2 100644
--- shell/CMakeLists.txt
+++ shell/CMakeLists.txt
@@ -83,6 +83,12 @@ set(KDevPlatformShell_LIB_SRCS
 
 )
 
+if(APPLE)
+    set(KDevPlatformShell_LIB_SRCS ${KDevPlatformShell_LIB_SRCS}
+        macdockprogressview.mm
+    )
+endif()
+
 kconfig_add_kcfg_files(KDevPlatformShell_LIB_SRCS
     settings/uiconfig.kcfgc
     settings/projectconfig.kcfgc
@@ -141,6 +147,9 @@ LINK_PRIVATE
     KDev::Util
     KDev::Documentation
 )
+if(APPLE)
+    target_link_libraries(KDevPlatformShell PRIVATE "-framework AppKit")
+endif()
 
 install(FILES
     mainwindow.h
diff --git shell/macdockprogressview.h shell/macdockprogressview.h
new file mode 100644
index 0000000..58b6ed5
--- /dev/null
+++ shell/macdockprogressview.h
@@ -0,0 +1,40 @@
+/*
+ * Copyright 2016 René J.V. Bertin <rjvbertin@gmail.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) version 3, or any
+ * later version accepted by the membership of KDE e.V. (or its
+ * successor approved by the membership of KDE e.V.), which shall
+ * act as a proxy defined in Section 6 of version 3 of the license.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#ifndef MACDOCKPROGRESSVIEW_H
+
+namespace KDevelop
+{
+
+class MacDockProgressView
+{
+public:
+    static void setRange(int min, int max);
+
+    static void setProgress(int value);
+
+    static void setProgressVisible(bool visible);
+};
+
+}
+
+#define MACDOCKPROGRESSVIEW_H
+#endif
diff --git shell/macdockprogressview.mm shell/macdockprogressview.mm
new file mode 100644
index 0000000..bfb0942
--- /dev/null
+++ shell/macdockprogressview.mm
@@ -0,0 +1,155 @@
+/*
+ * Copyright 2016 René J.V. Bertin <rjvbertin@gmail.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) version 3, or any
+ * later version accepted by the membership of KDE e.V. (or its
+ * successor approved by the membership of KDE e.V.), which shall
+ * act as a proxy defined in Section 6 of version 3 of the license.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "macdockprogressview.h"
+#include <QtGlobal>
+
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5
+#import <AppKit/NSDockTile.h>
+#import <AppKit/NSApplication.h>
+#import <AppKit/NSImageView.h>
+#import <AppKit/NSCIImageRep.h>
+#import <AppKit/NSBezierPath.h>
+#import <AppKit/NSColor.h>
+
+using namespace KDevelop;
+
+@interface MacDockProgressViewPrivate : NSView {
+    int min;
+    int max;
+    int value;
+}
+
++ (MacDockProgressViewPrivate *)sharedProgressView;
+
+- (void)rangeStartsAt:(int)v1 endsAt:(int)v2;
+- (void)setValue:(int)v;
+- (void)updateBadge;
+
+@end
+
+static MacDockProgressViewPrivate *sharedProgressView = nil;
+
+@implementation MacDockProgressViewPrivate
+
++ (MacDockProgressViewPrivate *)sharedProgressView
+{
+    if (sharedProgressView == nil) {
+        sharedProgressView = [[MacDockProgressViewPrivate alloc] init];
+        [sharedProgressView rangeStartsAt:0 endsAt:100];
+    }
+    return sharedProgressView;
+}
+
+- (void)rangeStartsAt:(int)v1 endsAt:(int)v2
+{
+    min = v1;
+    max = v2;
+    [self updateBadge];
+}
+
+- (void)setValue:(int)v
+{
+    value = v;
+    [self updateBadge];
+}
+
+- (void)updateBadge
+{
+    [[NSApp dockTile] display];
+}
+
+- (void)drawRect:(NSRect)rect
+{
+    Q_UNUSED(rect)
+    NSRect boundary = [self bounds];
+    [[NSApp applicationIconImage] drawInRect:boundary
+                                fromRect:NSZeroRect
+                                operation:NSCompositeCopy
+                                fraction:1.0];
+    NSRect progressBoundary = boundary;
+    progressBoundary.size.height *= 0.1;
+    progressBoundary.size.width *= 0.8;
+    progressBoundary.origin.x = (NSWidth(boundary) - NSWidth(progressBoundary)) / 2.0;
+    progressBoundary.origin.y = NSHeight(boundary) * 0.1;
+
+    double range = max - min;
+    double percent = 0.50;
+    if (range != 0) {
+        percent = (value - min) / range;
+    }
+    if (percent > 1) {
+        percent = 1;
+    } else if (percent < 0) {
+        percent = 0;
+    }
+
+    NSRect currentProgress = progressBoundary;
+    currentProgress.size.width *= percent;
+    [[NSColor blackColor] setFill];
+    [NSBezierPath fillRect:progressBoundary];
+    [[NSColor lightGrayColor] setFill];
+    [NSBezierPath fillRect:currentProgress];
+    [[NSColor blackColor] setStroke];
+    [NSBezierPath strokeRect:progressBoundary];
+}
+
+@end
+
+void MacDockProgressView::setRange(int min, int max)
+{
+    [[MacDockProgressViewPrivate sharedProgressView] rangeStartsAt:min endsAt:max];
+}
+
+void MacDockProgressView::setProgress(int value)
+{
+    [[MacDockProgressViewPrivate sharedProgressView] setValue:value];
+}
+
+void MacDockProgressView::setProgressVisible(bool visible)
+{
+    if (visible) {
+        [[NSApp dockTile] setContentView:[MacDockProgressViewPrivate sharedProgressView]];
+    } else {
+        [[NSApp dockTile] setContentView:nil];
+    }
+    [[NSApp dockTile] display];
+}
+
+#else
+
+void MacDockProgressView::setRange(int min, int max)
+{
+    Q_UNUSED(min)
+    Q_UNUSED(max)
+}
+
+void MacDockProgressView::setProgress(int value)
+{
+    Q_UNUSED(value)
+}
+
+void MacDockProgressView::setProgressVisible(bool visible)
+{
+    Q_UNUSED(visible)
+}
+
+#endif
diff --git shell/runcontroller.cpp shell/runcontroller.cpp
index 1a411da..7cacd9b 100644
--- shell/runcontroller.cpp
+++ shell/runcontroller.cpp
@@ -55,6 +55,9 @@ Boston, MA 02110-1301, USA.
 #include "unitylauncher.h"
 #include "debug.h"
 #include <interfaces/isession.h>
+#ifdef Q_OS_OSX
+#include "macdockprogressview.h"
+#endif
 
 #include <interfaces/contextmenuextension.h>
 #include <interfaces/context.h>
@@ -666,6 +669,16 @@ void KDevelop::RunController::checkState()
         d->unityLauncher->setProgress(0);
     }
 
+#ifdef Q_OS_OSX
+    if (running) {
+        int percentDone = jobCount > 0 ? qRound(double(totalProgress) / double(jobCount)) : 0;
+        MacDockProgressView::setProgressVisible(true);
+        MacDockProgressView::setProgress(percentDone);
+    } else {
+        MacDockProgressView::setProgressVisible(false);
+    }
+#endif
+
     if ( ( d->state != Running ? false : true ) == running ) {
         d->state = running ? Running : Idle;
         emit runStateChanged(d->state);
