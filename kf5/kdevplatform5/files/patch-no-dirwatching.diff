diff --git kdevplatform/project/abstractfilemanagerplugin.cpp kdevplatform/project/abstractfilemanagerplugin.cpp
index 8fe816e1413ed1027dfdde646b697b999b8b1f83..b6828e4af86345773463e25dbdfd44598c04ad02 100644
--- kdevplatform/project/abstractfilemanagerplugin.cpp
+++ kdevplatform/project/abstractfilemanagerplugin.cpp
@@ -115,7 +115,9 @@ void AbstractFileManagerPlugin::Private::projectClosing(IProject* project)
         }
         m_projectJobs.remove(project);
     }
-    delete m_watchers.take(project);
+    if (ICore::self()->projectController()->watchAllProjectDirectories()) {
+        delete m_watchers.take(project);
+    }
     m_filters.remove(project);
 }
 
@@ -381,9 +383,11 @@ void AbstractFileManagerPlugin::Private::stopWatcher(ProjectFolderItem* folder)
     if ( !folder->path().isLocalFile() ) {
         return;
     }
-    Q_ASSERT(m_watchers.contains(folder->project()));
     const QString path = folder->path().toLocalFile();
-    m_watchers[folder->project()]->stopDirScan(path);
+    if (ICore::self()->projectController()->watchAllProjectDirectories()) {
+        Q_ASSERT(m_watchers.contains(folder->project()));
+        m_watchers[folder->project()]->stopDirScan(path);
+    }
     m_stoppedFolders.append(path);
 }
 
@@ -392,9 +396,11 @@ void AbstractFileManagerPlugin::Private::continueWatcher(ProjectFolderItem* fold
     if ( !folder->path().isLocalFile() ) {
         return;
     }
-    Q_ASSERT(m_watchers.contains(folder->project()));
     const QString path = folder->path().toLocalFile();
-    m_watchers[folder->project()]->restartDirScan(path);
+    if (ICore::self()->projectController()->watchAllProjectDirectories()) {
+        Q_ASSERT(m_watchers.contains(folder->project()));
+        m_watchers[folder->project()]->restartDirScan(path);
+    }
     const int idx = m_stoppedFolders.indexOf(path);
     if (idx != -1) {
         m_stoppedFolders.remove(idx);
@@ -467,7 +473,8 @@ ProjectFolderItem *AbstractFileManagerPlugin::import( IProject *project )
     qCDebug(FILEMANAGER) << "imported new project" << project->name() << "at" << projectRoot->path();
 
     ///TODO: check if this works for remote files when something gets changed through another KDE app
-    if ( project->path().isLocalFile() ) {
+    if (ICore::self()->projectController()->watchAllProjectDirectories() && project->path().isLocalFile() ) {
+        qCWarning(FILEMANAGER) << "Project dir monitoring is enabled";
         d->m_watchers[project] = new KDirWatch( project );
 
         connect(d->m_watchers[project], &KDirWatch::created,
diff --git kdevplatform/interfaces/iprojectcontroller.cpp kdevplatform/interfaces/iprojectcontroller.cpp
index 9c22e80a7aebd344f83dd77f1bf0c54707973ef6..2c062fdc53e305fc079082000dd7ad20ee9a02a5 100644
--- kdevplatform/interfaces/iprojectcontroller.cpp
+++ kdevplatform/interfaces/iprojectcontroller.cpp
@@ -42,5 +42,12 @@ bool IProjectController::parseAllProjectSources()
     return group.readEntry( "Parse All Project Sources", true );    
 }
 
+bool IProjectController::watchAllProjectDirectories()
+{
+    KConfigGroup group = ICore::self()->activeSession()->config()->group( "Project Manager" );
+    return group.readEntry( "Monitor All Project Directories", true );    
+}
+
+
 }
 
diff --git kdevplatform/interfaces/iprojectcontroller.h kdevplatform/interfaces/iprojectcontroller.h
index 516ba79d593f2a92d3b526c267cd8e3a1ffbc031..e41b7d9bd280cf6a5ef08fb94528c842958f524f 100644
--- kdevplatform/interfaces/iprojectcontroller.h
+++ kdevplatform/interfaces/iprojectcontroller.h
@@ -119,6 +119,11 @@ public:
      */
     static bool parseAllProjectSources();
 
+    /**
+     * @returns whether project directories should be monitored for changes or not
+     */
+    virtual bool watchAllProjectDirectories();
+
 public Q_SLOTS:
     /**
      * Tries finding a project-file for the given source-url and opens it.
