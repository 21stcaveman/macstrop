diff --git plugins/patchreview/patchreview.cpp plugins/patchreview/patchreview.cpp
index 1ddec7f..8b26180 100644
--- plugins/patchreview/patchreview.cpp
+++ plugins/patchreview/patchreview.cpp
@@ -71,7 +71,7 @@ using namespace KDevelop;
 namespace
 {
 // Maximum number of files to open directly within a tab when the review is started
-const int maximumFilesToOpenDirectly = 15;
+const int maximumFilesToOpenDirectly = 0;
 }
 
 Q_DECLARE_METATYPE( const Diff2::DiffModel* )
@@ -118,7 +118,9 @@ void PatchReviewPlugin::seekHunk( bool forwards, const QUrl& fileName ) {
                             return;
                         } else if(fileName.isEmpty()) {
                             int next = qBound(0, forwards ? a+1 : a-1, m_modelList->modelCount()-1);
-                            ICore::self()->documentController()->openDocument(urlForFileModel(m_modelList->modelAt(next)));
+                            if (next < maximumFilesToOpenDirectly) {
+                                ICore::self()->documentController()->openDocument(urlForFileModel(m_modelList->modelAt(next)));
+                            }
                         }
                     }
                 }
@@ -439,7 +441,11 @@ void PatchReviewPlugin::updateReview()
 
     switchToEmptyReviewArea();
 
-    IDocument* futureActiveDoc = ICore::self()->documentController()->openDocument( m_patch->file() );
+    KDevelop::IDocumentController *docController = ICore::self()->documentController();
+    // don't add documents opened automatically to the Files/Open Recent list
+    bool updateRecent = docController->updateRecentFilesMenu(false);
+
+    IDocument* futureActiveDoc = docController->openDocument( m_patch->file() );
 
     updateKompareModel();
 
@@ -455,29 +461,28 @@ void PatchReviewPlugin::updateReview()
     modif->setModifiedOnDiskWarning( false );
 
     Q_ASSERT( futureActiveDoc );
-    ICore::self()->documentController()->activateDocument( futureActiveDoc );
+    docController->activateDocument( futureActiveDoc );
 
     PatchReviewToolView* toolView = qobject_cast<PatchReviewToolView*>(ICore::self()->uiController()->findToolView( i18n( "Patch Review" ), m_factory ));
     Q_ASSERT( toolView );
 
-    if( m_modelList->modelCount() < maximumFilesToOpenDirectly ) {
-        //Open all relates files
-        for( int a = 0; a < m_modelList->modelCount(); ++a ) {
-            QUrl absoluteUrl = urlForFileModel( m_modelList->modelAt( a ) );
-            if (absoluteUrl.isRelative()) {
-                KMessageBox::error( 0, i18n("The base directory of the patch must be an absolute directory"), i18n( "Patch Review" ) );
-                break;
-            }
+    //Open all relates files
+    for( int a = 0; a < m_modelList->modelCount() && a < maximumFilesToOpenDirectly; ++a ) {
+        QUrl absoluteUrl = urlForFileModel( m_modelList->modelAt( a ) );
+        if (absoluteUrl.isRelative()) {
+            KMessageBox::error( 0, i18n("The base directory of the patch must be an absolute directory"), i18n( "Patch Review" ) );
+            break;
+        }
 
-            if( QFileInfo::exists( absoluteUrl.toLocalFile() ) && absoluteUrl.toLocalFile() != QLatin1String("/dev/null") )
-            {
-                toolView->open( absoluteUrl, false );
-            }else{
-                // Maybe the file was deleted
-                qCDebug(PLUGIN_PATCHREVIEW) << "could not open" << absoluteUrl << "because it doesn't exist";
-            }
+        if( QFileInfo::exists( absoluteUrl.toLocalFile() ) && absoluteUrl.toLocalFile() != QLatin1String("/dev/null") )
+        {
+            toolView->open( absoluteUrl, false );
+        }else{
+            // Maybe the file was deleted
+            qCDebug(PLUGIN_PATCHREVIEW) << "could not open" << absoluteUrl << "because it doesn't exist";
         }
     }
+    docController->updateRecentFilesMenu(updateRecent);
 }
 
 void PatchReviewPlugin::setPatch( IPatchSource* patch ) {
diff --git shell/documentcontroller.cpp shell/documentcontroller.cpp
index c1e9c4c..51f5588 100644
--- shell/documentcontroller.cpp
+++ shell/documentcontroller.cpp
@@ -87,6 +87,7 @@ struct DocumentControllerPrivate
         : controller(c)
         , fileOpenRecent(0)
         , globalTextEditorInstance(0)
+        , updateFileOpenRecent(true)
     {
     }
 
@@ -138,7 +139,7 @@ struct DocumentControllerPrivate
         auto parent = Core::self()->uiControllerInternal()->defaultMainWindow();
 
         // use special dialogs in a KDE session, native dialogs elsewhere
-        if (qEnvironmentVariableIsSet("KDE_FULL_SESSION")) {
+        /*if (qEnvironmentVariableIsSet("KDE_FULL_SESSION"))*/ {
             const auto result = KEncodingFileDialog::getOpenUrlsAndEncoding(QString(), dir,
                 filter, parent, caption);
             return {result.URLs, result.encoding};
@@ -185,7 +186,7 @@ struct DocumentControllerPrivate
 
                 documents.insert(document->url(), document);
 
-                if (!controller->isEmptyDocumentUrl(document->url()))
+                if (updateFileOpenRecent && !controller->isEmptyDocumentUrl(document->url()))
                 {
                     fileOpenRecent->addUrl(document->url());
                 }
@@ -508,7 +509,7 @@ struct DocumentControllerPrivate
                 uiController->activeSublimeWindow()->activateView(
                     partView, !activationParams.testFlag(IDocumentController::DoNotFocus));
             }
-            if (!controller->isEmptyDocumentUrl(url))
+            if (updateFileOpenRecent && !controller->isEmptyDocumentUrl(url))
             {
                 fileOpenRecent->addUrl( url );
             }
@@ -561,6 +562,7 @@ struct DocumentControllerPrivate
     QPointer<QAction> closeAllOthers;
     KRecentFilesAction* fileOpenRecent;
     KTextEditor::Document* globalTextEditorInstance;
+    bool updateFileOpenRecent;
 };
 
 DocumentController::DocumentController( QObject *parent )
@@ -1238,6 +1240,13 @@ void DocumentController::vcsAnnotateCurrentDocument()
     }
 }
 
+bool DocumentController::updateRecentFilesMenu(bool update)
+{
+    bool prev = d->updateFileOpenRecent;
+    d->updateFileOpenRecent = update;
+    return prev;
+}
+
 }
 
 #include "moc_documentcontroller.cpp"
diff --git shell/documentcontroller.h shell/documentcontroller.h
index 35c2057..bbb31e5 100644
--- shell/documentcontroller.h
+++ shell/documentcontroller.h
@@ -114,6 +114,11 @@ public:
 
     KTextEditor::Document* globalTextEditorInstance() override;
     
+    /// Determine whether or not to update the "File/Open Recent" menu when opening
+    /// new documents.
+    /// Returns the current state.
+    bool updateRecentFilesMenu(bool update) override;
+
 public Q_SLOTS:
     /**Opens a new or existing document.
     @param url The full Url of the document to open. If it is empty, a dialog to choose the document will be opened.
diff --git interfaces/idocumentcontroller.h interfaces/idocumentcontroller.h
index b8a41f0..28315cd 100644
--- interfaces/idocumentcontroller.h
+++ interfaces/idocumentcontroller.h
@@ -98,6 +98,13 @@ public:
     Q_SCRIPTABLE virtual KTextEditor::Document* globalTextEditorInstance()=0;
 
     /**
+     * Determine whether or not to update the "File/Open Recent" menu when opening
+     * new documents.
+     * Returns the current state.
+     */
+    virtual bool updateRecentFilesMenu(bool update) = 0;
+
+    /**
      * @returns the KTextEditor::View of the current document, in case it is a text document
      */
     virtual KTextEditor::View* activeTextDocumentView() const = 0;
