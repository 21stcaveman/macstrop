diff --git a/kerfuffle/pluginmanager.cpp b/kerfuffle/pluginmanager.cpp
index 02f085acfe79cf42de4525badabae66085f0fbe3..6fdc6af15f67ede101deec6d0f108d8a9b23dd41 100644
--- a/kerfuffle/pluginmanager.cpp
+++ b/kerfuffle/pluginmanager.cpp
@@ -271,17 +271,27 @@ bool PluginManager::libarchiveHasLzo()
 
     // Step 2: ldd the libarchive plugin to figure out the absolute libarchive path.
     QProcess ldd;
+#ifdef Q_OS_MACOS
+    QRegularExpression regex(QStringLiteral("/.*/libarchive.*.dylib"));
+    ldd.start(QStringLiteral("otool"), {QStringLiteral("-L"), pluginPath});
+#else
+    QRegularExpression regex(QStringLiteral("/.*/libarchive.so"));
     ldd.start(QStringLiteral("ldd"), {pluginPath});
+#endif
     ldd.waitForFinished();
     const QString output = QString::fromUtf8(ldd.readAllStandardOutput());
-    QRegularExpression regex(QStringLiteral("/.*/libarchive.so"));
     if (!regex.match(output).hasMatch()) {
         return false;
     }
 
     // Step 3: check whether libarchive links against liblzo.
     const QString libarchivePath = regex.match(output).captured(0);
+#ifdef Q_OS_MACOS
+    // qWarning() << Q_FUNC_INFO << "libarchivePath=" << libarchivePath;
+    ldd.start(QStringLiteral("otool"), {QStringLiteral("-L"), libarchivePath});
+#else
     ldd.start(QStringLiteral("ldd"), {libarchivePath});
+#endif
     ldd.waitForFinished();
     return ldd.readAllStandardOutput().contains(QByteArrayLiteral("lzo"));
 }
