diff --git a/audiocd.cpp b/audiocd.cpp
index 1f857c16fe46c51ce5d878611ebe16d35d08195f..4e1a11e534e0eb1acf75b348deb79d02a9841fcf 100644
--- a/audiocd.cpp
+++ b/audiocd.cpp
@@ -50,6 +50,8 @@ extern "C"
 #include <stdlib.h>
 #include <sys/time.h>
 #include <sys/resource.h>
+#include <errno.h>
+#include <string.h>
 
 #include <QApplication>
 #include <QFile>
@@ -68,6 +70,13 @@ extern "C"
 #include <KCddb/Client>
 #include <KCompactDisc/KCompactDisc>
 
+#ifdef Q_OS_MACOS
+#include <IOKit/IOBSD.h>
+#include <IOKit/storage/IOMedia.h>
+#include <IOKit/storage/IOCDMedia.h>
+#include <IOKit/storage/IOCDMediaBSDClient.h>
+#endif
+
 using namespace KIO;
 
 #define CDDB_INFORMATION I18N_NOOP("CDDB Information")
@@ -136,6 +145,9 @@ public:
 
 	void setToc(struct cdrom_drive *drive)
 	{
+#ifdef Q_OS_MACOS
+        drive->read_toc(drive);
+#endif
 		for (int i = 0; i < drive->tracks; ++i)
 		{
 			disc_toc[i].dwStartSector = drive->disc_toc[i].dwStartSector;
@@ -228,6 +240,9 @@ static void setDeviceToCd(KCompactDisc *cd, struct cdrom_drive *drive)
 {
 #if defined(HAVE_CDDA_IOCTL_DEVICE)
 	cd->setDevice(QLatin1String( drive->ioctl_device_name ), 50, false);
+#elif defined(Q_OS_MACOS)
+	cd->setDevice(QLatin1String( drive->cdda_device_name ), 50, false);
+	qCDebug(AUDIOCD_KIO_LOG) << "Mac optical device name:" << drive->cdda_device_name;
 #elif defined(__FreeBSD__) || defined(__DragonFly__)
 	// FreeBSD's cdparanoia as of january 5th 2006 has rather broken
 	// support for non-SCSI devices. Although it finds ATA cdroms just
@@ -296,16 +311,39 @@ struct cdrom_drive * AudioCDProtocol::initRequest(const QUrl & url)
 		setDeviceToCd(&cd, drive);
 		d->setToc(drive);
 
+#ifdef Q_OS_MACOS
+		d->tracks = drive->tracks;
+        QList<unsigned int> signature;
+#else
+        auto signature = cd.discSignature();
 		d->tracks = cd.tracks();
-		for(uint i=0; i< cd.tracks(); i++)
+#endif
+		for(uint i=0; i< d->tracks; i++) {
 			d->trackIsAudio[i] = cd.isAudio(i+1);
+#ifdef Q_OS_MACOS
+            // track start position (f+s*75+m*60*75)
+            CDMSF msf = CDConvertLBAToMSF(drive->disc_toc[i].dwStartSector);
+            signature.append(msf.frame + 75 * (msf.second + 60 * msf.minute));
+#endif
+        }
+#ifdef Q_OS_MACOS
+        {
+            // lead-out
+            CDMSF msf = CDConvertLBAToMSF(drive->disc_toc[d->tracks].dwStartSector);
+            signature.append(msf.frame + 75 * (msf.second + 60 * msf.minute));
+        }
+#endif
+        qCDebug(AUDIOCD_KIO_LOG) << "tracks found:" << d->tracks
+            << "isAudio first/last:" << cd.isAudio(1) << cd.isAudio(d->tracks)
+            << "signature:" << signature;
 
 		KCDDB::Client c;
-		d->cddbResult = c.lookup(cd.discSignature());
+		d->cddbResult = c.lookup(signature);
 		if (d->cddbResult == Success)
 		{
 			d->cddbList = c.lookupResponse();
 			d->cddbBestChoice = d->cddbList.first();
+            qCDebug(AUDIOCD_KIO_LOG) << "best CDDB response:" << d->cddbBestChoice.toString();
 		}
 		generateTemplateTitles();
 	}
@@ -544,6 +582,7 @@ void AudioCDProtocol::get(const QUrl & url)
 void AudioCDProtocol::stat(const QUrl & url)
 {
 	struct cdrom_drive * drive = initRequest(url);
+    qCDebug(AUDIOCD_KIO_LOG) << Q_FUNC_INFO << url << "-> drive" << drive << "device" << d->device;
 
 	if (!drive && d->device.isEmpty()) {
 		// This is top level directory with CDROM devices
@@ -811,12 +850,19 @@ struct cdrom_drive *AudioCDProtocol::getDrive()
 {
 	const QByteArray device(QFile::encodeName(d->device));
 
+#ifndef Q_OS_MACOS
 	if (device.isEmpty())
 		return 0;
 
 	struct cdrom_drive * drive = 0;
 
 	drive = cdda_identify(device, CDDA_MESSAGE_FORGETIT, 0);
+#else
+	struct cdrom_drive * drive = cdda_find_a_cdrom(CDDA_MESSAGE_PRINTIT, 0);
+	if (drive) {
+		cdda_verbose_set(drive,CDDA_MESSAGE_PRINTIT,CDDA_MESSAGE_PRINTIT);
+	}
+#endif
 
 	if (0 == drive) {
 		qCDebug(AUDIOCD_KIO_LOG) << "Can't find an audio CD on: \"" << d->device << "\"";
@@ -840,6 +886,15 @@ i18n("Unknown error.  If you have a cd in the drive try running cdparanoia -vsQ
 		cdda_close(drive);
 		return 0;
 	}
+#ifdef Q_OS_MACOS
+	else
+	{
+		d->device = QString::fromUtf8(drive->cdda_device_name);
+		drive->read_toc(drive);
+		qCDebug(AUDIOCD_KIO_LOG) << "Found Mac optical drive" << drive << d->device
+			<< "with" << drive->tracks << "tracks";
+	}
+#endif
 
 	return drive;
 }
@@ -1044,7 +1099,7 @@ void AudioCDProtocol::parseURLArgs(const QUrl & url)
 		else if (attribute == QLatin1String("niceLevel")){
 			int niceLevel = value.toInt();
 			if(setpriority(PRIO_PROCESS, getpid(), niceLevel) != 0)
-				qCDebug(AUDIOCD_KIO_LOG) << "Setting nice level to (" << niceLevel << ") failed.";
+				qCDebug(AUDIOCD_KIO_LOG) << "Setting nice level to (" << niceLevel << ") failed:" << strerror(errno);
 		}
 	}
 }
@@ -1075,7 +1130,7 @@ void AudioCDProtocol::loadSettings()
 	if(groupCDDA.hasKey("niceLevel")) {
 		int niceLevel = groupCDDA.readEntry("niceLevel", 0);
 		if(setpriority(PRIO_PROCESS, getpid(), niceLevel) != 0)
-			qCDebug(AUDIOCD_KIO_LOG) << "Setting nice level to (" << niceLevel << ") failed.";
+			qCDebug(AUDIOCD_KIO_LOG) << "Setting nice level to (" << niceLevel << ") failed:" << strerror(errno);
 	}
 
 	// The default track filename template
@@ -1162,6 +1217,8 @@ void AudioCDProtocol::generateTemplateTitles()
 	d->templateAlbumName.replace( QRegExp(d->rsearch), d->rreplace );
 
 	d->templateFileLocation = KMacroExpander::expandMacros(d->fileLocationTemplate, macros, QLatin1Char( '%' ));
+    qCDebug(AUDIOCD_KIO_LOG) << "album info" << macros;
+    qCDebug(AUDIOCD_KIO_LOG) << "templateFileLocation:" << d->fileLocationTemplate << "->" << d->templateFileLocation;
 }
 
 /**
