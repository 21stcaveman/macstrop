diff --git a/src/kcompactdisc.cpp b/src/kcompactdisc.cpp
index b7b06eed317db098433977f55f04e24a94e6a140..bad57c42598de2e8d1ad804057c0f4c019b85953 100644
--- a/src/kcompactdisc.cpp
+++ b/src/kcompactdisc.cpp
@@ -76,6 +76,7 @@ static void refreshListOfCdromDevices()
         else
             name = (QLatin1Char('[') + type + QLatin1String( " - unknown vendor - " ) + device.product() + QLatin1Char( ']' ));
 
+        qCDebug(KCD) << "name=" << name << "url=" << url;
         cdromsNameToDeviceUrl.insert(name, url);
         cdromsNameToUdi.insert(name, device.udi());
     }
diff --git a/src/phonon_interface.cpp b/src/phonon_interface.cpp
index 065e07ce07bdd73d1fd0e5166e02818cef3346a4..3a413342732dc74f61d205f604790161d43cb2ca 100644
--- a/src/phonon_interface.cpp
+++ b/src/phonon_interface.cpp
@@ -36,6 +36,7 @@
 #include <solid/device.h>
 #include <solid/opticaldrive.h>
 #include <solid/opticaldisc.h>
+#include <solid/block.h>
 
 #define WM_MSG_CLASS WM_MSG_CLASS_PLATFORM
 
@@ -74,6 +75,14 @@ ProducerWidget::ProducerWidget(KPhononCompactDiscPrivate *p, const QString &Udi)
     m_media->setCurrentSource(*m_mediaSource);
 
     m_mediaController = new MediaController(m_media);
+    qCDebug(KCD) << "mediaController" << m_mediaController << "with features" << m_mediaController->supportedFeatures();
+    qCDebug(KCD) << "mediaSource: type=" << m_mediaSource->type()
+        << "\n\tfileName=" << m_mediaSource->fileName()
+        << "\n\tmrl=" << m_mediaSource->mrl()
+        << "\n\turl=" << m_mediaSource->url()
+        << "\n\tdiscType=" << m_mediaSource->discType()
+        << "\n\tdeviceName=" << m_mediaSource->deviceName();
+    qCDebug(KCD) << "Last mediaObject error:" << m_media->errorString();
 }
 
 ProducerWidget::~ProducerWidget()
@@ -126,17 +135,31 @@ ProducerWidget *KPhononCompactDiscPrivate::producer()
 	if(!m_producerWidget) {
 		Solid::Device opticalDevice(m_udi);
 		Solid::OpticalDrive *opticalDrive = opticalDevice.as<Solid::OpticalDrive>();
-		qCDebug(KCD) << "producer called, opticalDrive is " << opticalDrive;
+        const QString devName = opticalDevice.as<Solid::Block>()->device();
+        QString udi = m_udi;
+		qCDebug(KCD) << "producer called, opticalDrive is " << opticalDrive << devName;
 
 		if(opticalDrive) {
-			Solid::OpticalDisc *opticalDisc = opticalDevice.as<Solid::OpticalDisc>();
-            qCDebug(KCD) << "opticalDisc " << opticalDisc;
+            const Solid::OpticalDisc *opticalDisc = 0;
+            QList<Solid::Device> opticalDiscDevice = Solid::Device::listFromType(Solid::DeviceInterface::OpticalDisc, m_udi);
+            foreach (auto &oDisc, opticalDiscDevice) {
+                if (oDisc.as<Solid::Block>()->device() == devName) {
+                    opticalDisc = oDisc.as<Solid::OpticalDisc>();
+                    udi = oDisc.udi();
+                }
+            }
+            qCDebug(KCD) << "opticalDisc " << opticalDisc << "capacity=" << opticalDisc->capacity() << "udi=" << udi;
 			//if(opticalDisc && (opticalDisc->availableContent() == Solid::OpticalDisc::Audio)) {
-				m_producerWidget = new ProducerWidget(this, m_udi);
+				m_producerWidget = new ProducerWidget(this, udi);
 				stateChanged(m_producerWidget->m_media->state(), Phonon::StoppedState);
 			//}
 		}
-	}
+	} else {
+        const QString errorString = m_producerWidget->m_media->errorString();
+        if (!errorString.isEmpty()) {
+            qCDebug(KCD) << "Last produced error:" << errorString;
+        }
+    }
 
 	return m_producerWidget;
 }
