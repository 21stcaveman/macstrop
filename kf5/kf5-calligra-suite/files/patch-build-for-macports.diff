diff --git a/CMakeLists.txt b/CMakeLists.txt
index 64acbd9857dd31f0d3cf36a4fb7015b1a20b5d53..ea94d621e69023bfbfaa1725ba8784ef63093e33 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -107,9 +107,20 @@ message(STATUS "Release build: ${RELEASE_BUILD}")
 #############
 ############
 
+include(FeatureSummary)
+
 option(GHNS "support Get Hot New Stuff" OFF)
 option(PACKAGERS_BUILD "Build support of multiple CPU architectures in one binary. Should be used by packagers only." ON)
 
+# Generate a standalone app bundle when building on Apple's OS X
+# set this to build a more unix-traditional layout that uses and provides
+# shared libraries and other resources (e.g. for MacPorts, Fink, HomeBrew etc.)
+# TODO: Make this default - when the feature has been sorted out properly.
+if(APPLE)
+    option(APPLE_STANDALONE_BUNDLE "Generate a standalone app bundle when building on Apple's OS (experimental)" OFF)
+    add_feature_info("App Bundle" APPLE_STANDALONE_BUNDLE "Generate a standalone app bundle when building on Apple's OS (experimental)")
+endif()
+
  #######################
 ########################
 ## Productset setting ##
@@ -176,7 +187,6 @@ include(CheckFunctionExists)
 include(CheckTypeSize)
 include(CheckIncludeFile)
 include(GenerateExportHeader)
-include(FeatureSummary)
 # ECM macros
 include(ECMOptionalAddSubdirectory)
 include(ECMInstallIcons)
@@ -382,6 +392,10 @@ if(WIN32)
     set(WIN32_PLATFORM_NET_LIBS ws2_32.lib netapi32.lib)
 endif()
 
+if(APPLE AND APPLE_STANDALONE_BUNDLE)
+    add_definitions(-DAPPLE_STANDALONE_BUNDLE)
+endif()
+
  ###########################
 ############################
 ## Required dependencies  ##
diff --git a/libs/main/KoApplication.cpp b/libs/main/KoApplication.cpp
index fae530f7dcde81fe0777cdac82647c344add0f3c..27d4c084b8a53355183b85b96cc4b1736b5db926 100644
--- a/libs/main/KoApplication.cpp
+++ b/libs/main/KoApplication.cpp
@@ -158,7 +190,7 @@ KoApplication::KoApplication(const QByteArray &nativeMimeType,
     QDBusConnection::sessionBus().registerObject("/application", this);
 #endif
 
-#ifdef Q_OS_MACX
+#ifdef Q_OS_MACOS
     if ( QSysInfo::MacintoshVersion > QSysInfo::MV_10_8 )
     {
         // fix Mac OS X 10.9 (mavericks) font issue
@@ -223,7 +223,7 @@ bool KoApplication::start()
 
     aboutData.processCommandLine(&parser);
 
-#if defined(Q_OS_WIN) || defined (Q_OS_MACX)
+#if defined(Q_OS_WIN) || defined (Q_OS_MACOS)
 #ifdef ENV32BIT
     if (isWow64()) {
         KMessageBox::information(0,
@@ -239,14 +239,26 @@ bool KoApplication::start()
     appdir.cdUp();
 
     QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
+#ifdef Q_OS_WIN
     if (!env.contains("XDG_DATA_DIRS")) {
-        qputenv("XDG_DATA_DIRS", QFile::encodeName(appdir.absolutePath() + "/share"));
+        // add the paths that Krita5 sets in XDG_DATA_DIRS
+        qputenv("XDG_DATA_DIRS", QFile::encodeName(appdir.absolutePath() + "/share:" +
+            QFile::encodeName(QStandardPaths::standardLocations(QStandardPaths::GenericDataLocation).join(QLatin1Char(':')))));
     }
     qputenv("PATH", QFile::encodeName(appdir.absolutePath() + "/bin" + ";"
                                       + appdir.absolutePath() + "/lib" + ";"
                                       + appdir.absolutePath() + "/lib/kde4" + ";"
                                       + appdir.absolutePath() + "/Frameworks" + ";"
                                       + appdir.absolutePath()));
+#elif APPLE_STANDALONE_BUNDLE
+    // only change things w.r.t. standard Unix in standalone app bundle builds
+    // TODO: figure out the appropriate paths
+    qputenv("PATH", QFile::encodeName(appdir.absolutePath() + "/bin" + ":"
+                                      + appdir.absolutePath() + "/lib" + ":"
+                                      + appdir.absolutePath() + "/Frameworks" + ":"
+                                      + qgetenv("PATH")));
+//     qWarning() << Q_FUNC_INFO << "PATH=" << qgetenv("PATH");
+#endif
 #endif
 
     if (d->splashScreen) {
diff --git a/libs/widgets/KoResourcePaths.cpp b/libs/widgets/KoResourcePaths.cpp
index 7df9dc605a407d6042b5e5283b031d535a849d11..ef4a57b1bb042e4ea208c2c9ccfd7297205451c7 100644
--- a/libs/widgets/KoResourcePaths.cpp
+++ b/libs/widgets/KoResourcePaths.cpp
@@ -40,14 +40,29 @@ class KoResourcePathsImpl
 public:
     static QStandardPaths::StandardLocation mapTypeToQStandardPaths(const QString &type)
     {
-        return
-            type == QLatin1String("data") ?    QStandardPaths::GenericDataLocation :
-            type == QLatin1String("config") ?  QStandardPaths::GenericConfigLocation :
-            type == QLatin1String("cache") ?   QStandardPaths::CacheLocation :
-            type == QLatin1String("tmp") ?     QStandardPaths::TempLocation :
-            type == QLatin1String("appdata") ? QStandardPaths::DataLocation :
-            type == QLatin1String("locale") ?  QStandardPaths::GenericDataLocation :
-            /* default */                      QStandardPaths::GenericDataLocation;
+        static const QMap<QString,QStandardPaths::StandardLocation> qspFromType = {
+            {QStringLiteral("config"),  QStandardPaths::GenericConfigLocation},
+            {QStringLiteral("cache"),   QStandardPaths::CacheLocation},
+            {QStringLiteral("tmp"),     QStandardPaths::TempLocation},
+#ifndef APPLE_STANDALONE_BUNDLE
+            {QStringLiteral("data"),    QStandardPaths::GenericDataLocation},
+            {QStringLiteral("appdata"), QStandardPaths::DataLocation},
+            {QStringLiteral("locale"),  QStandardPaths::GenericDataLocation},
+#else
+            // use the QSP locations that point into the app bundle
+            // TODO: this will be /path/to/foo.app/Contents/Resources
+            //       set this location up with symlinks into ../share
+            //       or install directly into Resources if(APPLE_STANDALONE_BUNDLE).
+            {QStringLiteral("data"),    QStandardPaths::AppDataLocation},
+            {QStringLiteral("appdata"), QStandardPaths::AppDataLocation},
+            {QStringLiteral("locale"),  QStandardPaths::AppDataLocation},
+#endif
+        };
+        if (qspFromType.contains(type)) {
+            return qspFromType[type];
+        } else {
+            return QStandardPaths::GenericDataLocation;
+        }
     }
 
     KoResourcePathsImpl();
diff --git a/libs/widgets/KoResourcePaths.h b/libs/widgets/KoResourcePaths.h
index 8830a5aeb8e6bcd0d111bdcef77a6e801208c09b..df5ae74193a38d51263839ba049a2f7c995dbcd9 100644
--- a/libs/widgets/KoResourcePaths.h
+++ b/libs/widgets/KoResourcePaths.h
@@ -27,6 +27,20 @@
 class QStringList;
 
 
+#ifndef APPLE_STANDALONE_BUNDLE
+#define KoQSP_DataLocation      QStandardPaths::GenericDataLocation
+#define KoQSP_AppDataLocation   QStandardPaths::DataLocation
+#define KoQSP_LocaleLocation    QStandardPaths::GenericDataLocation
+#else
+    // use the QSP locations that point into the app bundle
+    // TODO: this will be /path/to/foo.app/Contents/Resources
+    //       set this location up with symlinks into ../share
+    //       or install directly into Resources if(APPLE_STANDALONE_BUNDLE).
+#define KoQSP_DataLocation      QStandardPaths::AppDataLocation
+#define KoQSP_AppDataLocation   QStandardPaths::AppDataLocation
+#define KoQSP_LocaleLocation    QStandardPaths::AppDataLocation
+#endif
+
 namespace KoResourcePaths
 {
     enum SearchOption { NoSearchOptions = 0,
