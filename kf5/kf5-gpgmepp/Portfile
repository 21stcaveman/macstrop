# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem          1.0

set kf5.project     gpgmepp
set kf5.virtualPath applications
PortGroup           kf5 1.1

maintainers         gmail.com:rjvbertin mk openmaintainer

description         C++ bindings/wrapper for gpgme
long_description    GpgME++ is a C++ wrapper (or C++ bindings) for the GnuPG project's \
                    gpgme (GnuPG Made Easy) library, version 0.4.4 and later.

checksums           rmd160  2a6f3a1521593e4a4b1d5dd93edab9786e8cfdc3 \
                    sha256  6406e37fc65c021d275df9b83c96b85e1adc847bfce2dbf5993792604b9f0091

# this port contains what is really a KF5 framework, so it has to copy certain things from the KF5-Frameworks port:
variant qspXDG description {Configure Qt5's QStandardPaths to return XDG/Linuxy paths for shared locations} {
# The Qt5 QStandardPaths (QSP) patch allows QSP to return XDG/linuxy locations (paths) that are more suitable
# for a shared use of Qt5 in the MacPorts universe than the default values QSP returns that follow Apple's
# sandboxing dogmas. It must however be activated so that individual ports have the choice which "flavour" they
# use. KF5 applications should (probably) by using the XDG/Linuxy flavour unless they are to be built into
# individual, autonomous app bundles that each contain all required dependencies.
# Activation of the QSP patch is done by linking an additional, dedicated Qt component: Qt5::QspXDG .
# The approach philosophy used here is to link that component with all KF5 frameworks and helper applications
# built as part of those frameworks, even if they do not use the QSP class themselves. This redundancy comes
# with an overhead that should be negligible, and serves to lower the maintenance burden (monitoring the
# appearance of QSP usage).
}

if {${os.platform} eq "darwin"} {
    if {[file exists ${qt_cmake_module_dir}/Qt5QspXDG/Qt5QspXDGConfig.cmake]} {
        default_variants \
                    +qspXDG
    } else {
        ui_debug "We appear to be building against a Qt5 port that doesn't have the QSP patch from port:qt5-kde. Don't fight it, just warn."
        notes-append "You will be running KF5 applications with the stock/native Qt5::QStandardPaths behaviour.\
                     That is not the recommended configuration for this port."
    }
}

pre-patch {
    if {[variant_isset qspXDG] && ${subport} ne "kf5-tier1-frameworks" \
        && ${subport} ne "kf5-tier2-frameworks" && ${subport} ne "kf5-tier3-frameworks"} {
        # patch the find_package(Qt5) command to add the activator of the QSP patch (which selects XDG behaviour).
        # careful with the backslashes: it's a regular expression that must be passed on to sed(1) correctly!
        reinplace "s|\\(find_package(Qt5 \[\^\)\]\*\\))|\\1 QspXDG)|g" ${worksrcpath}/CMakeLists.txt
        if {[file exists ${worksrcpath}/src/CMakeLists.txt]} {
            reinplace "s|\\(find_package(Qt5 \[\^\)\]\*\\))|\\1 QspXDG)|g" ${worksrcpath}/src/CMakeLists.txt
            reinplace "s|\\(target_link_libraries(KF5\[\^ \$\]\*\\)|\\1 PRIVATE Qt5::QspXDG|g" ${worksrcpath}/src/CMakeLists.txt
        }
    }
}

if {${os.platform} eq "darwin"} {
    depends_lib-append \
                    port:gpgme \
                    port:boost
}