diff --git plugins/astyle/astyle_plugin.cpp plugins/astyle/astyle_plugin.cpp
index 1b26bb6fce682d8f6ab8d5181807a0e589b94788..5549f6618ce118698358e63046e607d15c3ae21a 100644
--- plugins/astyle/astyle_plugin.cpp
+++ plugins/astyle/astyle_plugin.cpp
@@ -101,6 +101,9 @@ static SourceFormatterStyle::MimeList supportedMimeTypes()
         {QStringLiteral("text/x-csrc"), QStringLiteral("C")},
         {QStringLiteral("text/x-java"), QStringLiteral("Java")},
         {QStringLiteral("text/x-csharp"), QStringLiteral("C#")},
+        {QStringLiteral("text/x-objchdr"), QStringLiteral("ObjC")},
+        {QStringLiteral("text/x-objcsrc"), QStringLiteral("ObjC")},
+        {QStringLiteral("text/x-objc++src"), QStringLiteral("ObjC++")},
     };
 }
 
@@ -141,13 +144,27 @@ SettingsWidget* AStylePlugin::editStyleWidget(const QMimeType& mime) const
         lang = AStylePreferences::Java;
     else if(mime.inherits(QStringLiteral("text/x-csharp")))
         lang = AStylePreferences::CSharp;
+    else if(mime.inherits(QStringLiteral("text/x-objcsrc")))
+        lang = AStylePreferences::ObjC;
     return new AStylePreferences(lang);
 }
 
-QString AStylePlugin::previewText(const SourceFormatterStyle& /*style*/, const QMimeType& /*mime*/) const
+QString AStylePlugin::previewText(const SourceFormatterStyle& /*style*/, const QMimeType& mime) const
 {
-    return QLatin1String("// Indentation\n") + indentingSample() + QLatin1String("\t// Formatting\n")
-        + formattingSample();
+    QString preview = QLatin1String("// Indentation\n");
+    // TODO: add previews for the other supported languages
+    if (mime.inherits(QStringLiteral("text/x-objcsrc"))) {
+        preview += indentingObjCSample();
+    } else {
+        preview += indentingCxxSample();
+    }
+    preview += QLatin1String("\t// Formatting\n");
+    if (mime.inherits(QStringLiteral("text/x-objcsrc"))) {
+        preview += formattingObjCSample();
+    } else {
+        preview += formattingCxxSample();
+    }
+    return preview;
 }
 
 AStylePlugin::Indentation AStylePlugin::indentation(const QUrl& url) const
@@ -172,7 +189,7 @@ AStylePlugin::Indentation AStylePlugin::indentation(const QUrl& url) const
     return ret;
 }
 
-QString AStylePlugin::formattingSample()
+QString AStylePlugin::formattingCxxSample()
 {
     return QStringLiteral(
     "void func(){\n"
@@ -211,7 +228,7 @@ QString AStylePlugin::formattingSample()
     );
 }
 
-QString AStylePlugin::indentingSample()
+QString AStylePlugin::indentingCxxSample()
 {
     return QStringLiteral(
     "#define foobar(A)\\\n"
@@ -268,4 +285,104 @@ QString AStylePlugin::indentingSample()
     );
 }
 
+QString AStylePlugin::formattingObjCSample()
+{
+    return QStringLiteral(
+    "void func(){\n"
+    "\tif(isFoo(a,b))\n"
+    "\tbar(a,b);\n"
+    "if(isFoo)\n"
+    "\ta=bar((b-c)*a,*d--);\n"
+    "if(  isFoo( a,b ) )\n"
+    "\tbar(a, b);\n"
+    "if (isFoo) {isFoo=false;cat << isFoo <<endl;}\n"
+    "if(isFoo)DoBar();if (isFoo){\n"
+    "\tbar();\n"
+    "}\n"
+    "\telse if(isBar()){\n"
+    "\tannotherBar();\n"
+    "}\n"
+    "int var = 1;\n"
+    "int *ptr = &var;\n"
+    "\n"
+    "}\n"
+    "@implementation someClass \n"
+    "+ (someClass*) someClassWithFoo:(int)foo\n"
+    "{\n"
+    "  someClass *this;\n"
+    "  if (foo) {\n"
+    "    this = [[someClass alloc] initWith:foo];\n"
+    "  } else {\n"
+    "    // bla\n"
+    "  }\n"
+    "  return self;\n"
+    "}\n"
+    "@end\n"
+    );
+}
+
+QString AStylePlugin::indentingObjCSample()
+{
+    return QStringLiteral(
+    "#import <objc/Object.h>\n"
+    "\n"
+    "#define foobar(A)\\\n"
+    "\t{Foo();Bar();}\n"
+    "#define anotherFoo(B)\\\n"
+    "\treturn Bar()\n"
+    "\n"
+    "@interface Foo : Bar {\n"
+    "@private\n"
+    "\tid Baz;\n"
+    "}\n"
+    "- (void) init;\n"
+    "- (NSString*) description;\n"
+    "@property (retain) id Baz;\n"
+    "@end\n"
+    "\n"
+    "@interface Foo (Bar)\n"
+    "- (void)bar:(int) foo;\n"
+    "@end\n"
+    "\n"
+    "@implementation Foo (Bar)\n"
+    "\n"
+    "- (void) bar:(int) foo\n"
+    "{\n"
+    "\tswitch (foo) {\n"
+    "case 1:\n"
+    "a += 1;\n"
+    "break;\n"
+    "case 2: {\n"
+    "a += 2;\n"
+    "break;\n"
+    "}\n"
+    "}\n"
+    "if (isFoo) {\n"
+    "bar();\n"
+    "} else {\n"
+    "[anotherBar withFoo:self];\n"
+    "}\n"
+    "}\n"
+    "\n"
+    "@end\n"
+    "int foo()\n"
+    "while (isFoo)\n"
+    "{\n"
+    "\t// ...\n"
+    "\tgoto error;\n"
+    "\t/* .... */\n"
+    "error:\n"
+    "\t//...\n"
+    "}\n"
+    "\n"
+    "fooArray[] = { red,\n"
+    "\tgreen,\n"
+    "\tdarkblue};\n"
+    "fooFunction(barArg1,\n"
+    "\tbarArg2,\n"
+    "\tbarArg3);\n"
+    "struct foo { int bar() {} };\n"
+    );
+}
+
 #include "astyle_plugin.moc"
diff --git plugins/astyle/astyle_plugin.h plugins/astyle/astyle_plugin.h
index cce4a318312abf28b46b7c4920ab5cb0bea13423..c89cf9604233d2733c7667c2d7e64ab74ef8c3ab 100644
--- plugins/astyle/astyle_plugin.h
+++ plugins/astyle/astyle_plugin.h
@@ -66,8 +66,10 @@ public:
     */
     Indentation indentation(const QUrl &url) const override;
 
-    static QString formattingSample();
-    static QString indentingSample();
+    static QString formattingCxxSample();
+    static QString indentingCxxSample();
+    static QString formattingObjCSample();
+    static QString indentingObjCSample();
 
 private:
     QScopedPointer<AStyleFormatter> m_formatter;
diff --git plugins/astyle/astyle_preferences.cpp plugins/astyle/astyle_preferences.cpp
index c2dcc7d222dbf9a6cbee1766573511331ab52400..b1fb3c9bfc40d36e78711b331a05e89ed9f2dfa4 100644
--- plugins/astyle/astyle_preferences.cpp
+++ plugins/astyle/astyle_preferences.cpp
@@ -62,10 +62,12 @@ const int POINTERALIGN_TYPE = 3;
 AStylePreferences::AStylePreferences(Language lang, QWidget *parent)
     : SettingsWidget(parent)
     , m_formatter(new AStyleFormatter)
+    , m_currentLanguage(lang)
 {
     setupUi(this);
     switch(lang) {
         case AStylePreferences::CPP:
+        case AStylePreferences::ObjC:
             m_formatter->setCStyle();
             break;
         case AStylePreferences::Java:
@@ -250,9 +252,11 @@ void AStylePreferences::updatePreviewText(bool emitChangedSignal)
 {
     Q_UNUSED(emitChangedSignal);
     if(tabWidget->currentIndex() == 0)
-        emit previewTextChanged(AStylePlugin::indentingSample());
+        emit previewTextChanged(m_currentLanguage == ObjC ?
+            AStylePlugin::indentingObjCSample() : AStylePlugin::indentingCxxSample());
     else
-        emit previewTextChanged(AStylePlugin::formattingSample());
+        emit previewTextChanged(m_currentLanguage == ObjC ?
+            AStylePlugin::formattingObjCSample() : AStylePlugin::formattingCxxSample());
 }
 
 void AStylePreferences::currentTabChanged()
diff --git plugins/astyle/astyle_preferences.h plugins/astyle/astyle_preferences.h
index ccc7ca3bcfe0b5b418af5ae02d6b7c5dd00a3b63..c2f1c06e9b897ccadd2302e612331a273703be7b 100644
--- plugins/astyle/astyle_preferences.h
+++ plugins/astyle/astyle_preferences.h
@@ -31,7 +31,7 @@ class AStylePreferences : public KDevelop::SettingsWidget, public Ui::AStylePref
         Q_OBJECT
 
 public:
-    enum Language { CPP, Java, CSharp};
+    enum Language { CPP, Java, CSharp, ObjC};
 
     explicit AStylePreferences(Language lang=CPP, QWidget *parent=nullptr);
     ~AStylePreferences() override;
@@ -59,6 +59,7 @@ private Q_SLOTS:
 private:
     QScopedPointer<AStyleFormatter> m_formatter;
     bool m_enableWidgetSignals;
+    Language m_currentLanguage;
 };
 
 #endif // ASTYLEPREFERENCES_H
diff --git plugins/clang/duchain/builder.cpp plugins/clang/duchain/builder.cpp
index d173c33e6cd40a25c4e303e1027f13c35da5dc1a..1d9816826a2f0b2571f29159128dbd73fcd1aa92 100644
--- plugins/clang/duchain/builder.cpp
+++ plugins/clang/duchain/builder.cpp
@@ -1202,7 +1202,7 @@ CXChildVisitResult Visitor::buildParmDecl(CXCursor cursor)
 CXChildVisitResult Visitor::buildUse(CXCursor cursor)
 {
     m_uses[m_parentContext->context].push_back(cursor);
-    return cursor.kind == CXCursor_DeclRefExpr || cursor.kind == CXCursor_MemberRefExpr ?
+    return cursor.kind == CXCursor_DeclRefExpr || cursor.kind == CXCursor_MemberRefExpr || cursor.kind == CXCursor_ObjCMessageExpr?
         CXChildVisit_Recurse : CXChildVisit_Continue;
 }
 
@@ -1221,9 +1221,9 @@ CXChildVisitResult Visitor::buildMacroExpansion(CXCursor cursor)
 template<CXCursorKind CK>
 CXChildVisitResult Visitor::buildCompoundStatement(CXCursor cursor)
 {
-    if (CK == CXCursor_LambdaExpr || m_parentContext->context->type() == DUContext::Function)
+    if (CK == CXCursor_LambdaExpr || CK == CXCursor_BlockExpr || m_parentContext->context->type() == DUContext::Function)
     {
-        auto context = createContext<CK, CK == CXCursor_LambdaExpr ? DUContext::Function : DUContext::Other>(cursor);
+        auto context = createContext<CK, CK == CXCursor_LambdaExpr || CK == CXCursor_BlockExpr ? DUContext::Function : DUContext::Other>(cursor);
         CurrentContext newParent(context, m_parentContext->keepAliveContexts);
         PushValue<CurrentContext*> pushCurrent(m_parentContext, &newParent);
         clang_visitChildren(cursor, &visitCursor, this);
@@ -1560,6 +1560,7 @@ CXChildVisitResult visitCursor(CXCursor cursor, CXCursor parent, CXClientData da
     case CXCursor_DeclRefExpr:
     case CXCursor_MemberRefExpr:
     case CXCursor_ObjCClassRef:
+    case CXCursor_ObjCMessageExpr:
         return visitor->buildUse(cursor);
     case CXCursor_MacroExpansion:
         return visitor->buildMacroExpansion(cursor);
@@ -1567,6 +1568,8 @@ CXChildVisitResult visitCursor(CXCursor cursor, CXCursor parent, CXClientData da
         return visitor->buildCompoundStatement<CXCursor_CompoundStmt>(cursor);
     case CXCursor_LambdaExpr:
         return visitor->buildCompoundStatement<CXCursor_LambdaExpr>(cursor);
+    case CXCursor_BlockExpr:
+        return visitor->buildCompoundStatement<CXCursor_BlockExpr>(cursor);
     case CXCursor_CXXBaseSpecifier:
         return visitor->buildCXXBaseSpecifier(cursor);
     case CXCursor_ParmDecl:
diff --git plugins/clang/duchain/documentfinderhelpers.cpp plugins/clang/duchain/documentfinderhelpers.cpp
index ef23abda4c..3d77a8b03d 100644
--- plugins/clang/duchain/documentfinderhelpers.cpp
+++ plugins/clang/duchain/documentfinderhelpers.cpp
@@ -179,9 +179,11 @@ QStringList mimeTypesList()
     static const QStringList mimeTypes = {
         QStringLiteral("text/x-chdr"),
         QStringLiteral("text/x-c++hdr"),
+        QStringLiteral("text/x-objchdr"),
         QStringLiteral("text/x-csrc"),
         QStringLiteral("text/x-c++src"),
-        QStringLiteral("text/x-objcsrc")
+        QStringLiteral("text/x-objcsrc"),
+        QStringLiteral("text/x-objc++src")
     };
     return mimeTypes;
 }
diff --git plugins/clang/duchain/parsesession.cpp plugins/clang/duchain/parsesession.cpp
index 7edccf6157..361639808b 100644
--- plugins/clang/duchain/parsesession.cpp
+++ plugins/clang/duchain/parsesession.cpp
@@ -91,10 +91,7 @@ void sanitizeArguments(QVector<QByteArray>& arguments)
 QVector<QByteArray> argsForSession(const QString& path, ParseSessionData::Options options, const ParserSettings& parserSettings)
 {
     QMimeDatabase db;
-    if(db.mimeTypeForFile(path).name() == QStringLiteral("text/x-objcsrc")) {
-        return {QByteArrayLiteral("-xobjective-c++")};
-    }
-
+    QString mimeType = db.mimeTypeForFile(path).name();
     // TODO: No proper mime type detection possible yet
     // cf. https://bugs.freedesktop.org/show_bug.cgi?id=26913
     if (path.endsWith(QLatin1String(".cl"), Qt::CaseInsensitive)) {
@@ -107,7 +104,12 @@ QVector<QByteArray> argsForSession(const QString& path, ParseSessionData::Option
         return {QByteArrayLiteral("-xcuda")};
     }
 
-    if (parserSettings.parserOptions.isEmpty()) {
+    QByteArray objcOption;
+    if (mimeType == QStringLiteral("text/x-objcsrc")) {
+        objcOption = QByteArrayLiteral(" -ObjC");
+    } else if (mimeType == QStringLiteral("text/x-objc++src")) {
+        objcOption = QByteArrayLiteral("-xobjective-c++");
+    } else if (parserSettings.parserOptions.isEmpty()) {
         // The parserOptions can be empty for some unit tests that use ParseSession directly
         auto defaultArguments = ClangSettingsManager::self()->parserSettings(path).toClangAPI();
 
@@ -132,7 +134,11 @@ QVector<QByteArray> argsForSession(const QString& path, ParseSessionData::Option
         return result;
     }
 
-    result.append(parserSettings.isCpp() ? QByteArrayLiteral("-xc++") : QByteArrayLiteral("-xc"));
+    if (!objcOption.isEmpty()) {
+       result.append(objcOption);
+    } else {
+       result.append(parserSettings.isCpp() ? QByteArrayLiteral("-xc++") : QByteArrayLiteral("-xc"));
+    }
 
     sanitizeArguments(result);
     return result;
diff --git plugins/clang/kdevclangsupport.json plugins/clang/kdevclangsupport.json
index a1183d3c84..9b4774d0b8 100644
--- plugins/clang/kdevclangsupport.json
+++ plugins/clang/kdevclangsupport.json
@@ -70,6 +70,9 @@
         "text/x-c++src",
         "text/x-opencl-src",
         "text/vnd.nvidia.cuda.csrc",
-        "text/x-objcsrc"
+        "text/x-objcsrc",
+        "text/x-objchdr",
+        "text/x-objcsrc",
+        "text/x-objc++src"
     ]
 }
