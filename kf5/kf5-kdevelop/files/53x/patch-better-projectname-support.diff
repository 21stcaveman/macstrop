diff --git kdevplatform/shell/openprojectdialog.cpp kdevplatform/shell/openprojectdialog.cpp
index c16bc5e01ae45bf072e708d351cb84840a969c5f..cc0255ce7c8cb773a33921433b5756f5b2aac740 100644
--- kdevplatform/shell/openprojectdialog.cpp
+++ kdevplatform/shell/openprojectdialog.cpp
@@ -15,6 +15,7 @@
 #include <QPushButton>
 #include <QFileInfo>
 #include <QFileDialog>
+#include <QRegularExpression>
 
 #include <KColorScheme>
 #include <KIO/StatJob>
@@ -73,6 +74,7 @@ OpenProjectDialog::OpenProjectDialog(bool fetch, const QUrl& startUrl,
                                      const QUrl& repoUrl, IPlugin* vcsOrProviderPlugin,
                                      QWidget* parent)
     : KAssistantDialog( parent )
+    , m_projectDirUrl(QUrl())
     , m_urlIsDirectory(false)
     , sourcePage(nullptr)
     , openPage(nullptr)
@@ -271,7 +277,9 @@ void OpenProjectDialog::validateOpenUrl( const QUrl& url_ )
             }
             page->populateProjectFileCombo(choices);
         }
-        m_url.setPath( m_url.path() + QLatin1Char('/') + m_url.fileName() + QLatin1Char('.') + ShellExtension::getInstance()->projectFileExtension() );
+        if (!m_url.toLocalFile().endsWith(QLatin1Char('.') + ShellExtension::getInstance()->projectFileExtension())) {
+          m_url.setPath( m_url.path() + QLatin1Char('/') + m_url.fileName() + QLatin1Char('.') + ShellExtension::getInstance()->projectFileExtension() );
+        }
     } else {
         setAppropriate( projectInfoPage, false );
         m_url = url;
@@ -309,7 +317,32 @@ void OpenProjectDialog::openPageAccepted()
 
 void OpenProjectDialog::validateProjectName( const QString& name )
 {
-    m_projectName = name;
+    if (name != m_projectName) {
+        bool settingName = currentPage() == projectInfoPage;
+        m_projectName = name;
+        if (m_projectDirUrl.isEmpty() && settingName) {
+            // cache the selected project directory
+            if (urlInfo(m_url).isDir) {
+                m_projectDirUrl = m_url.adjusted(QUrl::StripTrailingSlash);
+            } else {
+                m_projectDirUrl = m_url.adjusted(QUrl::RemoveFilename | QUrl::StripTrailingSlash);
+            }
+        }
+        const QUrl url(m_projectDirUrl);
+        // construct a version of the project name that's safe for use as a filename:
+        // TODO: do an additional replace of QDir::separator() with "@"?
+        QString safeName = m_projectName;
+        safeName.replace(QRegularExpression(QStringLiteral("[\\\\/]")), QStringLiteral("@"));
+        safeName = safeName.replace(QLatin1Char(':'), QLatin1Char('='));
+        safeName = safeName.replace(QRegExp(QStringLiteral("\\s")), QStringLiteral("_"));
+        safeName += QLatin1Char('.') + ShellExtension::getInstance()->projectFileExtension();
+        // don't interfere with m_url when validateOpenUrl() is also likely to change it
+        if (settingName) {
+            m_url.setPath(url.path() + QLatin1Char('/') + safeName);
+            m_urlIsDirectory = false;
+            qCDebug(SHELL) << "project name:" << m_projectName << "file name:" << safeName << "in" << url.path();
+        }
+    }
     validateProjectInfo();
 }
 
diff --git kdevplatform/shell/openprojectdialog.h kdevplatform/shell/openprojectdialog.h
index b3c301f42ae47bd64d6db011d77764537d8e20f9..49573a28124575c6e44a0dd54371181cc415c235 100644
--- kdevplatform/shell/openprojectdialog.h
+++ kdevplatform/shell/openprojectdialog.h
@@ -67,6 +67,7 @@ private Q_SLOTS:
 private:
     bool execNativeDialog();
     void validateProjectInfo();
+    QUrl m_projectDirUrl;
     QUrl m_url;
     QUrl m_selected;
     QString m_projectName;
diff --git kdevplatform/shell/projectcontroller.cpp kdevplatform/shell/projectcontroller.cpp
index d687c269d22d363652b599099b46999fd22b85cb..f6ca4412c788e91273e1c737716d50397e69b08c 100644
--- kdevplatform/shell/projectcontroller.cpp
+++ kdevplatform/shell/projectcontroller.cpp
@@ -423,6 +423,9 @@ bool equalProjectFile( const QString& configPath, OpenProjectDialog* dlg )
     KSharedConfigPtr cfg = KSharedConfig::openConfig( configPath, KConfig::SimpleConfig );
     KConfigGroup grp = cfg->group( "Project" );
     QString defaultName = dlg->projectFileUrl().adjusted(QUrl::RemoveFilename | QUrl::StripTrailingSlash).fileName();
+    qCDebug(SHELL) << "configPath=" << configPath << "defaultName=" << defaultName
+        << "projName=" << dlg->projectName() << "projectMan=" << dlg->projectManager()
+        << "grp.Name=" << grp.readEntry( "Name", QString() ) << "grp.Manager=" << grp.readEntry( "Manager", QString() );
     return (grp.readEntry( "Name", QString() ) == dlg->projectName() || dlg->projectName() == defaultName) &&
            grp.readEntry( "Manager", QString() ) == dlg->projectManager();
 }
@@ -438,19 +441,28 @@ QUrl ProjectDialogProvider::askProjectConfigLocation(bool fetch, const QUrl& sta
     }
 
     QUrl projectFileUrl = dlg->projectFileUrl();
-    qCDebug(SHELL) << "selected project:" << projectFileUrl << dlg->projectName() << dlg->projectManager();
+    qCDebug(SHELL) << "selected project:" << projectFileUrl << "selectedUrl=" << dlg->selectedUrl()
+        << "projectName=" << dlg->projectName() << "projectManager=" << dlg->projectManager();
     if ( dlg->projectManager() == QLatin1String("<built-in>") ) {
         return projectFileUrl;
     }
 
     // controls if existing project file should be saved
     bool writeProjectConfigToFile = true;
+    bool shouldAsk = false;
     if( projectFileExists( projectFileUrl ) )
     {
-        // check whether config is equal
-        bool shouldAsk = true;
-        if( projectFileUrl == dlg->selectedUrl() )
+        // check whether we should question the user about overriding an existing project file or not.
+        // We don't need to do that when the file we're importing (dlg->selectedUrl) is already an
+        // existing .kdev4 project file (we just verified that it exists):
+        bool isKDevProject = QFileInfo(dlg->selectedUrl().url()).suffix() == QStringLiteral("kdev4");
+        shouldAsk = !isKDevProject;
+        if( !isKDevProject && projectFileUrl == dlg->selectedUrl() )
         {
+            // We're importing a project from another type of project file, post the
+            // override dialog if there's a discrepancy between the project file URL
+            // and the information stored in the dialog and the project settings.
+            qCWarning(SHELL) << "Importing a foreign project type:" << projectFileUrl.url();
             if( projectFileUrl.isLocalFile() )
             {
                 shouldAsk = !equalProjectFile( projectFileUrl.toLocalFile(), dlg );
@@ -499,8 +511,22 @@ QUrl ProjectDialogProvider::askProjectConfigLocation(bool fetch, const QUrl& sta
     if (writeProjectConfigToFile) {
         Path projectConfigDir(projectFileUrl);
         projectConfigDir.setLastPathSegment(QStringLiteral(".kdev4"));
-        auto delJob = KIO::del(projectConfigDir.toUrl());
-        delJob->exec();
+        // apparently confusion can arise when an existing project is overridden and the .kdev4
+        // directory remains (http://phabricator.kde.org/T6262). But the directory can
+        // contain settings files for other projects which shouldn't be deleted without
+        // asking the user. Post another dialog to ask permission, if needed.
+        if (shouldAsk && QFileInfo(projectConfigDir.toLocalFile()).exists()) {
+            const auto dotKD4Dir = projectConfigDir.toUrl().adjusted(QUrl::RemoveFilename | QUrl::StripTrailingSlash);
+            int ret = KMessageBox::questionYesNoCancel(qApp->activeWindow(),
+                i18n("There already exists a .kdev4 directory at %1 .\n"
+                     "Do you have other projects defined there that need to be preserved?",
+                         dotKD4Dir.toLocalFile()),
+                i18n("Preserve the existing .kdev4 directory?"));
+            if ( ret == KMessageBox::No ) {
+                auto delJob = KIO::del(projectConfigDir.toUrl());
+                delJob->exec();
+            }
+        }
 
         if (!writeProjectSettingsToConfigFile(projectFileUrl, dlg)) {
             KMessageBox::error(d->m_core->uiControllerInternal()->defaultMainWindow(),
