diff --git plugins/clang/clangsupport.cpp plugins/clang/clangsupport.cpp
index 99e6a0720f79f9b1b15ef2ba879a95b3e357a55e..fd9da2c4c1ba6599a7a2a41ba177aab78d07ed57 100644
--- plugins/clang/clangsupport.cpp
+++ plugins/clang/clangsupport.cpp
@@ -181,11 +181,11 @@ ClangSupport::ClangSupport(QObject* parent, const QVariantList& )
 
     {
         const auto builtinDir = ClangHelpers::clangBuiltinIncludePath();
-        const auto headerToCheck = QLatin1String("cpuid.h");
-        if (!QFile::exists(builtinDir + QLatin1Char('/') + headerToCheck)) {
-            setErrorDescription(i18n("The clang builtin include path \"%1\" is invalid (missing %2 header).\n"
+        if (builtinDir.isEmpty()) {
+            setErrorDescription(i18n("The clang builtin include path \"%1\" is invalid (missing cpuid.h header).\n"
                                      "Try setting the KDEV_CLANG_BUILTIN_DIR environment variable manually to fix this.\n"
-                                     "See also: https://bugs.kde.org/show_bug.cgi?id=393779", builtinDir, headerToCheck));
+                                     "See also: https://bugs.kde.org/show_bug.cgi?id=393779",
+                                     ClangHelpers::clangBuiltinIncludePath()));
             return;
         }
     }
diff --git plugins/clang/duchain/clanghelpers.cpp plugins/clang/duchain/clanghelpers.cpp
index 77fde1548c00ced469098695d2111e3d3c2e7947..e71212bc1a49d95bb5c6c4ec2c6bbd176f8a1413 100644
--- plugins/clang/duchain/clanghelpers.cpp
+++ plugins/clang/duchain/clanghelpers.cpp
@@ -371,9 +371,14 @@ QString ClangHelpers::clangVersion()
 
 QString ClangHelpers::clangBuiltinIncludePath()
 {
+    // use a lambda to store the result in a static variable which can be
+    // returned without recomputing the string on subsequent calls.
     static const auto dir = []() -> QString {
+        auto isValidDir = [](const QString &dir) {
+            return QFile::exists(dir + QLatin1String("/cpuid.h"));
+        };
         auto dir = QString::fromUtf8(qgetenv("KDEV_CLANG_BUILTIN_DIR"));
-        if (!dir.isEmpty()) {
+        if (!dir.isEmpty() && isValidDir(dir)) {
             clangDebug() << "Using dir from $KDEV_CLANG_BUILTIN_DIR:" << dir;
             return dir;
         }
@@ -382,14 +387,30 @@ QString ClangHelpers::clangBuiltinIncludePath()
         // attempt to use the bundled copy on Windows
         dir = QDir::cleanPath(QStringLiteral("%1/../lib/clang/%2/include")
             .arg(QCoreApplication::applicationDirPath(), clangVersion()));
-        clangDebug() << "Trying" << dir;
-        if (QFileInfo(dir).isDir()) {
+        if (isValidDir(dir)) {
+            clangDebug() << "Using builtin dir:" << dir;
+            return dir;
+        }
+#elif defined(Q_OS_UNIX)
+        // a clang minor version upgrade since we were last built can
+        // cause problems if the "clang/$fullversion/include" path component
+        // changed. Try to generate the correct builtin_dir for the current
+        // major.minor.patchlevel version: pop the last 2 components then
+        // chdir through with the updated version directory.
+        dir = QDir::cleanPath(QStringLiteral(KDEV_CLANG_BUILTIN_DIR "/../../%1/include").arg(clangVersion()));
+        if (isValidDir(dir)) {
+            clangDebug() << "Using builtin dir:" << dir;
             return dir;
         }
 #endif
 
-        clangDebug() << "Using builtin dir:" << KDEV_CLANG_BUILTIN_DIR;
-        return QString::fromUtf8(KDEV_CLANG_BUILTIN_DIR);
+        dir = QString::fromUtf8(KDEV_CLANG_BUILTIN_DIR);
+        if (isValidDir(dir)) {
+            clangDebug() << "Using builtin dir:" << KDEV_CLANG_BUILTIN_DIR;
+            return dir;
+        }
+        // return empty string to signal failure
+        return QString();
     }();
     return dir;
 }
diff --git plugins/clang/duchain/clanghelpers.h plugins/clang/duchain/clanghelpers.h
index 39dcf59bb18f82fae163ac9dfb9ba96a6b38a110..4c0c3203d76d65a82dd4eda2e8f280225cf02919 100644
--- plugins/clang/duchain/clanghelpers.h
+++ plugins/clang/duchain/clanghelpers.h
@@ -104,6 +104,10 @@ KDEVCLANGPRIVATE_EXPORT QString clangVersion();
 
 /**
  * @return The path containing Clang built includes (e.g. stddef.h, stdarg.h, cpuid.h)
+ * The returned path is the env. var KDEV_CLANG_BUILTIN_DIR when set otherwise the path
+ * to the headers used when kdev-clang was built, possibly updated for minor upgrades to
+ * the library (e.g. 7.0.0 -> 7.0.1).
+ * Returns an empty string if none of the checked locations contain the file cpuid.h .
  *
  * Also see: https://clang.llvm.org/docs/FAQ.html
  */
