diff --git  plugins/clang/duchain/builder.cpp  plugins/clang/duchain/builder.cpp
index d173c33e6cd40a25c4e303e1027f13c35da5dc1a..1d9816826a2f0b2571f29159128dbd73fcd1aa92 100644
---  plugins/clang/duchain/builder.cpp
+++  plugins/clang/duchain/builder.cpp
@@ -1202,7 +1202,7 @@ CXChildVisitResult Visitor::buildParmDecl(CXCursor cursor)
 CXChildVisitResult Visitor::buildUse(CXCursor cursor)
 {
     m_uses[m_parentContext->context].push_back(cursor);
-    return cursor.kind == CXCursor_DeclRefExpr || cursor.kind == CXCursor_MemberRefExpr ?
+    return cursor.kind == CXCursor_DeclRefExpr || cursor.kind == CXCursor_MemberRefExpr || cursor.kind == CXCursor_ObjCMessageExpr?
         CXChildVisit_Recurse : CXChildVisit_Continue;
 }
 
@@ -1221,9 +1221,9 @@ CXChildVisitResult Visitor::buildMacroExpansion(CXCursor cursor)
 template<CXCursorKind CK>
 CXChildVisitResult Visitor::buildCompoundStatement(CXCursor cursor)
 {
-    if (CK == CXCursor_LambdaExpr || m_parentContext->context->type() == DUContext::Function)
+    if (CK == CXCursor_LambdaExpr || CK == CXCursor_BlockExpr || m_parentContext->context->type() == DUContext::Function)
     {
-        auto context = createContext<CK, CK == CXCursor_LambdaExpr ? DUContext::Function : DUContext::Other>(cursor);
+        auto context = createContext<CK, CK == CXCursor_LambdaExpr || CK == CXCursor_BlockExpr ? DUContext::Function : DUContext::Other>(cursor);
         CurrentContext newParent(context, m_parentContext->keepAliveContexts);
         PushValue<CurrentContext*> pushCurrent(m_parentContext, &newParent);
         clang_visitChildren(cursor, &visitCursor, this);
@@ -1560,6 +1560,7 @@ CXChildVisitResult visitCursor(CXCursor cursor, CXCursor parent, CXClientData da
     case CXCursor_DeclRefExpr:
     case CXCursor_MemberRefExpr:
     case CXCursor_ObjCClassRef:
+    case CXCursor_ObjCMessageExpr:
         return visitor->buildUse(cursor);
     case CXCursor_MacroExpansion:
         return visitor->buildMacroExpansion(cursor);
@@ -1567,6 +1568,8 @@ CXChildVisitResult visitCursor(CXCursor cursor, CXCursor parent, CXClientData da
         return visitor->buildCompoundStatement<CXCursor_CompoundStmt>(cursor);
     case CXCursor_LambdaExpr:
         return visitor->buildCompoundStatement<CXCursor_LambdaExpr>(cursor);
+    case CXCursor_BlockExpr:
+        return visitor->buildCompoundStatement<CXCursor_BlockExpr>(cursor);
     case CXCursor_CXXBaseSpecifier:
         return visitor->buildCXXBaseSpecifier(cursor);
     case CXCursor_ParmDecl:
diff --git  plugins/clang/duchain/cursorkindtraits.h  plugins/clang/duchain/cursorkindtraits.h
index a5219d1a01775de3ea8ad6ef9a196409035f93c3..2cdb3e3905329c2a52789875bdb8ecf1481c5260 100644
---  plugins/clang/duchain/cursorkindtraits.h
+++  plugins/clang/duchain/cursorkindtraits.h
@@ -55,6 +55,19 @@ constexpr bool isClass(CXCursorKind CK)
     || CK == CXCursor_ObjCCategoryImplDecl;
 }
 
+// TODO: somehow this is (probably) the function to call in isKDevForwardDeclaration() but
+// I'll be damned if I understand how to achieve that without raising a ton of 
+// uncomprehensible errors in builder.cpp (I can't even remove the ObjC cursor
+// kinds from the isClass function above?!)
+// TODO: remove this comment.
+constexpr bool isClassNoObjC(CXCursorKind CK)
+{
+    return isClassTemplate(CK)
+    || CK == CXCursor_StructDecl
+    || CK == CXCursor_ClassDecl
+    || CK == CXCursor_UnionDecl;
+}
+
 constexpr bool isFunction(CXCursorKind CK)
 {
     return CK == CXCursor_FunctionDecl
diff --git  plugins/clang/duchain/documentfinderhelpers.cpp  plugins/clang/duchain/documentfinderhelpers.cpp
index 10793421ec05ed6c298b11fee264bd0a0455ce40..181f471324937e72a6a8c8dca4186c3852779909 100644
---  plugins/clang/duchain/documentfinderhelpers.cpp
+++  plugins/clang/duchain/documentfinderhelpers.cpp
@@ -179,9 +179,11 @@ QStringList mimeTypesList()
     static const QStringList mimeTypes = {
         QStringLiteral("text/x-chdr"),
         QStringLiteral("text/x-c++hdr"),
+        QStringLiteral("text/x-objchdr"),
         QStringLiteral("text/x-csrc"),
         QStringLiteral("text/x-c++src"),
-        QStringLiteral("text/x-objcsrc")
+        QStringLiteral("text/x-objcsrc"),
+        QStringLiteral("text/x-objc++src")
     };
     return mimeTypes;
 }
diff --git  plugins/clang/duchain/parsesession.cpp  plugins/clang/duchain/parsesession.cpp
index 5d9366cbdc90c0ac36b2ab0a138786aa3c22d25d..e2eddaff3509fd8f610d9a1288b45c11f2ce516e 100644
---  plugins/clang/duchain/parsesession.cpp
+++  plugins/clang/duchain/parsesession.cpp
@@ -91,10 +91,7 @@ void sanitizeArguments(QVector<QByteArray>& arguments)
 QVector<QByteArray> argsForSession(const QString& path, ParseSessionData::Options options, const ParserSettings& parserSettings)
 {
     QMimeDatabase db;
-    if(db.mimeTypeForFile(path).name() == QStringLiteral("text/x-objcsrc")) {
-        return {QByteArrayLiteral("-xobjective-c++")};
-    }
-
+    QString mimeType = db.mimeTypeForFile(path).name();
     // TODO: No proper mime type detection possible yet
     // cf. https://bugs.freedesktop.org/show_bug.cgi?id=26913
     if (path.endsWith(QLatin1String(".cl"), Qt::CaseInsensitive)) {
@@ -107,7 +104,12 @@ QVector<QByteArray> argsForSession(const QString& path, ParseSessionData::Option
         return {QByteArrayLiteral("-xcuda")};
     }
 
-    if (parserSettings.parserOptions.isEmpty()) {
+    QByteArray objcOption;
+    if (mimeType == QStringLiteral("text/x-objcsrc")) {
+        objcOption = QByteArrayLiteral(" -ObjC");
+    } else if (mimeType == QStringLiteral("text/x-objc++src")) {
+        objcOption = QByteArrayLiteral("-xobjective-c++");
+    } else if (parserSettings.parserOptions.isEmpty()) {
         // The parserOptions can be empty for some unit tests that use ParseSession directly
         auto defaultArguments = ClangSettingsManager::self()->parserSettings(path).toClangAPI();
 
@@ -132,7 +134,11 @@ QVector<QByteArray> argsForSession(const QString& path, ParseSessionData::Option
         return result;
     }
 
-    result.append(parserSettings.isCpp() ? QByteArrayLiteral("-xc++") : QByteArrayLiteral("-xc"));
+    if (!objcOption.isEmpty()) {
+       result.append(objcOption);
+    } else {
+       result.append(parserSettings.isCpp() ? QByteArrayLiteral("-xc++") : QByteArrayLiteral("-xc"));
+    }
 
     sanitizeArguments(result);
     return result;
diff --git  plugins/clang/kdevclangsupport.json  plugins/clang/kdevclangsupport.json
index a1183d3c848edc9d5e3a211e1154e4ca7f329b87..73981565c562a3c2cbf0da688e42f1d3b4f2cd5e 100644
---  plugins/clang/kdevclangsupport.json
+++  plugins/clang/kdevclangsupport.json
@@ -59,17 +59,20 @@
         "C++",
         "OpenCL C",
         "CUDA C",
-        "Objective-C"
+        "Objective-C",
+        "Objective-C++"
     ],
     "X-KDevelop-LoadMode": "AlwaysOn",
     "X-KDevelop-Mode": "NoGUI",
     "X-KDevelop-SupportedMimeTypes": [
         "text/x-chdr",
         "text/x-c++hdr",
+        "text/x-objchdr",
         "text/x-csrc",
         "text/x-c++src",
+        "text/x-objcsrc",
+        "text/x-objc++src",
         "text/x-opencl-src",
-        "text/vnd.nvidia.cuda.csrc",
-        "text/x-objcsrc"
+        "text/vnd.nvidia.cuda.csrc"
     ]
 }
