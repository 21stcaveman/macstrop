diff --git CMakeLists.txt CMakeLists.txt
index d60aa8ccd07bbcad1727d0d9fd7648ecda352681..ea534990b8ef8204704297e167b60e67ebb0d2ea 100644
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -8,10 +8,21 @@ set(KDEVELOP_SOVERSION 52)
 # plugin versions listed in the .desktop files
 set(KDEV_PLUGIN_VERSION 30)
 
+option(KDEVELOP_BUILD_IDE "Build the IDE" ON)
+option(KDEVELOP_BUILD_CLANG_PARSER "Build the Clang-based C/C++ parser (formerly kdev-clang)" ON)
+
 # we need some parts of the ECM CMake helpers
 find_package (ECM 5.14.0 REQUIRED NO_MODULE)
 set(CMAKE_MODULE_PATH ${KDevelop_SOURCE_DIR}/cmake/modules ${ECM_MODULE_PATH})
 
+if (NOT KDEVELOP_BUILD_IDE)
+    if (NOT KDEVELOP_BUILD_CLANG_PARSER)
+        message(FATAL_ERROR "KDEVELOP_BUILD_IDE and KDEVELOP_BUILD_CLANG_PARSER cannot both be OFF!")
+    else()
+        message(WARNING "Invoke make in ${CMAKE_CURRENT_BINARY_DIR}/plugins/clang in order to build only kdev-clang!")
+    endif()
+endif()
+
 include(KDECompilerSettings NO_POLICY_SCOPE) # needs to be first, as set policies influence following macros
 include(ECMOptionalAddSubdirectory)
 include(ECMInstallIcons)
@@ -173,7 +184,15 @@ if(GIT_FULL_VERSION)
 endif()
 configure_file(kdevelop_fullversion.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/kdevelop_fullversion.h)
 
-add_subdirectory(kdevplatform)
+if (KDEVELOP_BUILD_IDE)
+    add_subdirectory(kdevplatform)
+else()
+    message(STATUS "Checking for installed KDevPlatform v${KDevelop_VERSION_MAJOR}.${KDevelop_VERSION_MINOR}.${KDevelop_VERSION_PATCH}")
+    find_package(KDevPlatform ${KDevelop_VERSION_MAJOR}.${KDevelop_VERSION_MINOR}.${KDevelop_VERSION_PATCH} CONFIG)
+    set_package_properties(KDevPlatform PROPERTIES
+        TYPE REQUIRED
+    )
+endif()
 add_subdirectory(plugins)
 
 add_subdirectory(pics)
diff --git plugins/CMakeLists.txt plugins/CMakeLists.txt
index 44f7b94295615ea09c72cd48a9202d91fcd0b4f9..83852c9dae63cec68b8f00fa5cf34bb685259e74 100644
--- plugins/CMakeLists.txt
+++ plugins/CMakeLists.txt
@@ -35,27 +37,29 @@ add_subdirectory(customscript)
 ecm_optional_add_subdirectory(custom-definesandincludes)
 ecm_optional_add_subdirectory(qmljs)
 
-find_package(Clang 3.8)
-set(clangSearchHint "")
-if (NOT CLANG_FOUND)
-    set(clangSearchHint "Please install a package providing libclang. Either pass -DLLVM_ROOT=/path/to/llvm-prefix or install the 'llvm-config' command-line utility for auto-detection.")
-endif()
-set_package_properties(Clang PROPERTIES
-    DESCRIPTION "Clang libraries from the LLVM project. ${clangSearchHint}"
-    PURPOSE "Used for KDevelop's C++/C support plugin."
-    TYPE REQUIRED
-)
-
-if (CLANG_FOUND)
-    if (NOT CLANG_CLANG_LIB)
-        message(FATAL_ERROR "Could not find the Clang C library: libclang")
+if(KDEVELOP_BUILD_CLANG_PARSER)
+    find_package(Clang 3.8)
+    set(clangSearchHint "")
+    if (NOT CLANG_FOUND)
+        set(clangSearchHint "Please install a package providing libclang. Either pass -DLLVM_ROOT=/path/to/llvm-prefix or install the 'llvm-config' command-line utility for auto-detection.")
     endif()
-
-    add_library(Clang::clang UNKNOWN IMPORTED)
-    set_property(TARGET Clang::clang PROPERTY IMPORTED_LOCATION ${CLANG_CLANG_LIB})
-    ecm_optional_add_subdirectory(clang)
+    set_package_properties(Clang PROPERTIES
+        DESCRIPTION "Clang libraries from the LLVM project. ${clangSearchHint}"
+        PURPOSE "Used for KDevelop's C++/C support plugin."
+        TYPE REQUIRED
+    )
+
+    if (CLANG_FOUND)
+        if (NOT CLANG_CLANG_LIB)
+            message(FATAL_ERROR "Could not find the Clang C library: libclang")
+        endif()
+
+        add_library(Clang::clang UNKNOWN IMPORTED)
+        set_property(TARGET Clang::clang PROPERTY IMPORTED_LOCATION ${CLANG_CLANG_LIB})
+        ecm_optional_add_subdirectory(clang)
+    endif()
+    # END: Languages
 endif()
-# END: Languages
 
 # BEGIN: Project builders
 add_subdirectory(makebuilder)
diff --git plugins/clang/CMakeLists.txt plugins/clang/CMakeLists.txt
index 919d8085b4742de6ab7ac83acab55e56b13d1b9b..a415becb906077a54047347f3caee0df95c16c92 100644
--- plugins/clang/CMakeLists.txt
+++ plugins/clang/CMakeLists.txt
@@ -16,6 +16,13 @@ add_definitions(
     -DQT_NO_CAST_FROM_ASCII -DQT_NO_CAST_TO_ASCII -DQT_NO_CAST_FROM_BYTEARRAY
 )
 
+if(CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT KDEVELOP_BUILD_IDE)
+    # this is to allow building with clang (on Linux) ?!
+    set(CMAKE_C_VISIBILITY_PRESET default)
+    set(CMAKE_CXX_VISIBILITY_PRESET default)
+    set(CMAKE_VISIBILITY_INLINES_HIDDEN 0)
+endif()
+
 # TODO: Move to kdevplatform
 function(add_private_library target)
     set(options)

diff --git plugins/clang/tests/CMakeLists.txt plugins/clang/tests/CMakeLists.txt
index 7b1f5e1daa402830bca67f91d0275f7b273251df..cce08d7fce46ac8497673ab9aac2fab4a57ac7e4 100644
--- plugins/clang/tests/CMakeLists.txt
+++ plugins/clang/tests/CMakeLists.txt
@@ -4,6 +4,15 @@ remove_definitions(
     -DQT_NO_CAST_FROM_BYTEARRAY
 )
 
+if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+    # LTO and Clang don't mix well with creating static libraries on Linux
+    string(REPLACE "-flto" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
+    string(REPLACE "-flto" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
+    string(REPLACE "-flto" "" CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}")
+    string(REPLACE "-flto" "" CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS}")
+    string(REPLACE "-flto" "" CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS}")
+endif()
+
 add_executable(clang-parser
     clang-parser.cpp
 )
diff --git plugins/clang/codecompletion/context.cpp plugins/clang/codecompletion/context.cpp
index 9dc622152c184a4f6d8b2b3ca62edc4229faad55..558e4033133b821af52b4af7ee3357722fa45f7d 100644
--- plugins/clang/codecompletion/context.cpp
+++ plugins/clang/codecompletion/context.cpp
@@ -44,7 +44,7 @@
 #include <language/codecompletion/codecompletionmodel.h>
 #include <language/codecompletion/normaldeclarationcompletionitem.h>
 #include <util/foregroundlock.h>
-#include <qtcompat_p.h>
+#include <kdevplatform/qtcompat_p.h>
 
 #include "../util/clangdebug.h"
 #include "../util/clangtypes.h"
diff --git plugins/clang/duchain/clangproblem.cpp plugins/clang/duchain/clangproblem.cpp
index aa1005e7c0..82ff1c3934 100644
--- plugins/clang/duchain/clangproblem.cpp
+++ plugins/clang/duchain/clangproblem.cpp
@@ -28,7 +28,7 @@
 
 #include <language/duchain/duchainlock.h>
 #include <language/codegen/documentchangeset.h>
-#include <qtcompat_p.h>
+#include <kdevplatform/qtcompat_p.h>
 
 #include <KLocalizedString>
 
diff --git plugins/clang/codecompletion/includepathcompletioncontext.cpp plugins/clang/codecompletion/includepathcompletioncontext.cpp
index 56252b978f91cb806958a7aecd4a125dcb4ed1df..37a12454934d2de694f70ae35f659eeaa504c3bf 100644
--- plugins/clang/codecompletion/includepathcompletioncontext.cpp
+++ plugins/clang/codecompletion/includepathcompletioncontext.cpp
@@ -26,7 +26,7 @@
 #include "duchain/clanghelpers.h"
 
 #include <language/codecompletion/abstractincludefilecompletionitem.h>
-#include <qtcompat_p.h>
+#include <kdevplatform/qtcompat_p.h>
 
 #include <QDirIterator>
 
