diff --git kdevplatform/language/duchain/duchainlock.cpp kdevplatform/language/duchain/duchainlock.cpp
index 69313b0..b70e09b 100644
--- kdevplatform/language/duchain/duchainlock.cpp
+++ kdevplatform/language/duchain/duchainlock.cpp
@@ -98,6 +98,7 @@ bool DUChainLock::lockForRead(unsigned int timeout)
       } else {
         //Fail!
         d->changeOwnReaderRecursion(-1);
+        qWarning() << Q_FUNC_INFO << "timed out after" << t.elapsed()/1000.0 << "seconds";
         return false;
       }
     }
@@ -121,7 +122,9 @@ bool DUChainLock::lockForWrite(uint timeout)
   //It is not allowed to acquire a write-lock while holding read-lock
 
   Q_ASSERT(d->ownReaderRecursion() == 0);
-
+  if (d->ownReaderRecursion() != 0) {
+    return false;
+  }
   if (d->m_writer.load() == QThread::currentThread()) {
     //We already hold the write lock, just increase the recursion count and return
     d->m_writerRecursion.fetchAndAddRelaxed(1);
@@ -152,6 +155,7 @@ bool DUChainLock::lockForWrite(uint timeout)
       QThread::usleep(uSleepTime);
     } else {
       //Fail!
+      qWarning() << Q_FUNC_INFO << "timed out after" << t.elapsed()/1000.0 << "seconds";
       return false;
     }
   }
@@ -184,6 +188,11 @@ DUChainReadLocker::DUChainReadLocker(DUChainLock* duChainLock, uint timeout)
   , m_locked(false)
   , m_timeout(timeout)
 {
+  // 10-12 seconds is an eternity. Pick a random value in this range
+  // so if multiple candidates compete there's always 1 that waits the longest
+  if (!timeout) {
+    m_timeout = 10000 + 2000 * qrand() / RAND_MAX;
+  }
   lock();
 }
 
@@ -227,6 +236,11 @@ DUChainWriteLocker::DUChainWriteLocker(DUChainLock* duChainLock, uint timeout)
   , m_locked(false)
   , m_timeout(timeout)
 {
+  // 10-12 seconds is an eternity. Pick a random value in this range
+  // so if multiple candidates compete there's always 1 that waits the longest
+  if (!timeout) {
+    m_timeout = 10000 + 2000 * qrand() / RAND_MAX;
+  }
   lock();
 }
 
diff --git kdevplatform/shell/filteredproblemstore.cpp kdevplatform/shell/filteredproblemstore.cpp
index 38477b8..d1fb9ad 100644
--- kdevplatform/shell/filteredproblemstore.cpp
+++ kdevplatform/shell/filteredproblemstore.cpp
@@ -27,6 +27,8 @@
 
 #include <KLocalizedString>
 
+#include <QDebug>
+
 using namespace KDevelop;
 
 namespace
@@ -36,10 +38,14 @@ namespace
 void addDiagnostics(ProblemStoreNode *node, const QVector<IProblem::Ptr> &diagnostics)
 {
     for (const IProblem::Ptr& ptr : diagnostics) {
-        ProblemNode *child = new ProblemNode(node, ptr);
-        node->addChild(child);
+        if (ptr.data()) {
+            ProblemNode *child = new ProblemNode(node, ptr);
+            node->addChild(child);
 
-        addDiagnostics(child, ptr->diagnostics());
+            addDiagnostics(child, ptr->diagnostics());
+        } else {
+            qWarning() << Q_FUNC_INFO << "caught NULL ptr in" << diagnostics;
+        }
     }
 }
 
diff --git kdevplatform/shell/textdocument.h kdevplatform/shell/textdocument.h
index 04d12abfca11f276ae475fd02dd873901a95133c..b9c1fdb3f01288224dd792d852c333804f07d757 100644
--- kdevplatform/shell/textdocument.h
+++ kdevplatform/shell/textdocument.h
@@ -85,7 +85,6 @@ private:
     Q_PRIVATE_SLOT(d, void modifiedOnDisk(KTextEditor::Document *, bool, KTextEditor::ModificationInterface::ModifiedOnDiskReason))
 
     void newDocumentStatus(KTextEditor::Document*);
-    void populateContextMenu(KTextEditor::View*, QMenu*);
     void textChanged(KTextEditor::Document*);
     void documentUrlChanged(KTextEditor::Document*);
     void slotDocumentLoaded();
diff --git kdevplatform/shell/textdocument.cpp kdevplatform/shell/textdocument.cpp
index e5f92beee45e5fec5823447d727b34b4069339bd..0aef6b78a4d0d5f1b86866068086b4a099faab49 100644
--- kdevplatform/shell/textdocument.cpp
+++ kdevplatform/shell/textdocument.cpp
@@ -76,19 +76,69 @@ static void selectAndReveal( KTextEditor::View* view, const KTextEditor::Range&
     }
 }
 
+class TextDocumentContextMenuData : public QObject
+{
+    Q_OBJECT
+public:
+    TextDocumentContextMenuData(QObject* parent)
+        : QObject(parent)
+        , addedContextMenu(nullptr)
+    {
+        lastShownMenu.clear();
+    }
+
+    // dtor has to be out-of-line, after 
+    ~TextDocumentContextMenuData();
+
+    void populateContextMenu( KTextEditor::View* v, QMenu* menu )
+    {
+        if (!lastShownMenu.isNull() && addedContextMenu) {
+            qCDebug(SHELL) << "Removing items from previous contextmenu" << lastShownMenu;
+            foreach ( QAction* action, addedContextMenu->actions() ) {
+                lastShownMenu->removeAction(action);
+            }
+        }
+
+        delete addedContextMenu;
+        addedContextMenu = new QMenu();
+
+        EditorContext c(v, v->cursorPosition());
+        auto extensions = Core::self()->pluginController()->queryPluginsForContextMenuExtensions(&c, addedContextMenu);
+
+        ContextMenuExtension::populateMenu(addedContextMenu, extensions);
+
+        foreach ( QAction* action, addedContextMenu->actions() ) {
+            menu->addAction(action);
+        }
+        if (menu != lastShownMenu.data()) {
+            qCDebug(SHELL) << "Added items to new contextmenu" << menu;
+            lastShownMenu = menu;
+        }
+
+        menu->setTearOffEnabled(true);
+    }
+
+    // we want to remove the previously added stuff before
+    // the menu shows again.
+    // This has to be a static instance because multiple views
+    // can share the same context menu instance.
+    QMenu* addedContextMenu;
+    QPointer<QMenu> lastShownMenu;
+};
+
 class TextDocumentPrivate
 {
 public:
-    explicit TextDocumentPrivate(TextDocument *textDocument)
+    explicit TextDocumentPrivate(TextDocument *textDocument, ICore* core)
         : q(textDocument)
     {
+        if (!contextMenuData) {
+            contextMenuData = new TextDocumentContextMenuData(core->uiController()->activeMainWindow());
+        }
     }
 
     ~TextDocumentPrivate()
     {
-        delete addedContextMenu;
-        addedContextMenu = nullptr;
-
         saveSessionConfig();
         delete document;
     }
@@ -231,10 +281,27 @@ public:
     IDocument::DocumentState state = IDocument::Clean;
     QString encoding;
     bool loaded = false;
-    // we want to remove the added stuff when the menu hides
-    QMenu* addedContextMenu = nullptr;
+    // there is only a single contextmenu at a time so use a single (static)
+    // instance of the class keeping track of added menu actions.
+    static TextDocumentContextMenuData* contextMenuData;
 };
 
+TextDocumentContextMenuData* TextDocumentPrivate::contextMenuData = nullptr;
+
+TextDocumentContextMenuData::~TextDocumentContextMenuData()
+{
+    //qWarning() << Q_FUNC_INFO << parent();
+    // don't assume there will ever be only 1 MainWindow in KDevelop:
+    // (this is why we have to be out-of-line)
+    if (TextDocumentPrivate::contextMenuData == this) {
+        TextDocumentPrivate::contextMenuData = nullptr;
+    }
+    delete addedContextMenu;
+    addedContextMenu = nullptr;
+
+    lastShownMenu.clear();
+}
+
 class TextViewPrivate
 {
 public:
@@ -246,7 +313,7 @@ public:
 };
 
 TextDocument::TextDocument(const QUrl &url, ICore* core, const QString& encoding)
-    :PartDocument(url, core), d(new TextDocumentPrivate(this))
+    :PartDocument(url, core), d(new TextDocumentPrivate(this, core))
 {
     d->encoding = encoding;
 }
@@ -259,7 +326,7 @@ bool TextDocument::isTextDocument() const
     {
         /// @todo Somehow it can happen that d->document is zero, which makes
         /// code relying on "isTextDocument() == (bool)textDocument()" crash
-        qCWarning(SHELL) << "Broken text-document: " << url();
+        qCDebug(SHELL) << "Broken text-document: " << url();
         return false;
     }
 
@@ -345,7 +412,7 @@ QWidget *TextDocument::createViewWidget(QWidget *parent)
 
     view->setStatusBarEnabled(Core::self()->partControllerInternal()->showTextEditorStatusBar());
 
-    connect(view, &KTextEditor::View::contextMenuAboutToShow, this, &TextDocument::populateContextMenu);
+    connect(view, &KTextEditor::View::contextMenuAboutToShow, d->contextMenuData, &TextDocumentContextMenuData::populateContextMenu);
 
     if (KTextEditor::CodeCompletionInterface* cc = dynamic_cast<KTextEditor::CodeCompletionInterface*>(view))
         cc->setAutomaticInvocationEnabled(core()->languageController()->completionSettings()->automaticCompletionEnabled());
@@ -670,27 +737,6 @@ void KDevelop::TextDocument::textChanged(KTextEditor::Document *document)
     notifyContentChanged();
 }
 
-void KDevelop::TextDocument::populateContextMenu( KTextEditor::View* v, QMenu* menu )
-{
-    if (d->addedContextMenu) {
-        foreach ( QAction* action, d->addedContextMenu->actions() ) {
-            menu->removeAction(action);
-        }
-        delete d->addedContextMenu;
-    }
-
-    d->addedContextMenu = new QMenu();
-
-    EditorContext c(v, v->cursorPosition());
-    auto extensions = Core::self()->pluginController()->queryPluginsForContextMenuExtensions(&c, d->addedContextMenu);
-
-    ContextMenuExtension::populateMenu(d->addedContextMenu, extensions);
-
-    foreach ( QAction* action, d->addedContextMenu->actions() ) {
-        menu->addAction(action);
-    }
-}
-
 void KDevelop::TextDocument::repositoryCheckFinished(bool canRecreate) {
     if ( d->state != IDocument::Dirty && d->state != IDocument::DirtyAndModified ) {
         // document is not dirty for whatever reason, nothing to do.
@@ -737,3 +783,4 @@ void KDevelop::TextDocument::documentUrlChanged(KTextEditor::Document* document)
 }
 
 #include "moc_textdocument.cpp"
+#include "textdocument.moc"
diff --git kdevplatform/vcs/dvcs/dvcsjob.cpp kdevplatform/vcs/dvcs/dvcsjob.cpp
index 3bacd59..8b409f2 100644
--- kdevplatform/vcs/dvcs/dvcsjob.cpp
+++ kdevplatform/vcs/dvcs/dvcsjob.cpp
@@ -154,6 +154,16 @@ QVariant DVcsJob::fetchResults()
 void DVcsJob::start()
 {
     Q_ASSERT_X(d->status != JobRunning, "DVCSjob::start", "Another proccess was started using this job class");
+    if( d->status == JobRunning ) {
+        QString error = i18n( "Another process was started using this job class" );
+        d->model->appendLine(error);
+        setError( 255 );
+        setErrorText(error);
+        d->status = JobFailed;
+        emitResult();
+        qCWarning(VCS) << "DVCSjob::start:" << error;
+        return;
+    }
 
     const QDir& workingdir = directory();
     if( !workingdir.exists() ) {
@@ -163,6 +173,7 @@ void DVcsJob::start()
         setErrorText(error);
         d->status = JobFailed;
         emitResult();
+        qCWarning(VCS) << "DVCSjob::start:" << error;
         return;
     }
     if( !workingdir.isAbsolute() ) {
@@ -172,6 +183,7 @@ void DVcsJob::start()
         setErrorText(error);
         d->status = JobFailed;
         emitResult();
+        qCWarning(VCS) << "DVCSjob::start:" << error;
         return;
     }
 
@@ -189,6 +201,15 @@ void DVcsJob::start()
     d->childproc->start();
 
     d->model->appendLine(directory().path() + QLatin1String("> ") + commandDisplay);
+
+    if (!d->childproc->waitForStarted(1000)) {
+        QString error = i18n("DVCSJob::start: %1 failed to start after 1s: state=%2 %3",
+            commandDisplay, d->childproc->state(), d->childproc->errorString());
+        d->model->appendLine(error);
+        // don't raise the error (emitResult) and don't change the job's status
+        // just print a warning.
+        qCWarning(VCS) << error;
+    }
 }
 
 void DVcsJob::setCommunicationMode(KProcess::OutputChannelMode comm)
@@ -208,9 +231,11 @@ void DVcsJob::slotProcessError( QProcess::ProcessError err )
     setError(OutputJob::FailedShownError); //we don't want to trigger a message box
 
     d->errorOutput = d->childproc->readAllStandardError();
+    QByteArray stdOut = d->childproc->readAllStandardOutput();
 
     QString displayCommand = KShell::joinArgs(dvcsCommand());
-    QString completeErrorText = i18n("Process '%1' exited with status %2\n%3", displayCommand, d->childproc->exitCode(), QString::fromLocal8Bit(d->errorOutput) );
+    QString completeErrorText = i18n("Process '%1' exited with status %2\n\"%3\"\n\"%4\"",
+        displayCommand, d->childproc->exitCode(), QString::fromLocal8Bit(stdOut), QString::fromLocal8Bit(d->errorOutput) );
     setErrorText( completeErrorText );
 
     QString errorValue;
@@ -237,11 +262,11 @@ void DVcsJob::slotProcessError( QProcess::ProcessError err )
         errorValue = QStringLiteral("UnknownError");
         break;
     }
-    qCDebug(VCS) << "Found an error while running" << displayCommand << ":" << errorValue
+    qCWarning(VCS) << "Found an error while running" << displayCommand << ":" << errorValue
                                                      << "Exit code is:" << d->childproc->exitCode();
-    qCDebug(VCS) << "Error:" << completeErrorText;
-    displayOutput(QString::fromLocal8Bit(d->errorOutput));
-    d->model->appendLine(i18n("Command finished with error %1.", errorValue));
+    qCWarning(VCS) << "Error:" << completeErrorText;
+//     displayOutput(QString::fromLocal8Bit(d->errorOutput));
+    d->model->appendLine(i18n("%1 (%2).", completeErrorText, errorValue));
 
     if(verbosity()==Silent) {
         setVerbosity(Verbose);
diff --git plugins/patchreview/patchreview.cpp plugins/patchreview/patchreview.cpp
index f326f03bb94077cf4b0ead8e15626f33b3980de0..24328e95a7f2b1fe9d895d9e00f60ea6aea8f859 100644
--- plugins/patchreview/patchreview.cpp
+++ plugins/patchreview/patchreview.cpp
@@ -423,7 +436,12 @@ void PatchReviewPlugin::switchToEmptyReviewArea()
 QUrl PatchReviewPlugin::urlForFileModel( const Diff2::DiffModel* model )
 {
     KDevelop::Path path(QDir::cleanPath(m_patch->baseDir().toLocalFile()));
-    QVector<QString> destPath = KDevelop::Path(QLatin1Char('/') + model->destinationPath()).segments();
+    QVector<QString> destPath;
+    if (model->destinationPath().startsWith(QLatin1Char('/'))) {
+        destPath = KDevelop::Path(model->destinationPath()).segments();
+    } else {
+        destPath = KDevelop::Path(QLatin1Char('/') + model->destinationPath()).segments();
+    }
     if (destPath.size() >= (int)m_depth) {
         destPath = destPath.mid(m_depth);
     }
