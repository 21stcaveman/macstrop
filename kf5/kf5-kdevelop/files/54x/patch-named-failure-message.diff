diff --git plugins/cmake/cmakemanager.cpp plugins/cmake/cmakemanager.cpp
index 6086c53d958011624e13a2db7fff668a22892cdf..094435810c43f29901f824cf7fdadbaab317f193 100644
--- plugins/cmake/cmakemanager.cpp
+++ plugins/cmake/cmakemanager.cpp
@@ -206,7 +206,7 @@ KJob* CMakeManager::createImportJob(ProjectFolderItem* item)
         if (job->error() != 0) {
             qCWarning(CMAKE) << "couldn't load project successfully" << project->name();
             m_projects.remove(project);
-            showConfigureErrorMessage(job->errorText());
+            showConfigureErrorMessage(project, job->errorText());
         }
     });
 
@@ -399,7 +399,7 @@ void CMakeManager::serverResponse(KDevelop::IProject* project, const QJsonObject
         } else
             qCDebug(CMAKE) << "unhandled signal response..." << project << response;
     } else if (response[QStringLiteral("type")] == QLatin1String("error")) {
-        showConfigureErrorMessage(response[QStringLiteral("errorMessage")].toString());
+        showConfigureErrorMessage(project, response[QStringLiteral("errorMessage")].toString());
     } else if (response[QStringLiteral("type")] == QLatin1String("reply")) {
         const auto inReplyTo = response[QStringLiteral("inReplyTo")];
         if (inReplyTo == QLatin1String("configure")) {
@@ -860,19 +860,20 @@ KTextEditor::Range CMakeManager::termRangeAtPosition(const KTextEditor::Document
     return KTextEditor::Range(start, end);
 }
 
-void CMakeManager::showConfigureErrorMessage(const QString& errorMessage) const
+void CMakeManager::showConfigureErrorMessage(KDevelop::IProject* project, const QString& errorMessage) const
 {
     if (!QApplication::activeWindow()) {
         // Do not show a message box if there is no active window in order not to block unit tests.
         return;
     }
     KMessageBox::error(QApplication::activeWindow(), i18n(
-        "Failed to configure the project (error message: %1)."
+        "Failed to configure project %1 (error message: %2)."
         " As a result, KDevelop's code understanding will likely be broken.\n"
         "\n"
         "To fix this issue, please ensure that the project's CMakeLists.txt files"
         " are correct, and KDevelop is configured to use the correct CMake version and settings."
-        " Then right-click the project item in the projects tool view and click 'Reload'.", errorMessage));
+        " Then right-click the project item in the projects tool view and click 'Reload'.",
+        project->name(), errorMessage));
 }
 
 QPair<QWidget*, KTextEditor::Range> CMakeManager::specialLanguageObjectNavigationWidget(const QUrl& url, const KTextEditor::Cursor& position)
diff --git plugins/cmake/cmakemanager.h plugins/cmake/cmakemanager.h
index 43b46bba361008ac141608e6cd281c5abeb23e1c..de104ddeaf0088a73d6dc54808d50c1445f0e8d7 100644
--- plugins/cmake/cmakemanager.h
+++ plugins/cmake/cmakemanager.h
@@ -162,7 +162,7 @@ private:
     KTextEditor::Range termRangeAtPosition(const KTextEditor::Document* textDocument,
                                            const KTextEditor::Cursor& position) const;
 
-    void showConfigureErrorMessage(const QString& errorMessage) const;
+    void showConfigureErrorMessage(KDevelop::IProject* project, const QString& errorMessage) const;
 
 private:
     QHash<KDevelop::IProject*, CMakeProjectData> m_projects;

