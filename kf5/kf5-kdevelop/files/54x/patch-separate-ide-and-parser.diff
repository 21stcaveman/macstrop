diff --git CMakeLists.txt CMakeLists.txt
index 116a93c51ea1275d67104a4cff488488b699a172..2231828d210c23a6434f2af5a389a353fd1450b5 100644
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -8,10 +8,21 @@ set(KDEVELOP_SOVERSION 54)
 # plugin version as used e.g. in plugin installation path
 set(KDEV_PLUGIN_VERSION 32)
 
+option(KDEVELOP_BUILD_IDE "Build the IDE" ON)
+option(KDEVELOP_BUILD_CLANG_PARSER "Build the Clang-based C/C++ parser (formerly kdev-clang)" ON)
+
 # we need some parts of the ECM CMake helpers
 find_package (ECM 5.28.0 REQUIRED NO_MODULE)
 set(CMAKE_MODULE_PATH ${KDevelop_SOURCE_DIR}/cmake/modules ${ECM_MODULE_PATH})
 
+if (NOT KDEVELOP_BUILD_IDE)
+    if (NOT KDEVELOP_BUILD_CLANG_PARSER)
+        message(FATAL_ERROR "KDEVELOP_BUILD_IDE and KDEVELOP_BUILD_CLANG_PARSER cannot both be OFF!")
+    else()
+        message(WARNING "Invoke make in ${CMAKE_CURRENT_BINARY_DIR}/plugins/clang in order to build only kdev-clang!")
+    endif()
+endif()
+
 include(KDEInstallDirs)
 include(KDECMakeSettings)
 include(KDECompilerSettings NO_POLICY_SCOPE) # needs to be first, as set policies influence following macros
@@ -175,7 +186,15 @@ if(GIT_FULL_VERSION)
 endif()
 configure_file(kdevelop_fullversion.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/kdevelop_fullversion.h)
 
-add_subdirectory(kdevplatform)
+if (KDEVELOP_BUILD_IDE)
+    add_subdirectory(kdevplatform)
+else()
+    message(STATUS "Checking for installed KDevPlatform v${KDevelop_VERSION_MAJOR}.${KDevelop_VERSION_MINOR}.${KDevelop_VERSION_PATCH}")
+    find_package(KDevPlatform ${KDevelop_VERSION_MAJOR}.${KDevelop_VERSION_MINOR}.${KDevelop_VERSION_PATCH} CONFIG)
+    set_package_properties(KDevPlatform PROPERTIES
+        TYPE REQUIRED
+    )
+endif()
 add_subdirectory(plugins)
 
 add_subdirectory(pics)
diff --git plugins/CMakeLists.txt plugins/CMakeLists.txt
index 79c47dcbc8aebc064ab029084df7dae3e1ed8328..7eba5d2670ddfa07392f62a02c87a5c13be1ef39 100644
--- plugins/CMakeLists.txt
+++ plugins/CMakeLists.txt
@@ -40,27 +40,29 @@ else()
     message(WARNING "Will not build QML/JS plugin, needs Qt >= 5.8.0")
 endif()
 
-find_package(Clang 3.8)
-set(clangSearchHint "")
-if (NOT CLANG_FOUND)
-    set(clangSearchHint "Please install a package providing libclang. Either pass -DLLVM_ROOT=/path/to/llvm-prefix or install the 'llvm-config' command-line utility for auto-detection.")
-endif()
-set_package_properties(Clang PROPERTIES
-    DESCRIPTION "Clang libraries from the LLVM project. ${clangSearchHint}"
-    PURPOSE "Used for KDevelop's C++/C support plugin."
-    TYPE REQUIRED
-)
-
-if (CLANG_FOUND)
-    if (NOT CLANG_CLANG_LIB)
-        message(FATAL_ERROR "Could not find the Clang C library: libclang")
+if(KDEVELOP_BUILD_CLANG_PARSER)
+    find_package(Clang 3.8)
+    set(clangSearchHint "")
+    if (NOT CLANG_FOUND)
+        set(clangSearchHint "Please install a package providing libclang. Either pass -DLLVM_ROOT=/path/to/llvm-prefix or install the 'llvm-config' command-line utility for auto-detection.")
     endif()
-
-    add_library(Clang::clang UNKNOWN IMPORTED)
-    set_property(TARGET Clang::clang PROPERTY IMPORTED_LOCATION ${CLANG_CLANG_LIB})
-    ecm_optional_add_subdirectory(clang)
+    set_package_properties(Clang PROPERTIES
+        DESCRIPTION "Clang libraries from the LLVM project. ${clangSearchHint}"
+        PURPOSE "Used for KDevelop's C++/C support plugin."
+        TYPE REQUIRED
+    )
+
+    if (CLANG_FOUND)
+        if (NOT CLANG_CLANG_LIB)
+            message(FATAL_ERROR "Could not find the Clang C library: libclang")
+        endif()
+
+        add_library(Clang::clang UNKNOWN IMPORTED)
+        set_property(TARGET Clang::clang PROPERTY IMPORTED_LOCATION ${CLANG_CLANG_LIB})
+        ecm_optional_add_subdirectory(clang)
+    endif()
+    # END: Languages
 endif()
-# END: Languages
 
 # BEGIN: Project builders
 add_subdirectory(makebuilder)
diff --git plugins/clang/CMakeLists.txt plugins/clang/CMakeLists.txt
index 2a0b362d6470d82fa48bc5b0663bd43326e1349e..55b7bf67b928646de53a0888ae905b7416ac94df 100644
--- plugins/clang/CMakeLists.txt
+++ plugins/clang/CMakeLists.txt
@@ -17,6 +17,13 @@ if(BUILD_TESTING)
     add_subdirectory(tests)
 endif()
 
+if(CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT KDEVELOP_BUILD_IDE)
+    # this is to allow building with clang (on Linux) ?!
+    set(CMAKE_C_VISIBILITY_PRESET default)
+    set(CMAKE_CXX_VISIBILITY_PRESET default)
+    set(CMAKE_VISIBILITY_INLINES_HIDDEN 0)
+endif()
+
 # TODO: Move to kdevplatform
 function(add_private_library target)
     set(options)
diff --git plugins/clang/tests/CMakeLists.txt plugins/clang/tests/CMakeLists.txt
index 1142c14767078b584229bd8d890de69fbd925405..637784e84bb479174abe49c61f2237f775dcc751 100644
--- plugins/clang/tests/CMakeLists.txt
+++ plugins/clang/tests/CMakeLists.txt
@@ -4,6 +4,15 @@ remove_definitions(
     -DQT_NO_CAST_FROM_BYTEARRAY
 )
 
+if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+    # LTO and Clang don't mix well with creating static libraries on Linux
+    string(REGEX REPLACE "-flto[^ ]*" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
+    string(REGEX REPLACE "-flto[^ ]*" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
+    string(REGEX REPLACE "-flto[^ ]*" "" CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}")
+    string(REGEX REPLACE "-flto[^ ]*" "" CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS}")
+    string(REGEX REPLACE "-flto[^ ]*" "" CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS}")
+endif()
+
 add_executable(clang-parser
     clang-parser.cpp
 )
