diff --git kdevplatform/language/duchain/duchain.cpp kdevplatform/language/duchain/duchain.cpp
index d9d1700ddf8dd2cd18b838a48c5b0a9841acf69c..d92bdf2ed0000e3e468a7d462389ae5c6941eada 100644
--- kdevplatform/language/duchain/duchain.cpp
+++ kdevplatform/language/duchain/duchain.cpp
@@ -441,7 +441,18 @@ public:
 
         // qCDebug(LANGUAGE) << "duchain: removing document" << context->url().str();
         Q_ASSERT(hasChainForIndex(index));
+        if (!hasChainForIndex(index)) {
+            qCCritical(LANGUAGE) << Q_FUNC_INFO << "index" << index << "has no chain";
+            return;
+        }
         Q_ASSERT(m_chainsByUrl.contains(context->url(), context));
+        if (!m_chainsByUrl.contains(context->url(), context)) {
+            qCCritical(LANGUAGE) << Q_FUNC_INFO << "Context" << context << "has no registered chainByUrl";
+            if (context) {
+                qCritical() << "\t" << "url=" << context->url();
+            }
+            return;
+        }
 
         m_chainsByUrl.remove(context->url(), context);
 
@@ -454,6 +465,10 @@ public:
         l.relock();
 
         Q_ASSERT(hasChainForIndex(index));
+        if (!hasChainForIndex(index)) {
+            qCCritical(LANGUAGE) << Q_FUNC_INFO << "index" << index << "has no chain";
+            return;
+        }
 
         QMutexLocker lock(&DUChain::chainsByIndexLock);
         DUChain::chainsByIndex[index] = nullptr;
@@ -779,7 +794,7 @@ public:
             //Here we wait for all parsing-threads to stop their processing
             for (const auto language : qAsConst(languages)) {
                 if (lockFlag == TryLock) {
-                    if (!language->parseLock()->tryLockForWrite()) {
+                    if (!language->parseLock() || !language->parseLock()->tryLockForWrite()) {
                         qCDebug(LANGUAGE) << "Aborting cleanup because language plugin is still parsing:" <<
                             language->name();
                         // some language is still parsing, don't interfere with the cleanup
@@ -1593,7 +1608,7 @@ void DUChain::documentClosed(IDocument* document)
 
     const auto currentDocumentContexts = sdDUChainPrivate->m_openDocumentContexts;
     for (const ReferencedTopDUContext& top : currentDocumentContexts) {
-        if (top->url() == url)
+        if (!top || sdDUChainPrivate->m_referenceCounts[top] == 0 || top->url() == url)
             sdDUChainPrivate->m_openDocumentContexts.remove(top);
     }
 }
@@ -1701,11 +1716,16 @@ static void finalCleanup()
     qCDebug(LANGUAGE) << "doing final cleanup";
 
     int cleaned = 0;
+    int passes = 0;
     while ((cleaned = globalItemRepositoryRegistry().finalCleanup())) {
+        passes += 1;
         qCDebug(LANGUAGE) << "cleaned" << cleaned << "B";
         if (cleaned < 1000) {
             qCDebug(LANGUAGE) << "cleaned enough";
             break;
+        } else if (passes >= 100) {
+            qCWarning(LANGUAGE) << "cleaned" << passes << "passes, last was" << cleaned << "B; that's enough";
+            break;
         }
     }
     qCDebug(LANGUAGE) << "final cleanup ready";
diff --git kdevplatform/language/duchain/duchainlock.cpp kdevplatform/language/duchain/duchainlock.cpp
index d23b3b1f36eb60310abd67924cb48fa533f55560..18dd6bf1ad936a95a32346d49339ce6a7d459664 100644
--- kdevplatform/language/duchain/duchainlock.cpp
+++ kdevplatform/language/duchain/duchainlock.cpp
@@ -97,6 +97,7 @@ bool DUChainLock::lockForRead(unsigned int timeout)
             } else {
                 //Fail!
                 d->changeOwnReaderRecursion(-1);
+                qWarning() << Q_FUNC_INFO << "timed out after" << t.elapsed()/1000.0 << "seconds";
                 return false;
             }
         }
@@ -127,6 +128,9 @@ bool DUChainLock::lockForWrite(uint timeout)
 
     Q_ASSERT(d->ownReaderRecursion() == 0);
 
+    if (d->ownReaderRecursion() != 0) {
+      return false;
+    }
 #if QT_VERSION >= QT_VERSION_CHECK(5, 14, 0)
     if (d->m_writer.loadRelaxed() == QThread::currentThread()) {
 #else
@@ -170,6 +174,7 @@ bool DUChainLock::lockForWrite(uint timeout)
             QThread::usleep(uSleepTime);
         } else {
             //Fail!
+            qWarning() << Q_FUNC_INFO << "timed out after" << t.elapsed()/1000.0 << "seconds";
             return false;
         }
     }
@@ -214,6 +219,11 @@ DUChainReadLocker::DUChainReadLocker(DUChainLock* duChainLock, uint timeout)
     , m_locked(false)
     , m_timeout(timeout)
 {
+    // 10-12 seconds is an eternity. Pick a random value in this range
+    // so if multiple candidates compete there's always 1 that waits the longest
+    if (!timeout) {
+      m_timeout = 10000 + 2000 * qrand() / RAND_MAX;
+    }
     lock();
 }
 
@@ -258,6 +268,11 @@ DUChainWriteLocker::DUChainWriteLocker(DUChainLock* duChainLock, uint timeout)
     , m_locked(false)
     , m_timeout(timeout)
 {
+    // 10-12 seconds is an eternity. Pick a random value in this range
+    // so if multiple candidates compete there's always 1 that waits the longest
+    if (!timeout) {
+      m_timeout = 10000 + 2000 * qrand() / RAND_MAX;
+    }
     lock();
 }
 
diff --git kdevplatform/serialization/itemrepository.h kdevplatform/serialization/itemrepository.h
index f8c2c58307..8a6179bbd4 100644
--- kdevplatform/serialization/itemrepository.h
+++ kdevplatform/serialization/itemrepository.h
@@ -529,7 +529,7 @@ public:
     }
 
     template <class Repository>
-    void deleteItem(unsigned short index, unsigned int hash, Repository& repository)
+    bool deleteItem(unsigned short index, unsigned int hash, Repository& repository)
     {
         ifDebugLostSpace(Q_ASSERT(!lostSpace()); )
 
@@ -548,6 +548,15 @@ public:
             currentIndex = followerIndex(currentIndex);
             //If this assertion triggers, the deleted item was not registered under the given hash
             Q_ASSERT(currentIndex);
+            if (!currentIndex) {
+              qWarning() << QStringLiteral("Bucket::deleteItem(%1,%2,%3)").arg(index).arg(hash).arg(repository.repositoryName())
+                << ": early return because currentIndex==0";
+              return false;
+            } else if (currentIndex == previousIndex) {
+              qWarning() << QStringLiteral("Bucket::deleteItem(%1,%2,%3)").arg(index).arg(hash).arg(repository.repositoryName())
+                << "early return because currentIndex==previousIndex==" << currentIndex;
+              return false;
+            }
         }
         Q_ASSERT(currentIndex == index);
 
@@ -618,6 +627,7 @@ public:
         }
 #endif
 //       Q_ASSERT(canAllocateItem(size));
+        return true;
     }
 
     ///@warning The returned item may be in write-protected memory, so never try doing a const_cast and changing some data
@@ -679,9 +689,10 @@ public:
     int finalCleanup(Repository& repository)
     {
         int changed = 0;
+        bool dirty = m_dirty;
 
-        while (m_dirty) {
-            m_dirty = false;
+        while (dirty) {
+            dirty = false;
 
             for (uint a = 0; a < ObjectMapSize; ++a) {
                 uint currentIndex = m_objectMap[a];
@@ -693,15 +704,24 @@ public:
 
                     if (!ItemRequest::persistent(item)) {
                         changed += item->itemSize();
-                        deleteItem(currentIndex, item->hash(), repository);
-                        m_dirty = true; //Set to dirty so we re-iterate
-                        break;
+                        if (deleteItem(currentIndex, item->hash(), repository)) {
+                            dirty = true; //Set to dirty so we re-iterate
+                            break;
+                        } else {
+                            qWarning() << "\tdidn't delete item of size" << item->itemSize();
+                        }
                     }
 
+                    uint prevIndex = currentIndex;
                     currentIndex = followerIndex(currentIndex);
+                    if (currentIndex == prevIndex) {
+                        qWarning() << Q_FUNC_INFO << "avoided deadloop in repository" << repository.repositoryName();
+                        currentIndex = 0;
+                    }
                 }
             }
         }
+        m_dirty = dirty;
         return changed;
     }
 
@@ -971,14 +991,23 @@ private:
     /// @param index the index of an item @return The index of the next item in the chain of items with a same local hash, or zero
     inline unsigned short followerIndex(unsigned short index) const
     {
-        Q_ASSERT(index >= 2);
-        return *reinterpret_cast<unsigned short*>(m_data + (index - 2));
+//         Q_ASSERT(index >= 2);
+        if (index >= 2) {
+            return *reinterpret_cast<unsigned short*>(m_data + (index - 2));
+        } else {
+            qWarning() << Q_FUNC_INFO << "index=" << index << "; returning 0";
+            return 0;
+        }
     }
 
     void setFollowerIndex(unsigned short index, unsigned short follower)
     {
-        Q_ASSERT(index >= 2);
-        *reinterpret_cast<unsigned short*>(m_data + (index - 2)) = follower;
+//         Q_ASSERT(index >= 2);
+        if (index >= 2) {
+          *reinterpret_cast<unsigned short*>(m_data + (index - 2)) = follower;
+        } else {
+          qWarning() << Q_FUNC_INFO << "index=" << index << "; follower set to 0 instead of" << follower;
+        }
     }
     // Only returns the current value if the item is actually free
     inline unsigned short freeSize(unsigned short index) const
@@ -1453,6 +1482,16 @@ public:
 
         //Make sure the index was reachable through the hash chain
         Q_ASSERT(bucketPtr);
+        if (!bucketPtr) {
+            qWarning() << Q_FUNC_INFO << "index" << index
+                << "not reachable through hash chain; previous bucket="
+                << previousBucketPtr << "next="
+                << (previousBucketPtr ? previousBucketPtr->nextBucketForHash(hash) : 0);
+            if (previousBucketPtr) {
+                previousBucketPtr->setNextBucketForHash(hash, 0);
+            }
+            return;
+        }
 
         --m_statItemCount;
 
