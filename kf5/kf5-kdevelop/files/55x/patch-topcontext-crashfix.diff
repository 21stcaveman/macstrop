# clanghelpers.cpp:128
diff --git kdevplatform/language/duchain/duchain.cpp kdevplatform/language/duchain/duchain.cpp
index 13674cb4c7dafb641bfa244280a4c945733e78b8..4c310dce8fba94bd419e4ffab6433660ea424a78 100644
--- kdevplatform/language/duchain/duchain.cpp
+++ kdevplatform/language/duchain/duchain.cpp
@@ -1812,6 +1812,20 @@ void DUChain::refCountDown(TopDUContext* top)
     }
 }
 
+// https://bugs.kde.org/show_bug.cgi?id=379004
+void DUChain::releaseReference(ReferencedTopDUContext* top) {
+  {
+      QMutexLocker l(&sdDUChainPrivate->m_referenceCountsMutex);
+      auto it = sdDUChainPrivate->m_referenceCounts.find(top->data());
+      if (it == sdDUChainPrivate->m_referenceCounts.end()) {
+        return;
+      }
+      sdDUChainPrivate->m_referenceCounts.erase(it);
+  }
+  const ReferencedTopDUContext ref = *top;
+  sdDUChainPrivate->m_openDocumentContexts.remove(ref);
+}
+
 void DUChain::emitDeclarationSelected(const DeclarationPointer& decl)
 {
     if (sdDUChainPrivate->m_destroyed)
diff --git kdevplatform/language/duchain/duchain.h kdevplatform/language/duchain/duchain.h
index 35dd6498a2142c828a4182813e97541f8c421065..09f9ba74b8707dfa9a450aa7080c7e7a1e23af51 100644
--- kdevplatform/language/duchain/duchain.h
+++ kdevplatform/language/duchain/duchain.h
@@ -295,6 +295,7 @@ private Q_SLOTS:
     void documentClosed(KDevelop::IDocument*);
 
 private:
+    void releaseReference(ReferencedTopDUContext* top);
     TopDUContext* loadChain(uint index);
     //These two are exported here so that the extremely frequently called chainForIndex(..) can be inlined
     static bool m_deleted;
diff --git kdevplatform/language/duchain/topducontext.cpp kdevplatform/language/duchain/topducontext.cpp
index 440fa30dffc9b1739e00aa11077d89df9c7dba75..651c35c612788d54fc0adbedf5040f9b0dfdd9b9 100644
--- kdevplatform/language/duchain/topducontext.cpp
+++ kdevplatform/language/duchain/topducontext.cpp
@@ -54,20 +54,29 @@ Utils::BasicSetRepository* RecursiveImportRepository::repository()
 
 ReferencedTopDUContext::ReferencedTopDUContext(TopDUContext* context) : m_topContext(context)
 {
-    if (m_topContext)
+    if (m_topContext) {
+        m_topContext->addReference(this);
         DUChain::self()->refCountUp(m_topContext);
+    }
 }
 
 ReferencedTopDUContext::ReferencedTopDUContext(const ReferencedTopDUContext& rhs) : m_topContext(rhs.m_topContext)
 {
-    if (m_topContext)
+    if (m_topContext) {
+        m_topContext->addReference(this);
         DUChain::self()->refCountUp(m_topContext);
+    }
 }
 
 ReferencedTopDUContext::~ReferencedTopDUContext()
 {
-    if (m_topContext && !DUChain::deleted())
-        DUChain::self()->refCountDown(m_topContext);
+    if (m_topContext && !DUChain::deleted()) {
+        auto topContext = m_topContext;
+        m_topContext = nullptr;
+        topContext->removeReference(this);
+        DUChain::self()->refCountDown(topContext);
+        DUChain::self()->releaseReference(this);
+    }
 }
 
 ReferencedTopDUContext& ReferencedTopDUContext::operator=(const ReferencedTopDUContext& rhs)
@@ -75,13 +84,17 @@ ReferencedTopDUContext& ReferencedTopDUContext::operator=(const ReferencedTopDUC
     if (m_topContext == rhs.m_topContext)
         return *this;
 
-    if (m_topContext)
+    if (m_topContext) {
         DUChain::self()->refCountDown(m_topContext);
+        m_topContext->removeReference(this);
+    }
 
     m_topContext = rhs.m_topContext;
 
-    if (m_topContext)
+    if (m_topContext) {
         DUChain::self()->refCountUp(m_topContext);
+        m_topContext->addReference(this);
+    }
     return *this;
 }
 
@@ -572,6 +585,11 @@ QExplicitlySharedDataPointer<ParsingEnvironmentFile> TopDUContext::parsingEnviro
 TopDUContext::~TopDUContext()
 {
     m_dynamicData->m_deleting = true;
+    foreach(ReferencedTopDUContext *ref, m_references) {
+        // ref may not be dynamically allocated so just "unregister" the topContext
+        ref->m_topContext = nullptr;
+    }
+    m_references.clear();
 
     //Clear the AST, so that the 'feature satisfaction' cache is eventually updated
     clearAst();
@@ -1224,4 +1242,17 @@ IndexedString TopDUContext::url() const
 {
     return d_func()->m_url;
 }
+
+void TopDUContext::addReference(ReferencedTopDUContext* ref)
+{
+    QMutexLocker l(&m_referencesMutex);
+    m_references.insert(ref);
+}
+
+void TopDUContext::removeReference(ReferencedTopDUContext* ref)
+{
+    QMutexLocker l(&m_referencesMutex);
+    m_references.remove(ref);
+}
+
 }
diff --git kdevplatform/language/duchain/topducontext.h kdevplatform/language/duchain/topducontext.h
index d3166233d7134d76d11923a5ff883c893d16239e..4570a02757485f67e3264bd28d7fb21b4d2e1dcd 100644
--- kdevplatform/language/duchain/topducontext.h
+++ kdevplatform/language/duchain/topducontext.h
@@ -96,6 +96,7 @@ public:
 
 private:
     TopDUContext* m_topContext;
+    friend class TopDUContext;
 };
 
 /**
@@ -342,6 +343,9 @@ protected:
     //Must be called after all imported top-contexts were loaded into the du-chain
     void rebuildDynamicImportStructure();
 
+    void addReference(ReferencedTopDUContext *ref);
+    void removeReference(ReferencedTopDUContext *ref);
+
     struct AliasChainElement;
     struct FindDeclarationsAcceptor;
     struct DeclarationChecker;
@@ -374,10 +378,13 @@ protected:
     friend class LocalIndexedProblem;
     friend class DeclarationId;
     friend class ParsingEnvironmentFile;
+    friend class ReferencedTopDUContext;
 
     TopDUContextLocalPrivate* m_local;
 
     class TopDUContextDynamicData* m_dynamicData;
+    QSet<ReferencedTopDUContext*> m_references;
+    QMutex m_referencesMutex;
 };
 
 /**
