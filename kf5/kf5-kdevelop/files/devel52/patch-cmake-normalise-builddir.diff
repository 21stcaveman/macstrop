diff --git plugins/cmake/cmakebuilddirchooser.cpp plugins/cmake/cmakebuilddirchooser.cpp
index 760c4cae0662b1dcbf8e29e8a94a645a8d1107a1..7112dce378ce35d174537ba4bfef90e9e85f1e2e 100644
--- plugins/cmake/cmakebuilddirchooser.cpp
+++ plugins/cmake/cmakebuilddirchooser.cpp
@@ -298,7 +298,7 @@ void CMakeBuildDirChooser::adoptPreviousBuildDirectory(int index)
     if (index > 0) {
         Q_ASSERT(m_project);
         m_chooserUi->cmakeExecutable->setUrl(CMake::currentCMakeExecutable(m_project, index -1).toUrl());
-        m_chooserUi->buildFolder->setUrl(CMake::currentBuildDir(m_project, index -1).toUrl());
+        m_chooserUi->buildFolder->setUrl(CMake::currentBuildDir(m_project, false, index -1).toUrl());
         m_chooserUi->installPrefix->setUrl(CMake::currentInstallDir(m_project, index -1).toUrl());
         m_chooserUi->buildType->setCurrentText(CMake::currentBuildType(m_project, index -1));
         m_chooserUi->extraArguments->setCurrentText(CMake::currentExtraArguments(m_project, index -1));
diff --git plugins/cmake/cmakecommitchangesjob.cpp plugins/cmake/cmakecommitchangesjob.cpp
index 3218a96a59caa514937116c258429cb02577f145..a97d81936e1ad914de562ed9c96e0fb31abdeacc 100644
--- plugins/cmake/cmakecommitchangesjob.cpp
+++ plugins/cmake/cmakecommitchangesjob.cpp
@@ -162,7 +162,7 @@ Path::List CMakeCommitChangesJob::addProjectData(const CMakeProjectData& data)
     QString dir = m_path.toLocalFile();
     if(data.vm.value("CMAKE_INCLUDE_CURRENT_DIR")==QStringList("ON")) {
         m_directories += dir;
-        m_directories += CMakeParserUtils::binaryPath(dir, m_project->path().toLocalFile(), CMake::currentBuildDir(m_project).toLocalFile(QUrl::RemoveTrailingSlash));
+        m_directories += CMakeParserUtils::binaryPath(dir, m_project->path().toLocalFile(), CMake::currentBuildDir(m_project, true).toLocalFile(QUrl::RemoveTrailingSlash));
     }
     m_directories += resolvePaths(m_path, data.properties[DirectoryProperty][dir]["INCLUDE_DIRECTORIES"]);
     m_directories.removeAll(QString());
diff --git plugins/cmake/cmakeimportjsonjob.cpp plugins/cmake/cmakeimportjsonjob.cpp
index 004ae18fe0e9cb58a7e9774ebf8bbeef78e12d2f..f7c89ea611998acf7bd581380e28d368b55e20d0 100644
--- plugins/cmake/cmakeimportjsonjob.cpp
+++ plugins/cmake/cmakeimportjsonjob.cpp
@@ -94,7 +94,7 @@ CMakeFilesCompilationData importCommands(const Path& commandsFile)
         ret.includes = kTransform<Path::List>(result.paths, convert);
         ret.frameworkDirectories = kTransform<Path::List>(result.frameworkDirectories, convert);
         ret.defines = result.defines;
-        const Path path(rt->pathInHost(Path(entry[KEY_FILE].toString())));
+        const Path path(rt->pathInHost(Path((QFileInfo(entry[KEY_FILE].toString()).canonicalFilePath()))));
         qCDebug(CMAKE) << "entering..." << path << entry[KEY_FILE];
         data.files[path] = ret;
     }
@@ -142,7 +142,7 @@ void CMakeImportJsonJob::start()
         return;
     }
 
-    const Path currentBuildDir = CMake::currentBuildDir(m_project);
+    const Path currentBuildDir = CMake::currentBuildDir(m_project, true);
     Q_ASSERT (!currentBuildDir.isEmpty());
 
     const Path targetsFilePath = CMake::targetDirectoriesFile(m_project);
diff --git plugins/cmake/cmakemanager.cpp plugins/cmake/cmakemanager.cpp
index 5c6a11fb7a9b8ca8af3699464f382fde4e91151f..28ad6dca51faa78059a81b0e6d4753b6be5b5494 100644
--- plugins/cmake/cmakemanager.cpp
+++ plugins/cmake/cmakemanager.cpp
@@ -128,7 +128,7 @@ Path CMakeManager::buildDirectory(KDevelop::ProjectBaseItem *item) const
 //     if(fi)
 //         ret.addPath(fi->buildDir());
 //     return ret;
-    return Path(CMake::currentBuildDir(item->project()));
+    return Path(CMake::currentBuildDir(item->project(), true));
 }
 
 KDevelop::ProjectFolderItem* CMakeManager::import( KDevelop::IProject *project )
diff --git plugins/cmake/cmakemodelitems.cpp plugins/cmake/cmakemodelitems.cpp
index 1d98bcebc0922f33f70de6a14340d6df5fc4420d..3b54a920fbb97aa39e3a2a47ceb956dff62855c8 100644
--- plugins/cmake/cmakemodelitems.cpp
+++ plugins/cmake/cmakemodelitems.cpp
@@ -32,7 +32,7 @@ QUrl CMakeTargetItem::builtUrl() const
     if (!m_builtUrl.isEmpty())
         return m_builtUrl.toUrl();
 
-    const KDevelop::Path buildDir = CMake::currentBuildDir(project());
+    const KDevelop::Path buildDir = CMake::currentBuildDir(project(), true);
     if (buildDir.isEmpty())
         return QUrl();
 
diff --git plugins/cmake/cmakeserverimportjob.cpp plugins/cmake/cmakeserverimportjob.cpp
index f93ded09658c5965e7943c7265bb5b6ef87ae30a..de1d72390bc5d67aba416c96fad5f47ea209b11c 100644
--- plugins/cmake/cmakeserverimportjob.cpp
+++ plugins/cmake/cmakeserverimportjob.cpp
@@ -163,7 +163,8 @@ void CMakeServerImportJob::doStart()
 {
     connect(m_server.data(), &CMakeServer::response, this, &CMakeServerImportJob::processResponse);
 
-    m_server->handshake(m_project->path(), CMake::currentBuildDir(m_project));
+    // maybe use the canonical project path too?
+    m_server->handshake(m_project->path(), CMake::currentBuildDir(m_project, true));
 }
 
 void CMakeServerImportJob::processResponse(const QJsonObject& response)
diff --git plugins/cmake/cmakeutils.cpp plugins/cmake/cmakeutils.cpp
index 9d6b6318d37281b7ec45673adfc9ce2ab322e202..476ad9a6d089fcf06280ebccc0bf4e0fdd974e2a 100644
--- plugins/cmake/cmakeutils.cpp
+++ plugins/cmake/cmakeutils.cpp
@@ -165,7 +165,7 @@ namespace CMake
 
 KDevelop::Path::List resolveSystemDirs(KDevelop::IProject* project, const QStringList& dirs)
 {
-    const KDevelop::Path buildDir(CMake::currentBuildDir(project));
+    const KDevelop::Path buildDir(CMake::currentBuildDir(project, true));
     const KDevelop::Path installDir(CMake::currentInstallDir(project));
 
     KDevelop::Path::List newList;
@@ -200,7 +200,7 @@ KDevelop::Path::List resolveSystemDirs(KDevelop::IProject* project, const QStrin
 bool checkForNeedingConfigure( KDevelop::IProject* project )
 {
     const QString currentRuntime = ICore::self()->runtimeController()->currentRuntime()->name();
-    const KDevelop::Path builddir = currentBuildDir(project);
+    const KDevelop::Path builddir = currentBuildDir(project, true);
     const bool isValid = (buildDirRuntime(project, -1) == currentRuntime || buildDirRuntime(project, -1).isEmpty()) && builddir.isValid();
 
     if( !isValid )
@@ -208,7 +208,7 @@ bool checkForNeedingConfigure( KDevelop::IProject* project )
         CMakeBuildDirChooser bd;
 
         bd.setProject( project );
-        const auto builddirs = CMake::allBuildDirs(project);
+        const auto builddirs = CMake::allBuildDirs(project, true);
         bd.setAlreadyUsed( builddirs );
         bd.setShowAvailableBuildDirs(!builddirs.isEmpty());
         bd.setCMakeExecutable(currentCMakeExecutable(project));
@@ -293,9 +293,14 @@ KDevelop::Path projectRoot(KDevelop::IProject* project)
     return project->path().cd(CMake::projectRootRelative(project));
 }
 
-KDevelop::Path currentBuildDir( KDevelop::IProject* project, int builddir )
+KDevelop::Path currentBuildDir( KDevelop::IProject* project, bool canonical, int builddir )
 {
-    return KDevelop::Path(readBuildDirParameter( project, Config::Specific::buildDirPathKey, QString(), builddir ));
+    KDevelop::Path buildDir(readBuildDirParameter( project, Config::Specific::buildDirPathKey, QString(), builddir ));
+    if (canonical) {
+        return KDevelop::Path(QFileInfo(buildDir.toLocalFile()).canonicalFilePath());
+    } else {
+        return buildDir;
+    }
 }
 
 KDevelop::Path commandsFile(KDevelop::IProject* project)
@@ -620,12 +628,18 @@ ICMakeDocumentation* cmakeDocumentation()
     return KDevelop::ICore::self()->pluginController()->extensionForPlugin<ICMakeDocumentation>(QStringLiteral("org.kdevelop.ICMakeDocumentation"));
 }
 
-QStringList allBuildDirs(KDevelop::IProject* project)
+QStringList allBuildDirs(KDevelop::IProject* project, bool canonical)
 {
     QStringList result;
     int bdCount = buildDirCount(project);
-    for (int i = 0; i < bdCount; ++i)
-        result += buildDirGroup( project, i ).readEntry( Config::Specific::buildDirPathKey );
+    for (int i = 0; i < bdCount; ++i) {
+        QString buildDir = buildDirGroup( project, i ).readEntry( Config::Specific::buildDirPathKey );
+        if (canonical) {
+            result += QFileInfo(buildDir).canonicalFilePath();
+        } else {
+            result += buildDir;
+        }
+    }
     return result;
 }
 
diff --git plugins/cmake/cmakeutils.h plugins/cmake/cmakeutils.h
index 3642b94c21dd3daeefdbb1fd75ce6ff0a65de702..4c56848330f4ea515101da75b956ef45a51be27f 100644
--- plugins/cmake/cmakeutils.h
+++ plugins/cmake/cmakeutils.h
@@ -86,7 +86,7 @@ namespace CMake
      * @returns the current builddir for the given project or an empty url if none
      * has been set by the user.
      */
-    KDEVCMAKECOMMON_EXPORT KDevelop::Path currentBuildDir( KDevelop::IProject* project, int builddir = -1 );
+    KDEVCMAKECOMMON_EXPORT KDevelop::Path currentBuildDir( KDevelop::IProject* project, bool canonical=false, int builddir = -1 );
 
     /**
      * @returns the path to the 'compile_commands.json' file in the current builddir for the given project
@@ -188,7 +188,7 @@ namespace CMake
     /**
      * Retrieves the configured build directories for @p project.
      */
-    KDEVCMAKECOMMON_EXPORT QStringList allBuildDirs(KDevelop::IProject* project);
+    KDEVCMAKECOMMON_EXPORT QStringList allBuildDirs(KDevelop::IProject* project, bool canonical=false);
 
     /**
      * Attempts to migrate the CMake configuration to per-builddir format.
diff --git plugins/cmake/settings/cmakepreferences.cpp plugins/cmake/settings/cmakepreferences.cpp
index f2bcb81f54ee15aad758782938eebdf86daaf493..a3408d6424ff15c86599fe981d501d669b94f911 100644
--- plugins/cmake/settings/cmakepreferences.cpp
+++ plugins/cmake/settings/cmakepreferences.cpp
@@ -336,7 +336,9 @@ void CMakePreferences::removeBuildDir()
     if(curr < 0)
         return;
 
-    Path removedPath = CMake::currentBuildDir( m_project );
+    // would we ever want to delete anything other than the actual directory
+    // (in case the user-specified path contains symlinks)?!
+    Path removedPath = CMake::currentBuildDir( m_project, true );
     QString removed = removedPath.toLocalFile();
     if(QDir(removed).exists())
     {
