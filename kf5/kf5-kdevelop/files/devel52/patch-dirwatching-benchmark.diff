diff --git a/kdevplatform/project/CMakeLists.txt b/kdevplatform/project/CMakeLists.txt
index c61e8de32e80c29a648766fe88c62b78f5561c36..d8b14d82407b1ec5a886d2fbd60dd77bd8bceb33 100644
--- a/kdevplatform/project/CMakeLists.txt
+++ b/kdevplatform/project/CMakeLists.txt
@@ -15,6 +15,7 @@ set(KDevPlatformProject_LIB_SRCS
     abstractfilemanagerplugin.cpp
     filemanagerlistjob.cpp
     projectfiltermanager.cpp
+    projectwatcher.cpp
     interfaces/iprojectbuilder.cpp
     interfaces/iprojectfilemanager.cpp
     interfaces/ibuildsystemmanager.cpp
diff --git a/kdevplatform/project/abstractfilemanagerplugin.cpp b/kdevplatform/project/abstractfilemanagerplugin.cpp
index 09960eabfed72fae6454b5d555f7f52a3ee23ecf..e75b01e862239e3c9edc8ec95466f5ffd6909e69 100644
--- a/kdevplatform/project/abstractfilemanagerplugin.cpp
+++ b/kdevplatform/project/abstractfilemanagerplugin.cpp
@@ -38,6 +38,7 @@
 #include <serialization/indexedstring.h>
 
 #include "projectfiltermanager.h"
+#include "projectwatcher.h"
 #include "debug.h"
 
 #define ifDebug(x)
@@ -100,7 +101,7 @@ public:
 
     void removeFolder(ProjectFolderItem* folder);
 
-    QHash<IProject*, KDirWatch*> m_watchers;
+    QHash<IProject*, ProjectWatcher*> m_watchers;
     QHash<IProject*, QList<FileManagerListJob*> > m_projectJobs;
     QVector<QString> m_stoppedFolders;
     ProjectFilterManager m_filters;
@@ -257,7 +258,7 @@ void AbstractFileManagerPluginPrivate::created(const QString& path_)
     const IndexedString indexedPath(path.pathOrUrl());
     const IndexedString indexedParent(path.parent().pathOrUrl());
 
-    QHashIterator<IProject*, KDirWatch*> it(m_watchers);
+    QHashIterator<IProject*, ProjectWatcher*> it(m_watchers);
     while (it.hasNext()) {
         const auto p = it.next().key();
         if ( !p->projectItem()->model() ) {
@@ -320,7 +321,7 @@ void AbstractFileManagerPluginPrivate::deleted(const QString& path_)
     const Path path(QUrl::fromLocalFile(path_));
     const IndexedString indexed(path.pathOrUrl());
 
-    QHashIterator<IProject*, KDirWatch*> it(m_watchers);
+    QHashIterator<IProject*, ProjectWatcher*> it(m_watchers);
     while (it.hasNext()) {
         const auto p = it.next().key();
         if (path == p->path()) {
@@ -477,14 +478,15 @@ ProjectFolderItem *AbstractFileManagerPlugin::import( IProject *project )
 
     ///TODO: check if this works for remote files when something gets changed through another KDE app
     if ( project->path().isLocalFile() ) {
-        d->m_watchers[project] = new KDirWatch( project );
+        auto watcher = new ProjectWatcher(project, &d->m_filters);
 
-        connect(d->m_watchers[project], &KDirWatch::created,
+        // set up the signal handling
+        connect(watcher, &KDirWatch::created,
                 this, [&] (const QString& path_) { d->created(path_); });
-        connect(d->m_watchers[project], &KDirWatch::deleted,
+        connect(watcher, &KDirWatch::deleted,
                 this, [&] (const QString& path_) { d->deleted(path_); });
-
-        d->m_watchers[project]->addDir(project->path().toLocalFile(), KDirWatch::WatchSubDirs | KDirWatch:: WatchFiles );
+        watcher->addDir(project->path().toLocalFile(), KDirWatch::WatchSubDirs | KDirWatch:: WatchFiles );
+        d->m_watchers[project] = watcher;
     }
 
     d->m_filters.add(project);
@@ -661,6 +663,12 @@ KDirWatch* AbstractFileManagerPlugin::projectWatcher( IProject* project ) const
     return d->m_watchers.value( project, nullptr );
 }
 
+void AbstractFileManagerPlugin::projectClosing( IProject *project )
+{
+    d->projectClosing(project);
+}
+
+
 //END Plugin
 
 #include "moc_abstractfilemanagerplugin.cpp"
diff --git a/kdevplatform/project/abstractfilemanagerplugin.h b/kdevplatform/project/abstractfilemanagerplugin.h
index c99e7e0c2316bf24df76d303fdb599a8095193da..20ef5adda2c36eba8dca8ddb6777c599eacec690 100644
--- a/kdevplatform/project/abstractfilemanagerplugin.h
+++ b/kdevplatform/project/abstractfilemanagerplugin.h
@@ -34,6 +34,8 @@ class KDirWatch;
 namespace KDevelop {
 
 class AbstractFileManagerPluginPrivate;
+class ProjectController;
+class AFMPBenchmark;
 
 /**
  * This class can be used as a common base for file managers.
@@ -103,6 +105,11 @@ protected:
      */
     KDirWatch* projectWatcher( IProject* project ) const;
 
+    /**
+     * tell the plugin that the given @p project is going to be closed.
+     */
+    void projectClosing( IProject* project );
+
 Q_SIGNALS:
     void reloadedFileItem(KDevelop::ProjectFileItem* file);
     void reloadedFolderItem(KDevelop::ProjectFolderItem* folder);
@@ -118,6 +125,9 @@ Q_SIGNALS:
 private:
     const QScopedPointer<class AbstractFileManagerPluginPrivate> d;
     friend class AbstractFileManagerPluginPrivate;
+public:
+    friend class ProjectController;
+    friend class AFMPBenchmark;
 };
 
 }
diff --git a/kdevplatform/project/projectwatcher.cpp b/kdevplatform/project/projectwatcher.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..429cefb303db6f51d7afb03056e940e06e270ce5
--- /dev/null
+++ b/kdevplatform/project/projectwatcher.cpp
@@ -0,0 +1,57 @@
+/***************************************************************************
+ *   This file is part of KDevelop                                         *
+ *   Copyright 2017 René Bertin <rjvbertin@gmail.com>                      *
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU Library General Public License as       *
+ *   published by the Free Software Foundation; either version 2 of the    *
+ *   License, or (at your option) any later version.                       *
+ *                                                                         *
+ *   This program is distributed in the hope that it will be useful,       *
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
+ *   GNU General Public License for more details.                          *
+ *                                                                         *
+ *   You should have received a copy of the GNU Library General Public     *
+ *   License along with this program; if not, write to the                 *
+ *   Free Software Foundation, Inc.,                                       *
+ *   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.         *
+ ***************************************************************************/
+
+#include "projectwatcher.h"
+#include "iproject.h"
+#include "projectfiltermanager.h"
+#include "path.h"
+
+#include <KDirWatch>
+
+using namespace KDevelop;
+
+KDevelop::ProjectWatcher::ProjectWatcher(IProject* project, ProjectFilterManager* filter)
+    : KDirWatch(project)
+    , m_project(project)
+    , m_filter(filter)
+    , m_watchedCount(0)
+{}
+
+void KDevelop::ProjectWatcher::addDir(const QString& path, WatchModes watchModes)
+{
+    if (m_filter->isValid(Path(path), true, m_project) && !contains(path)) {
+        KDirWatch::addDir(path, watchModes);
+        m_watchedCount += 1;
+    }
+}
+
+void KDevelop::ProjectWatcher::removeDir(const QString& path)
+{
+    if (contains(path)) {
+        KDirWatch::removeDir(path);
+        m_watchedCount -= 1;
+    }
+}
+
+int KDevelop::ProjectWatcher::size() const
+{
+    return m_watchedCount;
+}
+
diff --git a/kdevplatform/project/projectwatcher.h b/kdevplatform/project/projectwatcher.h
new file mode 100644
index 0000000000000000000000000000000000000000..74d4d4b9359d9dcad5bfb5080d0f4dece425a9ae
--- /dev/null
+++ b/kdevplatform/project/projectwatcher.h
@@ -0,0 +1,62 @@
+/***************************************************************************
+ *   This file is part of KDevelop                                         *
+ *   Copyright 2017 René Bertin <rjvbertin@gmail.com>                      *
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU Library General Public License as       *
+ *   published by the Free Software Foundation; either version 2 of the    *
+ *   License, or (at your option) any later version.                       *
+ *                                                                         *
+ *   This program is distributed in the hope that it will be useful,       *
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
+ *   GNU General Public License for more details.                          *
+ *                                                                         *
+ *   You should have received a copy of the GNU Library General Public     *
+ *   License along with this program; if not, write to the                 *
+ *   Free Software Foundation, Inc.,                                       *
+ *   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.         *
+ ***************************************************************************/
+
+#ifndef KDEVPLATFORM_PROJECTWATCHER_H
+#define KDEVPLATFORM_PROJECTWATCHER_H
+
+#include "projectexport.h"
+
+#include <KDirWatch>
+
+namespace KDevelop {
+
+class IProject;
+class ProjectFilterManager;
+
+class KDEVPLATFORMPROJECT_EXPORT ProjectWatcher : public KDirWatch
+{
+    Q_OBJECT
+public:
+    /**
+     * Create a dirwatcher for @p project based on KDirWatch and
+     * enhanced with support for the project @p filter.
+     */
+    explicit ProjectWatcher(IProject* project, ProjectFilterManager* filter);
+
+    /**
+     * Add directory @p path to the project dirwatcher if it is not
+     * rejected by the project filter.
+     */
+    void addDir(const QString& path, WatchModes watchModes = WatchDirOnly);
+    void removeDir(const QString& path);
+
+    /**
+     * return the current number of directories being watched.
+     */
+    int size() const;
+
+private:
+    IProject* m_project;
+    ProjectFilterManager* m_filter;
+    int m_watchedCount;
+};
+
+}
+#endif //KDEVPLATFORM_PROJECTWATCHER_H
diff --git a/kdevplatform/project/tests/CMakeLists.txt b/kdevplatform/project/tests/CMakeLists.txt
index 74e5baada32fcc570f410e50c26bfc83a5066830..5a8d80cfe1a933bb839114cf7059152fc235adbd 100644
--- a/kdevplatform/project/tests/CMakeLists.txt
+++ b/kdevplatform/project/tests/CMakeLists.txt
@@ -21,3 +21,12 @@ target_link_libraries(abstractfilemanagerpluginimporttest
     KDev::Tests
     Qt5::QuickWidgets
 )
+
+add_executable(abstractfilemanagerpluginimportbenchmark
+    abstractfilemanagerpluginimportbenchmark.cpp
+)
+ecm_mark_nongui_executable(abstractfilemanagerpluginimportbenchmark)
+target_link_libraries(abstractfilemanagerpluginimportbenchmark
+    KDev::Project
+    KDev::Tests
+)
diff --git a/kdevplatform/project/tests/abstractfilemanagerpluginimportbenchmark.cpp b/kdevplatform/project/tests/abstractfilemanagerpluginimportbenchmark.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..bfe12ac8a6a21a6f81504c8c31804075fa6610fa
--- /dev/null
+++ b/kdevplatform/project/tests/abstractfilemanagerpluginimportbenchmark.cpp
@@ -0,0 +1,172 @@
+/* This file is part of KDevelop
+    Copyright 2017 René J.V. Bertin <rjvbertin@gmail.com>
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public License
+    along with this library; see the file COPYING.LIB.  If not, write to
+    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+    Boston, MA 02110-1301, USA.
+*/
+
+#include <project/abstractfilemanagerplugin.h>
+#include <project/projectmodel.h>
+#include <project/projectwatcher.h>
+
+#include <tests/autotestshell.h>
+#include <tests/testcore.h>
+#include <tests/testproject.h>
+
+#include <util/path.h>
+
+#include <KJob>
+#include <KDirWatch>
+
+#include <QCoreApplication>
+#include <QList>
+#include <QFileInfo>
+#include <QElapsedTimer>
+#include <QMap>
+#include <QDebug>
+
+using namespace KDevelop;
+
+namespace KDevelop {
+
+class TestFileManagerPlugin : public AbstractFileManagerPlugin
+{
+    Q_OBJECT
+public:
+    TestFileManagerPlugin(QObject* parent = nullptr)
+        : AbstractFileManagerPlugin({}, parent)
+    {}
+
+    using AbstractFileManagerPlugin::projectClosing;
+};
+
+class AFMPBenchmark : public QObject
+{
+    Q_OBJECT
+public:
+    AFMPBenchmark(TestFileManagerPlugin* manager, const QString& path, QObject* parent)
+        : QObject(parent)
+    {
+        m_manager = manager;
+        m_project = new TestProject(Path(path));
+    }
+
+    void start()
+    {
+        m_projectNumber = s_numBenchmarksRunning++;
+        qInfo() << "Starting import of project" << m_project->path();
+        m_timer.start();
+        auto root = m_manager->import(m_project);
+        int elapsed = m_timer.elapsed();
+        qInfo() << "\tcreating dirwatcher took"
+            << elapsed / 1000.0 << "seconds";
+        auto import = m_manager->createImportJob(root);
+        QObject::connect(import, &KJob::finished, this, &AFMPBenchmark::projectImportDone);
+        m_timer.restart();
+        import->start();
+    }
+
+    void projectClosing()
+    {
+        m_timer.restart();
+        m_manager->projectClosing(m_project);
+        int elapsed = m_timer.elapsed();
+        qInfo() << "\tclosing project" << m_projectNumber << ":" << elapsed / 1000.0 << "seconds";
+    }
+
+    TestFileManagerPlugin* m_manager;
+    TestProject* m_project;
+    QElapsedTimer m_timer;
+    int m_projectNumber;
+
+    static int s_numBenchmarksRunning;
+
+Q_SIGNALS:
+    void finished();
+
+private Q_SLOTS:
+    void projectImportDone(KJob* job)
+    {
+        Q_UNUSED(job);
+        int elapsed = m_timer.elapsed();
+        // The number of items in the dirwatcher can be obtained as follows,
+        // provided dirs are added one by one and not with a recursive call
+        // to ProjectWatcher::addDir():
+        // ProjectWatcher* watcher = qobject_cast<ProjectWatcher*>(m_manager->projectWatcher(m_project));
+        // int watched = watcher ? watcher->size() : -1;
+        qInfo() << "imported project" << m_projectNumber
+            << "with" << m_project->fileSet().size()
+            << "files
+            << elapsed / 1000.0 << "seconds";
+
+        s_numBenchmarksRunning -= 1;
+        if (s_numBenchmarksRunning <= 0) {
+            emit finished();
+        }
+    }
+
+};
+
+int AFMPBenchmark::s_numBenchmarksRunning = 0;
+}
+
+int main(int argc, char** argv)
+{
+    if (argc < 2) {
+        qWarning() << "Usage:" << argv[0] << "projectDir1 [...projectDirN]";
+        return 1;
+    }
+    QCoreApplication app(argc, argv);
+
+    AutoTestShell::init({"no plugins"});
+    auto core = TestCore::initialize(Core::NoUi);
+    auto manager = new TestFileManagerPlugin(core);
+
+    const char *kdwMethod[] = {"FAM", "Inotify", "Stat", "QFSWatch"};
+    qInfo() << "KDirWatch backend:" << kdwMethod[KDirWatch().internalMethod()];
+
+    QList<AFMPBenchmark*> benchmarks;
+
+    for (int i = 1 ; i < argc ; ++i) {
+        const QString path = QString::fromUtf8(argv[i]);
+        if (QFileInfo(path).isDir()) {
+            const auto benchmark = new AFMPBenchmark(manager, path, core);
+            benchmarks << benchmark;
+            QObject::connect(benchmark, &AFMPBenchmark::finished,
+                             &app, [&benchmarks] {
+                                for (auto benchmark : benchmarks) {
+                                    benchmark->projectClosing();
+                                }
+                                qInfo() << "Done";
+                                QCoreApplication::instance()->quit();
+                             });
+        }
+    }
+
+    if (benchmarks.isEmpty()) {
+        qWarning() << "no projects to import (arguments must be directories)";
+        return 1;
+    }
+
+    for (auto benchmark : benchmarks) {
+        benchmark->start();
+    }
+
+    return app.exec();
+}
+
+#include "abstractfilemanagerpluginimportbenchmark.moc"
+
+
