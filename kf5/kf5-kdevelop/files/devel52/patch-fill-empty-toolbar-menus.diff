diff --git kdevplatform/sublime/idealdockwidget.cpp kdevplatform/sublime/idealdockwidget.cpp
index 4f63ec150791ed562f8a291bddfbb3e67a68ce60..dc9e26719717bbbccdcad82df292434962ad0060 100644
--- kdevplatform/sublime/idealdockwidget.cpp
+++ kdevplatform/sublime/idealdockwidget.cpp
@@ -100,7 +180,14 @@ void IdealDockWidget::contextMenuRequested(const QPoint &point)
 
     QList< QAction* > viewActions = m_view->contextMenuActions();
     if(!viewActions.isEmpty()) {
-        menu.addActions(viewActions);
+        // add the view's actions to the context menu,
+        // checking each if it can be represented
+        foreach (const auto action, viewActions) {
+            if (!action->text().isEmpty() && !action->iconText().isEmpty()) {
+                // avoid adding empty menu items 
+                menu.addAction(action);
+            }
+        }
         menu.addSeparator();
     }
 
diff --git plugins/contextbrowser/contextbrowserview.cpp plugins/contextbrowser/contextbrowserview.cpp
index e08be57cc1648e4e997071c77e3b57cafc0d3f32..5bcd81780355b5c4615e5e785b7659e5af02c7b3 100644
--- plugins/contextbrowser/contextbrowserview.cpp
+++ plugins/contextbrowser/contextbrowserview.cpp
@@ -182,6 +182,9 @@ ContextBrowserView::ContextBrowserView( ContextBrowserPlugin* plugin, QWidget* p
 
     m_declarationMenuAction = new QAction(QIcon::fromTheme(QStringLiteral("code-class")), QString(), this);
     m_declarationMenuAction->setToolTip(i18n("Declaration menu"));
+    // expose the declaration menu via the context menu; allows hiding the toolbar to save some space 
+    // (this will not make it behave like a submenu though)
+    m_declarationMenuAction->setText(m_declarationMenuAction->toolTip());
     connect(m_declarationMenuAction, &QAction::triggered, this, &ContextBrowserView::declarationMenu);
     addAction(m_declarationMenuAction);
     m_lockAction = new KToggleAction(QIcon::fromTheme(QStringLiteral("object-unlocked")), i18n("Lock Current View"), this);
diff --git plugins/outlineview/outlinewidget.cpp plugins/outlineview/outlinewidget.cpp
index 6358b4a254bdea070dec89569fb5d9f96b2e435f..9ca049c90bf723ee19eea402e86c4e6f55fc59c3 100644
--- plugins/outlineview/outlinewidget.cpp
+++ plugins/outlineview/outlinewidget.cpp
@@ -57,6 +57,8 @@ OutlineWidget::OutlineWidget(QWidget* parent, OutlineViewPlugin* plugin)
     // sort action
     m_sortAlphabeticallyAction = new QAction(QIcon::fromTheme(QStringLiteral("view-sort-ascending")), QString(), this);
     m_sortAlphabeticallyAction->setToolTip(i18n("Sort alphabetically"));
+    // reuse the tooltip so the action will show up in the context menu:
+    m_sortAlphabeticallyAction->setText(m_sortAlphabeticallyAction->toolTip());
     m_sortAlphabeticallyAction->setCheckable(true);
     connect(m_sortAlphabeticallyAction, &QAction::triggered, this, [this](bool sort) {
         // calling sort with -1 will restore the original order
