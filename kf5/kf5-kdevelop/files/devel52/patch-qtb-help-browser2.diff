diff --git kdevplatform/documentation/CMakeLists.txt kdevplatform/documentation/CMakeLists.txt
index 65b94149505b43d2f64041557284635a4c941d0a..732d8d80302f51fc82355d3bd60e5dd5016d9801 100644
--- kdevplatform/documentation/CMakeLists.txt
+++ kdevplatform/documentation/CMakeLists.txt
@@ -1,5 +1,9 @@
 add_definitions(-DTRANSLATION_DOMAIN=\"kdevplatform\")
 
+# store KDEVELOP_USE_QTEXTBROWSER in the cache because it needs to be accessible
+# to plugins/qthelp/CMakeLists.txt too. Reset it to 0 on each run.
+set(KDEVELOP_USE_QTEXTBROWSER 0 CACHE INTERNAL "Documentation will be rendered using QTextBrowser")
+
 find_package(Qt5WebEngineWidgets CONFIG)
 if(TARGET Qt5::WebEngineWidgets)
     set_package_properties(Qt5WebEngineWidgets PROPERTIES
@@ -8,14 +12,22 @@ if(TARGET Qt5::WebEngineWidgets)
         TYPE REQUIRED)
 else()
     find_package(Qt5WebKitWidgets CONFIG)
-    set_package_properties(Qt5WebKitWidgets PROPERTIES
-        PURPOSE "QtWebKit, for integrated documentation"
-        URL "http://qt-project.org/"
-        TYPE REQUIRED)
-    set(USE_QTWEBKIT 1)
+    if(TARGET Qt5::WebKitWidgets)
+        set_package_properties(Qt5WebKitWidgets PROPERTIES
+            PURPOSE "QtWebKit, for integrated documentation"
+            URL "http://qt-project.org/"
+            TYPE REQUIRED)
+        set(USE_QTWEBKIT 1)
+    else()
+        set(KDEVELOP_USE_QTEXTBROWSER 1 CACHE INTERNAL "Documentation will be rendered using QTextBrowser")
+    endif()
 endif()
 
-set(KDevPlatformDocumentation_LIB_SRCS
+if(KDEVELOP_USE_QTEXTBROWSER)
+    set(KDevPlatformDocumentation_LIB_SRCS
+        standarddocumentationview_qtb.cpp)
+endif()
+set(KDevPlatformDocumentation_LIB_SRCS ${KDevPlatformDocumentation_LIB_SRCS}
     standarddocumentationview.cpp
     documentationfindwidget.cpp
     documentationview.cpp
@@ -32,7 +44,10 @@ kdevplatform_add_library(KDevPlatformDocumentation SOURCES ${KDevPlatformDocumen
 
 target_link_libraries(KDevPlatformDocumentation PUBLIC KDev::Interfaces PRIVATE KDev::Util)
 
-if(USE_QTWEBKIT)
+if(KDEVELOP_USE_QTEXTBROWSER)
+    target_link_libraries(KDevPlatformDocumentation PRIVATE Qt5::Widgets)
+    target_compile_definitions(KDevPlatformDocumentation PRIVATE -DUSE_QTEXTBROWSER)
+elseif(USE_QTWEBKIT)
     target_link_libraries(KDevPlatformDocumentation PRIVATE Qt5::WebKitWidgets)
     target_compile_definitions(KDevPlatformDocumentation PRIVATE -DUSE_QTWEBKIT)
 else()
diff --git kdevplatform/documentation/standarddocumentationview.cpp kdevplatform/documentation/standarddocumentationview.cpp
index 64680e5faaefb0c48f89997be1d9e9198d94e398..b10aea7abbd042c0e9257ff16c1066eee0a2814d 100644
--- kdevplatform/documentation/standarddocumentationview.cpp
+++ kdevplatform/documentation/standarddocumentationview.cpp
@@ -20,6 +20,7 @@
  */
 
 #include "standarddocumentationview.h"
+
 #include "documentationfindwidget.h"
 #include "debug.h"
 
@@ -32,6 +33,9 @@
 #include <QContextMenuEvent>
 #include <QMenu>
 
+#ifndef USE_QTEXTBROWSER
+// the QTextBrowser implementation lives in standarddocumentationview_qtb.cpp
+
 #ifdef USE_QTWEBKIT
 #include <QFontDatabase>
 #include <QWebView>
@@ -385,3 +389,22 @@ void StandardDocumentationView::wheelEvent(QWheelEvent* event)
     }
     QWidget::wheelEvent(event);
 }
+
+#endif
+
+using namespace KDevelop;
+
+bool StandardDocumentationView::isUrlSchemeSupported(const QUrl& url)
+{
+    const QString& scheme = url.scheme();
+    return scheme.isEmpty()
+        || scheme == QLatin1String("file")
+        || scheme == QLatin1String("qrc")
+        || scheme == QLatin1String("data")
+        || scheme == QLatin1String("qthelp")
+        || scheme == QLatin1String("man")
+        || scheme == QLatin1String("help")
+        || scheme == QLatin1String("about");
+}
+
+#include "standarddocumentationview.moc"
diff --git kdevplatform/documentation/standarddocumentationview.h kdevplatform/documentation/standarddocumentationview.h
index eb5505fb0b14de118e30200de9676d4e4121ee15..cb6dfb6f33a3b0e024489dcc166e0d277f091e33 100644
--- kdevplatform/documentation/standarddocumentationview.h
+++ kdevplatform/documentation/standarddocumentationview.h
@@ -23,6 +23,7 @@
 #define KDEVPLATFORM_STANDARDDOCUMENTATIONVIEW_H
 
 #include <QWidget>
+#include <QPointer>
 #include "documentationexport.h"
 #include "documentationfindwidget.h"
 #include <interfaces/idocumentation.h>
@@ -59,6 +60,39 @@ public:
     void setOverrideCss(const QUrl &url);
 
     void load(const QUrl &url);
+#ifdef USE_QTEXTBROWSER
+    /**
+     * @brief callback method for QTextBrowser::loadResource(type,url)
+     * 
+     * @param that an instance of the class handling the request
+     * @param type the QTextDocument::ResourceType type of the address to load
+     * @param url the address to be loaded; can be rewritten (resolved)
+     * @param content return variable for the loaded content. @p content is
+     * guaranteed to be invalid upon entry.
+     * 
+     * The function should return true if content was loaded successfully.
+     */
+    typedef bool (*LoadResourceCallback)(QPointer<QObject> that, int type, QUrl& url, QVariant& content);
+    /**
+     * @brief register a @p callback for QTextBrowser::loadResource(type,url)
+     * and the @p instance that will be handling the request.
+     */
+    void registerLoadResourceCallback(QPointer<QObject> instance, const LoadResourceCallback callback);
+
+    /**
+     * @brief load a page with the given content
+     * 
+     * @param url the address with a scheme QTextBrowser doesn't support
+     * @param content content that QTextBrowser cannot obtain itself.
+     * 
+     * Url and content are cached internally.
+     */
+    void load(const QUrl &url, const QByteArray& content);
+    /**
+     * @brief restore the cached url and content information
+     */
+    void restore();
+#endif
     void setHtml(const QString &html);
     void setNetworkAccessManager(QNetworkAccessManager* manager);
 
@@ -69,6 +103,11 @@ public:
 
     QMenu* createStandardContextMenu();
 
+    /**
+     * is @param url one using a supported scheme?
+     */
+    static bool isUrlSchemeSupported(const QUrl& url);
+
 Q_SIGNALS:
     void linkClicked(const QUrl &link);
 
diff --git kdevplatform/documentation/standarddocumentationview_qtb.cpp kdevplatform/documentation/standarddocumentationview_qtb.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..612700d82c9eb6ce9d06ec0b05edbc7712837b18
--- /dev/null
+++ kdevplatform/documentation/standarddocumentationview_qtb.cpp
@@ -0,0 +1,366 @@
+/*
+ * This file is part of KDevelop
+ * Copyright 2010 Aleix Pol Gonzalez <aleixpol@kde.org>
+ * Copyright 2016 Igor Kushnir <igorkuo@gmail.com>
+ * Copyright 2017 Ren√© J.V. Bertin <rjvbertin@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU Library General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program; if not, write to the
+ * Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ */
+
+#include "standarddocumentationview.h"
+#include "documentationfindwidget.h"
+#include "debug.h"
+
+#include <util/zoomcontroller.h>
+
+#include <KConfigGroup>
+#include <KSharedConfig>
+#include <KLocalizedString>
+
+#include <QVBoxLayout>
+#include <QContextMenuEvent>
+#include <QMenu>
+#include <QDesktopServices>
+
+#include <QTextBrowser>
+
+using namespace KDevelop;
+
+class HelpViewer : public QTextBrowser
+{
+    Q_OBJECT
+public:
+
+    HelpViewer(StandardDocumentationView* parent)
+        : QTextBrowser(parent)
+        , m_parent(parent)
+        , m_loadFinished(false)
+        , m_restoreTimer(0)
+        , m_callbackInstance(0)
+        , m_loadResourceCallback(0)
+    {}
+
+    void setSource(const QUrl& url) override
+    {
+        if (StandardDocumentationView::isUrlSchemeSupported(url)) {
+            m_loadFinished = false;
+            QTextBrowser::setSource(url);
+        } else {
+            bool ok = false;
+            const QString& scheme = url.scheme();
+            if (scheme == QLatin1String("http") || scheme == QLatin1String("https")) {
+                ok = QDesktopServices::openUrl(url);
+            }
+            if (!ok) {
+                qCDebug(DOCUMENTATION) << "ignoring unsupported url" << url;
+            }
+        }
+    }
+
+    void setUrlWithContent(const QUrl& url, const QByteArray& content)
+    {
+        if (StandardDocumentationView::isUrlSchemeSupported(url)) {
+            m_requested = url;
+            m_content = qCompress(content, 8);
+            if (m_restoreTimer) {
+                killTimer(m_restoreTimer);
+                m_restoreTimer = 0;
+            }
+        }
+    }
+
+    void reload() override
+    {
+        if (m_restoreTimer) {
+            killTimer(m_restoreTimer);
+            m_restoreTimer = 0;
+            qCDebug(DOCUMENTATION) << "queued restore of url" << m_requested;
+            setSource(m_requested);
+        }
+        QTextBrowser::reload();
+    }
+
+    void queueRestore(int delay)
+    {
+        if (m_restoreTimer) {
+            // kill pending restore timer
+            killTimer(m_restoreTimer);
+        }
+        m_restoreTimer = startTimer(delay);
+    }
+
+    // adapted from Qt's assistant
+    QVariant loadResource(int type, const QUrl &name) override
+    {
+        // check if we have a callback and we're not loading a requested html url
+        if (m_loadResourceCallback && !(type == QTextDocument::HtmlResource && name == m_requested)) {
+            // the callback is invoked with a QVariant that's explicitly invalid
+            QVariant newContent(QVariant::Invalid);
+            auto resolvedUrl = name;
+            if ((*m_loadResourceCallback)(m_callbackInstance, type, resolvedUrl, newContent)) {
+                // should we do this here?
+                // setUrlWithContent(resolvedUrl, newContent);
+                return newContent;
+            }
+        }
+        if (type == QTextDocument::HtmlResource) {
+            if (name == m_requested) {
+                qCDebug(DOCUMENTATION) << "loadResource type" << type << "url" << name << "cached=" << m_requested;
+            } else {
+                // the current load is now finished, a new one
+                // may be triggered by the slot connected to the
+                // linkClicked() signal.
+                // TODO: should we handle "file:///" URLs directly here?
+                m_loadFinished = true;
+                emit m_parent->linkClicked(name);
+            }
+        } else if (type != QTextDocument::StyleSheetResource) {
+            m_loadFinished = true;
+            qCDebug(DOCUMENTATION) << "HelpViewer::loadResource called with unsupported type" << type << "name=" << name;
+        }
+        // always just return the cached content
+        return m_content.isEmpty() ? m_content : qUncompress(m_content);
+    }
+
+    void timerEvent(QTimerEvent *e) override
+    {
+        if (e->timerId() == m_restoreTimer) {
+            reload();
+        }
+    }
+
+    StandardDocumentationView* m_parent;
+    QUrl m_requested;
+    QByteArray m_content;
+    bool m_loadFinished;
+    int m_restoreTimer;
+    QPointer<QObject> m_callbackInstance;
+    StandardDocumentationView::LoadResourceCallback m_loadResourceCallback;
+
+Q_SIGNALS:
+    void loadFinished(const QUrl& url);
+
+public Q_SLOTS:
+    void setLoadFinished(bool)
+    {
+        m_loadFinished = true;
+        emit loadFinished(source());
+        if (m_restoreTimer) {
+            reload();
+        }
+    }
+};
+
+class KDevelop::StandardDocumentationViewPrivate
+{
+public:
+    ZoomController* m_zoomController = nullptr;
+    IDocumentation::Ptr m_doc;
+
+    HelpViewer *m_view = nullptr;
+    void init(StandardDocumentationView* parent)
+    {
+        m_view = new HelpViewer(parent);
+        m_view->setContextMenuPolicy(Qt::NoContextMenu);
+        parent->connect(m_view, &HelpViewer::loadFinished, parent, &StandardDocumentationView::linkClicked);
+    }
+};
+
+StandardDocumentationView::StandardDocumentationView(DocumentationFindWidget* findWidget, QWidget* parent)
+    : QWidget(parent)
+    , d(new StandardDocumentationViewPrivate)
+{
+    auto mainLayout = new QVBoxLayout(this);
+    mainLayout->setMargin(0);
+    setLayout(mainLayout);
+
+    d->init(this);
+    layout()->addWidget(d->m_view);
+
+    findWidget->setEnabled(true);
+    connect(findWidget, &DocumentationFindWidget::searchRequested, this, &StandardDocumentationView::search);
+    connect(findWidget, &DocumentationFindWidget::searchDataChanged, this, &StandardDocumentationView::searchIncremental);
+    connect(findWidget, &DocumentationFindWidget::searchFinished, this, &StandardDocumentationView::finishSearch);
+}
+
+KDevelop::StandardDocumentationView::~StandardDocumentationView() = default;
+
+void StandardDocumentationView::search ( const QString& text, DocumentationFindWidget::FindOptions options )
+{
+    typedef QTextDocument WebkitThing;
+    WebkitThing::FindFlags ff = 0;
+    if(options & DocumentationFindWidget::Previous)
+        ff |= WebkitThing::FindBackward;
+
+    if(options & DocumentationFindWidget::MatchCase)
+        ff |= WebkitThing::FindCaseSensitively;
+
+    d->m_view->find(text, ff);
+}
+
+void StandardDocumentationView::searchIncremental(const QString& text, DocumentationFindWidget::FindOptions options)
+{
+    typedef QTextDocument WebkitThing;
+    WebkitThing::FindFlags findFlags;
+
+    if (options & DocumentationFindWidget::MatchCase)
+        findFlags |= WebkitThing::FindCaseSensitively;
+
+    d->m_view->find(text, findFlags);
+}
+
+void StandardDocumentationView::finishSearch()
+{
+    // passing emptry string to reset search, as told in API docs
+    d->m_view->find(QString());
+}
+
+void StandardDocumentationView::initZoom(const QString& configSubGroup)
+{
+    Q_ASSERT_X(!d->m_zoomController, "StandardDocumentationView::initZoom", "Can not initZoom a second time.");
+
+    const KConfigGroup outerGroup(KSharedConfig::openConfig(), QStringLiteral("Documentation View"));
+    const KConfigGroup configGroup(&outerGroup, configSubGroup);
+    d->m_zoomController = new ZoomController(configGroup, this);
+    connect(d->m_zoomController, &ZoomController::factorChanged,
+            this, &StandardDocumentationView::updateZoomFactor);
+    updateZoomFactor(d->m_zoomController->factor());
+}
+
+void StandardDocumentationView::setDocumentation(const IDocumentation::Ptr& doc)
+{
+    if(d->m_doc)
+        disconnect(d->m_doc.data());
+    d->m_doc = doc;
+    update();
+    if(d->m_doc)
+        connect(d->m_doc.data(), &IDocumentation::descriptionChanged, this, &StandardDocumentationView::update);
+}
+
+void StandardDocumentationView::update()
+{
+    if(d->m_doc) {
+        setHtml(d->m_doc->description());
+    } else
+        qCDebug(DOCUMENTATION) << "calling StandardDocumentationView::update() on an uninitialized view";
+}
+
+void KDevelop::StandardDocumentationView::setOverrideCss(const QUrl& url)
+{
+    Q_UNUSED(url);
+    return;
+}
+
+void KDevelop::StandardDocumentationView::load(const QUrl& url)
+{
+    d->m_view->setSource(url);
+}
+
+void KDevelop::StandardDocumentationView::registerLoadResourceCallback(QPointer<QObject> instance, const LoadResourceCallback callback)
+{
+    d->m_view->m_callbackInstance = instance;
+    d->m_view->m_loadResourceCallback = callback;
+}
+
+void KDevelop::StandardDocumentationView::load(const QUrl& url, const QByteArray& content)
+{
+    d->m_view->setUrlWithContent(url, content);
+    d->m_view->setSource(url);
+}
+
+void KDevelop::StandardDocumentationView::restore()
+{
+    // force a restore of the cached url/content
+    // this has to be queued as we cannot be certain if
+    // calling QTextBrowser::setSource() will have any
+    // effect at all.
+    d->m_view->queueRestore(250);
+}
+
+void KDevelop::StandardDocumentationView::setHtml(const QString& html)
+{
+    d->m_view->setHtml(html);
+}
+
+void KDevelop::StandardDocumentationView::setNetworkAccessManager(QNetworkAccessManager* manager)
+{
+    Q_UNUSED(manager);
+    return;
+}
+
+void KDevelop::StandardDocumentationView::setDelegateLinks(bool delegate)
+{
+    Q_UNUSED(delegate);
+    return;
+}
+
+QMenu* StandardDocumentationView::createStandardContextMenu()
+{
+    auto menu = d->m_view->createStandardContextMenu();
+    QAction *reloadAction = new QAction(i18n("Reload"), menu);
+    reloadAction->connect(reloadAction, &QAction::triggered, d->m_view, &HelpViewer::reload);
+    menu->addAction(reloadAction);
+    return menu;
+}
+
+bool StandardDocumentationView::eventFilter(QObject* object, QEvent* event)
+{
+    return QWidget::eventFilter(object, event);
+}
+
+void StandardDocumentationView::contextMenuEvent(QContextMenuEvent* event)
+{
+    auto menu = createStandardContextMenu();
+    if (menu->isEmpty()) {
+        delete menu;
+        return;
+    }
+
+    menu->setAttribute(Qt::WA_DeleteOnClose);
+    menu->exec(event->globalPos());
+}
+
+void StandardDocumentationView::updateZoomFactor(double zoomFactor)
+{
+    double fontSize = d->m_view->font().pointSizeF();
+    if (fontSize <= 0) {
+        return;
+    }
+    double newSize = fontSize * zoomFactor;
+    if (newSize > fontSize) {
+        d->m_view->zoomIn(int(newSize - fontSize + 0.5));
+    } else if (newSize != fontSize) {
+        d->m_view->zoomOut(int(fontSize - newSize + 0.5));
+    }
+}
+
+void StandardDocumentationView::keyPressEvent(QKeyEvent* event)
+{
+    if (d->m_zoomController && d->m_zoomController->handleKeyPressEvent(event)) {
+        return;
+    }
+    QWidget::keyPressEvent(event);
+}
+
+void StandardDocumentationView::wheelEvent(QWheelEvent* event)
+{
+    if (d->m_zoomController && d->m_zoomController->handleWheelEvent(event)) {
+        return;
+    }
+    QWidget::wheelEvent(event);
+}
+
+#include "standarddocumentationview_qtb.moc"
diff --git plugins/qthelp/CMakeLists.txt plugins/qthelp/CMakeLists.txt
index 5a8e6e2d1d3677fd590983d2144c10004fffa184..2c5ec0c905a72bfb02325f4eb6c3255aad6350bd 100644
--- plugins/qthelp/CMakeLists.txt
+++ plugins/qthelp/CMakeLists.txt
@@ -28,6 +28,11 @@ target_link_libraries(kdevqthelp
     KF5::KCMUtils KF5::I18n KF5::KIOWidgets KF5::TextEditor KF5::IconThemes Qt5::Help KF5::NewStuff
     KDev::Language KDev::Documentation KDev::Interfaces)
 
+if(KDEVELOP_USE_QTEXTBROWSER)
+    message(STATUS "QtHelp plugin will be built for rendering using QTextBrowser")
+    target_compile_definitions(kdevqthelp PRIVATE -DUSE_QTEXTBROWSER)
+endif()
+
 if(BUILD_TESTING)
     add_subdirectory(tests)
 endif()
diff --git plugins/qthelp/tests/CMakeLists.txt plugins/qthelp/tests/CMakeLists.txt
index 06c751e8a2c254ba175e827fe9036fe635105d4c..2a60e0de2344aafdc040ec207ec0f861991aa7c6 100644
--- plugins/qthelp/tests/CMakeLists.txt
+++ plugins/qthelp/tests/CMakeLists.txt
@@ -24,3 +24,6 @@ ecm_add_test(${test_qthelpplugin_SRCS}
     TEST_NAME test_qthelpplugin
     LINK_LIBRARIES Qt5::Test KF5::NewStuff KF5::KIOWidgets KF5::TextEditor KF5::IconThemes Qt5::Help KDev::Tests KDev::Documentation
 )
+if(KDEVELOP_USE_QTEXTBROWSER)
+    target_compile_definitions(test_qthelpplugin PRIVATE -DUSE_QTEXTBROWSER)
+endif()
diff --git plugins/qthelp/qthelpdocumentation.cpp plugins/qthelp/qthelpdocumentation.cpp
index 19613339d01531b1f7716a9a8e0c2f212bdc856c..7320f58b8d6250d7ce977640956c10d28650a86f 100644
--- plugins/qthelp/qthelpdocumentation.cpp
+++ plugins/qthelp/qthelpdocumentation.cpp
@@ -30,6 +30,10 @@
 #include <QTemporaryFile>
 #include <QRegularExpression>
 
+#ifdef USE_QTEXTBROWSER
+#include <QDesktopServices>
+#endif
+
 #include <KLocalizedString>
 
 #include <interfaces/icore.h>
@@ -224,20 +228,69 @@ QString QtHelpDocumentation::description() const
 
 void QtHelpDocumentation::setUserStyleSheet(StandardDocumentationView* view, const QUrl& url)
 {
+#ifdef USE_QTEXTBROWSER
+    QString css;
+    QTextStream ts(&css);
+#else
     QTemporaryFile* file = new QTemporaryFile(view);
     file->open();
 
     QTextStream ts(file);
+#endif
+
     ts << "html { background: white !important; }\n";
     if (url.scheme() == QLatin1String("qthelp") && url.host().startsWith(QLatin1String("com.trolltech.qt."))) {
        ts << ".content .toc + .title + p { clear:left; }\n"
           << "#qtdocheader .qtref { position: absolute !important; top: 5px !important; right: 0 !important; }\n";
     }
+#ifdef USE_QTEXTBROWSER
+    view->setHtml(css);
+#else
     file->close();
     view->setOverrideCss(QUrl::fromLocalFile(file->fileName()));
 
     delete m_lastStyleSheet.data();
     m_lastStyleSheet = file;
+#endif
+}
+
+bool QtHelpDocumentation::loadResourceCallback(int type, QUrl& url, QVariant& content)
+{
+    if (type < 4 && StandardDocumentationView::isUrlSchemeSupported(url)) {
+        QByteArray ba;
+        const auto resolvedUrl = m_provider->engine()->findFile(url);
+        if (resolvedUrl.isEmpty() || !StandardDocumentationView::isUrlSchemeSupported(resolvedUrl)) {
+            return false;
+        }
+        qCDebug(QTHELP) << "loadResourceCallback type" << type << "url" << url << "resolved=" << resolvedUrl;
+        url = resolvedUrl;
+        ba = m_provider->engine()->fileData(url);
+        bool ret = true;
+        if (url.toString().endsWith(QLatin1String(".svg"), Qt::CaseInsensitive)) {
+            QImage image;
+            image.loadFromData(ba, "svg");
+            if (!image.isNull()) {
+                content = ba;
+            } else {
+                ret = false;
+            }
+        }
+        if (!content.isValid()) {
+            content = ba;
+        }
+        return true;
+    }
+    return false;
+}
+
+bool QtHelpDocumentation::loadResourceCallback(QPointer<QObject> that, int type, QUrl& url, QVariant& content)
+{
+    if (that.isNull() || !that.data()) {
+        return false;
+    } else {
+        QtHelpDocumentation *q = qobject_cast<QtHelpDocumentation*>(that);
+        return q ? q->loadResourceCallback(type, url, content) : false;
+    }
 }
 
 QWidget* QtHelpDocumentation::documentationWidget(DocumentationFindWidget* findWidget, QWidget* parent)
@@ -250,12 +303,25 @@ QWidget* QtHelpDocumentation::documentationWidget(DocumentationFindWidget* findW
         view->setDelegateLinks(true);
         view->setNetworkAccessManager(m_provider->networkAccess());
         view->setContextMenuPolicy(Qt::CustomContextMenu);
-        QObject::connect(view, &StandardDocumentationView::linkClicked, this, &QtHelpDocumentation::jumpedTo);
         connect(view, &StandardDocumentationView::customContextMenuRequested, this, &QtHelpDocumentation::viewContextMenuRequested);
 
         setUserStyleSheet(view, m_current.value());
+#ifdef USE_QTEXTBROWSER
+        view->registerLoadResourceCallback(this, &QtHelpDocumentation::loadResourceCallback);
+        const auto url = m_current.value();
+        if (view->isUrlSchemeSupported(url)) {
+            view->load(url, m_provider->engine()->fileData(url));
+        } else {
+            // external link
+            qCWarning(QTHELP) << "Opening url" << url << "in the registered web browser";
+            QDesktopServices::openUrl(url);
+        }
+#else
         view->load(m_current.value());
+#endif
         lastView = view;
+        // jumpedTo can only be called safely now.
+        QObject::connect(view, &StandardDocumentationView::linkClicked, this, &QtHelpDocumentation::jumpedTo);
         return view;
     }
 }
@@ -292,7 +358,27 @@ void QtHelpDocumentation::jumpedTo(const QUrl& newUrl)
     Q_ASSERT(lastView);
     m_provider->jumpedTo(newUrl);
     setUserStyleSheet(lastView, newUrl);
+#ifdef USE_QTEXTBROWSER
+    if (lastView->isUrlSchemeSupported(newUrl)) {
+        QByteArray content = m_provider->engine()->fileData(newUrl);
+        if (!content.isEmpty()) {
+            lastView->load(newUrl, content);
+            return;
+        } else {
+            qCWarning(QTHELP) << "cannot determine the content of the new url" << newUrl;
+        }
+    } else {
+        // external link, use the user's webbrowser
+        qCWarning(QTHELP) << "Opening new url" << newUrl << "in the registered web browser";
+        QDesktopServices::openUrl(newUrl);
+    }
+    // restore the current "internal" doc view. If we fail to do this
+    // the next link we click that isn't fully specified will be completed
+    // using <newUrl>.
+    lastView->restore();
+#else
     lastView->load(newUrl);
+#endif
 }
 
 IDocumentationProvider* QtHelpDocumentation::provider() const
@@ -309,6 +395,8 @@ QtHelpAlternativeLink::QtHelpAlternativeLink(const QString& name, const QtHelpDo
 void QtHelpAlternativeLink::showUrl()
 {
     IDocumentation::Ptr newDoc(new QtHelpDocumentation(mName, mDoc->info(), mName));
+    // probe, not to be committed.
+    qInfo() << Q_FUNC_INFO << "name" << mName << ":" << mDoc->info();
     ICore::self()->documentationController()->showDocumentation(newDoc);
 }
 
diff --git plugins/qthelp/qthelpdocumentation.h plugins/qthelp/qthelpdocumentation.h
index e649bf79b864b20fe3afa58fcc4db54ef36f338e..dc68e9916147c0a8b94941207fd0216e073dab20 100644
--- plugins/qthelp/qthelpdocumentation.h
+++ plugins/qthelp/qthelpdocumentation.h
@@ -47,6 +47,9 @@ class QtHelpDocumentation : public KDevelop::IDocumentation
 
         QString description() const override;
 
+        bool loadResourceCallback(int type, QUrl& url, QVariant& content);
+        static bool loadResourceCallback(QPointer<QObject> that, int type, QUrl& url, QVariant& content);
+
         QWidget* documentationWidget(KDevelop::DocumentationFindWidget* findWidget, QWidget* parent) override;
 
         KDevelop::IDocumentationProvider* provider() const override;
