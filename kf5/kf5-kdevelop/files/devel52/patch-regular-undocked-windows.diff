diff --git kdevplatform/sublime/idealdockwidget.cpp kdevplatform/sublime/idealdockwidget.cpp
index 4f63ec150791ed562f8a291bddfbb3e67a68ce60..c9ca85b0fcfdb352c2b1f03dc460438c14fdcaeb 100644
--- kdevplatform/sublime/idealdockwidget.cpp
+++ kdevplatform/sublime/idealdockwidget.cpp
@@ -37,6 +37,9 @@
 #include <QToolBar>
 #include <QVBoxLayout>
 
+#include "debug.h"
+#include <QCoreApplication>
+
 using namespace Sublime;
 
 IdealDockWidget::IdealDockWidget(IdealController *controller, Sublime::MainWindow *parent)
@@ -44,7 +47,9 @@ IdealDockWidget::IdealDockWidget(IdealController *controller, Sublime::MainWindo
       m_area(nullptr),
       m_view(nullptr),
       m_docking_area(Qt::NoDockWidgetArea),
-      m_controller(controller)
+      m_controller(controller),
+      m_floatingWidget(nullptr),
+      m_floatsAsStandalone(false)
 {
     setAutoFillBackground(true);
     setContextMenuPolicy(Qt::CustomContextMenu);
@@ -61,6 +66,12 @@ IdealDockWidget::IdealDockWidget(IdealController *controller, Sublime::MainWindo
     setFeatures(QDockWidget::DockWidgetClosable | QDockWidget::DockWidgetMovable | QDockWidget::DockWidgetFloatable);
     // do not allow to move docks to the top dock area (no buttonbar there in our current UI)
     setAllowedAreas(Qt::LeftDockWidgetArea | Qt::RightDockWidgetArea | Qt::BottomDockWidgetArea);
+
+    connect(this, &QDockWidget::topLevelChanged, this, [this] (bool floating) {
+            if (floating && isVisible() && floatsAsStandalone()) {
+                QMetaObject::invokeMethod(this, "makeStandaloneWindow", Qt::QueuedConnection);
+            }
+        } );
 }
 
 IdealDockWidget::~IdealDockWidget()
@@ -85,9 +96,76 @@ Qt::DockWidgetArea IdealDockWidget::dockWidgetArea() const
 void IdealDockWidget::setDockWidgetArea(Qt::DockWidgetArea dockingArea)
 { m_docking_area = dockingArea; }
 
+void IdealDockWidget::setFloating(bool floating)
+{
+    if (!m_floatsAsStandalone) {
+        QDockWidget::setFloating(floating);
+    } else {
+        if (floating) {
+            makeStandaloneWindow();
+        } else {
+            reDockWidget(false);
+        }
+    }
+}
+
+void IdealDockWidget::setFloatsAsStandalone(bool standalone)
+{
+    m_floatsAsStandalone = standalone;
+}
+
+bool IdealDockWidget::floatsAsStandalone()
+{
+    return m_floatsAsStandalone;
+}
+
 void IdealDockWidget::slotRemove()
 {
-    m_area->removeToolView(m_view);
+    if (m_floatingWidget) {
+        setWidget(m_floatingWidget);
+        m_floatingWidget = nullptr;
+    }
+    if (m_area) {
+        m_area->removeToolView(m_view);
+    }
+}
+
+void IdealDockWidget::makeStandaloneWindow()
+{
+    if (!m_floatingWidget) {
+        if (!isFloating()) {
+            QDockWidget::setFloating(true);
+            m_area->raiseToolView(m_view);
+        }
+        if (auto w = widget()) {
+            // turn into top-level window
+            qCDebug(SUBLIME) << "reparenting" << this << "widget" << w << "away from" << w->parent();
+            m_floatingWidget = w;
+            w->setParent(nullptr);
+            w->setWindowFlags(Qt::Window);
+            w->show();
+            connect(QCoreApplication::instance(), &QCoreApplication::aboutToQuit, this, &IdealDockWidget::aboutToShutdown );
+            close();
+        }
+    }
+}
+
+void IdealDockWidget::reDockWidget(bool signalClose)
+{
+    if (m_floatingWidget) {
+        setWidget(m_floatingWidget);
+        m_floatingWidget = nullptr;
+    }
+    QDockWidget::setFloating(false);
+    if (signalClose) {
+        emit closeRequested();
+    }
+}
+
+void IdealDockWidget::aboutToShutdown()
+{
+    qCDebug(SUBLIME) << "Re-docking" << this << "before exit";
+    reDockWidget(true);
 }
 
 void IdealDockWidget::contextMenuRequested(const QPoint &point)
@@ -118,13 +196,21 @@ void IdealDockWidget::contextMenuRequested(const QPoint &point)
     QAction *left = new QAction(i18nc("toolview position", "Left"), g);
     QAction *bottom = new QAction(i18nc("toolview position", "Bottom"), g);
     QAction *right = new QAction(i18nc("toolview position", "Right"), g);
-    QAction *detach = new QAction(i18nc("toolview position", "Detached"), g);
+    QAction *detach = nullptr;
+    if (!floatsAsStandalone()) {
+        detach = new QAction(i18nc("toolview position", "Detached as floating window"), g);
+    }
+    QAction *standalone = new QAction(i18nc("toolview position", "Detached as standalone window"), g);
 
-    for (auto action : {left, bottom, right, detach}) {
-        positionMenu->addAction(action);
-        action->setCheckable(true);
+    for (auto action : {left, bottom, right, detach, standalone}) {
+        if (action) {
+            positionMenu->addAction(action);
+            action->setCheckable(true);
+        }
     }
-    if (isFloating()) {
+    if (m_floatingWidget) {
+        standalone->setChecked(true);
+    } else if (isFloating() && detach) {
         detach->setChecked(true);
     } else if (m_docking_area == Qt::BottomDockWidgetArea)
         bottom->setChecked(true);
@@ -140,6 +226,7 @@ void IdealDockWidget::contextMenuRequested(const QPoint &point)
     setShortcut->setToolTip(i18n("Use this shortcut to trigger visibility of the toolview."));
 
     menu.addSeparator();
+
     QAction* remove = menu.addAction(QIcon::fromTheme(QStringLiteral("dialog-close")), i18n("Remove Toolview"));
 
     QAction* triggered = menu.exec(senderWidget->mapToGlobal(point));
@@ -176,13 +263,19 @@ void IdealDockWidget::contextMenuRequested(const QPoint &point)
 
             return;
         } else if ( triggered == detach ) {
-            setFloating(true);
-            m_area->raiseToolView(m_view);
+            if (!m_floatingWidget && !isFloating()) {
+                setFloating(true);
+                m_area->raiseToolView(m_view);
+            }
+            return;
+        } else if ( triggered == standalone ) {
+            // this will invalidate m_area
+            makeStandaloneWindow();
             return;
         }
 
         if (isFloating()) {
-            setFloating(false);
+            reDockWidget(false);
         }
 
         Sublime::Position pos;
@@ -195,11 +288,13 @@ void IdealDockWidget::contextMenuRequested(const QPoint &point)
         else
             return;
 
-        Area *area = m_area;
-        View *view = m_view;
-        /* This call will delete *this, so we no longer
-           can access member variables. */
-        m_area->moveToolView(m_view, pos);
-        area->raiseToolView(view);
+        if (m_area) {
+            Area *area = m_area;
+            View *view = m_view;
+            /* This call will delete *this, so we no longer
+               can access member variables. */
+            m_area->moveToolView(m_view, pos);
+            area->raiseToolView(view);
+        }
     }
 }
diff --git kdevplatform/sublime/idealdockwidget.h kdevplatform/sublime/idealdockwidget.h
index 5842080b045e850c9ce8b9140f6e5e6ac07a5a32..fb4c80be48463f175c5aa4d89f466a36687c9477 100644
--- kdevplatform/sublime/idealdockwidget.h
+++ kdevplatform/sublime/idealdockwidget.h
@@ -25,9 +25,10 @@
 
 #include <QDockWidget>
 #include "idealcontroller.h"
+#include "sublimeexport.h"
 
 namespace Sublime {
-class IdealDockWidget : public QDockWidget
+class KDEVPLATFORMSUBLIME_EXPORT IdealDockWidget : public QDockWidget
 {
     Q_OBJECT
 
@@ -44,6 +45,10 @@ public:
     Qt::DockWidgetArea dockWidgetArea() const;
     void setDockWidgetArea(Qt::DockWidgetArea dockingArea);
 
+    void setFloating(bool floating);
+    void setFloatsAsStandalone(bool standalone);
+    bool floatsAsStandalone();
+
 public Q_SLOTS:
     /// The IdealToolButton also connects to this slot to show the same context menu.
     void contextMenuRequested(const QPoint &point);
@@ -53,13 +58,19 @@ Q_SIGNALS:
 
 private Q_SLOTS:
     void slotRemove();
+    void aboutToShutdown();
 
 private:
+    Q_INVOKABLE void makeStandaloneWindow();
+    void reDockWidget(bool signalClose);
+
     Qt::Orientation m_orientation;
     Area *m_area;
     View *m_view;
     Qt::DockWidgetArea m_docking_area;
     IdealController *m_controller;
+    QWidget *m_floatingWidget;
+    bool m_floatsAsStandalone;
 };
 
 }
diff --git kdevplatform/sublime/tests/CMakeLists.txt kdevplatform/sublime/tests/CMakeLists.txt
index 77ec1ca2d20e206167184d9991fa0288640ecb6a..716ded21ab131e4fc9166acbd79cd36f709cf0e3 100644
--- kdevplatform/sublime/tests/CMakeLists.txt
+++ kdevplatform/sublime/tests/CMakeLists.txt
@@ -19,6 +19,8 @@ ecm_add_test(test_controller.cpp
     LINK_LIBRARIES Qt5::Test KF5::Parts KDev::Sublime)
 
 ecm_add_test(test_viewactivation.cpp
+    ../idealcontroller.cpp ../idealbuttonbarwidget.cpp ../idealtoolbutton.cpp ../ideallayout.cpp
+    TEST_NAME test_viewactivation
     LINK_LIBRARIES Qt5::Test KF5::Parts KDev::Sublime)
 
 ecm_add_test(test_aggregatemodel.cpp
diff --git kdevplatform/sublime/tests/test_viewactivation.cpp kdevplatform/sublime/tests/test_viewactivation.cpp
index 4c651ab486534c5c82a148fe3cc00cc6b6eb385d..bfdc19f65206430bede60eb21829ae3db884f770 100644
--- kdevplatform/sublime/tests/test_viewactivation.cpp
+++ kdevplatform/sublime/tests/test_viewactivation.cpp
@@ -23,8 +23,8 @@
 
 #include <QListView>
 #include <QTextEdit>
-#include <QDockWidget>
 #include <QFocusEvent>
+#include <QDockWidget>
 
 #include <sublime/view.h>
 #include <sublime/area.h>
@@ -32,6 +32,8 @@
 #include <sublime/mainwindow.h>
 #include <sublime/container.h>
 #include <sublime/tooldocument.h>
+#include <sublime/idealcontroller.h>
+#include <sublime/idealdockwidget.h>
 
 using namespace Sublime;
 
@@ -178,6 +180,51 @@ void TestViewActivation::viewActivation()
     QCOMPARE(mw->activeToolView(), viewT31);
 }
 
+void TestViewActivation::idealDockWidgets()
+{
+    MainWindow* mw = new MainWindow(controller);
+    IdealController* ic = new IdealController(mw);
+    controller->addDefaultArea(area); // Q_ASSERT without this.
+    controller->addMainWindow(mw);
+
+    controller->showArea(area, mw);
+    //we should have an active view immediatelly after the area is shown
+    QCOMPARE(mw->activeView(), view211);
+
+    //add some widgets that are not in layout
+    QTextEdit *breaker = new QTextEdit(mw);
+    breaker->setObjectName(QStringLiteral("breaker"));
+    QTextEdit *toolBreaker = new QTextEdit(mw);
+    toolBreaker->setObjectName(QStringLiteral("toolBreaker"));
+
+    IdealDockWidget *dock = new IdealDockWidget(ic, mw);
+    dock->setWidget(toolBreaker);
+    mw->addDockWidget(Qt::LeftDockWidgetArea, dock);
+    dock->setArea(area);
+    dock->setView(viewT31);
+    dock->setDockWidgetArea(Qt::LeftDockWidgetArea);
+    dock->setFloatsAsStandalone(true);
+    dock->setFloating(true);
+
+    //now post events to the widgets and see if mainwindow has the right active views
+    //activate view
+    qApp->sendEvent(view212->widget(), new QFocusEvent(QEvent::FocusIn));
+    QString failMsg = QStringLiteral("\nWas expecting %1 to be active but got %2").
+                      arg(view212->objectName(), mw->activeView()->objectName());
+    QVERIFY2(mw->activeView() == view212, failMsg.toLatin1().data());
+
+    //activate toolview and check that both view and toolview are active
+    qApp->sendEvent(viewT31->widget(), new QFocusEvent(QEvent::FocusIn));
+    QCOMPARE(mw->activeView(), view212);
+    QCOMPARE(mw->activeToolView(), viewT31);
+
+    //focus a dock not in the area
+    qApp->sendEvent(toolBreaker, new QFocusEvent(QEvent::FocusIn));
+    QCOMPARE(mw->activeView(), view212);
+    QCOMPARE(mw->activeToolView(), viewT31);
+
+}
+
 void TestViewActivation::activationInMultipleMainWindows()
 {
     MainWindow mw(controller);
diff --git kdevplatform/sublime/tests/test_viewactivation.h kdevplatform/sublime/tests/test_viewactivation.h
index f2e744d725464bb859dc74e6b7969724bb225701..8ec581688afe3d75cbd0369265281a3976fc9f93 100644
--- kdevplatform/sublime/tests/test_viewactivation.h
+++ kdevplatform/sublime/tests/test_viewactivation.h
@@ -36,6 +36,7 @@ private Q_SLOTS:
     void cleanup();
 
     void viewActivation();
+    void idealDockWidgets();
     void activationInMultipleMainWindows();
     void activationAfterViewRemoval();
     void activationAfterRemovalSimplestCase();
