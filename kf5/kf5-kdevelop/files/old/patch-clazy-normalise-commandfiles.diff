diff --git plugins/clazy/jobparameters.cpp plugins/clazy/jobparameters.cpp
index d7eb2c963a9bfc2e6adf1e13ac347c98b36f49e8..8f92d3343332c24f25ccfc4ad61b472b8197e1a1 100644
--- plugins/clazy/jobparameters.cpp
+++ plugins/clazy/jobparameters.cpp
@@ -142,6 +142,7 @@ JobParameters::JobParameters(KDevelop::IProject* project, const QString& checkPa
     Q_ASSERT(project);
 
     auto projectRootPath = project->path().toLocalFile();
+    auto projectCanonicalRootPath = QFileInfo(projectRootPath).canonicalFilePath();
 
     auto buildPath = project->buildSystemManager()->buildDirectory(project->projectItem());
     m_projectBuildPath = buildPath.toLocalFile();
@@ -153,6 +154,10 @@ JobParameters::JobParameters(KDevelop::IProject* project, const QString& checkPa
         m_error = i18n("Compile commands file '%1' does not exist.", commandsFilePath);
         return;
     }
+ 
+    const auto pathInfo = QFileInfo(m_checkPath);
+    const bool checkPathIsFile = pathInfo.isFile();
+    const auto canonicalPathToCheck = checkPathIsFile ? pathInfo.canonicalFilePath() : QStringLiteral("");
 
     if (!m_checkPath.isEmpty()) {
         const auto allFiles = compileCommandsFiles(commandsFilePath, m_error);
@@ -160,18 +165,23 @@ JobParameters::JobParameters(KDevelop::IProject* project, const QString& checkPa
             return;
         }
 
-        if (m_checkPath == projectRootPath) {
+        if (m_checkPath == projectRootPath || canonicalPathToCheck == projectCanonicalRootPath) {
             m_sources = allFiles;
         } else {
-            const bool checkPathIsFile = QFileInfo(m_checkPath).isFile();
             for (auto& file : allFiles) {
                 if (checkPathIsFile) {
                     if (file == m_checkPath) {
                         m_sources.clear();
+                        // handle this separately so users don't see a filename they might not be expecting to see.
                         m_sources += m_checkPath;
                         break;
                     }
-                } else if (file.startsWith(m_checkPath)) {
+                    else if (file == canonicalPathToCheck) {
+                        m_sources.clear();
+                        m_sources += canonicalPathToCheck;
+                        break;
+                    }
+                } else if (file.startsWith(m_checkPath) || file.startsWith(canonicalPathToCheck)) {
                     m_sources += file;
                 }
             }
diff --git plugins/clazy/utils.cpp plugins/clazy/utils.cpp
# index 97d363313802313898699e29f9be167f52b2c4e4..7653b94b5090ec6ec0dab06030a30ca4cbc79d51 100644
# --- plugins/clazy/utils.cpp
# +++ plugins/clazy/utils.cpp
# @@ -29,6 +29,7 @@
#  #include <KLocalizedString>
#  
#  #include <QFile>
# +#include <QFileInfo>
#  #include <QJsonDocument>
#  #include <QJsonArray>
#  #include <QJsonObject>
# @@ -80,7 +81,8 @@ QStringList compileCommandsFiles(const QString& jsonFilePath, QString& error)
#              auto path = entry[KEY_FILE].toString();
#              if (QFile::exists(path))
#              {
# -                paths += path;
# +                const auto info = QFileInfo(path);
# +                paths += info.canonicalFilePath();
#              }
#          }
#      }
