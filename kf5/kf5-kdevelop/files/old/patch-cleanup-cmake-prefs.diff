diff --git a/plugins/cmake/cmakeutils.cpp b/plugins/cmake/cmakeutils.cpp
index b8c07fa..9a97d7b 100644
--- a/plugins/cmake/cmakeutils.cpp
+++ b/plugins/cmake/cmakeutils.cpp
@@ -243,7 +243,7 @@ bool checkForNeedingConfigure( KDevelop::IProject* project )
             CMake::setCurrentInstallDir( project, bd.installPrefix() );
             CMake::setCurrentExtraArguments( project, bd.extraArguments() );
             CMake::setCurrentBuildType( project, bd.buildType() );
-            CMake::setCurrentCMakeExecutable(project, bd.cmakeExecutable());
+            CMake::setCurrentCMakeExecutable(project, bd.cmakeExecutable().toLocalFile());
             CMake::setCurrentEnvironment( project, QString() );
         }
         setBuildDirRuntime( project, currentRuntime );
@@ -382,11 +382,6 @@ QString currentExtraArguments( KDevelop::IProject* project, int builddir )
     return readBuildDirParameter( project, Config::Specific::cmakeArgumentsKey, QString(), builddir );
 }
 
-QString currentCmakeExecutable( KDevelop::IProject* project, int builddir )
-{
-    return readBuildDirParameter( project, Config::Specific::cmakeExecutableKey, QString(), builddir );
-}
-
 void setCurrentInstallDir( KDevelop::IProject* project, const KDevelop::Path& path )
 {
     writeBuildDirParameter( project, Config::Specific::cmakeInstallDirKey, path.toLocalFile() );
@@ -397,11 +392,11 @@ void setCurrentBuildType( KDevelop::IProject* project, const QString& type )
     writeBuildDirParameter( project, Config::Specific::cmakeBuildTypeKey, type );
 }
 
-void setCurrentCMakeExecutable(KDevelop::IProject* project, const KDevelop::Path& path)
+void setCurrentCMakeExecutable(KDevelop::IProject* project, const QString& executable)
 {
     // maintain compatibility with older versions for now
-    writeBuildDirParameter(project, Config::Specific::cmakeBinaryKey, path.toLocalFile());
-    writeBuildDirParameter(project, Config::Specific::cmakeExecutableKey, path.toLocalFile());
+    writeBuildDirParameter(project, Config::Specific::cmakeBinaryKey, executable);
+    writeBuildDirParameter(project, Config::Specific::cmakeExecutableKey, executable);
 }
 
 void setCurrentBuildDir( KDevelop::IProject* project, const KDevelop::Path& path )
@@ -419,11 +414,6 @@ void setCurrentExtraArguments( KDevelop::IProject* project, const QString& strin
     writeBuildDirParameter( project, Config::Specific::cmakeArgumentsKey, string );
 }
 
-void setCurrentCmakeExecutable( KDevelop::IProject* project, const QString& string )
-{
-    writeBuildDirParameter( project, Config::Specific::cmakeExecutableKey, string );
-}
-
 QString currentEnvironment(KDevelop::IProject* project, int builddir)
 {
     return readBuildDirParameter( project, Config::Specific::cmakeEnvironmentKey, QString(), builddir );
diff --git a/plugins/cmake/cmakeutils.h b/plugins/cmake/cmakeutils.h
index 357478f..42cb5e6 100644
--- a/plugins/cmake/cmakeutils.h
+++ b/plugins/cmake/cmakeutils.h
@@ -105,11 +105,6 @@ namespace CMake
     KDEVCMAKECOMMON_EXPORT QString currentBuildType( KDevelop::IProject* project, int builddir = -1 );
 
     /**
-     * @returns the current build type for the given project or "Release" as default value.
-     */
-    KDEVCMAKECOMMON_EXPORT QString currentCmakeExecutable( KDevelop::IProject* project, int builddir = -1 );
-
-    /**
     * @returns the CMake executable, taking into account standard
     * installation dirs on Windows, or empty string in case of failure.
     */
@@ -168,7 +163,7 @@ namespace CMake
      /**
      * Sets the current CMake executable for the given project.
      */
-    KDEVCMAKECOMMON_EXPORT void setCurrentCMakeExecutable(KDevelop::IProject* project, const KDevelop::Path& path);
+    KDEVCMAKECOMMON_EXPORT void setCurrentCMakeExecutable(KDevelop::IProject* project, const QString& executable);
 
     /**
      * Sets the current build dir for the given project.
@@ -186,11 +181,6 @@ namespace CMake
     KDEVCMAKECOMMON_EXPORT void setCurrentExtraArguments( KDevelop::IProject* project, const QString& args );
 
     /**
-     * Sets the current CMake binary the given project.
-     */
-    KDEVCMAKECOMMON_EXPORT void setCurrentCmakeExecutable(KDevelop::IProject* project, const QString& string);
-
-    /**
      * Obtains a cmake documentation instance if it exists
      */
     KDEVCMAKECOMMON_EXPORT ICMakeDocumentation* cmakeDocumentation();
diff --git a/plugins/cmake/settings/cmakepreferences.cpp b/plugins/cmake/settings/cmakepreferences.cpp
index b9dbb0b..22d5aa8 100644
--- a/plugins/cmake/settings/cmakepreferences.cpp
+++ b/plugins/cmake/settings/cmakepreferences.cpp
@@ -170,7 +170,7 @@ void CMakePreferences::apply()
     }
     CMake::setCurrentBuildType( m_project, buildType );
     CMake::setCurrentExtraArguments( m_project, m_prefsUi->extraArguments->currentText() );
-    CMake::setCurrentCmakeExecutable( m_project, m_prefsUi->cMakeExecutable->text() );
+    CMake::setCurrentCMakeExecutable( m_project, m_prefsUi->cMakeExecutable->text() );
 
     qCDebug(CMAKE) << "writing to cmake config: using builddir " << CMake::currentBuildDirIndex(m_project);
     qCDebug(CMAKE) << "writing to cmake config: builddir path " << CMake::currentBuildDir(m_project);
@@ -178,7 +178,7 @@ void CMakePreferences::apply()
     qCDebug(CMAKE) << "writing to cmake config: build type " << CMake::currentBuildType(m_project);
     qCDebug(CMAKE) << "writing to cmake config: cmake executable " << CMake::currentCMakeExecutable(m_project);
     qCDebug(CMAKE) << "writing to cmake config: environment " << CMake::currentEnvironment(m_project);
-    qCDebug(CMAKE) << "writing to cmake config: cmake executable " << CMake::currentCmakeExecutable(m_project);
+    qCDebug(CMAKE) << "writing to cmake config: cmake executable " << CMake::currentCMakeExecutable(m_project);
 
 
     //We run cmake on the builddir to generate it
@@ -318,7 +318,7 @@ void CMakePreferences::createBuildDir()
         CMake::setCurrentInstallDir( m_project, bdCreator.installPrefix() );
         CMake::setCurrentExtraArguments( m_project, bdCreator.extraArguments() );
         CMake::setCurrentBuildType( m_project, bdCreator.buildType() );
-        CMake::setCurrentCMakeExecutable(m_project, bdCreator.cmakeExecutable());
+        CMake::setCurrentCMakeExecutable(m_project, bdCreator.cmakeExecutable().toLocalFile());
         CMake::setCurrentEnvironment( m_project, QString() );
 
         QString newbuilddir = bdCreator.buildFolder().toLocalFile();
diff --git a/plugins/cmakebuilder/cmakejob.cpp b/plugins/cmakebuilder/cmakejob.cpp
index baac02a..bd9246d 100644
--- a/plugins/cmakebuilder/cmakejob.cpp
+++ b/plugins/cmakebuilder/cmakejob.cpp
@@ -82,11 +82,7 @@ QUrl CMakeJob::workingDirectory() const
 QStringList CMakeJob::commandLine() const
 {
     QStringList args;
-    QString cmakeProjectExecutable = CMake::currentCmakeExecutable( m_project );
-    args <<
-        (cmakeProjectExecutable.isEmpty() ?
-            CMakeBuilderSettings::self()->cmakeExecutable().toLocalFile() : cmakeProjectExecutable);
-
+    args << CMake::currentCMakeExecutable(m_project).toLocalFile();
     args << QStringLiteral("-DCMAKE_EXPORT_COMPILE_COMMANDS=ON");
 
     QString installDir = CMake::currentInstallDir( m_project ).toLocalFile();
