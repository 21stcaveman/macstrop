diff --git a/kdevplatform/vcs/interfaces/ibasicversioncontrol.h b/kdevplatform/vcs/interfaces/ibasicversioncontrol.h
index 1cc06bd1975559cf1197a44405953819600bbbe4..f221c2b607bd273117810236a92cc14ea1d3b4d1 100644
--- a/kdevplatform/vcs/interfaces/ibasicversioncontrol.h
+++ b/kdevplatform/vcs/interfaces/ibasicversioncontrol.h
@@ -186,10 +186,21 @@ public:
                             const QList<QUrl>& localLocations,
                             RecursionMode recursion = IBasicVersionControl::Recursive ) = 0;
 
+    /**
+     * change the number of lines of context the patch generated by diff() should show
+     * 
+     * May not be supported by all VCS plugins.
+     * @param contextLines The number of context lines included before and after each
+     * hunk in a unified diff. Special values are -1 for the VCS default (usually 3)
+     * and 0 for the largest possible value (intended to include the whole file as context).
+     */
+    virtual void setDiffContextLines(int contextLines) { m_contextLines = contextLines == 0 ? INT_MAX : contextLines; }
+
     /**
      * Retrieves a diff between two revisions of a file
      *
-     * The diff is in unified diff format for text files.
+     * The diff is in unified diff format for text files and may
+     * use the context size set through setDiffContextLines.
      */
     virtual VcsJob* diff( const QUrl& fileOrDirectory,
                           const VcsRevision& srcRevision,
@@ -270,6 +281,8 @@ public:
      * The default implementation does nothing.
      */
     virtual void setupCommitMessageEditor(const QUrl&, KTextEdit* edit) const;
+protected:
+    int m_contextLines = -1;
 };
 
 }
diff --git a/kdevplatform/vcs/interfaces/ipatchsource.h b/kdevplatform/vcs/interfaces/ipatchsource.h
index 135095ac1e4c361fe17c84bec160059f9ff850b6..1934a9f6365faf6e1cbb9ea26f727a6e7e1d5035 100644
--- a/kdevplatform/vcs/interfaces/ipatchsource.h
+++ b/kdevplatform/vcs/interfaces/ipatchsource.h
@@ -49,6 +49,9 @@ class KDEVPLATFORMVCS_EXPORT IPatchSource : public QObject
         ///should re-compare the files or whatever needs to be done
         ///If the patch has changed, patchChanged needs to be emitted
         virtual void update() = 0;
+        ///change the number of lines of context the patch should show
+        ///virtual so it can be overridden, for instance to call update().
+        virtual void setContextLines(int contextLines) { m_contextLines = contextLines; }
 
         ///Name of the patch file
         virtual QUrl file() const = 0;
@@ -92,6 +95,8 @@ class KDEVPLATFORMVCS_EXPORT IPatchSource : public QObject
     Q_SIGNALS:
         ///Should be emitted whenever the patch has changed.
         void patchChanged();
+    protected:
+        int m_contextLines = -1;
 };
 
 class KDEVPLATFORMVCS_EXPORT IPatchReview
diff --git a/kdevplatform/vcs/widgets/vcsdiffpatchsources.cpp b/kdevplatform/vcs/widgets/vcsdiffpatchsources.cpp
index a2e072a2bec1d99ae89e653eaa6a932614e6cd8e..f2d2edcc97c18e86ea2505a6a5ab309c6799972a 100644
--- a/kdevplatform/vcs/widgets/vcsdiffpatchsources.cpp
+++ b/kdevplatform/vcs/widgets/vcsdiffpatchsources.cpp
@@ -242,6 +242,7 @@ void VCSDiffPatchSource::updateFromDiff(const VcsDiff& vcsdiff)
 void VCSDiffPatchSource::update() {
     if(!m_updater)
         return;
+    m_updater->setContextLines(m_contextLines == 0? INT_MAX : m_contextLines);
     updateFromDiff(m_updater->update());
 }
 
@@ -336,6 +337,7 @@ bool showVcsDiff(IPatchSource* vcsDiff)
 
 VcsDiff VCSStandardDiffUpdater::update() const
 {
+    m_vcs->setDiffContextLines(m_contextLines);
     QScopedPointer<VcsJob> diffJob(m_vcs->diff(m_url,
                                    KDevelop::VcsRevision::createSpecialRevision(KDevelop::VcsRevision::Base),
                                    KDevelop::VcsRevision::createSpecialRevision(KDevelop::VcsRevision::Working)));
diff --git a/kdevplatform/vcs/widgets/vcsdiffpatchsources.h b/kdevplatform/vcs/widgets/vcsdiffpatchsources.h
index f69b5e4ce395963f56dcda526ddf37e47beab563..5a6baf0ecfd106d5ae62772e0287baf9efd373bd 100644
--- a/kdevplatform/vcs/widgets/vcsdiffpatchsources.h
+++ b/kdevplatform/vcs/widgets/vcsdiffpatchsources.h
@@ -48,6 +48,13 @@ public:
     virtual KDevelop::VcsDiff update() const = 0;
     virtual KDevelop::IBasicVersionControl* vcs() const = 0;
     virtual QUrl url() const = 0;
+    void setContextLines(int n)
+    {
+        m_contextLines = n;
+    }
+    int contextLines() { return m_contextLines; }
+protected:
+    int m_contextLines=-1;
 };
 
 class KDEVPLATFORMVCS_EXPORT VCSStandardDiffUpdater : public VCSDiffUpdater {
diff --git a/plugins/bazaar/bazaarplugin.cpp b/plugins/bazaar/bazaarplugin.cpp
index 0fd9d2424fe6d0fb1d9cf0a55e6f0cfec0cf13f8..67a0d686078d980b3567472aa7b3a395d8832970 100644
--- a/plugins/bazaar/bazaarplugin.cpp
+++ b/plugins/bazaar/bazaarplugin.cpp
@@ -124,6 +124,7 @@ VcsJob* BazaarPlugin::createWorkingCopy(const VcsLocation& sourceRepository, con
 VcsJob* BazaarPlugin::diff(const QUrl& fileOrDirectory, const VcsRevision& srcRevision, const VcsRevision& dstRevision, IBasicVersionControl::RecursionMode recursion)
 {
     Q_UNUSED(recursion);
+    // TODO support m_contextLines (less urgent because Phabricator doesn't support Bazaar)
     VcsJob* job = new DiffJob(BazaarUtils::workingCopy(fileOrDirectory), BazaarUtils::getRevisionSpecRange(srcRevision, dstRevision), fileOrDirectory, this);
     return job;
 }
diff --git a/plugins/git/gitplugin.cpp b/plugins/git/gitplugin.cpp
index f4f649ccd2a0f7b906f39d82b2c9bd675042ecea..927b78031d7828c609667807475c3e1e2b261d3b 100644
--- a/plugins/git/gitplugin.cpp
+++ b/plugins/git/gitplugin.cpp
@@ -391,12 +391,15 @@ VcsJob* GitPlugin::diff(const QUrl& fileOrDirectory, const KDevelop::VcsRevision
 {
     DVcsJob* job = new GitJob(dotGitDirectory(fileOrDirectory), this, KDevelop::OutputJob::Silent);
     job->setType(VcsJob::Diff);
-    *job << "git" << "diff" << "--no-color" << "--no-ext-diff";
+    *job << "git" << "diff" << "--no-color" << "--no-ext-diff" << "--full-index";
     if (!usePrefix()) {
         // KDE's ReviewBoard now requires p1 patchfiles, so `git diff --no-prefix` to generate p0 patches
         // has become optional.
         *job << "--no-prefix";
     }
+    if (m_contextLines > 0) {
+        *job << QStringLiteral("-U%1").arg(m_contextLines);
+    }
     if (dstRevision.revisionType() == VcsRevision::Special &&
          dstRevision.specialType() == VcsRevision::Working) {
         if (srcRevision.revisionType() == VcsRevision::Special &&
@@ -417,6 +420,7 @@ VcsJob* GitPlugin::diff(const QUrl& fileOrDirectory, const KDevelop::VcsRevision
     } else {
         *job << preventRecursion(QList<QUrl>() << fileOrDirectory);
     }
+    qWarning() << "git diff job:" << job->dvcsCommand();
 
     connect(job, &DVcsJob::readyForParsing, this, &GitPlugin::parseGitDiffOutput);
     return job;
diff --git a/plugins/patchreview/patchreview.cpp b/plugins/patchreview/patchreview.cpp
index 4c74607a1d7468f7b0c189558afd200669cc13b7..63983f68e91eafe75e67466ee8cd745de52973d7 100644
--- a/plugins/patchreview/patchreview.cpp
+++ b/plugins/patchreview/patchreview.cpp
@@ -224,6 +224,17 @@ void PatchReviewPlugin::forceUpdate() {
     }
 }
 
+void PatchReviewPlugin::forceUpdateWithContext(int contextLines) {
+    if( m_patch ) {
+        // register the requested number of lines of context
+        // and regenerate the patch.
+        m_patch->setContextLines(contextLines);
+        forceUpdate();
+    } else {
+        qWarning() << Q_FUNC_INFO << "called while m_patch==" << m_patch;
+     }
+}
+ 
 void PatchReviewPlugin::updateKompareModel() {
     if ( !m_patch ) {
         ///TODO: this method should be cleaned up, it can be called by the timer and
diff --git a/plugins/patchreview/patchreview.h b/plugins/patchreview/patchreview.h
index 38d97abd3d7a9d7ee395e7dbace6e98603ea5cb8..fc9d04e5401037135d530effc943c21b04594990 100644
--- a/plugins/patchreview/patchreview.h
+++ b/plugins/patchreview/patchreview.h
@@ -99,6 +99,7 @@ public Q_SLOTS :
     void highlightPatch();
     void updateKompareModel();
     void forceUpdate();
+    void forceUpdateWithContext(int contextLines);
     void areaChanged(Sublime::Area* area);
     void executeFileReviewAction();
 
diff --git a/plugins/patchreview/patchreview.ui b/plugins/patchreview/patchreview.ui
index 8210a023bac3ebecd3a865ffbb929b75ee835920..2b59ae9e90eaaabbaf82b71dfc7825d7d8490cf2 100644
--- a/plugins/patchreview/patchreview.ui
+++ b/plugins/patchreview/patchreview.ui
@@ -72,8 +72,34 @@
          </property>
         </spacer>
        </item>
+       <item>
+        <widget class="QSpinBox" name="diffContext">
+         <property name="toolTip">
+          <string>lines of context for the unified diff</string>
+         </property>
+         <property name="specialValueText">
+          <string>max</string>
+         </property>
+         <property name="suffix">
+          <string extracomment="lines of context text"/>
+         </property>
+         <property name="minimum">
+          <number>0</number>
+         </property>
+         <property name="maximum">
+          <number>999</number>
+         </property>
+         <property name="value">
+          <number>3</number>
+         </property>
+        </widget>
+       </item>
        <item>
         <widget class="QPushButton" name="updateButton">
+         <property name="toolTip">
+          <string>Click to update the patch
+Right-click to select the number of lines of context the patch should show.</string>
+         </property>
          <property name="text">
           <string>Update</string>
          </property>
diff --git a/plugins/patchreview/patchreviewtoolview.cpp b/plugins/patchreview/patchreviewtoolview.cpp
index 50251adfe37ad1f98f9394e1266595540ffe10ab..8b6b5e4cfb7e72f546e6f9d8ffd51cbaea343d4a 100644
--- a/plugins/patchreview/patchreviewtoolview.cpp
+++ b/plugins/patchreview/patchreviewtoolview.cpp
@@ -40,6 +40,11 @@
 #include <QJsonObject>
 #include <QJsonArray>
 
+#include <QGestureEvent>
+#include <QGesture>
+#include <QTapAndHoldGesture>
+#include <QContextMenuEvent>
+
 #include <KMessageBox>
 #include <KLocalizedString>
 #include <KTextEditor/Document>
@@ -52,6 +57,76 @@
 
 using namespace KDevelop;
 
+class DiffContextMenu : public QObject
+{
+    Q_OBJECT
+public:
+    DiffContextMenu(PatchReviewPlugin *prPlugin)
+        : QObject(dynamic_cast<QObject*>(prPlugin))
+        , m_prPlugin(prPlugin)
+    {
+        m_contextActions = new QActionGroup(this);
+        m_contextActions->setExclusive(true);
+        QAction *title = new QAction(i18n("diff context"), m_contextActions);
+        title->setEnabled(false);
+        m_contextActions->addAction(title);
+        for (int i = 1; i <= 5; ++i) {
+            addContextAction(i);
+        }
+        addContextAction(10);
+        addContextAction(0);
+    }
+
+    void addContextAction(int contextLines)
+    {
+        QAction *action;
+        if (contextLines == 0) {
+            action = new QAction(i18n("whole file"), m_contextActions);
+        } else if (contextLines > 0) {
+            action = new QAction(i18n("%1 lines").arg(contextLines), m_contextActions);
+        } else {
+            return;
+        }
+        action->setData(contextLines);
+        action->setCheckable(true);
+        connect(action, &QAction::triggered, this, [action, this]() {
+            action->setChecked(true);
+            m_prPlugin->forceUpdateWithContext(action->data().toInt());
+        });
+        m_contextActions->addAction(action);
+        if (contextLines == 3) {
+            m_defaultContextAction = action;
+            action->setChecked(true);
+        }
+    }
+
+    bool eventFilter(QObject *obj, QEvent *event) Q_DECL_OVERRIDE
+    {
+        if (event->type() == QEvent::Gesture) {
+            QGestureEvent *gEvent = static_cast<QGestureEvent*>(event);
+            if (QTapAndHoldGesture *heldTap = static_cast<QTapAndHoldGesture*>(gEvent->gesture(Qt::TapAndHoldGesture))) {
+                if (heldTap->state() == Qt::GestureFinished) {
+                    QPushButton *btn = dynamic_cast<QPushButton*>(obj);
+                    if (btn) {
+                        // user clicked and held a widget, send it a simulated ContextMenuEvent:
+                        QContextMenuEvent ce(QContextMenuEvent::Mouse, heldTap->position().toPoint(),
+                            heldTap->hotSpot().toPoint());
+                        gEvent->accept();
+                        int ret = QCoreApplication::sendEvent(btn, &ce);
+                        btn->setDown(false);
+                        return ret;
+                    }
+                }
+            }
+        }
+        return false;
+    }
+
+    QActionGroup *m_contextActions;
+    PatchReviewPlugin *m_prPlugin;
+    QAction *m_defaultContextAction;
+};
+
 class PatchFilesModel : public VcsFileChangesModel
 {
     Q_OBJECT
@@ -129,6 +204,12 @@ void PatchReviewToolView::startingNewReview()
 }
 
 void PatchReviewToolView::patchChanged() {
+    if(m_resetCheckedUrls) {
+        // set the default number of context lines
+        m_editPatch.diffContext->setValue(3);
+        m_diffContextMenu->m_defaultContextAction->setChecked(true);
+    }
+
     fillEditFromPatch();
     kompareModelChanged();
 
@@ -252,6 +333,16 @@ void PatchReviewToolView::showEditDialog() {
     //connect( this, SIGNAL(finished(int)), this, SLOT(slotEditDialogFinished(int)) );
 
     connect( m_editPatch.updateButton, &QPushButton::clicked, m_plugin, &PatchReviewPlugin::forceUpdate );
+    m_editPatch.updateButton->setContextMenuPolicy(Qt::ActionsContextMenu);
+    m_diffContextMenu = new DiffContextMenu(m_plugin);
+    m_editPatch.updateButton->addActions(m_diffContextMenu->m_contextActions->actions());
+    // make it possible to open the context menu with a click-and-hold:
+    m_editPatch.updateButton->installEventFilter(m_diffContextMenu);
+    m_editPatch.updateButton->grabGesture(Qt::TapAndHoldGesture);
+    // FIXME: cleanup after deciding on the GUI
+    m_editPatch.diffContext->hide();
+//     connect( m_editPatch.diffContext, static_cast<void(QSpinBox::*)(int)>(&QSpinBox::valueChanged),
+//              m_plugin, &PatchReviewPlugin::forceUpdateWithContext );
 
     connect( m_editPatch.testsButton, &QPushButton::clicked, this, &PatchReviewToolView::runTests );
 
diff --git a/plugins/patchreview/patchreviewtoolview.h b/plugins/patchreview/patchreviewtoolview.h
index bb8fe66320ff49a529a07d75a34f66e3dbd41ff5..1df8ea169a8c73394b27f57ea84273b24ae1340b 100644
--- a/plugins/patchreview/patchreviewtoolview.h
+++ b/plugins/patchreview/patchreviewtoolview.h
@@ -30,6 +30,7 @@ class PatchReviewPlugin;
 class LocalPatchSource;
 class QModelIndex;
 class QSortFilterProxyModel;
+class DiffContextMenu;
 
 class PatchReviewToolView : public QWidget
 {
@@ -99,6 +100,8 @@ private:
     class PatchFilesModel* m_fileModel;
     QSortFilterProxyModel* m_fileSortProxyModel;
 
+    DiffContextMenu *m_diffContextMenu;
+
 public Q_SLOTS:
     void documentActivated( KDevelop::IDocument* );
     void customContextMenuRequested(const QPoint& p);
diff --git a/plugins/perforce/perforceplugin.cpp b/plugins/perforce/perforceplugin.cpp
index 1e5a169dfe10f736df4546eaf1f431bf334a7bc1..566c1a9716e84aeb84d4676a5658d0658f0d4b19 100644
--- a/plugins/perforce/perforceplugin.cpp
+++ b/plugins/perforce/perforceplugin.cpp
@@ -320,7 +320,11 @@ KDevelop::VcsJob* PerforcePlugin::diff(const QUrl& fileOrDirectory, const KDevel
     case VcsRevision::Special:
         switch (dstRevision.revisionValue().value<VcsRevision::RevisionSpecialType>()) {
         case VcsRevision::Working:
-            *job << m_perforceExecutable << "diff" << "-du" << depotSrcFileName;
+            if (m_contextLines > 0) {
+                *job << m_perforceExecutable << "diff" << "-dU" << QString::number(m_contextLines) << depotSrcFileName;
+            } else {
+                *job << m_perforceExecutable << "diff" << "-du" << depotSrcFileName;
+            }
             break;
         case VcsRevision::Start:
         case VcsRevision::UserSpecialType:
diff --git a/plugins/subversion/kdevsvnplugin.cpp b/plugins/subversion/kdevsvnplugin.cpp
index 1e8a4e5d7ef9e7501d8f59bb71c866b7f3c1f9f6..21af54a5bd30bfc092fd692aacbea8df6388b029 100644
--- a/plugins/subversion/kdevsvnplugin.cpp
+++ b/plugins/subversion/kdevsvnplugin.cpp
@@ -235,6 +235,7 @@ KDevelop::VcsJob* KDevSvnPlugin::diff2(const KDevelop::VcsLocation& src,
                                        const KDevelop::VcsRevision& dstRevision,
                                        KDevelop::IBasicVersionControl::RecursionMode recurse)
 {
+    // TODO: support custom context lines in SvnDiffJob
     auto* job = new SvnDiffJob(this);
     job->setSource(src);
     job->setDestination(dst);
