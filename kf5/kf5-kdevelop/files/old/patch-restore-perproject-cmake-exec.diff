diff --git a/plugins/cmakebuilder/cmakejob.cpp b/plugins/cmakebuilder/cmakejob.cpp
index 0ea657578eb52e82f58ddc4d0c771b40000378f7..874bb8e2e8eadaaa257f75305065a62248f3dbce 100644
--- a/plugins/cmakebuilder/cmakejob.cpp
+++ b/plugins/cmakebuilder/cmakejob.cpp
@@ -82,7 +82,7 @@ QUrl CMakeJob::workingDirectory() const
 QStringList CMakeJob::commandLine() const
 {
     QStringList args;
-    args << CMakeBuilderSettings::self()->cmakeExecutable().toLocalFile();
+    args << CMake::currentCMakeExecutable(m_project).toLocalFile();
     args << QStringLiteral("-DCMAKE_EXPORT_COMPILE_COMMANDS=ON");
 
     QString installDir = CMake::currentInstallDir( m_project ).toLocalFile();
diff --git a/plugins/cmake/cmakebuilddirchooser.cpp b/plugins/cmake/cmakebuilddirchooser.cpp
index d5926fe3f5c4bbeced67a1f3d21da81a63300fe2..760c4cae0662b1dcbf8e29e8a94a645a8d1107a1 100644
--- a/plugins/cmake/cmakebuilddirchooser.cpp
+++ b/plugins/cmake/cmakebuilddirchooser.cpp
@@ -236,6 +236,12 @@ void CMakeBuildDirChooser::updated()
     }
 }
 
+void CMakeBuildDirChooser::setCMakeExecutable(const Path& path)
+{
+    m_chooserUi->cmakeExecutable->setUrl(path.toUrl());
+    updated();
+}
+
 void CMakeBuildDirChooser::setInstallPrefix(const Path& path)
 {
     m_chooserUi->installPrefix->setUrl(path.toUrl());
@@ -291,12 +297,15 @@ void CMakeBuildDirChooser::adoptPreviousBuildDirectory(int index)
 {
     if (index > 0) {
         Q_ASSERT(m_project);
+        m_chooserUi->cmakeExecutable->setUrl(CMake::currentCMakeExecutable(m_project, index -1).toUrl());
         m_chooserUi->buildFolder->setUrl(CMake::currentBuildDir(m_project, index -1).toUrl());
         m_chooserUi->installPrefix->setUrl(CMake::currentInstallDir(m_project, index -1).toUrl());
         m_chooserUi->buildType->setCurrentText(CMake::currentBuildType(m_project, index -1));
         m_chooserUi->extraArguments->setCurrentText(CMake::currentExtraArguments(m_project, index -1));
     }
 
+    m_chooserUi->label_5->setEnabled(index == 0);
+    m_chooserUi->cmakeExecutable->setEnabled(index == 0);
     m_chooserUi->label_3->setEnabled(index == 0);
     m_chooserUi->buildFolder->setEnabled(index == 0);
     m_chooserUi->label->setEnabled(index == 0);
@@ -324,6 +333,8 @@ void CMakeBuildDirChooser::setShowAvailableBuildDirs(bool show)
     m_chooserUi->availableBuildDirs->setVisible(show);
 }
 
+Path CMakeBuildDirChooser::cmakeExecutable() const { return Path(m_chooserUi->cmakeExecutable->url()); }
+
 Path CMakeBuildDirChooser::installPrefix() const { return Path(m_chooserUi->installPrefix->url()); }
 
 Path CMakeBuildDirChooser::buildFolder() const { return Path(m_chooserUi->buildFolder->url()); }
diff --git a/plugins/cmake/cmakebuilddirchooser.h b/plugins/cmake/cmakebuilddirchooser.h
index 91809576348dbaad47a2b8547bd56c4def40aa0e..7b8fab657e041b81c00de1d3fa0e2719d3fc0a45 100644
--- a/plugins/cmake/cmakebuilddirchooser.h
+++ b/plugins/cmake/cmakebuilddirchooser.h
@@ -47,6 +47,7 @@ class KDEVCMAKECOMMON_EXPORT CMakeBuildDirChooser : public QDialog
             BuildDirCreated = 1, 
             CorrectProject = 2, 
             BuildFolderEmpty = 4, 
+            HaveCMake = 8,
             CorrectBuildDir = 16,
             DirAlreadyCreated = 32 //Error message in case it's already configured
         };
@@ -55,6 +56,7 @@ class KDEVCMAKECOMMON_EXPORT CMakeBuildDirChooser : public QDialog
         explicit CMakeBuildDirChooser(QWidget* parent = nullptr);
         ~CMakeBuildDirChooser() override;
 
+        KDevelop::Path cmakeExecutable() const;
         KDevelop::Path installPrefix() const;
         KDevelop::Path buildFolder() const;
         QString buildType() const;
@@ -62,6 +64,7 @@ class KDEVCMAKECOMMON_EXPORT CMakeBuildDirChooser : public QDialog
         int alreadyUsedIndex() const;
         bool reuseBuilddir();
 
+        void setCMakeExecutable(const KDevelop::Path& path);
         void setInstallPrefix(const KDevelop::Path& path);
         void setBuildFolder(const KDevelop::Path& path);
         void setBuildType(const QString& buildType);
diff --git a/plugins/cmake/cmakebuilddirchooser.ui b/plugins/cmake/cmakebuilddirchooser.ui
index 77302cac5c93373888649cf063438db2a050c360..d30da357e0dc29e2a4adc6c2e77e4807d9d11683 100644
--- a/plugins/cmake/cmakebuilddirchooser.ui
+++ b/plugins/cmake/cmakebuilddirchooser.ui
@@ -144,7 +144,30 @@
      </property>
     </widget>
    </item>
-   <item row="6" column="0" colspan="2">
+   <item row="6" column="0">
+    <widget class="QLabel" name="label_5">
+     <property name="text">
+      <string>CMake &amp;executable:</string>
+     </property>
+     <property name="alignment">
+      <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>
+     </property>
+     <property name="buddy">
+      <cstring>cmakeExecutable</cstring>
+     </property>
+    </widget>
+   </item>
+   <item row="6" column="1">
+    <widget class="KUrlRequester" name="cmakeExecutable">
+     <property name="sizePolicy">
+      <sizepolicy hsizetype="Expanding" vsizetype="Preferred">
+       <horstretch>0</horstretch>
+       <verstretch>0</verstretch>
+      </sizepolicy>
+     </property>
+    </widget>
+   </item>
+   <item row="7" column="0" colspan="2">
     <widget class="QLabel" name="status">
      <property name="text">
       <string notr="true">Status Message...</string>
diff --git a/plugins/cmake/cmakeutils.cpp b/plugins/cmake/cmakeutils.cpp
index b2fd618f030701d2a0a4b8b6970ee34378b226b4..b76b276171bc60e27dfed9ed7fb611d114098d01 100644
--- a/plugins/cmake/cmakeutils.cpp
+++ b/plugins/cmake/cmakeutils.cpp
@@ -58,6 +58,7 @@ static const QString currentBuildTypeKey = QStringLiteral("CurrentBuildType");
 static const QString currentInstallDirKey = QStringLiteral("CurrentInstallDir");
 static const QString currentEnvironmentKey = QStringLiteral("CurrentEnvironment");
 static const QString currentExtraArgumentsKey = QStringLiteral("Extra Arguments");
+static const QString currentCMakeExecutableKey = QStringLiteral("Current CMake Binary");
 static const QString projectRootRelativeKey = QStringLiteral("ProjectRootRelative");
 static const QString projectBuildDirs = QStringLiteral("BuildDirs");
 }
@@ -76,6 +77,8 @@ namespace Specific
 {
 static const QString buildDirPathKey = QStringLiteral("Build Directory Path");
 // TODO: migrate to more generic & consistent key term "CMake Executable"
+static const QString cmakeBinaryKey = QStringLiteral("CMake Binary");
+static const QString cmakeExecutableKey = QStringLiteral("CMake Executable");
 static const QString cmakeBuildTypeKey = QStringLiteral("Build Type");
 static const QString cmakeInstallDirKey = QStringLiteral("Install Directory");
 static const QString cmakeEnvironmentKey = QStringLiteral("Environment Profile");
@@ -203,6 +206,7 @@ bool checkForNeedingConfigure( KDevelop::IProject* project )
         const auto builddirs = CMake::allBuildDirs(project);
         bd.setAlreadyUsed( builddirs );
         bd.setShowAvailableBuildDirs(!builddirs.isEmpty());
+        bd.setCMakeExecutable(currentCMakeExecutable(project));
 
         if( !bd.exec() )
         {
@@ -226,6 +230,7 @@ bool checkForNeedingConfigure( KDevelop::IProject* project )
             qCDebug(CMAKE) << "adding to cmake config: installdir " << bd.installPrefix();
             qCDebug(CMAKE) << "adding to cmake config: extra args" << bd.extraArguments();
             qCDebug(CMAKE) << "adding to cmake config: build type " << bd.buildType();
+            qCDebug(CMAKE) << "adding to cmake config: cmake executable " << bd.cmakeExecutable();
             qCDebug(CMAKE) << "adding to cmake config: environment <null>";
             CMake::setBuildDirCount( project, addedBuildDirIndex + 1 );
             CMake::setCurrentBuildDirIndex( project, addedBuildDirIndex );
@@ -233,6 +238,7 @@ bool checkForNeedingConfigure( KDevelop::IProject* project )
             CMake::setCurrentInstallDir( project, bd.installPrefix() );
             CMake::setCurrentExtraArguments( project, bd.extraArguments() );
             CMake::setCurrentBuildType( project, bd.buildType() );
+            CMake::setCurrentCMakeExecutable(project, bd.cmakeExecutable());
             CMake::setCurrentEnvironment( project, QString() );
         }
         setBuildDirRuntime( project, currentRuntime );
@@ -326,6 +335,25 @@ QString findExecutable()
     return cmake;
 }
 
+KDevelop::Path currentCMakeExecutable(KDevelop::IProject* project, int builddir)
+{
+    const auto defaultCMakeExecutable = CMakeBuilderSettings::self()->cmakeExecutable().toLocalFile();
+    if (project) {
+        // check for "CMake Executable" but for now also "CMake Binary", falling back to the default.
+        auto projectCMakeExecutable = readBuildDirParameter( project, Config::Specific::cmakeExecutableKey,
+            readBuildDirParameter( project, Config::Specific::cmakeBinaryKey, defaultCMakeExecutable, builddir),
+            builddir );
+        if (projectCMakeExecutable != defaultCMakeExecutable) {
+            QFileInfo info(projectCMakeExecutable);
+            if (!info.isExecutable()) {
+                projectCMakeExecutable = defaultCMakeExecutable;
+            }
+        }
+        return KDevelop::Path(projectCMakeExecutable);
+    }
+    return KDevelop::Path(defaultCMakeExecutable);
+}
+
 KDevelop::Path currentInstallDir( KDevelop::IProject* project, int builddir )
 {
     const QString defaultInstallDir =
@@ -362,6 +390,13 @@ void setCurrentBuildType( KDevelop::IProject* project, const QString& type )
     writeBuildDirParameter( project, Config::Specific::cmakeBuildTypeKey, type );
 }
 
+void setCurrentCMakeExecutable(KDevelop::IProject* project, const KDevelop::Path& path)
+{
+    // maintain compatibility with older versions for now
+    writeBuildDirParameter(project, Config::Specific::cmakeBinaryKey, path.toLocalFile());
+    writeBuildDirParameter(project, Config::Specific::cmakeExecutableKey, path.toLocalFile());
+}
+
 void setCurrentBuildDir( KDevelop::IProject* project, const KDevelop::Path& path )
 {
     writeBuildDirParameter( project, Config::Specific::buildDirPathKey, path.toLocalFile() );
@@ -490,6 +525,7 @@ void updateConfig( KDevelop::IProject* project, int buildDirIndex)
     const KDevelop::Path cacheFilePath( builddir, QStringLiteral("CMakeCache.txt"));
 
     const QMap<QString, QString> keys = {
+        { QStringLiteral("CMAKE_COMMAND"), Config::Specific::cmakeExecutableKey },
         { QStringLiteral("CMAKE_INSTALL_PREFIX"), Config::Specific::cmakeInstallDirKey },
         { QStringLiteral("CMAKE_BUILD_TYPE"), Config::Specific::cmakeBuildTypeKey }
     };
@@ -552,6 +588,7 @@ void attemptMigrate( KDevelop::IProject* project )
     }
 
     baseGrp.deleteEntry( Config::Old::currentBuildDirKey );
+    baseGrp.deleteEntry( Config::Old::currentCMakeExecutableKey );
     baseGrp.deleteEntry( Config::Old::currentBuildTypeKey );
     baseGrp.deleteEntry( Config::Old::currentInstallDirKey );
     baseGrp.deleteEntry( Config::Old::currentEnvironmentKey );
diff --git a/plugins/cmake/cmakeutils.h b/plugins/cmake/cmakeutils.h
index 30dd23136831310212108dcc1aeddca0393e4e03..f76d4452ff1c7014d1f1b2bfcb6df5a2c86f3e97 100644
--- a/plugins/cmake/cmakeutils.h
+++ b/plugins/cmake/cmakeutils.h
@@ -109,6 +109,11 @@ namespace CMake
     * installation dirs on Windows, or empty string in case of failure.
     */
     KDEVCMAKECOMMON_EXPORT QString findExecutable();
+    /**
+     * @returns the current CMake executable for the given project, falling back to
+     * CMakeBuilderSettings::self()->cmakeExecutable() as the user-specified KDevelop-wide default value. 
+     */
+    KDEVCMAKECOMMON_EXPORT KDevelop::Path currentCMakeExecutable(KDevelop::IProject* project, int builddir = -1);
 
     /**
      * @returns the current install dir for the given project or "/usr/local" as default value.
@@ -155,6 +160,11 @@ namespace CMake
      */
     KDEVCMAKECOMMON_EXPORT void setCurrentBuildType( KDevelop::IProject* project, const QString& type );
 
+     /**
+     * Sets the current CMake executable for the given project.
+     */
+    KDEVCMAKECOMMON_EXPORT void setCurrentCMakeExecutable(KDevelop::IProject* project, const KDevelop::Path& path);
+
     /**
      * Sets the current build dir for the given project.
      */
diff --git a/plugins/cmake/settings/cmakepreferences.cpp b/plugins/cmake/settings/cmakepreferences.cpp
index 79b41c02e173e03ffeb183d74a9b465b7c9decde..00e9a018a9657af43fe30ad8031a3faeed73baf8 100644
--- a/plugins/cmake/settings/cmakepreferences.cpp
+++ b/plugins/cmake/settings/cmakepreferences.cpp
@@ -36,6 +36,7 @@
 #include "ui_cmakebuildsettings.h"
 #include "cmakecachedelegate.h"
 #include "cmakebuilddirchooser.h"
+#include "cmakebuilderconfig.h"
 #include <debug.h>
 #include <cmakeutils.h>
 #include <interfaces/iproject.h>
@@ -126,6 +127,7 @@ void CMakePreferences::initAdvanced()
     }
     m_prefsUi->buildType->setCurrentIndex(m_prefsUi->buildType->findText(buildType));
     m_prefsUi->extraArguments->setEditText(CMake::currentExtraArguments(m_project));
+    m_prefsUi->cMakeExecutable->setText(CMake::currentCMakeExecutable(m_project).toLocalFile());
 }
 
 void CMakePreferences::reset()
@@ -168,11 +170,13 @@ void CMakePreferences::apply()
     }
     CMake::setCurrentBuildType( m_project, buildType );
     CMake::setCurrentExtraArguments( m_project, m_prefsUi->extraArguments->currentText() );
+    CMake::setCurrentCMakeExecutable(m_project, Path(m_prefsUi->cMakeExecutable->text()));
 
     qCDebug(CMAKE) << "writing to cmake config: using builddir " << CMake::currentBuildDirIndex(m_project);
     qCDebug(CMAKE) << "writing to cmake config: builddir path " << CMake::currentBuildDir(m_project);
     qCDebug(CMAKE) << "writing to cmake config: installdir " << CMake::currentInstallDir(m_project);
     qCDebug(CMAKE) << "writing to cmake config: build type " << CMake::currentBuildType(m_project);
+    qCDebug(CMAKE) << "writing to cmake config: cmake executable " << CMake::currentCMakeExecutable(m_project);
     qCDebug(CMAKE) << "writing to cmake config: environment " << CMake::currentEnvironment(m_project);
 
     //We run cmake on the builddir to generate it
@@ -291,6 +295,7 @@ void CMakePreferences::createBuildDir()
     // It may be '/' or '\', so maybe should we rely on CMake::allBuildDirs() for returning well-formed paths?
     QStringList used = CMake::allBuildDirs( m_project );
     bdCreator.setAlreadyUsed(used);
+    bdCreator.setCMakeExecutable(Path(CMakeBuilderSettings::self()->cmakeExecutable().toLocalFile()));
 
     if(bdCreator.exec())
     {
@@ -303,6 +308,7 @@ void CMakePreferences::createBuildDir()
         qCDebug(CMAKE) << "adding to cmake config: installdir " << bdCreator.installPrefix();
         qCDebug(CMAKE) << "adding to cmake config: extra args" << bdCreator.extraArguments();
         qCDebug(CMAKE) << "adding to cmake config: build type " << bdCreator.buildType();
+        qCDebug(CMAKE) << "adding to cmake config: cmake executable " << bdCreator.cmakeExecutable();
         qCDebug(CMAKE) << "adding to cmake config: environment empty";
         CMake::setOverrideBuildDirIndex( m_project, addedBuildDirIndex );
         CMake::setBuildDirCount( m_project, addedBuildDirIndex + 1 );
@@ -310,6 +316,7 @@ void CMakePreferences::createBuildDir()
         CMake::setCurrentInstallDir( m_project, bdCreator.installPrefix() );
         CMake::setCurrentExtraArguments( m_project, bdCreator.extraArguments() );
         CMake::setCurrentBuildType( m_project, bdCreator.buildType() );
+        CMake::setCurrentCMakeExecutable(m_project, bdCreator.cmakeExecutable());
         CMake::setCurrentEnvironment( m_project, QString() );
 
         QString newbuilddir = bdCreator.buildFolder().toLocalFile();
@@ -350,6 +357,7 @@ void CMakePreferences::removeBuildDir()
     qCDebug(CMAKE) << "removing from cmake config: installdir " << CMake::currentInstallDir( m_project );
     qCDebug(CMAKE) << "removing from cmake config: extra args" << CMake::currentExtraArguments( m_project );
     qCDebug(CMAKE) << "removing from cmake config: buildtype " << CMake::currentBuildType( m_project );
+    qCDebug(CMAKE) << "removing from cmake config: cmake executable " << CMake::currentCMakeExecutable(m_project);
     qCDebug(CMAKE) << "removing from cmake config: environment " << CMake::currentEnvironment( m_project );
 
     CMake::removeBuildDirConfig(m_project);
diff --git a/plugins/cmake/cmakeserver.cpp b/plugins/cmake/cmakeserver.cpp
index eed40d251b7549e5b37d60f2b0c484724477ddd8..be682b84192a19c87e9060f97cefd7bc9d25583a 100644
--- a/plugins/cmake/cmakeserver.cpp
+++ b/plugins/cmake/cmakeserver.cpp
@@ -25,6 +25,7 @@
 #include <interfaces/iruntime.h>
 #include <interfaces/iruntimecontroller.h>
 #include <interfaces/icore.h>
+#include <interfaces/iproject.h>
 
 #include <QDir>
 #include <QJsonDocument>
@@ -78,7 +79,9 @@ CMakeServer::CMakeServer(QObject* parent)
             m_localSocket->connectToServer(path, QIODevice::ReadWrite);
         });
     });
-    m_process.setProgram(CMake::findExecutable());
+    // we're called with the importing project as our parent, so we can fetch configured
+    // cmake executable (project-specific or kdevelop-wide) rather than the system version.
+    m_process.setProgram(CMake::currentCMakeExecutable(dynamic_cast<KDevelop::IProject*>(parent)).toLocalFile());
     m_process.setArguments({"-E", "server", "--experimental", "--pipe=" + path});
     KDevelop::ICore::self()->runtimeController()->currentRuntime()->startProcess(&m_process);
 }
diff --git a/plugins/cmake/tests/testhelpers.h b/plugins/cmake/tests/testhelpers.h
index c6529cb8083c9ea9f780125ae90089ddb5b3508e..64b9e0b3c93b1de26acacb3e8cea551f3600657c 100644
--- a/plugins/cmake/tests/testhelpers.h
+++ b/plugins/cmake/tests/testhelpers.h
@@ -114,6 +114,7 @@ void defaultConfigure(const TestProjectPaths& paths)
 
     KConfigGroup buildDirGrp = cmakeGrp.group(QStringLiteral("CMake Build Directory 0"));
     buildDirGrp.writeEntry( currentBuildDirKey, bd.buildFolder().toLocalFile() );
+    buildDirGrp.writeEntry( currentCMakeExecutableKey, bd.cmakeExecutable().toLocalFile() );
     buildDirGrp.writeEntry( currentInstallDirKey, bd.installPrefix().toLocalFile() );
     buildDirGrp.writeEntry( currentExtraArgumentsKey, bd.extraArguments() );
     buildDirGrp.writeEntry( currentBuildTypeKey, bd.buildType() );
