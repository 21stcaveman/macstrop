diff --git a/shell/CMakeLists.txt b/shell/CMakeLists.txt
index 7a6af74..ed2c7c4 100644
--- a/shell/CMakeLists.txt
+++ b/shell/CMakeLists.txt
@@ -26,6 +26,22 @@ add_executable(okular ${okular_SRCS})
 
 target_link_libraries(okular KF5::Parts KF5::WindowSystem KF5::KDELibs4Support KF5::Activities)
 
+if (APPLE)
+    # own plist template
+    set_target_properties (okular PROPERTIES MACOSX_BUNDLE_INFO_PLIST ${CMAKE_CURRENT_SOURCE_DIR}/MacOSXBundleInfo.plist.in)
+    # the MacOSX bundle display name property (CFBundleDisplayName) is not currently supported by cmake,
+    # so has to be set for all targets in this cmake file
+    set(MACOSX_BUNDLE_DISPLAY_NAME Okular5)
+    set_target_properties(okular PROPERTIES MACOSX_BUNDLE_GUI_IDENTIFIER "org.kde.Okular")
+    set_target_properties(okular PROPERTIES MACOSX_BUNDLE_BUNDLE_NAME "Okular5")
+    set_target_properties(okular PROPERTIES MACOSX_BUNDLE_DISPLAY_NAME "Okular5")
+    set_target_properties(okular PROPERTIES MACOSX_BUNDLE_INFO_STRING "Okular, a universal document viewer")
+    set_target_properties(okular PROPERTIES MACOSX_BUNDLE_LONG_VERSION_STRING "Okular ${KDE_APPLICATIONS_VERSION}")
+    set_target_properties(okular PROPERTIES MACOSX_BUNDLE_SHORT_VERSION_STRING "${KDE_APPLICATIONS_VERSION_MAJOR}.${KDE_APPLICATIONS_VERSION_MINOR}")
+    set_target_properties(okular PROPERTIES MACOSX_BUNDLE_BUNDLE_VERSION "${KDE_APPLICATIONS_VERSION}")
+    set_target_properties(okular PROPERTIES MACOSX_BUNDLE_COPYRIGHT "2002-2016 The Okular Authors")
+endif (APPLE)
+
 install(TARGETS okular ${KDE_INSTALL_TARGETS_DEFAULT_ARGS})
 
 
diff --git a/shell/MacOSXBundleInfo.plist.in b/shell/MacOSXBundleInfo.plist.in
new file mode 100644
index 0000000..b0622c6
--- /dev/null
+++ b/shell/MacOSXBundleInfo.plist.in
@@ -0,0 +1,55 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+        <key>NSPrincipalClass</key>
+        <string>NSApplication</string>
+        <key>NSHighResolutionCapable</key>
+        <string>True</string>
+        <key>CFBundleDevelopmentRegion</key>
+        <string>English</string>
+        <key>CFBundleExecutable</key>
+        <string>${MACOSX_BUNDLE_EXECUTABLE_NAME}</string>
+        <key>CFBundleGetInfoString</key>
+        <string>${MACOSX_BUNDLE_INFO_STRING}</string>
+        <key>CFBundleIconFile</key>
+        <string>${MACOSX_BUNDLE_ICON_FILE}</string>
+        <key>CFBundleIdentifier</key>
+        <string>${MACOSX_BUNDLE_GUI_IDENTIFIER}</string>
+        <key>CFBundleInfoDictionaryVersion</key>
+        <string>6.0</string>
+        <key>CFBundleLongVersionString</key>
+        <string>${MACOSX_BUNDLE_LONG_VERSION_STRING}</string>
+        <key>CFBundleName</key>
+        <string>${MACOSX_BUNDLE_BUNDLE_NAME}</string>
+        <key>CFBundlePackageType</key>
+        <string>APPL</string>
+        <key>CFBundleShortVersionString</key>
+        <string>${MACOSX_BUNDLE_SHORT_VERSION_STRING}</string>
+        <key>CFBundleSignature</key>
+        <string>????</string>
+        <key>CFBundleVersion</key>
+        <string>${MACOSX_BUNDLE_BUNDLE_VERSION}</string>
+        <key>CSResourcesFileMapped</key>
+        <true/>
+        <key>LSRequiresCarbon</key>
+        <true/>
+        <key>NSHumanReadableCopyright</key>
+        <string>${MACOSX_BUNDLE_COPYRIGHT}</string>
+        <key>LSMultipleInstancesProhibited</key>
+        <true/>
+        <key>CFBundleDocumentTypes</key>
+        <array>
+            <dict>
+                <key>CFBundleTypeExtensions</key>
+                <array>
+                        <string>*</string>
+                </array>
+                <key>CFBundleTypeName</key>
+                <string>NSStringPboardType</string>
+                <key>CFBundleTypeRole</key>
+                <string>Viewer</string>
+            </dict>
+        </array>
+</dict>
+</plist>
diff --git a/shell/shell.cpp b/shell/shell.cpp
index 60b22ea..7e46c0e 100644
--- a/shell/shell.cpp
+++ b/shell/shell.cpp
@@ -53,6 +53,10 @@
 #include <KActivities/ResourceInstance>
 #endif
 
+#ifdef Q_OS_MACOS
+#include <QFileOpenEvent>
+#endif
+
 // local includes
 #include "kdocumentviewer.h"
 #include "../interfaces/viewerinterface.h"
@@ -145,6 +149,21 @@ Shell::Shell( const QString &serializedOptions )
     }
 
     QDBusConnection::sessionBus().registerObject(QStringLiteral("/okularshell"), this, QDBusConnection::ExportScriptableSlots);
+#ifdef Q_OS_MACOS
+    m_serialOptions = serializedOptions;
+    qApp->installEventFilter(this);
+    // try to handle all pending FileOpen requests right here and now, i.e. those
+    // that were created after the Finder launched us when the user double-clicked
+    // on one or more files to be opened with Okular.
+    m_initialFileOpenRequests = true;
+    QCoreApplication::sendPostedEvents(qApp, QEvent::FileOpen);
+    QCoreApplication::processEvents();
+    // The initial requests were processed. Any new documents to be opened will
+    // open in a separate window (= process).
+    // This mimicks Preview.app's behaviour, which will open a selection of files
+    // as tabs in a single window, at least at start-up.
+    m_initialFileOpenRequests = false;
+#endif
   }
   else
   {
@@ -171,6 +190,20 @@ bool Shell::eventFilter(QObject *obj, QEvent *event)
         dEvent->setAccepted(true);
         return true;
     }
+
+    /**
+     * handle Mac OS X file open events (only exist on OS X)
+     */
+    if (event->type() == QEvent::FileOpen) {
+        QFileOpenEvent *fileOpenEvent = static_cast<QFileOpenEvent*>(event);
+        if (m_initialFileOpenRequests) {
+            openNewTab(fileOpenEvent->url(), m_serialOptions);
+        } else {
+            openUrl(fileOpenEvent->url(), m_serialOptions);
+        }
+        return true;
+    }
+
     return false;
 }
 
diff --git a/shell/shell.h b/shell/shell.h
index a6b9479..d59a12f 100644
--- a/shell/shell.h
+++ b/shell/shell.h
@@ -178,6 +178,8 @@ private:
   KActivities::ResourceInstance* m_activityResource;
 #endif
   bool m_isValid;
+  QString m_serialOptions;
+  bool m_initialFileOpenRequests;
 };
 
 #endif
