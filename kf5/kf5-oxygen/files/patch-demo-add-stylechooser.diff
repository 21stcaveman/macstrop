diff --git kstyle/demo/CMakeLists.txt kstyle/demo/CMakeLists.txt
index 6b6a1bbc4dd42cad7f96468828fd07999773e8bc..ff3dedaa85f838779b314618015e30166acd7fbe 100644
--- kstyle/demo/CMakeLists.txt
+++ kstyle/demo/CMakeLists.txt
@@ -48,7 +48,7 @@ else()
 
   find_package(KF5ConfigWidgets CONFIG)
   if(KF5ConfigWidgets_FOUND)
-    set(oxygen_demo_SOURCES ${oxygen_demo_SOURCES} oxygenschemechooser.cpp)
+    set(oxygen_demo_SOURCES ${oxygen_demo_SOURCES} oxygenschemechooser.cpp oxygenstylechooser.cpp)
     add_definitions(-DHAVE_SCHEME_CHOOSER)
   endif()
 
diff --git kstyle/demo/oxygendemodialog.cpp kstyle/demo/oxygendemodialog.cpp
index 436799a0b7a34957702e375d91b16603c34b760d..80d79fa85f34e81c5438a39e2a012426f37ca852 100644
--- kstyle/demo/oxygendemodialog.cpp
+++ kstyle/demo/oxygendemodialog.cpp
@@ -36,6 +36,7 @@
 #include "config-liboxygen.h"
 #ifdef HAVE_SCHEME_CHOOSER
 #include "oxygenschemechooser.h"
+#include "oxygenstylechooser.h"
 #endif
 
 #include <QTextStream>
@@ -82,6 +83,11 @@ namespace Oxygen
         buttonBox->addButton( _rightToLeftCheckBox, QDialogButtonBox::ResetRole );
 
 #ifdef HAVE_SCHEME_CHOOSER
+        WidgetStyleChooser *styleChooser = new WidgetStyleChooser(this);
+        styleChooser->setFlat( true );
+        styleChooser->createStyleSelectionMenu( i18n( "Style" ) );
+        buttonBox->addButton( styleChooser, QDialogButtonBox::ResetRole );
+
         ColorSchemeChooser *colChooser = new ColorSchemeChooser( this );
         colChooser->setFlat( true );
         buttonBox->addButton( colChooser, QDialogButtonBox::ResetRole );
diff --git kstyle/demo/oxygenstylechooser.cpp kstyle/demo/oxygenstylechooser.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..ea1db6bdc253cf7f457955b0541477b7786f483d
--- /dev/null
+++ kstyle/demo/oxygenstylechooser.cpp
@@ -0,0 +1,171 @@
+/* This file is part of the KDE project
+ * Copyright (C) 2016 René J.V. Bertin <rjvbertin@gmail.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public License
+ * along with this library; see the file COPYING.LIB.  If not, write to
+ * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#include "oxygenstylechooser.h"
+
+#ifdef Q_OS_WIN
+#include <QSysInfo>
+#endif
+#include <QString>
+#include <QAction>
+#include <QActionGroup>
+#include <QIcon>
+#include <QStyle>
+#include <QStyleFactory>
+#include <QApplication>
+#include <QDebug>
+
+#include <kactionmenu.h>
+#include <ksharedconfig.h>
+#include <kconfiggroup.h>
+#include <klocalizedstring.h>
+
+static QString getDefaultStyle(const char *fallback=Q_NULLPTR)
+{
+    KSharedConfigPtr kdeGlobals = KSharedConfig::openConfig( QStringLiteral( "kdeglobals" ), KConfig::NoGlobals );
+    KConfigGroup cg( kdeGlobals, "KDE" );
+    if ( !fallback )
+    {
+#ifdef Q_OS_MACOS
+        fallback = "Macintosh";
+#elif defined(Q_OS_WIN)
+        // taken from QWindowsTheme::styleNames()
+        if ( QSysInfo::windowsVersion() >= QSysInfo::WV_VISTA )
+        {
+            fallback = "WindowsVista";
+        }
+        else if ( QSysInfo::windowsVersion() >= QSysInfo::WV_XP )
+        {
+            fallback = "WindowsXP";
+        }
+        else
+        {
+            fallback = "Windows";
+        }
+#else
+        fallback = "Breeze";
+#endif
+    }
+    return cg.readEntry( "widgetStyle", fallback );
+}
+
+WidgetStyleChooser::WidgetStyleChooser( QWidget *parent )
+    : QPushButton( parent )
+    , m_widgetStyle( QString() )
+{
+}
+
+WidgetStyleChooser::~WidgetStyleChooser()
+{
+}
+
+KActionMenu *WidgetStyleChooser::createStyleSelectionMenu( const QString &text, const QString &selectedStyleName )
+{
+    QIcon icon = QIcon::fromTheme( QStringLiteral( "preferences-desktop-theme" ) );
+    KActionMenu *stylesAction= new KActionMenu( icon, text, this );
+    setText( text );
+    if ( !icon.isNull() )
+    {
+        setIcon( icon );
+    }
+    stylesAction->setToolTip( i18n( "Select the application widget style" ) );
+    stylesAction->setStatusTip( stylesAction->toolTip() );
+    QActionGroup *stylesGroup = new QActionGroup( stylesAction );
+
+    QStringList availableStyles = QStyleFactory::keys();
+    QString desktopStyle = QApplication::style()->objectName();
+    QString defaultStyle = getDefaultStyle();
+
+    // Add default style action
+    QAction *defaultStyleAction = new QAction( i18n( "Default" ), stylesGroup );
+    defaultStyleAction->setCheckable( true );
+    // without a settings store we can only treat the Default entry
+    // as "select the default style for this platform".
+    // (see also the defaultStyleAction->setData() call below.
+    defaultStyleAction->setToolTip( i18n( "Default widget style for this platform: %1" ).arg( getDefaultStyle() ) );
+    defaultStyleAction->setStatusTip( defaultStyleAction->toolTip() );
+
+    stylesAction->addAction( defaultStyleAction );
+    m_widgetStyle = selectedStyleName;
+    bool setStyle = false;
+    if ( m_widgetStyle.isEmpty() )
+    {
+        if ( desktopStyle.compare( defaultStyle, Qt::CaseInsensitive ) == 0 )
+        {
+            defaultStyleAction->setChecked( true );
+            m_widgetStyle = defaultStyleAction->text();
+        }
+        else
+        {
+            m_widgetStyle = desktopStyle;
+        }
+    }
+    else if ( selectedStyleName.compare( desktopStyle, Qt::CaseInsensitive) )
+    {
+        setStyle = true;
+    }
+
+    foreach( const QString &style, availableStyles )
+    {
+        QAction *a = new QAction( style, stylesGroup );
+        a->setCheckable( true );
+        a->setData( style );
+        if ( style.compare( defaultStyle, Qt::CaseInsensitive ) == 0 )
+        {
+            QFont defFont = a->font();
+            defFont.setBold( true );
+            a->setFont( defFont );
+            a->setToolTip( i18n( "Current default widget style" ) );
+            a->setStatusTip( a->toolTip() );
+            defaultStyleAction->setData( style );
+        }
+        if ( m_widgetStyle.compare(style, Qt::CaseInsensitive ) == 0 )
+        {
+            a->setChecked( true );
+            if (setStyle)
+            {
+                // selectedStyleName was not empty and the
+                // the style exists: activate it.
+                activateStyle( style );
+            }
+        }
+        stylesAction->addAction( a );
+    }
+    connect( stylesGroup, &QActionGroup::triggered, this,
+        [&]( QAction *a ) { activateStyle(a->data().toString()); } );
+
+    setMenu( stylesAction->menu() );
+
+    return stylesAction;
+}
+
+QString WidgetStyleChooser::currentStyle() const
+{
+    if ( m_widgetStyle.isEmpty() || m_widgetStyle == QStringLiteral( "Default" ) )
+    {
+        return getDefaultStyle();
+    }
+    return m_widgetStyle;
+}
+
+void WidgetStyleChooser::activateStyle( const QString &styleName )
+{
+    m_widgetStyle = styleName;
+    QApplication::setStyle( QStyleFactory::create( currentStyle() ) );
+}
diff --git kstyle/demo/oxygenstylechooser.h kstyle/demo/oxygenstylechooser.h
new file mode 100644
index 0000000000000000000000000000000000000000..1c14b6caeddc257d4ce77c77bd3524c6d13ee462
--- /dev/null
+++ kstyle/demo/oxygenstylechooser.h
@@ -0,0 +1,51 @@
+/* This file is part of the KDE project
+ * Copyright (C) 2016 René J.V. Bertin <rjvbertin@gmail.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public License
+ * along with this library; see the file COPYING.LIB.  If not, write to
+ * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#ifndef QWIDGETSTYLESELECTOR_H
+
+
+#include <QWidget>
+#include <QMenu>
+#include <QPushButton>
+
+class QString;
+class QIcon;
+class QAction;
+class KActionMenu;
+
+class WidgetStyleChooser : public QPushButton
+{
+    Q_OBJECT
+public:
+    explicit WidgetStyleChooser( QWidget *parent = 0 );
+    virtual ~WidgetStyleChooser();
+
+    KActionMenu *createStyleSelectionMenu( const QString &text, const QString &selectedStyleName=QString() );
+
+    QString currentStyle() const;
+
+protected Q_SLOTS:
+    void activateStyle( const QString &styleName );
+
+private:
+    QString m_widgetStyle;
+};
+
+#define QWIDGETSTYLESELECTOR_H
+#endif
