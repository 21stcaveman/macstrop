diff --git src/libaudcore/playback.cc src/libaudcore/playback.cc
index d179818de81ea4425b99278bc223e4b63bed3db8..26cb1a3e1e1448ca1c651d58f2170cf351637e98 100644
--- src/libaudcore/playback.cc
+++ src/libaudcore/playback.cc
@@ -52,6 +52,10 @@
 #include "plugins-internal.h"
 #include "runtime.h"
 
+#ifdef USE_QT
+#include <QThread>
+#endif // USE_QT
+
 struct PlaybackState {
     bool playing = false;
     bool thread_running = false;
@@ -429,6 +433,20 @@ static void * playback_thread (void *)
     return nullptr;
 }
 
+#ifdef USE_QT
+// QtMultiMedia is likely to use QObject timers (it does on Mac), which
+// need to be started from a thread created by QThread. So we use a thin
+// QThread wrapper instead of forking in the usual fashion with pthread.
+class PlaybackThread : public QThread
+{
+    void run() override
+    {
+        playback_thread(nullptr);
+        deleteLater();
+    }
+};
+#endif // USE_QT
+
 // main thread: starts playback of a new song
 void playback_play (int seek_time, bool pause)
 {
@@ -448,9 +466,15 @@ void playback_play (int seek_time, bool pause)
         pthread_cond_broadcast (& cond);
     else
     {
+#ifndef USE_QT
         pthread_t thread;
         pthread_create (& thread, nullptr, playback_thread, nullptr);
         pthread_detach (thread);
+#else // USE_QT
+        PlaybackThread *thread = new PlaybackThread();
+        thread->setObjectName(QStringLiteral("Playback Thread"));
+        thread->start();
+#endif // USE_QT
         pb_state.thread_running = true;
     }
 
