diff --git src/search-tool-qt/search-tool-qt.cc src/search-tool-qt/search-tool-qt.cc
index eb63eba9cce8d99257e549fa547bc1f483900cb4..0aafd838df119eea26e45bb0e2410b436cae3083 100644
--- src/search-tool-qt/search-tool-qt.cc
+++ src/search-tool-qt/search-tool-qt.cc
@@ -44,23 +44,30 @@
 #include <libaudcore/mainloop.h>
 #include <libaudcore/multihash.h>
 #include <libaudcore/runtime.h>
+#include <libaudcore/preferences.h>
 #include <libaudqt/libaudqt.h>
 #include <libaudqt/menu.h>
 
 #define MAX_RESULTS 20
 #define SEARCH_DELAY 300
+#define STR(name)   # name
 
 class SearchToolQt : public GeneralPlugin
 {
 public:
+    static const char * const defaults[];
+    static const PreferencesWidget widgets[];
+    static const PluginPreferences prefs;
     static constexpr PluginInfo info = {
         N_("Search Tool"),
         PACKAGE,
         nullptr, // about
-        nullptr, // prefs
+        & prefs, // prefs
         PluginQtOnly
     };
 
+    bool init ();
+
     constexpr SearchToolQt () : GeneralPlugin (info, false) {}
 
     void * get_qt_widget ();
@@ -69,6 +76,25 @@ public:
 
 EXPORT SearchToolQt aud_plugin_instance;
 
+static void update_database ();
+
+const char * const SearchToolQt::defaults[] = {
+    "max_results", STR (MAX_RESULTS),
+    nullptr};
+
+const PreferencesWidget SearchToolQt::widgets[] = {
+    WidgetSpin (N_("Maximum number of search results"),
+        WidgetInt ("searchtool", "max_results", update_database),
+        {1, G_MAXINT, MAX_RESULTS}),
+};
+
+const PluginPreferences SearchToolQt::prefs = {
+    {widgets},
+    nullptr,
+    nullptr,
+    nullptr
+};
+
 enum class SearchField {
     Genre,
     Artist,
@@ -441,11 +467,12 @@ static void do_search ()
     /* first sort by number of songs per item */
     s_items.sort (item_compare_pass1);
 
+    int max_results = aud_get_int ("searchtool", "max_results");
     /* limit to items with most songs */
-    if (s_items.len () > MAX_RESULTS)
+    if (s_items.len () > max_results)
     {
-        s_hidden_items = s_items.len () - MAX_RESULTS;
-        s_items.remove (MAX_RESULTS, -1);
+        s_hidden_items = s_items.len () - max_results;
+        s_items.remove (max_results, -1);
     }
 
     /* sort by item type, then item name */
@@ -738,7 +765,7 @@ static StringBuf create_item_label (int row)
         return StringBuf ();
 
     const Item * item = s_items[row];
-    StringBuf string = str_concat ({"<u><b>", item->name, "</b></u><br>"});
+    StringBuf string = str_concat ({"<big><span style=\"font-variant: small-caps;\"><u>", item->name, "</u></span></big><br>"});
 
     if (item->field != SearchField::Title)
     {
@@ -808,6 +835,16 @@ QMimeData * ResultsModel::mimeData (const QModelIndexList & indexes) const
     return data;
 }
 
+bool SearchToolQt::init ()
+{
+    aud_config_set_defaults ("searchtool", defaults);
+    if (aud_get_int ("searchtool", "max_results") <= 0)
+    {
+        aud_set_int ("searchtool", "max_results", MAX_RESULTS);
+    }
+    return true;
+}
+
 void * SearchToolQt::get_qt_widget ()
 {
     s_search_entry = new QLineEdit;
diff --git src/search-tool/search-tool.cc src/search-tool/search-tool.cc
index 79ed04b604f865c7f2b278b7c1160f7d9e2972cc..3b557d2943fa933debdb20c9487b4c7687694421 100644
--- src/search-tool/search-tool.cc
+++ src/search-tool/search-tool.cc
@@ -19,6 +19,7 @@
 
 #include <string.h>
 #include <gtk/gtk.h>
+#include <gdk/gdk.h>
 
 #define AUD_GLIB_INTEGRATION
 #include <libaudcore/audstrings.h>
@@ -29,24 +30,31 @@
 #include <libaudcore/mainloop.h>
 #include <libaudcore/multihash.h>
 #include <libaudcore/runtime.h>
+#include <libaudcore/preferences.h>
 #include <libaudgui/libaudgui-gtk.h>
 #include <libaudgui/list.h>
 #include <libaudgui/menu.h>
 
 #define MAX_RESULTS 20
 #define SEARCH_DELAY 300
+#define STR(name)   # name
 
 class SearchTool : public GeneralPlugin
 {
 public:
+    static const char * const defaults[];
+    static const PreferencesWidget widgets[];
+    static const PluginPreferences prefs;
     static constexpr PluginInfo info = {
         N_("Search Tool"),
         PACKAGE,
         nullptr, // about
-        nullptr, // prefs
+        & prefs, // prefs
         PluginGLibOnly
     };
 
+    bool init ();
+
     constexpr SearchTool () : GeneralPlugin (info, false) {}
 
     void * get_gtk_widget ();
@@ -55,6 +63,25 @@ public:
 
 EXPORT SearchTool aud_plugin_instance;
 
+static void update_database ();
+
+const char * const SearchTool::defaults[] = {
+    "max_results", STR (MAX_RESULTS),
+    nullptr};
+
+const PreferencesWidget SearchTool::widgets[] = {
+    WidgetSpin (N_("Maximum number of search results"),
+        WidgetInt ("searchtool", "max_results", update_database),
+        {1, G_MAXINT, MAX_RESULTS}),
+};
+
+const PluginPreferences SearchTool::prefs = {
+    {widgets},
+    nullptr,
+    nullptr,
+    nullptr
+};
+
 enum class SearchField {
     Genre,
     Artist,
@@ -287,11 +314,12 @@ static void do_search ()
     /* first sort by number of songs per item */
     s_items.sort (item_compare_pass1);
 
+    int max_results = aud_get_int ("searchtool", "max_results");
     /* limit to items with most songs */
-    if (s_items.len () > MAX_RESULTS)
+    if (s_items.len () > max_results)
     {
-        s_hidden_items = s_items.len () - MAX_RESULTS;
-        s_items.remove (MAX_RESULTS, -1);
+        s_hidden_items = s_items.len () - max_results;
+        s_items.remove (max_results, -1);
     }
 
     /* sort by item type, then item name */
@@ -731,6 +759,16 @@ static void refresh_cb (GtkButton * button, GtkWidget * file_entry)
     }
 }
 
+bool SearchTool::init ()
+{
+    aud_config_set_defaults ("searchtool", defaults);
+    if (aud_get_int ("searchtool", "max_results") <= 0)
+    {
+        aud_set_int ("searchtool", "max_results", MAX_RESULTS);
+    }
+    return true;
+}
+
 void * SearchTool::get_gtk_widget ()
 {
     GtkWidget * vbox = gtk_vbox_new (false, 6);
