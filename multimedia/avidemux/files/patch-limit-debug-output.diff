--- avidemux_core/ADM_core/src/orig.ADM_debug.cpp	2020-07-05 19:22:21.000000000 +0200
+++ avidemux_core/ADM_core/src/ADM_debug.cpp	2020-08-26 11:16:42.647614524 +0200
@@ -31,7 +31,7 @@
 extern "C"
 {
 
-static void ADM_prettyPrint(const char *func,const char *color, const char *p)
+static void ADM_prettyPrint(FILE *fp, const char *func,const char *color, const char *p)
 {
   // construct time code
   struct timeval pz;
@@ -46,51 +46,67 @@
   long int hh=((tvSec)/3600)%24;
 
 #if _WIN32
-      printf("[%s] %02d:%02d:%02d-%03d %s", func, (int)hh,(int)mn,(int)seconds,(int)mseconds,p);
+      fprintf(fp, "[%s] %02d:%02d:%02d-%03d %s", func, (int)hh,(int)mn,(int)seconds,(int)mseconds,p);
 #else
-    if(isatty(STDOUT_FILENO))
-        printf("%s [%s] %02d:%02d:%02d-%03d  %s%s",color,func,(int)hh,(int)mn,(int)seconds,(int)mseconds,p,ADM_DEFAULT_COLOR);
+    if(isatty(fileno(fp)))
+        fprintf(fp, "%s [%s] %02d:%02d:%02d-%03d  %s%s",color,func,(int)hh,(int)mn,(int)seconds,(int)mseconds,p,ADM_DEFAULT_COLOR);
     else
-        printf(" [%s] %02d:%02d:%02d-%03d  %s",func,(int)hh,(int)mn,(int)seconds,(int)mseconds,p);
+        fprintf(fp, " [%s] %02d:%02d:%02d-%03d  %s",func,(int)hh,(int)mn,(int)seconds,(int)mseconds,p);
 #endif
 }
 
+static bool checkEnabled(const char *name, int &cache)
+{
+	if (cache == -1) {
+		cache = (getenv(name) != NULL);
+		char buf [256];
+		snprintf(buf, 255, "debug output \"%s\" is %s\n", name, cache ? "enabled" : "disabled");
+		ADM_prettyPrint(stderr, "checkEnabled", ADM_COLOR_RED, buf);
+	}
+	return cache;
+}
 
  void ADM_info2(const char *func, const char *prf, ...)
   {
-  static char print_buffer[1024];
-
-        va_list     list;
-        va_start(list,    prf);
-        vsnprintf(print_buffer,1023,prf,list);
-        va_end(list);
-        print_buffer[1023]=0; // ensure the string is terminated
-        ADM_prettyPrint(func,ADM_COLOR_GREEN,print_buffer);
-
+  static int enabled = -1;
+        if (checkEnabled("ADM_INFO_OUTPUT", enabled)) {
+            char print_buffer[1024];
+
+            va_list     list;
+            va_start(list,    prf);
+            vsnprintf(print_buffer,1023,prf,list);
+            va_end(list);
+            print_buffer[1023]=0; // ensure the string is terminated
+            ADM_prettyPrint(stdout,func,ADM_COLOR_GREEN,print_buffer);
+		}
   }
  void ADM_warning2( const char *func, const char *prf, ...)
   {
-  static char print_buffer[1024];
-
-        va_list     list;
-        va_start(list,    prf);
-        vsnprintf(print_buffer,1023,prf,list);
-        va_end(list);
-        print_buffer[1023]=0; // ensure the string is terminated
-        ADM_prettyPrint(func,ADM_COLOR_YELLOW,print_buffer);
-
+  static int enabled = -1;
+        if (checkEnabled("ADM_WARNING_OUTPUT", enabled)) {
+            char print_buffer[1024];
+
+            va_list     list;
+            va_start(list,    prf);
+            vsnprintf(print_buffer,1023,prf,list);
+            va_end(list);
+            print_buffer[1023]=0; // ensure the string is terminated
+            ADM_prettyPrint(stderr,func,ADM_COLOR_YELLOW,print_buffer);
+        }
   }
  void ADM_error2( const char *func, const char *prf, ...)
   {
-  static char print_buffer[1024];
-
-        va_list     list;
-        va_start(list,    prf);
-        vsnprintf(print_buffer,1023,prf,list);
-        va_end(list);
-        print_buffer[1023]=0; // ensure the string is terminated
-        ADM_prettyPrint(func,ADM_COLOR_RED,print_buffer);
-
+  static int enabled = -1;
+        if (checkEnabled("ADM_ERROR_OUTPUT", enabled)) {
+            char print_buffer[1024];
+
+            va_list     list;
+            va_start(list,    prf);
+            vsnprintf(print_buffer,1023,prf,list);
+            va_end(list);
+            print_buffer[1023]=0; // ensure the string is terminated
+            ADM_prettyPrint(stderr,func,ADM_COLOR_RED,print_buffer);
+        }
   }
 
 
