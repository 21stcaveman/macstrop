diff --git makemkvgui/src/api_darwin.cpp makemkvgui/src/api_darwin.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..073f7da4653ba04573e4c7299d51c52957e05da4
--- /dev/null
+++ b/makemkvgui/src/api_darwin.cpp
@@ -0,0 +1,93 @@
+/*
+    Copyright (C) 2017 R.J.V. Bertin <rjvbertin@gmail.com>
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Lesser General Public
+    License as published by the Free Software Foundation; either
+    version 2.1 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Lesser General Public License for more details.
+
+    You should have received a copy of the GNU Lesser General Public
+    License along with this library; if not, write to the Free Software
+    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+
+*/
+
+#include <string.h>
+#include <crt_externs.h>
+
+#include <errno.h>
+#include <semaphore.h>
+#include <signal.h>
+#include <sys/time.h>
+#include <lgpl/sysabi.h>
+#include <lgpl/aproxy.h> // for AP_SEM_TIMEOUT
+
+int SYS_posix_getmyname(char* buffer,int length)
+{
+    strncpy(*_NSGetProgname(), buffer, length);
+    buffer[length-1] = '\0';
+    return strlen(buffer);
+}
+
+char** SYS_posix_envp()
+{
+    return *_NSGetEnviron();
+}
+
+static const char* const app_locations[]={
+    "@PREFIX@/bin",
+    "/bin",
+    "/usr/bin",
+    "/usr/local/bin",
+    NULL };
+
+const char* const* ApGetAppLocations()
+{
+    return app_locations;
+}
+
+static bool _timeout_ = false;
+static void cseUnsleep(int sig)
+{
+//	fprintf( stderr, "SIGALRM\n" );
+    _timeout_ = true;
+}
+
+extern "C" {
+// non reentrant implementation of sem_timedwait()
+int sem_timedwait(sem_t *sem, const struct timespec *abs_timeout)
+{
+    struct sigaction h, oh;
+    struct itimerval rtt, ortt;
+
+    h.__sigaction_u.__sa_handler = cseUnsleep;
+
+    errno = 0;
+
+    sigemptyset(&h.sa_mask);
+    rtt.it_value.tv_sec= (unsigned long) AP_SEM_TIMEOUT;
+    rtt.it_value.tv_usec= (unsigned long) ((AP_SEM_TIMEOUT- rtt.it_value.tv_sec) * 1000000);
+    rtt.it_interval.tv_sec= 0;
+    rtt.it_interval.tv_usec= 0;
+    if( sigaction( SIGALRM, &h, &oh ) ){
+//         fprintf( stderr, "Error calling sigaction: %s\n", strerror(errno) );
+        return -1;
+    }
+    _timeout_ = false;
+    setitimer( ITIMER_REAL, &rtt, &ortt );
+    int r = sem_wait(sem);
+    if( r != 0 ){
+//         fprintf( stderr, "sem_wait error %s\n", strerror(errno) );
+        if (_timeout_) {
+            errno = ETIMEDOUT;
+        }
+    }
+    setitimer( ITIMER_REAL, &ortt, &rtt );
+    return r;
+}
+}
