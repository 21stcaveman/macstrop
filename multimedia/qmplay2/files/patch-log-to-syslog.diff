diff --git a/src/gui/Main.cpp b/src/gui/Main.cpp
index e4938fc5b843c39fa3700d33417eb76d5f0f0f17..a53665eee3a9b79b873fc07c30bb97674bb2ee43 100644
--- a/src/gui/Main.cpp
+++ b/src/gui/Main.cpp
@@ -42,8 +42,11 @@
 #include <QBuffer>
 #include <QFile>
 #include <QDir>
-#ifdef Q_OS_MAC
+#ifdef Q_OS_MACOS
+	#include <QMap>
 	#include <QProcess>
+	#include <syslog.h>
+	#include <stdarg.h>
 #endif
 
 #include <csignal>
@@ -51,7 +54,7 @@
 
 static ScreenSaver *g_screenSaver = nullptr;
 static bool g_useGui = true;
-#ifdef Q_OS_MAC
+#ifdef Q_OS_MACOS
 	static QByteArray g_rcdPath("/System/Library/LaunchAgents/com.apple.rcd.plist");
 	static bool g_rcdLoad;
 #endif
@@ -68,7 +71,7 @@ QString QMPlay2GUIClass::getPipe()
 {
 #if defined Q_OS_WIN
 	return "\\\\.\\pipe\\QMPlay2";
-#elif defined Q_OS_MAC
+#elif defined Q_OS_MACOS
 	return "/tmp/QMPlay2." + QString(getenv("USER"));
 #else
 	return QDir::tempPath() + "/QMPlay2." + QString(getenv("USER"));
@@ -334,7 +337,7 @@ static bool writeToSocket(IPCSocket &socket, QList<QPair<QString, QString>> &arg
 
 static inline void exitProcedure()
 {
-#ifdef Q_OS_MAC
+#ifdef Q_OS_MACOS
 	if (g_rcdLoad)
 	{
 		// Load RCD service again (allow to run iTunes on "Play" key)
@@ -459,8 +462,19 @@ static LRESULT CALLBACK MMKeysHookProc(int code, WPARAM wparam, LPARAM lparam)
 #ifndef Q_OS_ANDROID
 static void messageHandler(QtMsgType type, const QMessageLogContext &context, const QString &message)
 {
-	fprintf(stderr, "%s\n", qFormatLogMessage(type, context, message).toLocal8Bit().constData());
+	const char *messageText = qFormatLogMessage(type, context, message).toLocal8Bit().constData();
+	fprintf(stderr, "%s\n", messageText);
 	fflush(stderr);
+#if defined Q_OS_MACOS
+	static const QMap<QtMsgType,int> type2Level = {
+		{QtDebugMsg, LOG_DEBUG},
+		{QtWarningMsg, LOG_WARNING},
+		{QtCriticalMsg, LOG_CRIT},
+		{QtFatalMsg, LOG_CRIT},
+		{QtInfoMsg, LOG_INFO}
+	};
+	syslog(LOG_NDELAY|LOG_PID|type2Level[type], "%s", messageText);
+#endif
 }
 #endif
 
@@ -536,7 +550,7 @@ int main(int argc, char *argv[])
 
 	QString libPath, sharePath = QCoreApplication::applicationDirPath();
 	bool cmakeBuildFound = false;
-#ifdef Q_OS_MAC
+#ifdef Q_OS_MACOS
 	if (QDir(sharePath).exists("../../../CMakeFiles/QMPlay2.dir"))
 		sharePath += "/../../.."; //Probably CMake not-installed build in Bundle
 #endif
@@ -550,7 +564,7 @@ int main(int argc, char *argv[])
 	}
 	if (!cmakeBuildFound)
 	{
-#if !defined Q_OS_WIN && !defined Q_OS_MAC && !defined Q_OS_ANDROID
+#if !defined Q_OS_WIN && !defined Q_OS_MACOS && !defined Q_OS_ANDROID
 		sharePath = QCoreApplication::applicationDirPath() + "/../share/qmplay2";
 		libPath = QMPlay2CoreClass::getLibDir();
 		if (libPath.isEmpty() || !QDir(libPath).exists("qmplay2"))
@@ -564,7 +578,7 @@ int main(int argc, char *argv[])
 				libPath += "lib";
 		}
 		libPath += "/qmplay2";
-#elif defined Q_OS_MAC
+#elif defined Q_OS_MACOS
 		libPath = QCoreApplication::applicationDirPath();
 		sharePath += "/../share/qmplay2";
 #else
@@ -591,7 +605,7 @@ int main(int argc, char *argv[])
 	HHOOK keyboardHook = SetWindowsHookEx(WH_KEYBOARD_LL, MMKeysHookProc, GetModuleHandle(nullptr), 0);
 #endif
 
-#ifdef Q_OS_MAC
+#ifdef Q_OS_MACOS
 	// Unload RCD service (prevent run iTunes on "Play" key)
 	{
 		QProcess launchctl;
