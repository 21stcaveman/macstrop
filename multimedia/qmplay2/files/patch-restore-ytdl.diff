diff --git a/src/gui/DemuxerThr.cpp b/src/gui/DemuxerThr.cpp
index 38d9e18a3e0d7840b902d81fb791908b6dc00f05..200284bd04951560c0874c58b73e3e352a872deb 100644
--- a/src/gui/DemuxerThr.cpp
+++ b/src/gui/DemuxerThr.cpp
@@ -785,7 +785,16 @@ void DemuxerThr::emitInfo()
     if (!Functions::splitPrefixAndUrlIfHasPluginPrefix(url, nullptr, &realUrl, nullptr))
         realUrl = url;
     if (!realUrl.startsWith("file://"))
+    {
+        QString ytUrl;
+        if (playC.url.startsWith("YouTube://")
+            && realUrl.startsWith("[")
+            && Functions::splitPrefixAndUrlIfHasPluginPrefix(playC.url, nullptr, &ytUrl, nullptr))
+        {
+            realUrl = ytUrl;
+        }
         info += "<b>" + tr("Address") + ":</b> " + realUrl + "<br>";
+    }
     else
     {
         const QString pth = realUrl.right(realUrl.length() - 7);
diff --git a/src/qmplay2/YouTubeDL.cpp b/src/qmplay2/YouTubeDL.cpp
index d532c762d2dea54e5c1e53472d9367d5f40b72a6..5bfb80aaf56de346f98bc3bd7de32284e6c01087 100644
--- a/src/qmplay2/YouTubeDL.cpp
+++ b/src/qmplay2/YouTubeDL.cpp
@@ -25,12 +25,14 @@
 #ifdef Q_OS_WIN
     #include <Functions.hpp>
 #endif
+#include <Module.hpp>
 
 #include <QReadWriteLock>
 #include <QJsonDocument>
 #include <QJsonObject>
 #include <QJsonArray>
 #include <QFile>
+#include <QDebug>
 
 constexpr const char *g_name = "YouTubeDL";
 
@@ -194,8 +196,14 @@ QStringList YouTubeDL::exec(const QString &url, const QStringList &args, QString
     if (httpProxy && *httpProxy)
         commonArgs += {"--proxy", httpProxy};
 
+    emit QMPlay2Core.statusBarMessage(tr("youtube-dl fetching streams for") + " " + url, 0);
+
     m_process.start(ytDlPath, QStringList() << url << "-g" << args << commonArgs << "-j");
-    if (m_process.waitForFinished() && !m_aborted)
+    bool isStarted = m_process.waitForStarted();
+    if (!isStarted) {
+        qWarning() << ytDlPath << "failed to start:" << m_process.errorString() << m_process.exitCode();
+    }
+    if (isStarted && m_process.waitForFinished() && !m_aborted)
     {
         const auto finishWithError = [&](const QString &error) {
             if (!m_aborted)
@@ -308,26 +316,107 @@ QStringList YouTubeDL::exec(const QString &url, const QStringList &args, QString
             return {};
         }
 
-        //[Title], url, JSON, [url, JSON]
-        for (int i = result.count() - 1; i >= 0; --i)
+        QStringList retList;
+        static bool oldParser = false;
+        if ((args.count() > 0 && args.at(0) == "-f"
+            && !result.at(1).contains("://manifest.googlevideo.com"))
+            || oldParser)
         {
-            if (i > 0 && result.at(i).startsWith('{'))
+            //[Title], url, JSON, [url, JSON]
+            for (int i = result.count() - 1; i >= 0; --i)
             {
-                const QString url = result.at(i - 1);
+                if (i > 0 && result.at(i).startsWith('{'))
+                {
+                    const QString url = result.at(i - 1);
 
-                const QJsonDocument json = QJsonDocument::fromJson(result.at(i).toUtf8());
-                for (const QJsonValue &formats : json.object()["formats"].toArray())
+                    const QJsonDocument json = QJsonDocument::fromJson(result.at(i).toUtf8());
+                    for (const QJsonValue &formats : json.object()["formats"].toArray())
+                    {
+                        if (url == formats.toObject()["url"].toString())
+                            QMPlay2Core.addCookies(url, formats.toObject()["http_headers"].toObject()["Cookie"].toString().toUtf8());
+                    }
+
+                    result.removeAt(i);
+                }
+            }
+            retList = result;
+        }
+        else
+        {
+            QStringList formatPrefs;
+			// y
+            for (Module *pluginInstance : QMPlay2Core.getPluginsInstance())
+            {
+                if (pluginInstance->name() == "Extensions")
+                {
+                    formatPrefs = pluginInstance->getStringList("YouTube/ItagList");
+                    // append the other itags (is there a point?)
+                    for (const auto iTag : pluginInstance->getString("YouTube/ItagVideoList"))
+                    {
+                        if (!formatPrefs.contains(iTag))
+                        {
+                            qWarning() << "video itag" << iTag;
+                            formatPrefs << iTag;
+                        }
+                    }
+                    for (const auto iTag : pluginInstance->getString("YouTube/ItagAudioList"))
+                    {
+                        if (!formatPrefs.contains(iTag))
+                        {
+                            qWarning() << "audio itag" << iTag;
+                            formatPrefs << iTag;
+                        }
+                    }
+                    break;
+                }
+            }
+            // construct a sorted map of the available heights and the corresponding stream URLs
+            QMap<int,QString> height2Url;
+            for (int i = 1 ; i < result.count(); ++i)
+            {
+                if (i > 0 && result.at(i).startsWith('{'))
                 {
-                    if (url == formats.toObject()["url"].toString())
-                        QMPlay2Core.addCookies(url, formats.toObject()["http_headers"].toObject()["Cookie"].toString().toUtf8());
+                    const QJsonDocument json = QJsonDocument::fromJson(result.at(i).toUtf8());
+                    for (const QJsonValue &formats : json.object()["formats"].toArray())
+                    {
+                        const auto object = formats.toObject();
+                        if (object.contains("url") && object.contains("height"))
+                        {
+                            const auto streamUrl = object["url"].toString();
+                            const int height = object["height"].toInt();
+                            // add the URL if its format_id is not blacklisted
+                            if (formatPrefs.count() == 0 || formatPrefs.contains(object["format_id"].toString()))
+                            {
+                                if (object.contains("http_headers"))
+                                {
+                                    QMPlay2Core.addCookies(streamUrl, object["http_headers"].toObject()["Cookie"].toString().toUtf8());
+                                }
+                                // there can be multiple formats with the same height
+                                height2Url.insertMulti(height, streamUrl);
+                            }
+                        }
+                    }
                 }
+            }
 
-                result.removeAt(i);
+            // construct the return list
+            const auto urlList = height2Url.values();
+            // reverse-sort the URL list so that the higher resolutions get priority
+            for (const auto streamUrl : urlList)
+            {
+                retList.prepend(streamUrl);
+            }
+            if (!result.at(0).contains("://"))
+            {
+                // this is probably the video title: prepend it.
+                retList.prepend(result.at(0));
             }
         }
 
+        // clear the status bar message, we're done.
+        emit QMPlay2Core.statusBarMessage(QString(), 0);
         g_lock.unlock(); // Unlock for read
-        return result;
+        return retList;
     }
     else if (canUpdate && !m_aborted && m_process.error() == QProcess::FailedToStart)
     {
