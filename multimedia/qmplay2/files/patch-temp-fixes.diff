diff --git a/src/qmplay2/VideoFilters.cpp b/src/qmplay2/VideoFilters.cpp
index 411299f48bc344d17d74da960a16e29445c1b786..fe299839bbc447c3ca5724a7df33087e3ddad5fc 100644
--- a/src/qmplay2/VideoFilters.cpp
+++ b/src/qmplay2/VideoFilters.cpp
@@ -143,7 +143,7 @@ private:
 class VideoFiltersThr final : public QThread
 {
 public:
-	VideoFiltersThr(VideoFilters &videoFilters) :
+	VideoFiltersThr(VideoFilters *videoFilters) :
 		videoFilters(videoFilters)
 	{
 		setObjectName("VideoFiltersThr");
@@ -181,7 +181,7 @@ public:
 		bufferMutex.lock();
 		while (filtering && !br)
 		{
-			if (!waitForAllFrames && !videoFilters.outputQueue.isEmpty())
+			if (!waitForAllFrames && !videoFilters->outputQueue.isEmpty())
 				break;
 			cond.wait(&bufferMutex);
 		}
@@ -209,7 +209,7 @@ private:
 			bool pending = false;
 			do
 			{
-				for (VideoFilter *vFilter : videoFilters.filters)
+				for (VideoFilter *vFilter : videoFilters->filters)
 				{
 					pending |= vFilter->filter(queue);
 					if (queue.isEmpty())
@@ -223,8 +223,8 @@ private:
 					QMutexLocker locker(&bufferMutex);
 					if (!queue.isEmpty())
 					{
-						videoFilters.outputQueue.append(queue);
-						videoFilters.outputNotEmpty = true;
+						videoFilters->outputQueue.append(queue);
+						videoFilters->outputNotEmpty = true;
 						queue.clear();
 					}
 					if (!pending)
@@ -242,7 +242,7 @@ private:
 		}
 	}
 
-	VideoFilters &videoFilters;
+	VideoFilters *videoFilters = NULL;
 
 	bool br = false, filtering = false;
 
@@ -269,25 +269,25 @@ void VideoFilters::init()
 }
 
 VideoFilters::VideoFilters() :
-	filtersThr(*(new VideoFiltersThr(*this))),
+	filtersThr(new VideoFiltersThr(this)),
 	outputNotEmpty(false)
 {}
 VideoFilters::~VideoFilters()
 {
 	clear();
-	delete &filtersThr;
+	delete filtersThr;
 }
 
 void VideoFilters::start()
 {
 	if (!filters.isEmpty())
-		filtersThr.start();
+		filtersThr->start();
 }
 void VideoFilters::clear()
 {
 	if (!filters.isEmpty())
 	{
-		filtersThr.stop();
+		filtersThr->stop();
 		for (VideoFilter *vFilter : filters)
 			delete vFilter;
 		filters.clear();
@@ -326,7 +326,7 @@ void VideoFilters::clearBuffers()
 {
 	if (!filters.isEmpty())
 	{
-		filtersThr.waitForFinished(true);
+		filtersThr->waitForFinished(true);
 		for (VideoFilter *vFilter : filters)
 			vFilter->clearBuffer();
 	}
@@ -337,7 +337,7 @@ void VideoFilters::removeLastFromInputBuffer()
 {
 	if (!filters.isEmpty())
 	{
-		filtersThr.waitForFinished(true);
+		filtersThr->waitForFinished(true);
 		for (int i = filters.count() - 1; i >= 0; --i)
 			if (filters[i]->removeLastFromInternalBuffer())
 				break;
@@ -348,7 +348,7 @@ void VideoFilters::addFrame(const VideoFrame &videoFrame, double ts)
 {
 	const VideoFilter::FrameBuffer frame(videoFrame, ts);
 	if (!filters.isEmpty())
-		filtersThr.filterFrame(frame);
+		filtersThr->filterFrame(frame);
 	else
 	{
 		outputQueue.enqueue(frame);
@@ -359,7 +359,7 @@ bool VideoFilters::getFrame(VideoFrame &videoFrame, TimeStamp &ts)
 {
 	bool locked, ret;
 	if ((locked = !filters.isEmpty()))
-		filtersThr.waitForFinished(false);
+		filtersThr->waitForFinished(false);
 	if ((ret = !outputQueue.isEmpty()))
 	{
 		videoFrame = outputQueue.at(0).frame;
@@ -368,14 +368,14 @@ bool VideoFilters::getFrame(VideoFrame &videoFrame, TimeStamp &ts)
 		outputNotEmpty = !outputQueue.isEmpty();
 	}
 	if (locked)
-		filtersThr.bufferMutex.unlock();
+		filtersThr->bufferMutex.unlock();
 	return ret;
 }
 
 bool VideoFilters::readyRead()
 {
-	filtersThr.waitForFinished(false);
+	filtersThr->waitForFinished(false);
 	const bool ret = outputNotEmpty;
-	filtersThr.bufferMutex.unlock();
+	filtersThr->bufferMutex.unlock();
 	return ret;
 }
diff --git a/src/qmplay2/headers/VideoFilters.hpp b/src/qmplay2/headers/VideoFilters.hpp
index 70af7adb3d81c2ef5641a252fa5963b406bcf1a5..db16f16819099d0f62b985d2f48dfb3e9e9dea04 100644
--- a/src/qmplay2/headers/VideoFilters.hpp
+++ b/src/qmplay2/headers/VideoFilters.hpp
@@ -62,6 +62,6 @@ private:
 
 	QQueue<VideoFilter::FrameBuffer> outputQueue;
 	QVector<VideoFilter *> filters;
-	VideoFiltersThr &filtersThr;
+	VideoFiltersThr *filtersThr;
 	bool outputNotEmpty = false;
 };
