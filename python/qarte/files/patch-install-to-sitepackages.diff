This patch makes it possible to install the implementation files to
the site-packages directory of choice, under a directory "qarte"
Also makes some other tweaks that allow running Qarte under MSWin.

=== modified file '__init__.py'
--- old/__init__.py	2016-03-21 04:11:28 +0000
+++ new/__init__.py	2017-02-21 13:23:19 +0000
@@ -0,0 +1,2 @@
+import os,sys
+sys.path.append(os.path.dirname(os.path.abspath(__file__)))

=== modified file 'gui/artelivewebviewer.py'
--- old/gui/artelivewebviewer.py	2017-02-09 06:50:27 +0000
+++ new/gui/artelivewebviewer.py	2017-02-21 18:23:35 +0000
@@ -432,6 +432,8 @@
         self.menu.addAction(self.act_diff)
         self.act_add.triggered.connect(self.add_to_download)
         self.act_diff.triggered.connect(self.set_cron_job)
+        if sys.platform == 'win32':
+            self.act_diff.setEnabled(False)
 
         #if self.new == -1:
             #self.act_add.setEnabled(False)

=== modified file 'gui/mainui.py'
--- old/gui/mainui.py	2016-10-26 07:38:00 +0000
+++ new/gui/mainui.py	2017-02-21 20:00:15 +0000
@@ -323,6 +323,8 @@
         self.action_Cancel.setEnabled(False)
         self.actionDo_wnload.setEnabled(False)
         self.actionCa_ncel.setEnabled(False)
+        if sys.platform == 'win32':
+            self.actionD_iffered_download.setEnabled(False)
 
         self.statusbar = QStatusBar(self)
         self.statusbar.setObjectName("statusbar")
@@ -665,6 +667,8 @@
         self.act_add.triggered.connect(self.add_to_download)
         self.act_show.triggered.connect(self.show_pitch)
         self.act_def.triggered.connect(self.set_cron_job)
+        if sys.platform == 'win32':
+            self.act_def.setEnabled(False)
         #self.menu.setStyleSheet(self.plus.ui.menu_style)
         self.menu.popup(pos)
 

=== modified file 'loadingscheduler.py'
--- old/loadingscheduler.py	2017-02-09 08:23:48 +0000
+++ new/loadingscheduler.py	2017-02-21 13:26:11 +0000
@@ -13,7 +13,7 @@
 import sys
 import os
 import time
-import pwd
+#import pwd
 import json
 import pickle
 import locale

=== modified file 'pycrontab.py'
--- old/pycrontab.py	2017-02-08 08:59:23 +0000
+++ new/pycrontab.py	2017-02-21 13:28:18 +0000
@@ -11,7 +11,7 @@
 # crontab handler
 
 import os
-import pwd
+#import pwd
 import re
 import tempfile
 import subprocess
@@ -26,7 +26,8 @@
         """Return the user name.
 
         """
-        return pwd.getpwuid(os.getuid())[0]
+        #return pwd.getpwuid(os.getuid())[0]
+        return os.getlogin()
 
     def read_crontab(self):
         """Read the current crontab.

=== modified file 'qarte'
--- old/qarte	2017-02-08 09:43:25 +0000
+++ new/qarte	2017-02-21 14:29:38 +0000
@@ -31,6 +31,8 @@
 import platform
 import locale
 
+import qarte
+
 VERSION_STR = "3.6.1"
 
 from PyQt5.QtWidgets import QApplication
@@ -81,15 +83,8 @@
             show_infos(args[1])
 
         if args[1] == "-a":
-            os.chdir("/usr/share/qarte")
-
-            if not os.path.isfile("/usr/share/qarte/daemon.py"):
-                logger.critical("File '/usr/share/qarte/daemon.py' not found.")
-                logger.critical("Please re-install Qarte")
-                sys.exit()
-
-            sys.path.append("/usr/share/qarte")
-            from daemon import Daemon
+            os.chdir(qarte.__path__[0])
+            from qarte.daemon import Daemon
             qarte = Daemon(args[2])
             reply = qarte.read_task()
             sys.exit()
@@ -97,20 +92,8 @@
         if args[1] in ["-d", "--debug"]:
             print_infos()
 
-    os.chdir("/usr/share")
-    if not os.path.isdir("qarte"):
-        logger.critical("Folder '/usr/share/qarte' not found.")
-        logger.critical("Please install Qarte in '/usr/share/'")
-        sys.exit()
-
-    os.chdir("/usr/share/qarte")
-    if not os.path.isfile("core.py"):
-        logger.critical("File '/usr/share/qarte/core.py' not found.")
-        logger.critical("Please re-install Qarte")
-        sys.exit()
-
-    sys.path.append("/usr/share/qarte")
+    os.chdir(sys.path.append(os.path.dirname(os.path.abspath(qarte.__file__))))
     app = QApplication(args)
-    from core import Core
+    from qarte.core import Core
     main = Core()
     sys.exit(app.exec_())

