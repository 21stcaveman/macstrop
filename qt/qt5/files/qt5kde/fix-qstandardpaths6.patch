diff --git qtbase/include/QtCore/QExtStandardPaths qtbase/include/QtCore/QExtStandardPaths
new file mode 100644
index 0000000000000000000000000000000000000000..21a9879ae833be9abe5ffd0aaafd549f6c9104f3
--- /dev/null
+++ qtbase/include/QtCore/QExtStandardPaths
@@ -0,0 +1 @@
+#include "qextstandardpaths.h"
diff --git src/corelib/io/io.pri src/corelib/io/io.pri
index 086d642c268a9e6d33d28103d7f8a42d9cf6b0de..bced601d5ca8fdc427c42344a8c95e6dd2be0fcb 100644
--- src/corelib/io/io.pri
+++ src/corelib/io/io.pri
@@ -26,6 +26,7 @@ HEADERS +=  \
         io/qresource_p.h \
         io/qresource_iterator_p.h \
         io/qsavefile.h \
+        io/qextstandardpaths.h \
         io/qstandardpaths.h \
         io/qstorageinfo.h \
         io/qstorageinfo_p.h \
diff --git src/corelib/io/qextstandardpaths.h src/corelib/io/qextstandardpaths.h
new file mode 100644
index 0000000000000000000000000000000000000000..87d29a6cecf2c2944374c21e76c2d9695e833fa0
--- /dev/null
+++ src/corelib/io/qextstandardpaths.h
@@ -0,0 +1,40 @@
+/****************************************************************************
+**
+** Copyright (C) 2016 Ren? J.V. Bertin
+** Contact: http://www.qt.io/licensing/
+**
+** This file is part of the QtCore module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see http://www.qt.io/terms-conditions. For further
+** information use the contact form at http://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** As a special exception, The Qt Company gives you certain additional
+** rights. These rights are described in The Qt Company LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QEXTSTANDARDPATHS_H
+#define QEXTSTANDARDPATHS_H
+
+#define QT_USE_EXTSTANDARDPATHS
+#include <QtCore/qstandardpaths.h>
+
+#endif // QEXTSTANDARDPATHS_H
diff --git src/corelib/io/qstandardpaths.cpp src/corelib/io/qstandardpaths.cpp
index dbf650d5f606c6caee49f1b1e0ba39049b6171a7..998d328977c1b852ca6587b3cd0d4123a1f8d480 100644
--- src/corelib/io/qstandardpaths.cpp
+++ src/corelib/io/qstandardpaths.cpp
@@ -38,8 +38,11 @@
 **
 ****************************************************************************/
 
+#undef QT_USE_EXTSTANDARDPATHS
+#define QSTANDARDPATHS_CPP
 #include "qstandardpaths.h"
 
+#include <qglobal.h>
 #include <qdir.h>
 #include <qfileinfo.h>
 
@@ -395,6 +398,67 @@ static bool existsAsSpecified(const QString &path, QStandardPaths::LocateOptions
     return QFileInfo(path).isFile();
 }
 
+bool QStandardPaths::usingALTLocations = false;
+bool QStandardPaths::isSetALTLocations = false;
+
+/*!
+    This function enables or disables alternative locations on platforms where Qt can be configured
+    to use this kind of locations instead of locations following OS guidelines.
+    Currently this concerns Mac OS X, Cygwin and MSYS2; on other platforms this function does nothing.
+ */
+void QStandardPaths::setALTLocationsEnabled(bool altMode)
+{
+#if defined(QSTANDARDPATHS_HAS_ALTERNATIVE_MODE)
+    usingALTLocations = altMode;
+    isSetALTLocations = true;
+#endif
+}
+
+/*!
+    This function returns true when alternative locations are used, unless QT_STANDARDPATHS_CANNOT_SWITCH
+    is set, in which case switching is disabled and the function always returns false.
+ */
+bool QStandardPaths::isALTLocationsEnabled()
+{
+#if defined(QSTANDARDPATHS_HAS_ALTERNATIVE_MODE)
+    if (qEnvironmentVariableIsSet("QT_STANDARDPATHS_CANNOT_SWITCH"))
+        return false;
+    else
+        return usingALTLocations;
+#else
+    return false;
+#endif // QSTANDARDPATHS_HAS_ALTERNATIVE_MODE
+}
+
+#if !defined(QSTANDARDPATHS_HAS_ALTERNATIVE_MODE)
+// wrapper for the actual implementation in a platform-specific file.
+
+QString QStandardPaths::writableLocation(StandardLocation type, bool altMode)
+{
+    return writableLocation(type);
+}
+#endif
+
+// #if defined(QSTANDARDPATHS_HAS_ALTERNATIVE_MODE)
+//     // deprecated versions with ALT argument, for temporary ABI compatibility
+//     QStringList QStandardPaths::standardLocations(StandardLocation type, bool altMode)
+//     {
+//         Q_UNUSED(altMode);
+//         return standardLocations(type);
+//     }
+// 
+//     QString QStandardPaths::locate(StandardLocation type, bool altMode, const QString &fileName, LocateOptions options)
+//     {
+//         Q_UNUSED(altMode);
+//         return locate(type, fileName, options);
+//     }
+//     QStringList QStandardPaths::locateAll(StandardLocation type, bool altMode, const QString &fileName, LocateOptions options)
+//     {
+//         Q_UNUSED(altMode);
+//         return locateAll(type, fileName, options);
+//     }
+// #endif
+
 /*!
    Tries to find a file or directory called \a fileName in the standard locations
    for \a type.
@@ -430,9 +494,34 @@ QStringList QStandardPaths::locateAll(StandardLocation type, const QString &file
         if (existsAsSpecified(path, options))
             result.append(path);
     }
+    //qDebug() << Q_FUNC_INFO << "search list=" << dirs;
     return result;
 }
 
+// #if defined(Q_OS_MACOS)
+// // deprecated versions using the XDG instead of ALT term
+// //#include <QDebug>
+// /*!
+//     Obsolete: This function enables or disables XDG locations on OS X where Qt can be configured
+//     to use this kind of locations instead of locations following OS guidelines.
+//     Currently this concerns only Mac OS X
+//  */
+// void QStandardPaths::setXDGLocationsEnabled(bool altMode)
+// {
+//     setALTLocationsEnabled(altMode);
+//     //qDebug() << Q_FUNC_INFO << "Setting usingALTLocations=" << altMode;
+// }
+// 
+// /*!
+//     This function returns true when XDG locations are used, unless QT_STANDARDPATHS_CANNOT_SWITCH
+//     is set, in which case switching is disabled and the function always returns false.
+//  */
+// bool QStandardPaths::isXDGLocationsEnabled()
+// {
+//     return isALTLocationsEnabled();
+// }
+// #endif // Q_OS_MACOS
+
 #ifdef Q_OS_WIN
 static QStringList executableExtensions()
 {
@@ -672,6 +761,36 @@ bool QStandardPaths::isTestModeEnabled()
     return qsp_testMode;
 }
 
+// // ######################### transitional code for the sake of existing binaries #########################
+// class Q_CORE_EXPORT QExtStandardPaths : public QStandardPaths
+// {
+// public:
+//     static QStringList standardLocations(StandardLocation type, bool altMode=QSPDEFAULTALTMODE);
+// 
+//     static QString locate(StandardLocation type, const QString &fileName, LocateOptions options = LocateFile, bool altMode=QSPDEFAULTALTMODE);
+//     static QStringList locateAll(StandardLocation type, const QString &fileName, LocateOptions options = LocateFile, bool altMode=QSPDEFAULTALTMODE);
+// 
+// };
+// 
+// QStringList QExtStandardPaths::standardLocations(StandardLocation type, bool altMode)
+// {
+//     Q_UNUSED(altMode);
+//     return QStandardPaths::standardLocations(type);
+// }
+// 
+// QString QExtStandardPaths::locate(StandardLocation type, const QString &fileName, LocateOptions options, bool altMode)
+// {
+//     Q_UNUSED(altMode);
+//     return QStandardPaths::locate(type, fileName, options);
+// }
+// 
+// QStringList QExtStandardPaths::locateAll(StandardLocation type, const QString &fileName, LocateOptions options, bool altMode)
+// {
+//     Q_UNUSED(altMode);
+//     return QStandardPaths::locateAll(type, fileName, options);
+// }
+// // ######################### ######################### #########################
+
 
 QT_END_NAMESPACE
 
diff --git src/corelib/io/qstandardpaths.h src/corelib/io/qstandardpaths.h
index df76d73eae271a572216c7be71dc7fcfc3cb563e..3393255aec1bbcc6d39c5e6dbf6c613ff2ce4b69 100644
--- src/corelib/io/qstandardpaths.h
+++ src/corelib/io/qstandardpaths.h
@@ -48,6 +48,11 @@ QT_BEGIN_NAMESPACE
 
 #ifndef QT_NO_STANDARDPATHS
 
+#if defined(Q_OS_MACOS) /* || defined(???) */
+// QStandardPaths provides an alternative mode on these platforms
+#define QSTANDARDPATHS_HAS_ALTERNATIVE_MODE
+#endif
+
 class Q_CORE_EXPORT QStandardPaths
 {
     Q_GADGET
@@ -78,6 +83,14 @@ public:
     };
     Q_ENUM(StandardLocation)
 
+    static void setALTLocationsEnabled(bool altMode);
+    static bool isALTLocationsEnabled();
+// #if defined(Q_OS_MACOS)
+//     // obsolete versions:
+//     static Q_DECL_DEPRECATED void setXDGLocationsEnabled(bool altMode);
+//     static Q_DECL_DEPRECATED bool isXDGLocationsEnabled();
+// #endif // Q_OS_MACOS
+
     static QString writableLocation(StandardLocation type);
     static QStringList standardLocations(StandardLocation type);
 
@@ -102,16 +115,95 @@ public:
     static void setTestModeEnabled(bool testMode);
     static bool isTestModeEnabled();
 
+protected:
+    static QString writableLocation(StandardLocation type, bool altMode);
+    static Q_DECL_DEPRECATED QStringList standardLocations(StandardLocation type, bool altMode);
+
+    static Q_DECL_DEPRECATED QString locate(StandardLocation type, bool altMode, const QString &fileName, LocateOptions options = LocateFile);
+    static Q_DECL_DEPRECATED QStringList locateAll(StandardLocation type, bool altMode, const QString &fileName, LocateOptions options = LocateFile);
+
 private:
     // prevent construction
     QStandardPaths();
     ~QStandardPaths();
+    static bool usingALTLocations, isSetALTLocations;
+
+    friend class QExtStandardPaths;
 };
 
 Q_DECLARE_OPERATORS_FOR_FLAGS(QStandardPaths::LocateOptions)
 
+/* **** Extended QStandardPaths **** */
+
+#ifdef QT_EXTSTANDARDPATHS_ALT_DEFAULT
+#if QT_EXTSTANDARDPATHS_ALT_DEFAULT == runtime
+#define QSPDEFAULTALTMODE  QStandardPaths::isALTLocationsEnabled()
+#else
+#define QSPDEFAULTALTMODE  QT_EXTSTANDARDPATHS_ALT_DEFAULT
+#endif // "runtime"
+#else
+#define QSPDEFAULTALTMODE  false
+#endif
+
+// obsolete version:
+#ifdef QT_EXTSTANDARDPATHS_XDG_DEFAULT
+#if QT_EXTSTANDARDPATHS_XDG_DEFAULT == runtime
+#undef QSPDEFAULTALTMODE
+#define QSPDEFAULTALTMODE  QStandardPaths::isALTLocationsEnabled()
+#else
+#undef QSPDEFAULTALTMODE
+#define QSPDEFAULTALTMODE  QT_EXTSTANDARDPATHS_XDG_DEFAULT
+#endif // "runtime"
+#endif
+
+// #ifndef QSTANDARDPATHS_CPP
+
+/*!
+    \class QExtStandardPaths
+    \inmodule QtCore
+    \brief The QExtStandardPaths class provides configurable methods for accessing standard paths.
+
+    This class inherits and elaborates on \class QStandardPaths, providing access to the support for
+    native vs. alternative (e.g. XDG-compliant) standard locations that QStandardPaths has on certain
+    platforms (currently Mac OS X, Cygwin and MSYS2).
+    When the QT_USE_EXTSTANDARDPATHS macro is defined, this class will replace QStandardPaths, and
+    in that case the QT_EXTSTANDARDPATHS_ALT_DEFAULT macro will define the behaviour of code that does
+    not use QExtStandardPaths explicitly itself. When undefined or QT_EXTSTANDARDPATHS_ALT_DEFAULT=false,
+    QExtStandardPaths will use native locations, even if QStandardPaths::isALTLocationsEnabled() returns true.
+    When QT_EXTSTANDARDPATHS_ALT_DEFAULT=runtime, behaviour is controlled at runtime through
+    QStandardPaths::setALTLocationsEnabled() and QStandardPaths::isALTLocationsEnabled().
+    In all other cases QStandardPaths will use alternative locations.
+*/
+class Q_CORE_EXPORT QExtStandardPaths : public QStandardPaths
+{
+public:
+    /*!
+        returns the default ALT mode as determined when the code was being compiled.
+    */
+    static bool getDefaultALTMode()
+    {
+        return QSPDEFAULTALTMODE;
+    }
+    static QString writableLocation(StandardLocation type, bool altMode=QSPDEFAULTALTMODE)
+    {
+        return QStandardPaths::writableLocation(type, altMode);
+    }
+
+private:
+    // prevent construction
+    QExtStandardPaths();
+    ~QExtStandardPaths();
+};
+
+// #endif // QSTANDARDPATHS_CPP
+
 #endif // QT_NO_STANDARDPATHS
 
 QT_END_NAMESPACE
 
+#ifdef QT_USE_EXTSTANDARDPATHS
+#define QStandardPaths  QExtStandardPaths
+#endif // QT_USE_EXTSTANDARDPATHS
+
+
 #endif // QSTANDARDPATHS_H
diff --git src/corelib/io/qstandardpaths_mac.mm src/corelib/io/qstandardpaths_mac.mm
index 11b5cc8c37cf3e5750e5ef549684a8d924aed6a4..c46ab866d3c5cd78a01fb5f1b33ec6aaa76a5016 100644
--- src/corelib/io/qstandardpaths_mac.mm
+++ src/corelib/io/qstandardpaths_mac.mm
@@ -37,6 +37,7 @@
 **
 ****************************************************************************/
 
+#undef QT_USE_EXTSTANDARDPATHS
 #include "qstandardpaths.h"
 
 #ifndef QT_NO_STANDARDPATHS
@@ -44,9 +45,11 @@
 #include <qdir.h>
 #include <qurl.h>
 #include <private/qcore_mac_p.h>
+#include <private/qfilesystemengine_p.h>
 
 #ifndef QT_BOOTSTRAPPED
 #include <qcoreapplication.h>
+#include <qlibraryinfo.h>
 #endif
 
 #import <Foundation/Foundation.h>
@@ -166,19 +169,217 @@ static QString baseWritableLocation(QStandardPaths::StandardLocation type,
     return path;
 }
 
-QString QStandardPaths::writableLocation(StandardLocation type)
+static void normaliseDirs(QStringList &dirs)
+{
+    // Normalise paths, skip relative paths
+    QMutableListIterator<QString> it(dirs);
+    while (it.hasNext()) {
+        const QString dir = it.next();
+        if (!dir.startsWith(QLatin1Char('/')))
+            it.remove();
+        else
+            it.setValue(QDir::cleanPath(dir));
+    }
+
+    // Remove duplicates from the list, there's no use for duplicated
+    // paths in XDG_CONFIG_DIRS - if it's not found in the given
+    // directory the first time, it won't be there the second time.
+    // Plus duplicate paths causes problems for example for mimetypes,
+    // where duplicate paths here lead to duplicated mime types returned
+    // for a file, eg "text/plain,text/plain" instead of "text/plain"
+    dirs.removeDuplicates();
+}
+
+static QStringList xdgCacheDirs()
+{
+    QStringList dirs;
+    // http://standards.freedesktop.org/basedir-spec/latest/
+    QString xdgConfigDirsEnv = QFile::decodeName(qgetenv("XDG_CACHE_HOME"));
+    if (xdgConfigDirsEnv.isEmpty()) {
+#ifndef QT_BOOTSTRAPPED
+        dirs.append(QDir::homePath() + QString::fromLatin1("/.cache"));
+#endif
+    } else {
+        dirs = xdgConfigDirsEnv.split(QLatin1Char(':'), QString::SkipEmptyParts);
+
+        normaliseDirs(dirs);
+    }
+    return dirs;
+}
+
+static QStringList xdgConfigDirs()
+{
+    QStringList dirs;
+    // http://standards.freedesktop.org/basedir-spec/latest/
+    QString xdgConfigDirsEnv = QFile::decodeName(qgetenv("XDG_CONFIG_DIRS"));
+    if (xdgConfigDirsEnv.isEmpty()) {
+#ifndef QT_BOOTSTRAPPED
+        dirs.append(QLibraryInfo::location(QLibraryInfo::PrefixPath) + QString::fromLatin1("/etc/xdg"));
+#endif
+    } else {
+        dirs = xdgConfigDirsEnv.split(QLatin1Char(':'), QString::SkipEmptyParts);
+
+        normaliseDirs(dirs);
+    }
+    return dirs;
+}
+
+static QStringList xdgDataDirs()
+{
+    QStringList dirs;
+    // http://standards.freedesktop.org/basedir-spec/latest/
+    QString xdgDataDirsEnv = QFile::decodeName(qgetenv("XDG_DATA_DIRS"));
+    if (xdgDataDirsEnv.isEmpty()) {
+#ifndef QT_BOOTSTRAPPED
+        dirs.append(QLibraryInfo::location(QLibraryInfo::PrefixPath) + QString::fromLatin1("/share"));
+#endif
+    } else {
+        dirs = xdgDataDirsEnv.split(QLatin1Char(':'), QString::SkipEmptyParts);
+
+        normaliseDirs(dirs);
+    }
+    return dirs;
+}
+
+static QString xdgRuntimeDir()
+{
+    const uid_t myUid = geteuid();
+    // http://standards.freedesktop.org/basedir-spec/latest/
+    QString xdgRTDir = QFile::decodeName(qgetenv("XDG_RUNTIME_DIR"));
+    if (xdgRTDir.isEmpty()) {
+        const QString userName = QFileSystemEngine::resolveUserName(myUid);
+        // NSTemporaryDirectory() returns the default $TMPDIR value, regardless of its current setting,
+        // which is more in line with XDG_RUNTIME_DIR requirements.
+        xdgRTDir = QString::fromNSString(NSTemporaryDirectory()) + QLatin1String("runtime-") + userName;
+        QDir dir(xdgRTDir);
+        if (!dir.exists()) {
+            if (!QDir().mkdir(xdgRTDir)) {
+                qWarning("QStandardPaths: error creating runtime directory %s: %s",
+                         qPrintable(xdgRTDir), qPrintable(qt_error_string(errno)));
+                return QString();
+            }
+        }
+    } else {
+        qWarning("QStandardPaths: XDG_RUNTIME_DIR is set, using '%s'", qPrintable(xdgRTDir));
+    }
+    // "The directory MUST be owned by the user"
+    QFileInfo fileInfo(xdgRTDir);
+    if (fileInfo.ownerId() != myUid) {
+        qWarning("QStandardPaths: wrong ownership on runtime directory %s, %d instead of %d", qPrintable(xdgRTDir),
+                 fileInfo.ownerId(), myUid);
+        return QString();
+    }
+    // "and he MUST be the only one having read and write access to it. Its Unix access mode MUST be 0700."
+    // since the current user is the owner, set both xxxUser and xxxOwner
+    QFile file(xdgRTDir);
+    const QFile::Permissions wantedPerms = QFile::ReadUser | QFile::WriteUser | QFile::ExeUser
+                                           | QFile::ReadOwner | QFile::WriteOwner | QFile::ExeOwner;
+    if (file.permissions() != wantedPerms && !file.setPermissions(wantedPerms)) {
+        qWarning("QStandardPaths: could not set correct permissions on runtime directory %s: %s",
+                 qPrintable(xdgRTDir), qPrintable(file.errorString()));
+        return QString();
+    }
+    return xdgRTDir;
+}
+
+QString QStandardPaths::writableLocation(StandardLocation type, bool altMode)
 {
-    QString location = baseWritableLocation(type, NSUserDomainMask, true);
-    if (isTestModeEnabled())
-        location = location.replace(QDir::homePath(), QDir::homePath() + QLatin1String("/.qttest"));
+    if (altMode) {
+        const QString prefix = (isTestModeEnabled())? QDir::homePath() + QLatin1String("/.qttest") : QDir::homePath();
+        QString path;
+        switch (type) {
+        case GenericDataLocation:
+        case AppDataLocation:
+        case AppLocalDataLocation:
+            path = prefix + QLatin1String("/.local/share");
+            if (type != GenericDataLocation)
+                appendOrganizationAndApp(path);
+            return path;
+        case GenericCacheLocation:
+        case CacheLocation:
+            path = prefix + QLatin1String("/.cache");
+            if (type == CacheLocation)
+                appendOrganizationAndApp(path);
+            return path;
+        case GenericConfigLocation:
+        case ConfigLocation:
+            return prefix + QLatin1String("/.config");
+        case ApplicationsLocation:
+            path = writableLocation(GenericDataLocation, altMode) + QLatin1String("/applications");
+            return path;
+        case RuntimeLocation:
+            return xdgRuntimeDir();
+        default:
+            break;
+        }
+    }
+
+    if (isTestModeEnabled()) {
+        const QString qttestDir = QDir::homePath() + QLatin1String("/.qttest");
+        QString path;
+        switch (type) {
+        case GenericDataLocation:
+        case AppDataLocation:
+        case AppLocalDataLocation:
+            path = qttestDir + QLatin1String("/Application Support");
+            if (type != GenericDataLocation)
+                appendOrganizationAndApp(path);
+            return path;
+        case GenericCacheLocation:
+        case CacheLocation:
+            path = qttestDir + QLatin1String("/Cache");
+            if (type == CacheLocation)
+                appendOrganizationAndApp(path);
+            return path;
+        case GenericConfigLocation:
+        case ConfigLocation:
+        case AppConfigLocation:
+            path = qttestDir + QLatin1String("/Preferences");
+            if (type == AppConfigLocation)
+                appendOrganizationAndApp(path);
+            return path;
+        case ApplicationsLocation:
+            path = qttestDir + QLatin1String("/Applications");
+            return path;
+        default:
+            break;
+        }
+    }
+
+    return baseWritableLocation(type, NSUserDomainMask, true);
+}
 
-    return location;
+QString QStandardPaths::writableLocation(StandardLocation type)
+{
+    return QStandardPaths::writableLocation(type, isALTLocationsEnabled());
 }
 
 QStringList QStandardPaths::standardLocations(StandardLocation type)
 {
     QStringList dirs;
 
+    // always support the alternative mode for the readable locations.
+
+    switch (type) {
+    case GenericDataLocation:
+        dirs.append(xdgDataDirs());
+        break;
+    case GenericConfigLocation:
+    case ConfigLocation:
+        dirs.append(xdgConfigDirs());
+        break;
+    case GenericCacheLocation:
+    case CacheLocation:
+        dirs.append(xdgCacheDirs());
+        break;
+    case ApplicationsLocation:
+        QStringList xdgDirs = xdgDataDirs();
+        for (int i = 0; i < xdgDirs.count(); ++i)
+            xdgDirs[i].append(QLatin1String("/applications"));
+        dirs.append(xdgDirs);
+        break;
+    }
+
 #if defined(QT_PLATFORM_UIKIT)
     if (type == PicturesLocation)
         dirs << writableLocation(PicturesLocation) << QLatin1String("assets-library://");
@@ -201,6 +402,13 @@ QStringList QStandardPaths::standardLocations(StandardLocation type)
     }
 
     if (type == AppDataLocation || type == AppLocalDataLocation) {
+        // additional locations for alternative mode:
+        QStringList xdgDirs = xdgDataDirs();
+        for (int i = 0; i < xdgDirs.count(); ++i) {
+            appendOrganizationAndApp(xdgDirs[i]);
+        }
+        dirs.append(xdgDirs);
+
         CFBundleRef mainBundle = CFBundleGetMainBundle();
         if (mainBundle) {
             if (QCFType<CFURLRef> resourcesURL = CFBundleCopyResourcesDirectoryURL(mainBundle)) {
@@ -214,9 +422,15 @@ QStringList QStandardPaths::standardLocations(StandardLocation type)
         }
     }
 
-    const QString localDir = writableLocation(type);
-    if (!localDir.isEmpty())
+    const QString localDir = writableLocation(type, false);
+    const QString localAltDir = writableLocation(type, true);
+    // FIXME: do we need to handle FontsLocation here too as in Qt <=5.6?
+    if (!localDir.isEmpty()) {
         dirs.prepend(localDir);
+        if (localAltDir != localDir) {
+            dirs.prepend(localAltDir);
+        }
+    }
     return dirs;
 }
 
