diff --git src/corelib/kernel/qobject.cpp src/corelib/kernel/qobject.cpp
index d685eaf27f294d6c973be81f35a433e49fbcddb8..8c76e464c968c9ebf48a53b4921c7ab8aaeb1214 100644
--- src/corelib/kernel/qobject.cpp
+++ src/corelib/kernel/qobject.cpp
@@ -4030,7 +4030,7 @@ static void dumpRecursive(int level, const QObject *object)
             }
         }
 #endif
-        qDebug("%s%s::%s %s", (const char*)buf, object->metaObject()->className(), name.toLocal8Bit().data(),
+        qInfo("%s%s::%s %s", (const char*)buf, object->metaObject()->className(), name.toLocal8Bit().data(),
                flags.toLatin1().data());
         QObjectList children = object->children();
         if (!children.isEmpty()) {
@@ -4093,37 +4093,37 @@ void QObject::dumpObjectInfo()
 
 void QObject::dumpObjectInfo() const
 {
-    qDebug("OBJECT %s::%s", metaObject()->className(),
+    qInfo("OBJECT %s::%s", metaObject()->className(),
            objectName().isEmpty() ? "unnamed" : objectName().toLocal8Bit().data());
 
     Q_D(const QObject);
     QMutexLocker locker(signalSlotLock(this));
 
     // first, look for connections where this object is the sender
-    qDebug("  SIGNALS OUT");
+    qInfo("  SIGNALS OUT");
 
     if (d->connectionLists) {
         for (int signal_index = 0; signal_index < d->connectionLists->count(); ++signal_index) {
             const QMetaMethod signal = QMetaObjectPrivate::signal(metaObject(), signal_index);
-            qDebug("        signal: %s", signal.methodSignature().constData());
+            qInfo("        signal: %s", signal.methodSignature().constData());
 
             // receivers
             const QObjectPrivate::Connection *c =
                 d->connectionLists->at(signal_index).first;
             while (c) {
                 if (!c->receiver) {
-                    qDebug("          <Disconnected receiver>");
+                    qInfo("          <Disconnected receiver>");
                     c = c->nextConnectionList;
                     continue;
                 }
                 if (c->isSlotObject) {
-                    qDebug("          <functor or function pointer>");
+                    qInfo("          <functor or function pointer>");
                     c = c->nextConnectionList;
                     continue;
                 }
                 const QMetaObject *receiverMetaObject = c->receiver->metaObject();
                 const QMetaMethod method = receiverMetaObject->method(c->method());
-                qDebug("          --> %s::%s %s",
+                qInfo("          --> %s::%s %s",
                        receiverMetaObject->className(),
                        c->receiver->objectName().isEmpty() ? "unnamed" : qPrintable(c->receiver->objectName()),
                        method.methodSignature().constData());
@@ -4131,11 +4131,11 @@ void QObject::dumpObjectInfo() const
             }
         }
     } else {
-        qDebug( "        <None>" );
+        qInfo( "        <None>" );
     }
 
     // now look for connections where this object is the receiver
-    qDebug("  SIGNALS IN");
+    qInfo("  SIGNALS IN");
 
     if (d->senders) {
         for (QObjectPrivate::Connection *s = d->senders; s; s = s->next) {
@@ -4144,13 +4144,13 @@ void QObject::dumpObjectInfo() const
                 const QMetaMethod slot = metaObject()->method(s->method());
                 slotName = slot.methodSignature();
             }
-            qDebug("          <-- %s::%s %s",
+            qInfo("          <-- %s::%s %s",
                    s->sender->metaObject()->className(),
                    s->sender->objectName().isEmpty() ? "unnamed" : qPrintable(s->sender->objectName()),
                    slotName.constData());
         }
     } else {
-        qDebug("        <None>");
+        qInfo("        <None>");
     }
 }
 
