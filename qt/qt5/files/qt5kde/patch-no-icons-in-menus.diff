diff --git src/corelib/kernel/qcoreapplication.cpp src/corelib/kernel/qcoreapplication.cpp
index db6546028a85a7a76e34b130d553a333a537af69..61c3e24dc29269bc4fc1ba25e6acf3f2be573f57 100644
--- src/corelib/kernel/qcoreapplication.cpp
+++ src/corelib/kernel/qcoreapplication.cpp
@@ -374,9 +374,16 @@ QAbstractEventDispatcher *QCoreApplicationPrivate::eventDispatcher = 0;
 #endif // QT_NO_QOBJECT
 
 QCoreApplication *QCoreApplication::self = 0;
+#ifdef Q_OS_MACOS
+uint QCoreApplicationPrivate::attribs =
+    (1 << Qt::AA_SynthesizeMouseForUnhandledTouchEvents) |
+    (1 << Qt::AA_SynthesizeMouseForUnhandledTabletEvents) |
+    (1 << Qt::AA_DontShowIconsInMenus);
+#else
 uint QCoreApplicationPrivate::attribs =
     (1 << Qt::AA_SynthesizeMouseForUnhandledTouchEvents) |
     (1 << Qt::AA_SynthesizeMouseForUnhandledTabletEvents);
+#endif
 
 struct QCoreApplicationData {
     QCoreApplicationData() Q_DECL_NOTHROW {
diff --git src/plugins/styles/mac/qmacstyle_mac.mm src/plugins/styles/mac/qmacstyle_mac.mm
index 0e26b4ab78c327ed2873a057b7f7092962322df1..57e42976a00c68c3cb784813ee8099b83e79cbd2 100644
--- src/plugins/styles/mac/qmacstyle_mac.mm
+++ src/plugins/styles/mac/qmacstyle_mac.mm
@@ -951,7 +951,8 @@ static QSize qt_aqua_get_known_size(QStyle::ContentsType ct, const QWidget *widg
             else if (sz == QStyleHelper::SizeMini)
                 ret = QSize(-1, qt_mac_aqua_get_metric(MiniPushButtonHeight));
 
-            if (!psh->icon().isNull()){
+            bool showIcon = !psh->text().isEmpty() || widg->style()->proxy()->styleHint(QCommonStyle::SH_DialogButtonBox_ButtonsHaveIcons);
+            if (showIcon && !psh->icon().isNull()) {
                 // If the button got an icon, and the icon is larger than the
                 // button, we can't decide on a default size
                 ret.setWidth(-1);
@@ -3764,8 +3765,10 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
             // the windows style works great, so just use that implementation.
             const bool isEnabled = btn.state & State_Enabled;
             const bool hasMenu = btn.features & QStyleOptionButton::HasMenu;
+            // do we have icon AND should it show?
             const bool hasIcon = !btn.icon.isNull();
             const bool hasText = !btn.text.isEmpty();
+            bool showIcon = hasIcon && (!hasText || proxy()->styleHint(SH_DialogButtonBox_ButtonsHaveIcons));
             const bool isActive = btn.state & State_Active;
             const bool isPressed = btn.state & State_Sunken;
 
@@ -3780,7 +3783,7 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
                 btn.palette.setColor(QPalette::ButtonText, Qt::white);
             }
 
-            if ((!hasIcon && !hasMenu) || (hasIcon && !hasText)) {
+            if ((!hasIcon && !hasMenu) || (hasIcon && showIcon && !hasText)) {
                 QCommonStyle::drawControl(ce, &btn, p, w);
             } else {
                 QRect freeContentRect = btn.rect;
@@ -3790,7 +3793,7 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
                     textRect.moveTo(w ? 15 : 11, textRect.top()); // Supports Qt Quick Controls
                 }
                 // Draw the icon:
-                if (hasIcon) {
+                if (hasIcon && showIcon) {
                     int contentW = textRect.width();
                     if (hasMenu)
                         contentW += proxy()->pixelMetric(PM_MenuButtonIndicator) + 4;
