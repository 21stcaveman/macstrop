diff --git CMakeLists.txt CMakeLists.txt
index b86f0eee742e30a4355dfe9a52011404f0f2b6fa..d08e3bfd1daff0c11c59adf04ff8d96988879c04 100644
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -38,7 +38,12 @@ option(WITH_GUI_TESTS "Enable building of GUI tests" OFF)
 option(WITH_DEV_BUILD "Use only for development. Disables/warns about deprecated methods." OFF)
 option(WITH_ASAN "Enable address sanitizer checks (Linux / macOS only)" OFF)
 option(WITH_COVERAGE "Use to build with coverage tests (GCC only)." OFF)
-option(WITH_APP_BUNDLE "Enable Application Bundle for macOS" ON)
+option(WITH_APP_BUNDLE "Enable Application Bundle for Mac" ON)
+if(NOT WITH_APP_BUNDLE)
+  option(WITH_STANDALONE_APP_BUNDLE "Mac application bundles are self-contained and relocatable" OFF)
+else()
+  option(WITH_STANDALONE_APP_BUNDLE "Mac application bundles are self-contained and relocatable" ON)
+endif()
 
 option(WITH_XC_AUTOTYPE "Include Auto-Type." ON)
 option(WITH_XC_HTTP "Include KeePassHTTP and Custom Icon Downloads." OFF)
@@ -94,6 +99,9 @@ add_definitions(-DQT_NO_EXCEPTIONS -DQT_STRICT_ITERATORS -DQT_NO_CAST_TO_ASCII)
 
 if(WITH_APP_BUNDLE)
   add_definitions(-DWITH_APP_BUNDLE)
+  if(WITH_STANDALONE_APP_BUNDLE)
+    add_definitions(-DWITH_STANDALONE_APP_BUNDLE)
+  endif()
 endif()
 
 add_gcc_compiler_flags("-fno-common")
@@ -193,9 +201,8 @@ else()
   set(PROGNAME keepassxc)
 endif()
 
-if(APPLE AND WITH_APP_BUNDLE AND "${CMAKE_INSTALL_PREFIX}" STREQUAL "/usr/local")
-  set(CMAKE_INSTALL_PREFIX "/Applications")
-  set(CMAKE_INSTALL_MANDIR "/usr/local/share/man")
+if(APPLE)
+  set(CMAKE_INSTALL_MANDIR "@PREFIX@/share/man")
 endif()
 
 if(MINGW)
@@ -203,8 +210,8 @@ if(MINGW)
   set(BIN_INSTALL_DIR    ".")
   set(PLUGIN_INSTALL_DIR ".")
   set(DATA_INSTALL_DIR   "share")
-elseif(APPLE AND WITH_APP_BUNDLE)
-  set(CLI_INSTALL_DIR    "/usr/local/bin")
+elseif(APPLE AND WITH_STANDALONE_APP_BUNDLE)
+  set(CLI_INSTALL_DIR    "@PREFIX@/bin")
   set(BIN_INSTALL_DIR    ".")
   set(PLUGIN_INSTALL_DIR "${PROGNAME}.app/Contents/PlugIns")
   set(DATA_INSTALL_DIR   "${PROGNAME}.app/Contents/Resources")
@@ -244,7 +251,7 @@ set(CMAKE_AUTORCC ON)
 
 if(APPLE)
   set(CMAKE_MACOSX_RPATH TRUE)
-  find_program(MACDEPLOYQT_EXE macdeployqt HINTS /usr/local/opt/qt5/bin ENV PATH)
+  find_program(MACDEPLOYQT_EXE macdeployqt HINTS @QT_BINS_DIR@ ENV PATH)
   if(NOT MACDEPLOYQT_EXE)
     message(FATAL_ERROR "macdeployqt is required to build in macOS")
   else()
diff --git src/CMakeLists.txt src/CMakeLists.txt
index 092a2102d5b288cfb38bbb76e537645c537e045f..506b247ad8a908418f2bc1c6f9617025dfdd1c6b 100644
--- src/CMakeLists.txt
+++ src/CMakeLists.txt
@@ -280,19 +280,21 @@ if(APPLE AND WITH_APP_BUNDLE)
             DESTINATION "${DATA_INSTALL_DIR}")
   endif()
 
-  set(CPACK_GENERATOR "DragNDrop")
-  set(CPACK_DMG_FORMAT "UDBZ")
-  set(CPACK_DMG_VOLUME_NAME "${PROGNAME}")
-  set(CPACK_SYSTEM_NAME "OSX")
-  set(CPACK_STRIP_FILES ON)
-  set(CPACK_PACKAGE_FILE_NAME "${PROGNAME}-${KEEPASSXC_VERSION}")
-  include(CPack)
-
-  add_custom_command(TARGET ${PROGNAME}
-                     POST_BUILD
-                     COMMAND ${MACDEPLOYQT_EXE} ${PROGNAME}.app
-                     WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/src
-                     COMMENT "Deploying app bundle")
+  if(WITH_STANDALONE_APP_BUNDLE)
+    set(CPACK_GENERATOR "DragNDrop")
+    set(CPACK_DMG_FORMAT "UDBZ")
+    set(CPACK_DMG_VOLUME_NAME "${PROGNAME}")
+    set(CPACK_SYSTEM_NAME "OSX")
+    set(CPACK_STRIP_FILES ON)
+    set(CPACK_PACKAGE_FILE_NAME "${PROGNAME}-${KEEPASSXC_VERSION}")
+    include(CPack)
+
+    add_custom_command(TARGET ${PROGNAME}
+                       POST_BUILD
+                       COMMAND ${MACDEPLOYQT_EXE} ${PROGNAME}.app
+                       WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/src
+                       COMMENT "Deploying app bundle")
+  endif()
 endif()
 
 install(TARGETS ${PROGNAME}
diff --git src/autotype/mac/CMakeLists.txt src/autotype/mac/CMakeLists.txt
index 08c5327847968ed45b2ec958c8250b4dcb6186b2..f6a9a468ee90c850b4a627b369e07cd087e5f5db 100644
--- src/autotype/mac/CMakeLists.txt
+++ src/autotype/mac/CMakeLists.txt
@@ -10,7 +10,7 @@ add_library(keepassx-autotype-cocoa MODULE ${autotype_mac_SOURCES} ${autotype_ma
 set_target_properties(keepassx-autotype-cocoa PROPERTIES LINK_FLAGS "-framework Foundation -framework AppKit -framework Carbon")
 target_link_libraries(keepassx-autotype-cocoa ${PROGNAME} Qt5::Core Qt5::Widgets)
 
-if(WITH_APP_BUNDLE)
+if(WITH_STANDALONE_APP_BUNDLE)
   add_custom_command(TARGET keepassx-autotype-cocoa
                      POST_BUILD
                      COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/libkeepassx-autotype-cocoa.so ${PLUGIN_INSTALL_DIR}
diff --git src/core/FilePath.cpp src/core/FilePath.cpp
index b5c9d102082586ed7f760f2e4228cbe035b76c5a..7abaa53b1f929c33491212d72de95136954c9f1e 100644
--- src/core/FilePath.cpp
+++ src/core/FilePath.cpp
@@ -49,7 +49,7 @@ QString FilePath::pluginPath(const QString& name)
     // for TestAutoType
     pluginPaths << QCoreApplication::applicationDirPath() + "/../src/autotype/test";
 
-#if defined(Q_OS_MAC) && defined(WITH_APP_BUNDLE)
+#if defined(Q_OS_MAC) && defined(WITH_STANDALONE_APP_BUNDLE)
     pluginPaths << QCoreApplication::applicationDirPath() + "/../PlugIns";
 #endif
 
@@ -207,7 +207,7 @@ FilePath::FilePath()
     else if (testSetDir(QString(KEEPASSX_SOURCE_DIR) + "/share")) {
     }
 #endif
-#if defined(Q_OS_UNIX) && !(defined(Q_OS_MAC) && defined(WITH_APP_BUNDLE))
+#if defined(Q_OS_UNIX) && !(defined(Q_OS_MAC) && defined(WITH_STANDALONE_APP_BUNDLE))
     else if (isDataDirAbsolute && testSetDir(KEEPASSX_DATA_DIR)) {
     }
     else if (!isDataDirAbsolute && testSetDir(QString("%1/../%2").arg(appDirPath, KEEPASSX_DATA_DIR))) {
@@ -215,7 +215,7 @@ FilePath::FilePath()
     else if (!isDataDirAbsolute && testSetDir(QString("%1/%2").arg(KEEPASSX_PREFIX_DIR, KEEPASSX_DATA_DIR))) {
     }
 #endif
-#if defined(Q_OS_MAC) && defined(WITH_APP_BUNDLE)
+#if defined(Q_OS_MAC) && defined(WITH_STANDALONE_APP_BUNDLE)
     else if (testSetDir(appDirPath + "/../Resources")) {
     }
 #endif
