diff --git a/src/macports1.0/macports.tcl b/src/macports1.0/macports.tcl
index 06be64a6..5d90320c 100644
--- a/src/macports1.0/macports.tcl
+++ b/src/macports1.0/macports.tcl
@@ -664,12 +664,15 @@ proc mportinit {{up_ui_options {}} {up_options {}} {up_variations {}}} {
         macports::ui_init $priority
     }
 
+    global tcl_platform
     package require Pextlib 1.0
     package require registry 1.0
     package require registry2 2.0
-    package require machista 1.0
+    if {[string tolower $tcl_platform(os)] eq "darwin"} {
+        package require machista 1.0
+    }
 
-    global auto_path env tcl_platform \
+    global auto_path env \
         macports::autoconf::macports_conf_path \
         macports::macports_user_dir \
         macports::bootstrap_options \
@@ -725,12 +728,23 @@ proc mportinit {{up_ui_options {}} {up_options {}} {up_variations {}}} {
 
     # set up platform info variables
     set os_arch $tcl_platform(machine)
+    set os_platform [string tolower $tcl_platform(os)]
     if {$os_arch eq "Power Macintosh"} {set os_arch "powerpc"}
-    if {$os_arch eq "i586" || $os_arch eq "i686" || $os_arch eq "x86_64"} {set os_arch "i386"}
+    # on Linux we either need to leave os_arch set to x86_64, or set build_arch to x86_64 in macports.conf
+    if {${os_platform} eq "linux"} {
+        if {$os_arch eq {i586} || $os_arch eq {i686}} {set os_arch "i386"}
+    } else {
+        if {$os_arch eq "i586" || $os_arch eq "i686" || $os_arch eq "x86_64"} {set os_arch "i386"}
+    }
     set os_version $tcl_platform(osVersion)
     set os_major [lindex [split $os_version .] 0]
+    if {${os_platform} eq "linux" && (${os_major} > 3) } {
+        # RJVB : on Linux, 2.x kernels may need special treatment, but booting
+        # a 3.x or 4.x kernel (or later, presumably) doesn't make enough difference
+        # for the userland to justify upgrading all ports.
+        set os_major 3
+    }
     set os_minor [lindex [split $os_version .] 1]
-    set os_platform [string tolower $tcl_platform(os)]
     # Remove trailing "Endian"
     set os_endian [string range $tcl_platform(byteOrder) 0 end-6]
     set os_subplatform {}
@@ -753,7 +767,7 @@ proc mportinit {{up_ui_options {}} {up_options {}} {up_variations {}}} {
     }
 
     # Check that the current platform is the one we were configured for, otherwise need to do migration
-    if {($os_platform ne $macports::autoconf::os_platform) || ($os_major != $macports::autoconf::os_major)} {
+    if {($os_platform ne $macports::autoconf::os_platform) || (($os_major != $macports::autoconf::os_major) && $os_platform ne "linux")} {
         ui_error "Current platform \"$os_platform $os_major\" does not match expected platform \"$macports::autoconf::os_platform $macports::autoconf::os_major\""
         ui_error "If you upgraded your OS, please follow the migration instructions: https://trac.macports.org/wiki/Migration"
         return -code error "OS platform mismatch"
@@ -3942,7 +3956,13 @@ proc macports::_upgrade {portname dspec variationslist optionslist {depscachenam
     }
     set requestedflag [registry::property_retrieve $regref requested]
     set os_platform_installed [registry::property_retrieve $regref os_platform]
-    set os_major_installed [registry::property_retrieve $regref os_major]
+    if {$macports::os_platform eq "darwin"} {
+        set os_major_installed [registry::property_retrieve $regref os_major]
+    } else {
+        # esp. on Linux there's no point in looking at the kernel version
+	   global macports::os_major
+        set os_major_installed ${macports::os_major}
+    }
 
     # Before we do
     # dependencies, we need to figure out the final variants,
@@ -4790,6 +4810,7 @@ proc macports::revupgrade_update_cxx_stdlib {fancy_output {revupgrade_progress "
 # @return 1 if ports were rebuilt and this function should be called again,
 #         0 otherwise.
 proc macports::revupgrade_scanandrebuild {broken_port_counts_name opts} {
+    global macports::os_platform
     upvar $broken_port_counts_name broken_port_counts
     array set options $opts
 
@@ -4807,7 +4828,7 @@ proc macports::revupgrade_scanandrebuild {broken_port_counts_name opts} {
     set broken_files {}
     set binaries [registry::file search active 1 binary 1]
     set binary_count [llength $binaries]
-    if {$binary_count > 0} {
+    if {$binary_count > 0 && $macports::os_platform eq "darwin"} {
         ui_msg "$macports::ui_prefix Scanning binaries for linking errors"
         set handle [machista::create_handle]
         if {$handle eq "NULL"} {
