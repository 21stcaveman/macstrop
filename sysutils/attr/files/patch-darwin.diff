diff --git a/libattr/attr_copy_fd.c b/libattr/attr_copy_fd.c
index 34c617f515d8a4bd3b0f882c4c0bc9aa2ab69b6b..885f3df81235f1e239ed431929108f0372bd714d 100644
--- a/libattr/attr_copy_fd.c
+++ b/libattr/attr_copy_fd.c
@@ -51,6 +51,13 @@
 # define my_free(ptr) free (ptr)
 #endif
 
+#ifdef __APPLE__
+    #define fgetxattr(fd,n,v,s)     fgetxattr((fd),(n),(v),(s),0,XATTR_SHOWCOMPRESSION)
+    #define fsetxattr(fd,n,v,s,f)   fsetxattr((fd),(n),(v),(s),0,(f)|XATTR_SHOWCOMPRESSION)
+    #define fremovexattr(fd,n)      fremovexattr((fd),(n),XATTR_SHOWCOMPRESSION)
+    #define flistxattr(fd,l,s)      flistxattr((fd),(l),(s),XATTR_SHOWCOMPRESSION)
+#endif
+
 /* Copy extended attributes from src_path to dst_path. If the file
    has an extended Access ACL (system.posix_acl_access) and that is
    copied successfully, the file mode permission bits are copied as
@@ -136,7 +143,8 @@ attr_copy_fd(const char *src_path, int src_fd,
 			ret = -1;
 			continue;
 		}
-		if (fsetxattr (dst_fd, name, value, size, 0) != 0) {
+		if (fsetxattr (dst_fd, name, value, size, 0) != 0)
+        {
 			if (errno == ENOTSUP)
 				setxattr_ENOTSUP++;
 			else {
diff --git a/libattr/attr_copy_file.c b/libattr/attr_copy_file.c
index 3e08a21c86c59a5bf3f4e1e83408a73d19702283..8c8ffe2344ce2a630075360e978af544259ef555 100644
--- a/libattr/attr_copy_file.c
+++ b/libattr/attr_copy_file.c
@@ -51,6 +51,25 @@
 # define my_free(ptr) free (ptr)
 #endif
 
+#ifdef __APPLE__
+    static ssize_t lgetxattr(const char *path, const char *name, void *value, size_t size)
+    {
+        return getxattr(path, name, value, size, 0, XATTR_SHOWCOMPRESSION|XATTR_NOFOLLOW);
+    }
+    static int lsetxattr (const char *path, const char *name, const void *value, size_t size, int flags)
+    {
+        return setxattr(path, name, value, size, 0, flags|XATTR_SHOWCOMPRESSION|XATTR_NOFOLLOW);
+    }
+    static int lremovexattr (const char *path, const char *name)
+    {
+        return removexattr(path, name, XATTR_SHOWCOMPRESSION|XATTR_NOFOLLOW);
+    }
+    static ssize_t llistxattr(const char *path, char *list, size_t size)
+    {
+        return listxattr(path, list, size, XATTR_SHOWCOMPRESSION|XATTR_NOFOLLOW);
+    }
+#endif
+
 /* Copy extended attributes from src_path to dst_path. If the file
    has an extended Access ACL (system.posix_acl_access) and that is
    copied successfully, the file mode permission bits are copied as
diff --git a/libattr/libattr.c b/libattr/libattr.c
index d550e10ae4e45c2f47fd97c000af0b9f32551c4b..a196ed439b476bdfa62d7a79886433ec04f0e313 100644
--- a/libattr/libattr.c
+++ b/libattr/libattr.c
@@ -44,6 +44,40 @@ static const char *secure_name = "security.";
 static const char *trusted_name = "trusted.";
 static const char *xfsroot_name = "xfsroot.";
 
+#ifdef __APPLE__
+    static ssize_t lgetxattr(const char *path, const char *name, void *value, size_t size)
+    {
+        return getxattr(path, name, value, size, 0, XATTR_SHOWCOMPRESSION|XATTR_NOFOLLOW);
+    }
+    static ssize_t _getxattr(const char *path, const char *name, void *value, size_t size)
+    {
+        return getxattr(path, name, value, size, 0, XATTR_SHOWCOMPRESSION);
+    }
+    static int lsetxattr (const char *path, const char *name, const void *value, size_t size, int flags)
+    {
+        return setxattr(path, name, value, size, 0, flags|XATTR_SHOWCOMPRESSION|XATTR_NOFOLLOW);
+    }
+    static int lremovexattr (const char *path, const char *name)
+    {
+        return removexattr(path, name, XATTR_SHOWCOMPRESSION|XATTR_NOFOLLOW);
+    }
+    static ssize_t llistxattr(const char *path, char *list, size_t size)
+    {
+        return listxattr(path, list, size, XATTR_SHOWCOMPRESSION|XATTR_NOFOLLOW);
+    }
+
+    #define fgetxattr(fd,n,v,s)     fgetxattr((fd),(n),(v),(s),0,XATTR_SHOWCOMPRESSION)
+    #define getxattr(p,n,v,s)       _getxattr((p),(n),(v),(s))
+    #define fsetxattr(fd,n,v,s,f)   fsetxattr((fd),(n),(v),(s),0,(f)|XATTR_SHOWCOMPRESSION)
+    #define setxattr(p,n,v,s,f)     setxattr((p),(n),(v),(s),0,(f)|XATTR_SHOWCOMPRESSION)
+    #define fremovexattr(fd,n)      fremovexattr((fd),(n),XATTR_SHOWCOMPRESSION)
+    #define removexattr(p,n)        removexattr((p),(n),XATTR_SHOWCOMPRESSION)
+    #define flistxattr(fd,l,s)      flistxattr((fd),(l),(s),XATTR_SHOWCOMPRESSION)
+    #define listxattr(p,l,s)        listxattr((p),(l),(s),XATTR_SHOWCOMPRESSION)
+#else
+    #define _getxattr getxattr
+#endif
+
 /*
  * Convert IRIX API components into Linux/XFS API components,
  * and vice-versa.
@@ -111,7 +145,7 @@ attr_get(const char *path, const char *attrname, char *attrvalue,
 	 int *valuelength, int flags)
 {
 	ssize_t (*get)(const char *, const char *, void *, size_t) =
-		flags & ATTR_DONTFOLLOW ? lgetxattr : getxattr;
+		flags & ATTR_DONTFOLLOW ? lgetxattr : _getxattr;
 	int c, compat;
 	char name[MAXNAMELEN+16];
 
diff --git a/libattr/libattr.h b/libattr/libattr.h
index 2330d4b0ab2df181d8b0cebb9d3640c3cfa203e4..8bba9bfa3413805529d2e48264e33350b2e9818d 100644
--- a/libattr/libattr.h
+++ b/libattr/libattr.h
@@ -9,3 +9,8 @@
 #define HAVE_GETXATTR 1
 #define HAVE_LISTXATTR 1
 #define HAVE_SETXATTR 1
+#ifndef __APPLE__
+    #define HAVE_LGETXATTR 1
+    #define HAVE_LLISTXATTR 1
+    #define HAVE_LSETXATTR 1
+#endif
diff --git a/libattr/syscalls.c b/libattr/syscalls.c
index 721ad7f331851f21a531bda6bcf80fc54ac27420..22bef18fc452196b8709cac35f1f97bf45dcf7b7 100644
--- a/libattr/syscalls.c
+++ b/libattr/syscalls.c
@@ -30,70 +30,150 @@
 # pragma GCC visibility push(default)
 #endif
 
+#ifdef __APPLE__
+    static ssize_t lgetxattr(const char *path, const char *name, void *value, size_t size)
+    {
+        return getxattr(path, name, value, size, 0, XATTR_SHOWCOMPRESSION|XATTR_NOFOLLOW);
+    }
+    static ssize_t _getxattr(const char *path, const char *name, void *value, size_t size)
+    {
+        return getxattr(path, name, value, size, 0, XATTR_SHOWCOMPRESSION);
+    }
+    static int lsetxattr (const char *path, const char *name, const void *value, size_t size, int flags)
+    {
+        return setxattr(path, name, value, size, 0, flags|XATTR_SHOWCOMPRESSION|XATTR_NOFOLLOW);
+    }
+    static int lremovexattr (const char *path, const char *name)
+    {
+        return removexattr(path, name, XATTR_SHOWCOMPRESSION|XATTR_NOFOLLOW);
+    }
+    static ssize_t llistxattr(const char *path, char *list, size_t size)
+    {
+        return listxattr(path, list, size, XATTR_SHOWCOMPRESSION|XATTR_NOFOLLOW);
+    }
+
+    #define fgetxattr(fd,n,v,s)     fgetxattr((fd),(n),(v),(s),0,XATTR_SHOWCOMPRESSION)
+    #define getxattr(p,n,v,s)       _getxattr((p),(n),(v),(s))
+    #define fsetxattr(fd,n,v,s,f)   fsetxattr((fd),(n),(v),(s),0,(f)|XATTR_SHOWCOMPRESSION)
+    #define setxattr(p,n,v,s,f)     setxattr((p),(n),(v),(s),0,(f)|XATTR_SHOWCOMPRESSION)
+    #define fremovexattr(fd,n)      fremovexattr((fd),(n),XATTR_SHOWCOMPRESSION)
+    #define removexattr(p,n)        removexattr((p),(n),XATTR_SHOWCOMPRESSION)
+    #define flistxattr(fd,l,s)      flistxattr((fd),(l),(s),XATTR_SHOWCOMPRESSION)
+    #define listxattr(p,l,s)        listxattr((p),(l),(s),XATTR_SHOWCOMPRESSION)
+#endif
+
 int libattr_setxattr(const char *path, const char *name,
 		     void *value, size_t size, int flags)
 {
+#ifdef linux
 	return syscall(__NR_setxattr, path, name, value, size, flags);
+#else
+	return setxattr(path, name, value, size, flags);
+#endif
 }
 
 int libattr_lsetxattr(const char *path, const char *name,
 		      void *value, size_t size, int flags)
 {
+#ifdef linux
 	return syscall(__NR_lsetxattr, path, name, value, size, flags);
+#else
+	return lsetxattr(path, name, value, size, flags);
+#endif
 }
 
 int libattr_fsetxattr(int filedes, const char *name,
 		      void *value, size_t size, int flags)
 {
+#ifdef linux
 	return syscall(__NR_fsetxattr, filedes, name, value, size, flags);
+#else
+	return fsetxattr(filedes, name, value, size, flags);
+#endif
 }
 
 ssize_t libattr_getxattr(const char *path, const char *name,
 			 void *value, size_t size)
 {
+#ifdef linux
 	return syscall(__NR_getxattr, path, name, value, size);
+#else
+	return getxattr(path, name, value, size);
+#endif
 }
 
 ssize_t libattr_lgetxattr(const char *path, const char *name,
 			  void *value, size_t size)
 {
+#ifdef linux
 	return syscall(__NR_lgetxattr, path, name, value, size);
+#else
+	return lgetxattr(path, name, value, size);
+#endif
 }
 
 ssize_t libattr_fgetxattr(int filedes, const char *name,
 			  void *value, size_t size)
 {
+#ifdef linux
 	return syscall(__NR_fgetxattr, filedes, name, value, size);
+#else
+	return fgetxattr(filedes, name, value, size);
+#endif
 }
 
 ssize_t libattr_listxattr(const char *path, char *list, size_t size)
 {
+#ifdef linux
 	return syscall(__NR_listxattr, path, list, size);
+#else
+	return listxattr(path, list, size);
+#endif
 }
 
 ssize_t libattr_llistxattr(const char *path, char *list, size_t size)
 {
+#ifdef linux
 	return syscall(__NR_llistxattr, path, list, size);
+#else
+	return llistxattr(path, list, size);
+#endif
 }
 
 ssize_t libattr_flistxattr(int filedes, char *list, size_t size)
 {
+#ifdef linux
 	return syscall(__NR_flistxattr, filedes, list, size);
+#else
+	return flistxattr(filedes, list, size);
+#endif
 }
 
 int libattr_removexattr(const char *path, const char *name)
 {
+#ifdef linux
 	return syscall(__NR_removexattr, path, name);
+#else
+	return removexattr(path, name);
+#endif
 }
 
 int libattr_lremovexattr(const char *path, const char *name)
 {
+#ifdef linux
 	return syscall(__NR_lremovexattr, path, name);
+#else
+    return lremovexattr(path, name);
+#endif
 }
 
 int libattr_fremovexattr(int filedes, const char *name)
 {
+#ifdef linux
 	return syscall(__NR_fremovexattr, filedes, name);
+#else
+	return fremovexattr(filedes, name);
+#endif
 }
 
 #ifdef HAVE_VISIBILITY_ATTRIBUTE
diff --git a/tools/attr.c b/tools/attr.c
index c8aa0b47b59a4dd0ec42c96b3ffc93b00a83ab6b..db3052097b3f2b82972d7f332a663609a51f85a2 100644
--- a/tools/attr.c
+++ b/tools/attr.c
@@ -28,6 +28,9 @@
 #include <errno.h>
 #include <string.h>
 #include <locale.h>
+#ifdef __APPLE__
+#include <libgen.h>
+#endif
 
 #include <attr/attributes.h>
 
diff --git a/tools/getfattr.c b/tools/getfattr.c
index 72a885233d0a5c9f2b31c78d03aea5cca40e3cc0..b98a7a5d0687986d3f157980f2755ef7fb1115c2 100644
--- a/tools/getfattr.c
+++ b/tools/getfattr.c
@@ -35,6 +35,26 @@
 #include "walk_tree.h"
 #include "misc.h"
 
+#ifdef __APPLE__
+    static ssize_t lgetxattr(const char *path, const char *name, void *value, size_t size)
+    {
+        return getxattr(path, name, value, size, 0, XATTR_SHOWCOMPRESSION|XATTR_NOFOLLOW);
+    }
+    static ssize_t _getxattr(const char *path, const char *name, void *value, size_t size)
+    {
+        return getxattr(path, name, value, size, 0, XATTR_SHOWCOMPRESSION);
+    }
+    static ssize_t llistxattr(const char *path, char *list, size_t size)
+    {
+        return listxattr(path, list, size, XATTR_SHOWCOMPRESSION|XATTR_NOFOLLOW);
+    }
+
+    #define fgetxattr(fd,n,v,s)     fgetxattr((fd),(n),(v),(s),0,XATTR_SHOWCOMPRESSION)
+    #define getxattr(p,n,v,s)       _getxattr((p),(n),(v),(s))
+    #define flistxattr(fd,l,s)      flistxattr((fd),(l),(s),XATTR_SHOWCOMPRESSION)
+    #define listxattr(p,l,s)        listxattr((p),(l),(s),XATTR_SHOWCOMPRESSION)
+#endif
+
 #define CMD_LINE_OPTIONS "n:de:m:hRLP"
 #define CMD_LINE_SPEC "[-hRLP] [-n name|-d] [-e en] [-m pattern] path..."
 
@@ -57,7 +77,11 @@ struct option long_options[] = {
 int walk_flags = WALK_TREE_DEREFERENCE;
 int opt_dump;  /* dump attribute values (or only list the names) */
 char *opt_name;  /* dump named attributes */
+#ifndef __APPLE__
 char *opt_name_pattern = "^user\\.";  /* include only matching names */
+#else
+char *opt_name_pattern = ".*";
+#endif
 char *opt_encoding;  /* encode values automatically (NULL), or as "text",
                         "hex", or "base64" */
 char opt_value_only;  /* dump the value only, without any decoration */
@@ -81,14 +105,20 @@ static const char *xquote(const char *str, const char *quote_chars)
 
 int do_getxattr(const char *path, const char *name, void *value, size_t size)
 {
-	return ((walk_flags & WALK_TREE_DEREFERENCE) ?
-		getxattr : lgetxattr)(path, name, value, size);
+	if (walk_flags & WALK_TREE_DEREFERENCE) {
+		return getxattr(path, name, value, size);
+	} else {
+		return lgetxattr(path, name, value, size);
+	}
 }
 
 int do_listxattr(const char *path, char *list, size_t size)
 {
-	return ((walk_flags & WALK_TREE_DEREFERENCE) ?
-		listxattr : llistxattr)(path, list, size);
+	if (walk_flags & WALK_TREE_DEREFERENCE) {
+		return listxattr(path, list, size);
+	} else {
+		return llistxattr(path, list, size);
+	}
 }
 
 const char *strerror_ea(int err)
@@ -279,7 +309,16 @@ int print_attribute(const char *path, const char *name, int *header_printed)
 	if (opt_value_only)
 		fwrite(value, length, 1, stdout);
 	else if (opt_dump) {
+#ifndef __APPLE__
 		const char *enc = encode(value, &length);
+#else
+        const char *enc;
+        if (strcmp(name, XATTR_RESOURCEFORK_NAME) != 0) {
+            enc = encode(value, &length);
+        } else {
+            enc = (length <= 256)? encode(value, &length) : "<resource fork too big>";
+        }
+#endif
 		
 		if (enc)
 			printf("%s=%s\n", xquote(name, "=\n\r"), enc);
diff --git a/tools/setfattr.c b/tools/setfattr.c
index ad8f35d25d984b330a45c6bd7ec4e33d8732d652..58bbfd5541c470be3a3d01cc81e35df31d706b80 100644
--- a/tools/setfattr.c
+++ b/tools/setfattr.c
@@ -34,6 +34,22 @@
 
 #include "misc.h"
 
+#ifdef __APPLE__
+    static int lsetxattr (const char *path, const char *name, const void *value, size_t size, int flags)
+    {
+        return setxattr(path, name, value, size, 0, flags|XATTR_SHOWCOMPRESSION|XATTR_NOFOLLOW);
+    }
+    static int lremovexattr (const char *path, const char *name)
+    {
+        return removexattr(path, name, XATTR_SHOWCOMPRESSION|XATTR_NOFOLLOW);
+    }
+
+    #define fsetxattr(fd,n,v,s,f)   fsetxattr((fd),(n),(v),(s),0,(f)|XATTR_SHOWCOMPRESSION)
+    #define setxattr(p,n,v,s,f)     setxattr((p),(n),(v),(s),0,(f)|XATTR_SHOWCOMPRESSION)
+    #define fremovexattr(fd,n)      fremovexattr((fd),(n),XATTR_SHOWCOMPRESSION)
+    #define removexattr(p,n)        removexattr((p),(n),XATTR_SHOWCOMPRESSION)
+#endif
+
 #define CMD_LINE_OPTIONS "n:x:v:h"
 #define CMD_LINE_SPEC1 "{-n name} [-v value] [-h] file..."
 #define CMD_LINE_SPEC2 "{-x name} [-h] file..."
@@ -90,12 +106,20 @@ static const char *xquote(const char *str, const char *quote_chars)
 int do_setxattr(const char *path, const char *name,
 		const void *value, size_t size)
 {
-	return (opt_deref ? setxattr : lsetxattr)(path, name, value, size, 0);
+	if (opt_deref) {
+		return setxattr(path, name, value, size, 0);
+	} else {
+		return lsetxattr(path, name, value, size, 0);
+	}
 }
 
 int do_removexattr(const char *path, const char *name)
 {
-	return (opt_deref ? removexattr : lremovexattr)(path, name);
+	if (opt_deref) {
+		return removexattr(path, name);
+	} else {
+		return lremovexattr(path, name);
+	}
 }
 
 int restore(const char *filename)
