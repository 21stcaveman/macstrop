diff --git a/CMakeLists.txt b/CMakeLists.txt
index fc8882e96a3aceddc1cbd13d1c071be890f4da6c..0f2cd0ccc9da96c813fd5e987a2d87951dc2907a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -321,17 +321,18 @@ if (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
     )
 elseif (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
     find_program(BREW_PROGRAM "brew")
-    find_program(PORT_PROGRAM "port")
+#     find_program(PORT_PROGRAM "port")
     
-    if (IS_DIRECTORY /opt/local AND PORT_PROGRAM)
+    if (${CMAKE_BUILD_TYPE} MATCHES "MacPorts")
         # macports
-        set (OPENSSL_ROOT /opt/local)
-
-        set (OPENSSL_LIBS
-            ${OPENSSL_ROOT}/lib/libssl.a
-            ${OPENSSL_ROOT}/lib/libcrypto.a
-            z
-        )
+#         set (OPENSSL_ROOT /opt/local)
+# 
+#         set (OPENSSL_LIBS
+#             ${OPENSSL_ROOT}/lib/libssl.a
+#             ${OPENSSL_ROOT}/lib/libcrypto.a
+#             z
+#         )
+        set (OPENSSL_LIBS ssl crypto)
     elseif (IS_DIRECTORY /usr/local/opt/openssl AND BREW_PROGRAM)
         # brew
         set (OPENSSL_ROOT /usr/local/opt/openssl)
diff --git a/dist/macos/bundle/build_dist.sh.in b/dist/macos/bundle/build_dist.sh.in
index c96da790f1b37316ddfb38b2348b35af3d9c3af4..acab86810f13c45d4f01ae37afc9f95389dfd2e9 100755
--- a/dist/macos/bundle/build_dist.sh.in
+++ b/dist/macos/bundle/build_dist.sh.in
@@ -13,11 +13,15 @@ B_BUILDTYPE="@CMAKE_BUILD_TYPE@"
 B_BARRIERC="Barrier.app/Contents/MacOS/barrierc"
 B_BARRIERS="Barrier.app/Contents/MacOS/barriers"
 
-# Colorized output
-function info() { tput bold; echo "$@" ; tput sgr0 ;}
-function error() { tput bold; tput setaf 1; echo "$@"; tput sgr0 ; }
-function success() { tput bold; tput setaf 2; echo "$@"; tput sgr0 ; }
-function warn() { tput bold; tput setaf 3; echo "$@"; tput sgr0 ; }
+# # Colorized output
+# function info() { tput bold; echo "$@" ; tput sgr0 ;}
+# function error() { tput bold; tput setaf 1; echo "$@"; tput sgr0 ; }
+# function success() { tput bold; tput setaf 2; echo "$@"; tput sgr0 ; }
+# function warn() { tput bold; tput setaf 3; echo "$@"; tput sgr0 ; }
+function info() { echo "$@" ; }
+function error() { echo "$@"; }
+function success() { echo "$@"; }
+function warn() { echo "$@"; }
 
 info "Checking for bundle contents"
 if [ ! -d "Barrier.app/Contents" ]; then
@@ -35,24 +39,28 @@ info "Copying binaries into bundle"
 # Copy the folder instead of globbing unquoted path
 cp -r "$B_BINDIR" "$B_MACOS" || exit 1
 
-# Check for macdeployqt on MacPorts
-if which -s port ; then
-    info "MacPorts found, searching for macdeployqt"
-    DEPLOYQT="$(port contents qt5-qttools | grep --only --max-count 1 '/.*macdeployqt')"
-    if [ ! -x "$DEPLOYQT" ]; then
-        error Please install package qt5-qttools
-        exit 1
+if [ "${DEPLOYQT}" = "" ] ;then
+    # Check for macdeployqt on MacPorts
+    if which -s port ; then
+        info "MacPorts found, searching for macdeployqt"
+        DEPLOYQT="$(port contents qt5-qttools | grep --only --max-count 1 '/.*macdeployqt')"
+        if [ ! -x "$DEPLOYQT" ]; then
+            error Please install package qt5-qttools
+            exit 1
+        fi
     fi
-fi
 
-# Check for macdeployqt on Homebrew
-if which -s brew ; then
-    info "Homebrew found, searching for macdeployqt"
-    DEPLOYQT="$(brew list qt | grep --only '/.*macdeployqt' | head -1)"
-    if [ ! -x "$DEPLOYQT" ]; then
-        error Please install package qt
-        exit 1
+    # Check for macdeployqt on Homebrew
+    if which -s brew ; then
+        info "Homebrew found, searching for macdeployqt"
+        DEPLOYQT="$(brew list qt | grep --only '/.*macdeployqt' | head -1)"
+        if [ ! -x "$DEPLOYQT" ]; then
+            error Please install package qt
+            exit 1
+        fi
     fi
+else
+    info "Using macdeployqt set through DEPLOYQT=${DEPLOYQT}"
 fi
 
 # Use macdeployqt to include libraries and create dmg
@@ -63,6 +71,14 @@ if [ "$B_BUILDTYPE" == "Release" ]; then
     -executable="$B_BARRIERS" || exit 1
     mv "Barrier.dmg" "Barrier-$B_VERSION.dmg" || exit 1
     success "Created Barrier-$B_VERSION.dmg"
+elif [ "$B_BUILDTYPE" == "MacPorts" ]; then
+    info "Building MacPorts app bundle"
+    "$DEPLOYQT" Barrier.app -no-strip \
+    -verbose=2 \
+    -always-overwrite \
+    -executable="$B_BARRIERC" \
+    -executable="$B_BARRIERS" || exit 1
+    success "Created Barrier.app"
 else
     warn "Disk image (dmg) only created for Release builds"
     info "Building debug bundle"
@@ -70,4 +86,4 @@ else
     -executable="$B_BARRIERC" \
     -executable="$B_BARRIERS" || exit 1
     success "Bundle created successfully"
-fi
\ No newline at end of file
+fi
diff --git a/src/gui/src/main.cpp b/src/gui/src/main.cpp
index 73251d524e0eb5130665cea7fe62853dd13f0b99..e049e4a4f78a5df581a4e7c544c4ab89889a6659 100644
--- a/src/gui/src/main.cpp
+++ b/src/gui/src/main.cpp
@@ -74,18 +74,18 @@ int main(int argc, char* argv[])
 	QBarrierApplication app(argc, argv);
 
 #if defined(Q_OS_MAC)
-	if (app.applicationDirPath().startsWith("/Volumes/")) {
-        // macOS preferences track applications allowed assistive access by path
-        // Unfortunately, there's no user-friendly way to allow assistive access
-        // to applications that are not in default paths (/Applications),
-        // especially if an identically named application already exists in
-        // /Applications). Thus we require Barrier to reside in the /Applications
-        // folder
-		QMessageBox::information(
-			NULL, "Barrier",
-			"Please drag Barrier to the Applications folder, and open it from there.");
-		return 1;
-	}
+// 	if (app.applicationDirPath().startsWith("/Volumes/")) {
+//         // macOS preferences track applications allowed assistive access by path
+//         // Unfortunately, there's no user-friendly way to allow assistive access
+//         // to applications that are not in default paths (/Applications),
+//         // especially if an identically named application already exists in
+//         // /Applications). Thus we require Barrier to reside in the /Applications
+//         // folder
+// 		QMessageBox::information(
+// 			NULL, "Barrier",
+// 			"Please drag Barrier to the Applications folder, and open it from there.");
+// 		return 1;
+// 	}
 
 	if (!checkMacAssistiveDevices())
 	{
diff --git a/src/lib/platform/OSXDragView.m b/src/lib/platform/OSXDragView.m
index 67dac5668d77dfc0c1a7339d461bc429d4071ace..8ca711d4be6e932a98b874c0e7b0ae9d57f4d9b1 100644
--- a/src/lib/platform/OSXDragView.m
+++ b/src/lib/platform/OSXDragView.m
@@ -25,16 +25,16 @@
 @dynamic animatesToDestination;
 @dynamic numberOfValidItemsForDrop;
 
-/* springLoadingHighlight is a property that will not be auto-synthesized by
-   clang. explicitly synthesizing it here as well as defining an empty handler
-   for resetSpringLoading() satisfies the compiler */
-@synthesize springLoadingHighlight = _springLoadingHighlight;
-
-/* unused */
-- (void)
-resetSpringLoading
-{
-}
+// /* springLoadingHighlight is a property that will not be auto-synthesized by
+//    clang. explicitly synthesizing it here as well as defining an empty handler
+//    for resetSpringLoading() satisfies the compiler */
+// @synthesize springLoadingHighlight = _springLoadingHighlight;
+// 
+// /* unused */
+// - (void)
+// resetSpringLoading
+// {
+// }
 
 - (id)
 initWithFrame:(NSRect)frame
