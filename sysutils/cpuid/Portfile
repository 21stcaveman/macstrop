# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id: Portfile $
# kate: backspace-indents true; indent-pasted-text true; indent-width 4; keep-extra-spaces true; remove-trailing-spaces modified; replace-tabs true; replace-tabs-save true; syntax Tcl/Tk; tab-indents true; tab-width 4;

PortSystem          1.0

name                cpuid
version             1.4.2
categories          sysutils
description         A simple CPUID decoder/dumper for x86/x86_64
long_description    "cpuid" is a very simple C program, designed to dump and extract information \
                    from the x86 CPUID instruction.\n\
                    cpuid is capable of dumping all CPUID leaves (except any unknown leaves which \
                    require special ECX values to dump all information). cpuid can only decode \
                    certain leaves, but this functionality will be expanded as the CPUID \
                    specifications provided by AMD and Intel change.

homepage            http://github.com/tycho/cpuid

maintainers         gmail.com:rjvbertin openmaintainer
license             cpuid
platforms           darwin
supported_archs     i386 x86_64
installs_libs       no

PortGroup           github 1.0
github.setup        tycho cpuid ${version}
github.tarball_from archive

checksums           rmd160  f2b8132bd2a7444a562e3a1f609bdfc7ab42dc85 \
                    sha256  bc0e7989a9039286f948f705529b3fa39e7864c9e179834b344f862c66920a12

patchfiles-append   patch-makefile.diff

configure {
    # no configure script, just a few changes that need to be made to the Makefile
    # for it to be configured correctly. Doing these reinplaces in configure{} instead
    # of in post-patch{} maintains support for +universal.
    reinplace "s|CC := gcc|CC := ${configure.cc}|g" ${worksrcpath}/GNUmakefile
    if {[variant_isset universal]} {
        reinplace "s|-Os|${configure.universal_cppflags} ${configure.universal_cflags} ${configure.cppflags} ${configure.cflags}|g" ${worksrcpath}/GNUmakefile
        reinplace "s|LDFLAGS := -lm|LDFLAGS := ${configure.universal_ldflags} ${configure.ldflags}|g" ${worksrcpath}/GNUmakefile
    } else {
        reinplace "s|-Os|${configure.cppflags} ${configure.cflags}|g" ${worksrcpath}/GNUmakefile
        reinplace "s|LDFLAGS := -lm|LDFLAGS := ${configure.ldflags}|g" ${worksrcpath}/GNUmakefile
    }
    reinplace "s|@@PREFIX@@|${prefix}|g" ${worksrcpath}/GNUmakefile
}

build.args-append   V=1