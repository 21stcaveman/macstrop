# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem          1.0

name                zfs
categories          sysutils filesystems

description         OpenZFS on OS X
long_description    OpenZFS on OS X (O3X) brings OpenZFS features to Apple's OS X.
homepage            http://openzfsonosx.org/
license             CDDL

maintainers         gmail.com:rjvbertin openmaintainer

platforms           darwin
installs_libs       yes

universal_variant   no

subport ${name}-devel {
    description     ${description} This port follows git/master.
    long_description \
                    ${long_description} This port follows git/master.
}

if {${subport} eq "${name}-devel"} {
    conflicts       ${name}
    version         1.5.0.150
    set spl_commit  a533077c85bad3ef7e02789eccc3126734c386d0
    set zfs_commit  6af8882ff117884eca9c82e808226ae89eca3ca7
    master_sites    https://github.com/openzfsonosx/spl/archive/${spl_commit}:distspl \
                    https://github.com/openzfsonosx/zfs/archive/${zfs_commit}:distzfs
    distfiles       spl-snapshot${extract.suffix}:distspl \
                    zfs-snapshot${extract.suffix}:distzfs
    checksums       spl-snapshot${extract.suffix} \
                    rmd160  bc1b7f43eeb1da853c12e0854333ffc03fba03d8 \
                    sha256  17151de159039f23674e3ba4af2fc7ece3fcc4e77dda4f2de0e738e1d19846f8 \
                    zfs-snapshot${extract.suffix} \
                    rmd160  81a93f1cb836a6700a0107fccc83f2d15ebf0a51 \
                    sha256  e321691b059e6432529756539771dc7c4fb860a4ee9ed39475ca0b3afe5c6396
} else {
    conflicts       ${name}-devel
    version         1.5.0
    set spl_commit  spl-${version}
    set zfs_commit  zfs-${version}
    master_sites    https://github.com/openzfsonosx/spl/archive/:distspl \
                    https://github.com/openzfsonosx/zfs/archive/:distzfs
    distfiles       spl-${version}${extract.suffix}:distspl \
                    zfs-${version}${extract.suffix}:distzfs
    checksums       spl-${version}${extract.suffix} \
                    rmd160  3de98080531cde4ff17703db0ab428779691c303 \
                    sha256  70cff93044295f282deaa9f46d32ab01401f72b0b872e79e5a850dc9acb9810d \
                    zfs-${version}${extract.suffix} \
                    rmd160  027c43a097a268efb1d026b50abd77231a27288b \
                    sha256  77d105f30d273b27066ad9238a86b50a4bebc233eefbe62ea302787f1eb2f7fc
}

post-extract {
    file delete -force zfs-${version}
}

use_configure       yes
patch.pre_args      -Np1

depends_lib-append  port:zlib

configure.dir       ${workpath}/zfs-${zfs_commit}
build.dir           ${configure.dir}
patch.dir           ${configure.dir}

patchfiles-append   patch-dont-invoke-launchctl.diff \
                    patch-kextloading.diff

post-patch {
    ui_info "--->  Preparing SPL"
    system -W ${workpath}/spl-${spl_commit} "./autogen.sh"
    ui_info "--->  Preparing ZFS"
    system -W ${workpath}/zfs-${zfs_commit} "./autogen.sh"
}

configure.ldflags-append \
                    ${configure.optflags}

configure.args-append \
                    --disable-dependency-tracking \
                    --with-kernel-modprefix=${prefix}/Library/Extensions

pre-configure {
    ui_info "--->  Configuring SPL"
    system -W ${workpath}/spl-${spl_commit} "${configure.cmd} ${configure.pre_args} ${configure.args}"

    ui_info "--->  Configuring ZFS"
    configure.args-append \
                    --with-spl=${workpath}/spl-${spl_commit}
}

build.args-append   V=1

pre-build {
    ui_info "--->  Building SPL"
    system -W ${workpath}/spl-${spl_commit} "${build.cmd} ${build.pre_args} ${build.args}"

    ui_info "--->  Building ZFS"
}

destroot.args-append \
                    V=1

pre-destroot {
    ui_info "--->  Staging SPL into destroot"
    system -W ${workpath}/spl-${spl_commit} "${destroot.cmd} ${destroot.pre_args} ${destroot.args} ${destroot.post_args}"

    ui_info "--->  Staging ZFS into destroot"
}

post-destroot {
    foreach d [glob -nocomplain ${destroot}/Library/*] {
        file rename ${d} ${destroot}${prefix}/Library/
    }
    xinstall -m 755 ${filespath}/zfs_unload_kexts.sh ${destroot}${prefix}/sbin/zfs_unload_kexts.sh
    xinstall -m 755 ${filespath}/zfs_kexts_loaded.sh ${destroot}${prefix}/sbin/zfs_kexts_loaded.sh
}

pre-deactivate {
    if {[catch {exec ${prefix}/sbin/zfs_kexts_loaded.sh} result]} {
        ui_debug "ZFS and SPL kexts aren't loaded: allowing deactivation"
    } else {
        ui_error ${result}
        ui_error "Unmount all ZFS pools and then invoke zfs_unload_kexts.sh before deactivating port:${subport}"
        # Being able to use `return -code error` here would be nice
        set thePid [pid]
        # but the only way to interrupt deactivation ATM is to send ourselves a SIGKILL
        system "kill -9 ${thePid}"
    }
}

notes-append "You can test this port as follows: \n\
# create a file for a 128m disk image: \n\
dd if=/dev/zero of=/path/to/tank.pool.bin bs=1024k count=128 \n\
# create a ZFS pool called 'tank' in that disk image: \n\
zpool create tank /path/to/tank.pool.bin \n\
zpool status -v \n\
# there should now be a new volume: \n\
df -hT \n\
ls -la /Volumes/tank \n\
# get the pool's properties: \n\
zpool get all tank \n\
# get the pool's main dataset's properties: \n\
zfs get all tank \n\
# set lz4 compression and 2-way, single-device redundancy:\n\
zfs set compression=lz4 tank \n\
zfs set copies=2 tank \n\
# export (unmount) the pool and all its datasets: \n\
zpool export tank \n\
# to import the pool once more:\n\
zpool import tank -d /path/to \n\
\n\
See ${homepage} for more information about ZFS and its OS X implementation \n\
"
