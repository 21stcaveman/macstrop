# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem          1.0

name                zfs
categories          sysutils filesystems

description         OpenZFS on OS X
long_description    OpenZFS on OS X (O3X) brings OpenZFS features to Apple's OS X.
homepage            http://openzfsonosx.org/
license             CDDL

maintainers         gmail.com:rjvbertin openmaintainer

platforms           darwin
installs_libs       yes

universal_variant   no

subport ${name}-devel {
    description     ${description} This port follows git/master.
    long_description \
                    ${long_description} This port follows git/master.
    if {${os.major} >= 14} {
        variant look_ma_no_sip description \
            "This port won't work without disabling a basic security feature: see `port info ${subport} +look_ma_no_sip`" {}
        if {[variant_isset look_ma_no_sip]} {
            long_description-append \nNB NB NB\n\
                "This port installs unsigned kexts, and those will not load without disabling SIP. You do so at your own risk."
        } else {
            pre-fetch {
                ui_error "This port won't build by default on OS X 10.10 and higher; see `port variants ${subport}`"
                return -code error "See `port variants ${subport}`"
            }
        }
    }
}

# ensure we can load from ${prefix}/Library/Extensions
patchfiles-append   patch-kextloading.diff

if {${subport} eq "${name}-devel"} {
    conflicts       ${name}
#     version         1.5.22.66
#     set spl_commit  a96831d3d32d04c01cb6ef48ba1c52ed7b52282b
#     set zfs_commit  910876c006f2d70fb6af338f6bfdc8348fb45877
    version         1.5.2.78
    epoch           1
    set spl_commit  61b3feeb5cc2fb798af2760f75aaa683548a48ae
    set zfs_commit  35a535b727c4ec58a40c62afac3dc3bfce9592b1
    master_sites    https://github.com/openzfsonosx/spl/tarball/${spl_commit}/:distspl \
                    https://github.com/openzfsonosx/zfs/tarball/${zfs_commit}:distzfs
    distfiles       spl-${spl_commit}${extract.suffix}:distspl \
                    zfs-${zfs_commit}${extract.suffix}:distzfs
#     checksums       spl-${spl_commit}${extract.suffix} \
#                     rmd160  ec61f4239e6bc98bcb55fcf64d8479dd7c19ed1f \
#                     sha256  5eb789e0c497b4f25c94eeba70e203c7fcacd37e73d9d90203714b7ed246b41a \
#                     zfs-${zfs_commit}${extract.suffix} \
#                     rmd160  ae2b62ad85136a7dfa467353fd3d56836f576380 \
#                     sha256  d517e30a96f9109582ee2b989d2f6c080e20d7d5ce3bd9b4532a303b381d5044
    checksums       spl-${spl_commit}${extract.suffix} \
                    rmd160  44b3a4e1c7994ffe771af60e3e26e7facb5061d0 \
                    sha256  dafcb69bae185cb882819459a67afef532a7331675f6a22eb075855c30d2effe \
                    zfs-${zfs_commit}${extract.suffix} \
                    rmd160  c955b92f4f84252c79a90c9bf30f4475a9d9a47c \
                    sha256  1c96bac9ba30003f0a80b310f0d8e703fda8afb6b6e1c1e81d828ed2c8d37b26
    patchfiles-append \
                    patch-dont-invoke-launchctl.diff
#     # fix hopefully temporary errors:
#     patchfiles-append \
#                     patch-tempfixes.diff
    post-extract {
        # correct the directory names. We know we'll only have 1 of each, so we can use glob
        foreach spl [glob ${workpath}/openzfsonosx-spl*] {
            file rename ${spl} ${workpath}/spl-${spl_commit}
        }
        foreach zfs [glob ${workpath}/openzfsonosx-zfs*] {
            file rename ${zfs} ${workpath}/zfs-${zfs_commit}
        }
    }
} else {
    conflicts       ${name}-devel
    version         1.5.2
    set spl_commit  spl-${version}
    set zfs_commit  zfs-${version}

    # Code borrowed from port:osxfuse, except that we make do with the single unsigned kext
    # warning on OS X 10.9.
    # Use the published signed kext for OS 10.10 (Darwin 14) and later.
    # Don't even fetch and extract the dmg unnecessarily, since the commands don't
    # work on some earlier OS versions.
    if {${os.major} >= 14} {
        set use_signed_kext    yes
    } else {
        set use_signed_kext    no
    }
    set extdir ""

    master_sites    https://github.com/openzfsonosx/spl/archive/:distspl \
                    https://github.com/openzfsonosx/zfs/archive/:distzfs
    distfiles       spl-${version}${extract.suffix}:distspl \
                    zfs-${version}${extract.suffix}:distzfs
    checksums       spl-${version}${extract.suffix} \
                    rmd160  aa55a3fe8bd9924f8e55918342a273629d3d1b4c \
                    sha256  179527e9dcda559c5273ba9677f93f3b665b7eaa49d540f6c9855ca8f8a6ce46 \
                    zfs-${version}${extract.suffix} \
                    rmd160  73f17e63bd4df0027b5c41a778d6364a337608d1 \
                    sha256  228a04b8d393bd3bc953b39574401a4833258db8647c8a0747924ad762f272f0
    if {${use_signed_kext}} {
        master_sites-append \
                    https://openzfsonosx.org/w/images/6/6b/:officialDmg
        distfiles-append \
                    OpenZFS_on_OS_X_${version}.dmg:officialDmg
        checksums-append \
                    OpenZFS_on_OS_X_${version}.dmg \
                    rmd160  1900dee3e3b9d50b1a21be48e04e40752e543891 \
                    sha256  185d20242bacd14cd609ccfb8f89736e1ea0ca6dec6475fd9eb7703c17ab5413
        # extract phase will just extract the dmg; post-extract will expand
        # the tarballs
        use_dmg yes
        extract.only OpenZFS_on_OS_X_${version}.dmg

        post-extract {
            ui_msg "--->    Extracting kernel extensions from the official OpenZFS_on_OS_X_${version}.dmg install image"
            switch ${os.major} {
                # 10.9
                "13" {
                    # this case included for testing only
                    system -W ${workpath}/${name}-${version} "pkgutil --expand 'OpenZFS on OS X ${version} Mavericks.pkg' ${workpath}/pkg"
                    system -W ${workpath}/pkg/zfs109.pkg "gzip -dc Payload | cpio -id"
                    file rename ${workpath}/pkg/zfs109.pkg ${workpath}/pkg/official.pkg
                }
                # 10.10
                "14" {
                    system -W ${workpath}/${name}-${version} "pkgutil --expand 'OpenZFS on OS X ${version} Yosemite.pkg' ${workpath}/pkg"
                    system -W ${workpath}/pkg/zfs1010.pkg "gzip -dc Payload | cpio -id"
                    file rename ${workpath}/pkg/zfs1010.pkg ${workpath}/pkg/official.pkg
                }
                # 10.11
                "15" {
                    system -W ${workpath}/${name}-${version} "pkgutil --expand 'OpenZFS on OS X ${version} El Capitan or higher.pkg' ${workpath}/pkg"
                    system -W ${workpath}/pkg/zfs1011.pkg "gzip -dc Payload | cpio -id"
                    file rename ${workpath}/pkg/zfs1011.pkg ${workpath}/pkg/official.pkg
                }
                default {
                    ui_error "Darwin ${os.major}.${os.minor} is an as-yet unsupport OS X version"
                    return -code error "Unsupported OS X version"
                }
            }

            # Extract the source tarballs
            foreach tarball {spl zfs} {
                system -W ${workpath} "tar -xf ${distpath}/${tarball}-${version}.tar.gz"
            }
            # cleanup
            file delete -force ${workpath}/${name}-${version}
        }
        post-destroot {
            # replace our home-built kexts with the signed ones from the official dmg
            file delete -force ${destroot}${prefix}/Library/Extensions/spl.kext
            file delete -force ${destroot}${prefix}/Library/Extensions/zfs.kext
            copy ${workpath}/pkg/official.pkg/Library/Extensions/spl.kext ${destroot}${prefix}/Library/Extensions/
            copy ${workpath}/pkg/official.pkg/Library/Extensions/zfs.kext ${destroot}${prefix}/Library/Extensions/
        }
    }
    patchfiles-append \
                    patch-dont-invoke-launchctl.diff \
}

post-extract {
    file delete -force zfs-${version}
}

use_configure       yes
patch.pre_args      -Np1

depends_build       port:autoconf \
                    port:automake \
                    port:libtool

depends_lib-append  port:zlib

configure.dir       ${workpath}/zfs-${zfs_commit}
build.dir           ${configure.dir}
patch.dir           ${configure.dir}

post-patch {
    ui_msg "--->    Preparing SPL"
    if {${subport} eq "${name}-devel"} {
#         # fix some hopefully temporary glitches
#         system -W ${workpath}/spl-${spl_commit} "${patch.cmd} ${patch.pre_args} -i ${filespath}/patch-spl-tempfixes.diff"
    }
    system -W ${workpath}/spl-${spl_commit} "./autogen.sh"
    ui_msg "--->    Preparing ZFS"
    system -W ${workpath}/zfs-${zfs_commit} "./autogen.sh"
}

if {"${os.major}" <= 13 && ${configure.sdkroot} eq ""} {
    # The ZFS code contains conditional code that uses functions available only
    # in 10.10+. For detection to work correctly, 10.9 and earlier must build using
    # their dedicated SDKs.
    set configure.sdkroot \
                    "$developer_dir/Platforms/MacOSX.platform/Developer/SDKs/MacOSX${configure.sdk_version}.sdk"
}

configure.ldflags-append \
                    ${configure.optflags} -mmacosx-version-min=${configure.sdk_version}

configure.args-append \
                    --disable-dependency-tracking \
                    --with-kernel-modprefix=${prefix}/Library/Extensions
configure.cflags-append\
                    -mmacosx-version-min=${configure.sdk_version}
configure.cxxflags-append\
                    -mmacosx-version-min=${configure.sdk_version}

pre-configure {
    ui_msg "--->    Configuring SPL"
    system -W ${workpath}/spl-${spl_commit} "${configure.cmd} ${configure.pre_args} ${configure.args}"

    ui_msg "--->    Configuring ZFS"
    configure.args-append \
                    --with-spl=${workpath}/spl-${spl_commit}
}

build.args-append   V=1

pre-build {
    ui_msg "--->    Building SPL"
    system -W ${workpath}/spl-${spl_commit} "${build.cmd} ${build.pre_args} ${build.args}"

    ui_msg "--->    Building ZFS"
}

destroot.args-append \
                    V=1

pre-destroot {
    ui_msg "--->    Staging SPL into destroot"
    system -W ${workpath}/spl-${spl_commit} "${destroot.cmd} ${destroot.pre_args} ${destroot.args} ${destroot.post_args}"

    ui_msg "--->    Staging ZFS into destroot"
}

post-destroot {
    foreach d [glob -nocomplain ${destroot}/Library/*] {
        file rename ${d} ${destroot}${prefix}/Library/
    }
    xinstall -m 755 ${filespath}/zfs_unload_kexts.sh ${destroot}${prefix}/sbin/zfs_unload_kexts.sh
    xinstall -m 755 ${filespath}/zfs_kexts_loaded.sh ${destroot}${prefix}/sbin/zfs_kexts_loaded.sh
}

pre-deactivate {
    if {[catch {exec ${prefix}/sbin/zfs_kexts_loaded.sh} result]} {
        ui_debug "ZFS and SPL kexts aren't loaded: allowing deactivation"
    } else {
        ui_error ${result}
        ui_error "Unmount all ZFS pools and then invoke zfs_unload_kexts.sh before deactivating port:${subport}"
        # Being able to use `return -code error` here would be nice
        set thePid [pid]
        # but the only way to interrupt deactivation ATM is to send ourselves a SIGKILL
        system "kill -9 ${thePid}"
    }
}

notes-append "You can test this port as follows: \n\
# create a file for a 128m disk image: \n\
dd if=/dev/zero of=/path/to/tank.pool.bin bs=1024k count=128 \n\
# create a ZFS pool called 'tank' in that disk image (ashift=12 is for modern disk with 4k blocks) \n\
# and the normalisation option is to avoid issues displaying files with non-ASCII names: \n\
zpool create -o ashift=12 -O normalization=formD tank /path/to/tank.pool.bin \n\
zpool status -v \n\
# there should now be a new volume: \n\
df -H \n\
ls -la /Volumes/tank \n\
# get the pool's properties: \n\
zpool get all tank \n\
# get the pool's main dataset's properties: \n\
zfs get all tank \n\
# set lz4 compression and 2-way, single-device redundancy:\n\
zfs set compression=lz4 tank \n\
zfs set copies=2 tank \n\
# export (unmount) the pool and all its datasets: \n\
zpool export tank \n\
# to import the pool once more:\n\
zpool import -d /path/to tank \n\
# to see all available pools on the connected storage devices:\n\
zpool import -d /dev \n\
\n\
See ${homepage} for more information about ZFS and its OS X implementation \n\
"

post-activate {
    # do a diag run of the kext we just installed, but catch any errors!
    if {[catch {exec kextutil -n -print-diagnostics -v 6 \
        -d ${prefix}/Library/Extensions/spl.kext ${prefix}/Library/Extensions/zfs.kext} result]} {
        ui_msg "Checking zfs.kext:\n${result}"
    } else {
        ui_error "Error checking zfs.kext:\n${result}"
    }
}

livecheck.url   http://openzfsonosx.org/wiki/Downloads
livecheck.regex OpenZFS_on_OS_X_(\\d+(\\.\\d+)+)
