diff --git a/module/spl/KernelExports/zfs.exports b/module/spl/KernelExports/zfs.exports
index cd627cf682f69cccfc11eed35b348cfbb671828c..fe5b19b124488e62ee7215b98c68eedfde2f53fb 100644
--- a/module/spl/KernelExports/zfs.exports
+++ b/module/spl/KernelExports/zfs.exports
@@ -26,7 +26,6 @@ _VNOP_LOOKUP
 _vnode_notify
 _vfs_get_notify_attributes
 _kauth_cred_getgroups
-_rootvnode
 _decmpfs_decompress_file
 _decmpfs_file_is_compressed
 _decmpfs_cnode_init
diff --git a/module/spl/spl-vnode.c b/module/spl/spl-vnode.c
index 3147a8a3c0d85653b244c04c6e4041a5a7ee99ef..777f835f1c8f307158bc958977a41d11e72a6be7 100644
--- a/module/spl/spl-vnode.c
+++ b/module/spl/spl-vnode.c
@@ -585,7 +585,14 @@ int	spl_vfs_get_notify_attributes(struct vnode_attr *vap)
  * vnode_put() to release it
  */
 
-extern struct vnode *rootvnode;
+/*
+ * From early boot (mountroot) we can not call vfs_rootvnode()
+ * or it will panic. So the default here is to return NULL until
+ * root has been mounted. XNU will call vfs_root() once that is
+ * done, so we use that to inform us that root is mounted. In nonboot,
+ * vfs_start is called early from kextload (zfs_osx.cpp).
+ */
+static int spl_skip_getrootdir = 1;
 
 struct vnode *
 getrootdir(void)
@@ -595,7 +602,7 @@ getrootdir(void)
 	// Unfortunately, Apple's vfs_rootvnode() fails to check for
 	// NULL rootvp, and just panics. We aren't technically allowed to
 	// see rootvp, but in the interest of avoiding a panic...
-	if (rootvnode == NULL) return NULL;
+	if (spl_skip_getrootdir) return NULL;
 
 	rvnode = vfs_rootvnode();
 	if (rvnode)
@@ -603,6 +610,11 @@ getrootdir(void)
 	return rvnode;
 }
 
+void spl_vfs_start()
+{
+	spl_skip_getrootdir = 0;
+}
+
 
 /*
  * It is undesirable to shadow kernel structure here, but since the
