diff --git a/module/spl/KernelExports/zfs.exports b/module/spl/KernelExports/zfs.exports
index 44ef739f5450d5cec99d529fd067bf2402d8ec31..493d23a75cf598325d2f8e11576ca03d3eae84aa 100644
--- a/module/spl/KernelExports/zfs.exports
+++ b/module/spl/KernelExports/zfs.exports
@@ -26,4 +26,3 @@ _VNOP_LOOKUP
 _vnode_notify
 _vfs_get_notify_attributes
 _kauth_cred_getgroups
-_rootvnode
diff --git a/module/spl/spl-vnode.c b/module/spl/spl-vnode.c
index 736447c3eba6fe63823e43b513d4584607f5c538..e533a0974be358568414f0e9b88421db75eeb2ac 100644
--- a/module/spl/spl-vnode.c
+++ b/module/spl/spl-vnode.c
@@ -585,20 +585,28 @@ int	spl_vfs_get_notify_attributes(struct vnode_attr *vap)
  * vnode_put() to release it
  */
 
-extern struct vnode *rootvnode;
+/*
+ * From early boot (mountroot) we can not call vfs_rootvnode()
+ * or it will panic. So the default here is to return NULL until
+ * root has been mounted. XNU will call vfs_root() once that is
+ * done, so we use that to inform us that root is mounted. In nonboot,
+ * vfs_start is called early from kextload (zfs_osx.cpp).
+ */
+static int spl_skip_getrootdir = 1;
 
 struct vnode *
 getrootdir(void)
 {
 	struct vnode *rvnode;
-
-	// Unfortunately, Apple's vfs_rootvnode() fails to check for
-	// NULL rootvp, and just panics. We aren't technically allowed to
-	// see rootvp, but in the interest of avoiding a panic...
-	if (rootvnode == NULL) return NULL;
+	if (spl_skip_getrootdir) return NULL;
 
 	rvnode = vfs_rootvnode();
 	if (rvnode)
 		vnode_put(rvnode);
 	return rvnode;
 }
+
+void spl_vfs_start()
+{
+	spl_skip_getrootdir = 0;
+}
