diff --git a/gui/nbrowserwindow.cpp b/gui/nbrowserwindow.cpp
index 8d3c2fa4777104670326dcb3fccb21e5ccedb338..264dcb81e7930da3af353a5de4804e05d058778a 100644
--- a/gui/nbrowserwindow.cpp
+++ b/gui/nbrowserwindow.cpp
@@ -3791,9 +3791,8 @@ void NBrowserWindow::loadPlugins() {
     QStringList dirList;
     dirList.append(global.fileManager.getProgramDirPath(""));
     dirList.append(global.fileManager.getProgramDirPath("")+"/plugins");
-    dirList.append("/usr/lib/nixnote2/");
-    dirList.append("/usr/local/lib/nixnote2/");
-    dirList.append("/usr/local/lib");
+    dirList.append("@PREFIX@/lib/nixnote2/");
+    dirList.append("@PREFIX@/lib");
     dirList.append("/usr/lib");
 
     for (int i=0; i<dirList.size(); i++) {
diff --git a/nixnote.cpp b/nixnote.cpp
index 777edfd141cf7abea9ac94a754ca3b684020c9a8..850ddacedffdab15752229b43bee3be465cd4102 100644
--- a/nixnote.cpp
+++ b/nixnote.cpp
@@ -3849,9 +3858,8 @@ void NixNote::loadPlugins() {
     QStringList dirList;
     dirList.append(global.fileManager.getProgramDirPath(""));
     dirList.append(global.fileManager.getProgramDirPath("")+"/plugins");
-    dirList.append("/usr/lib/nixnote2/");
-    dirList.append("/usr/local/lib/nixnote2/");
-    dirList.append("/usr/local/lib");
+    dirList.append("@PREFIX@/lib/nixnote2/");
+    dirList.append("@PREFIX@/lib");
     dirList.append("/usr/lib");
 
     // Start loading plugins
diff --git a/settings/filemanager.cpp b/settings/filemanager.cpp
index 93b8f4b79ca164e21a833b38a1528aa66d6358a3..cfa83d6f93f292dfe3e117e6e76c96e1973e0c2c 100644
--- a/settings/filemanager.cpp
+++ b/settings/filemanager.cpp
@@ -22,6 +22,9 @@ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 #include <iostream>
 #include <cstdlib>
 
+#ifdef USE_QSP
+#include <QLibraryInfo>
+#endif
 
 //*******************************************
 //* This class is used to find the location
@@ -34,19 +37,31 @@ FileManager::FileManager() {
 }
 
 void FileManager::setup(QString homeDirPath, QString programDirPath, int id) {
-
     homeDir.setPath(toPlatformPathSeparator(homeDirPath));
     programDir.setPath(toPlatformPathSeparator(programDirPath));
     createDirOrCheckWriteable(homeDir);
     this->homeDirPath = slashTerminatePath(homeDir.path());
     this->programDirPath = slashTerminatePath(programDir.path());
 
+#ifdef USE_QSP
+    dataDirPath = QLibraryInfo::location(QLibraryInfo::PrefixPath) + "/share/nixnote2/";
+    const QString userDataDir(QStandardPaths::writableLocation(QStandardPaths::AppDataLocation)+"/");
+    const QString configDir(QStandardPaths::writableLocation(QStandardPaths::AppConfigLocation) + "/");
+#else
+    // preserve the legacy behaviour
+    dataDirPat = programDirPath;
+    const QString userDataDir(homeDirPath);
+    const QString configDir(getHomeDirPath(""));
+#endif
+
+    dataDir.setPath(dataDirPath);
+
     // Read only files that everyone uses
-    imagesDir.setPath(programDirPath+"images");
+    imagesDir.setPath(dataDirPath+"images");
     checkExistingReadableDir(imagesDir);
     imagesDirPath = slashTerminatePath(imagesDir.path());
 
-    javaDir.setPath(programDirPath+"java");
+    javaDir.setPath(dataDirPath+"java");
     checkExistingReadableDir(javaDir);
     javaDirPath = slashTerminatePath(javaDir.path());
 
@@ -54,25 +69,25 @@ void FileManager::setup(QString homeDirPath, QString programDirPath, int id) {
 //    checkExistingReadableDir(spellDir);
 //    spellDirPath = slashTerminatePath(spellDir.path());
 
-    spellDirUser.setPath(homeDirPath+"spell");
+    spellDirUser.setPath(userDataDir+"spell");
     createDirOrCheckWriteable(spellDirUser);
     spellDirPathUser = slashTerminatePath(spellDirUser.path());
 
     //xmlDir.setPath(programDirPath+"xml");
     //checkExistingReadableDir(xmlDir);
 
-    translateDir.setPath(programDirPath+"translations");
+    translateDir.setPath(dataDirPath+"translations");
     checkExistingReadableDir(translateDir);
     translateDirPath= slashTerminatePath(translateDir.path());
 
-    qssDir.setPath(programDirPath+"qss");
+    qssDir.setPath(dataDirPath+"qss");
     checkExistingReadableDir(qssDir);
     qssDirPath = slashTerminatePath(qssDir.path());
 
 
     // Read/write directories that only we use
 
-    QString settingsFile = getHomeDirPath("") + "nixnote.conf";
+    QString settingsFile = configDir + "nixnote.conf";
     QSettings globalSettings(settingsFile, QSettings::IniFormat);
 
     if (id <=0) {
@@ -82,15 +97,15 @@ void FileManager::setup(QString homeDirPath, QString programDirPath, int id) {
         id = accountId;
     }
 
-    qssDirUser.setPath(homeDirPath+"qss");
+    qssDirUser.setPath(userDataDir+"qss");
     createDirOrCheckWriteable(qssDirUser);
     qssDirPathUser = slashTerminatePath(qssDirUser.path());
 
-    logsDir.setPath(homeDirPath+"logs-" +QString::number(id));
+    logsDir.setPath(userDataDir+"logs-" +QString::number(id));
     createDirOrCheckWriteable(logsDir);
     logsDirPath = slashTerminatePath(logsDir.path());
 
-    tmpDir.setPath(homeDirPath+"tmp-" +QString::number(id));
+    tmpDir.setPath(userDataDir+"tmp-" +QString::number(id));
     createDirOrCheckWriteable(tmpDir);
     tmpDirPath = slashTerminatePath(tmpDir.path());
 
@@ -155,7 +170,7 @@ void FileManager::deleteTopLevelFiles(QDir dir, bool exitOnFail) {
 void FileManager::createDirOrCheckWriteable(QDir dir) {
 
     if (!dir.exists()) {
-         if (!dir.mkdir(dir.path())) {
+         if (!dir.mkpath(dir.path())) {
              QLOG_FATAL() << "Failed to create directory '" << dir.path() << "'.  Aborting program.";
              exit(16);
          }
@@ -203,11 +218,19 @@ void FileManager::checkExistingWriteableDir(QDir dir) {
 
 
 QDir FileManager::getProgramDirFile(QString relativePath) {
+#ifdef USE_QSP
+    return QDir(dataDir.dirName() + toPlatformPathSeparator(relativePath));
+#else
     return QDir(programDir.dirName() + toPlatformPathSeparator(relativePath));
+#endif
 }
 
 QString FileManager::getProgramDirPath(QString relativePath) {
+#ifdef USE_QSP
+    return dataDirPath + toPlatformPathSeparator(relativePath);
+#else
     return programDirPath + toPlatformPathSeparator(relativePath);
+#endif
 }
 QDir FileManager::getHomeDirFile(QString relativePath) {
     return QDir(homeDir.dirName() + toPlatformPathSeparator(relativePath));
diff --git a/settings/filemanager.h b/settings/filemanager.h
index c80d7aeee32e5c80bbaed344fb0c3e0481faf5a5..27965a3b1cd0ab14289226390d09183eadbabda5 100644
--- a/settings/filemanager.h
+++ b/settings/filemanager.h
@@ -27,6 +27,16 @@ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 #include <QDir>
 #include <exception>
 
+// Under Qt5, use QStandardPaths except when told not to, or on MS Windows
+// (the latter choice may be unwise but I cannot test).
+#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0) && !defined(DONT_USE_QSTANDARDPATHS) && !defined(_WIN32)
+#define USE_QSP
+#endif
+
+#ifdef USE_QSP
+#include <QStandardPaths>
+#endif
+
 //************************************************
 //* This class is used to retrieve the
 //* location of certain directories.
@@ -45,6 +55,9 @@ private:
     QString  homeDirPath;
     QDir homeDir;
 
+    QString  dataDirPath;
+    QDir dataDir;
+
     QString dbDirPath;
     QDir dbDir;
 
diff --git a/global.cpp b/global.cpp
index 78a75ecdab9160e00b5a594032f3604e3becb914..755be93237ce62c643fe032edb4047d38f85357f 100644
--- a/global.cpp
+++ b/global.cpp
@@ -269,12 +269,18 @@ void Global::setup(StartupConfig startupConfig, bool guiAvailable) {
 // This is because we want to find other paths (like images).  This
 // allows for users to run it out of a non-path location.
 QString Global::getProgramDirPath() {
+#ifdef USE_QSP
+    // FileManager::getProgramDirPath() already returns exactly what
+    // we want to return ourselves.
+    return fileManager.getProgramDirPath("");
+#else
     QString path = QCoreApplication::applicationDirPath();
     if (path.endsWith("/bin")) {
         path.chop(3);
         return path+"share/nixnote2";
     }
     return path;
+#endif
 }
 
 
