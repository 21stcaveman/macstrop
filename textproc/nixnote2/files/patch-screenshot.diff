diff --git a/nixnote.cpp b/nixnote.cpp
index 777edfd141cf7abea9ac94a754ca3b684020c9a8..7b36bcbba8dec27fa90f562c184a848ee9b1de46 100644
--- a/nixnote.cpp
+++ b/nixnote.cpp
@@ -3163,8 +3171,12 @@ void NixNote::screenCapture() {
     this->hide();
     sleep(1);
 
-    ScreenCapture sc;
-    sc.exec();
+    ScreenCapture sc(this);
+    int result = sc.exec();
+    if (result == QDialog::Rejected) {
+        show();
+        return;
+    }
     QPixmap pix = sc.getSelection();
     this->show();
     ConfigStore cs(global.db);
diff --git a/dialog/screencapture.h b/dialog/screencapture.h
index 3ee7e2398f0d91b3f67f18ea1c750739f415a912..19a610603e5721285e011308744d6e3de54d6c52 100644
--- a/dialog/screencapture.h
+++ b/dialog/screencapture.h
@@ -23,7 +23,6 @@
 #ifndef SCREENCAPTURE_H
 #define SCREENCAPTURE_H
 
-#include <QDialog>
 #include <QDialog>
 #include <QMouseEvent>
 #include <QPainter>
@@ -31,11 +30,13 @@
 #include <QSize>
 #include <QPoint>
 
+class QMainWindow;
+
 class ScreenCapture : public QDialog
 {
     Q_OBJECT
 public:
-    explicit ScreenCapture(QWidget *parent = 0);
+    explicit ScreenCapture(QMainWindow *appWindow, QWidget *parent = 0);
     ~ScreenCapture();
     QPixmap getSelection();
 
@@ -43,6 +44,7 @@ signals:
 
 private:
     QRect selectRect;
+    QPoint desktopOrigin, scOrigin;
     QSize sizeDesktop;
 
     QPoint selStartPoint;
diff --git a/dialog/screencapture.cpp b/dialog/screencapture.cpp
index c3100af78af5f756bdcc84515e84a779c156e0f3..a94fc434fd375c09d383b14b8b5e2ed4cb3a1317 100644
--- a/dialog/screencapture.cpp
+++ b/dialog/screencapture.cpp
@@ -24,22 +24,65 @@
 
 #include <QDesktopWidget>
 #include <QApplication>
-
-ScreenCapture::ScreenCapture(QWidget *parent) :
+#include <QMainWindow>
+#include <QPoint>
+#include <QEvent>
+#include <QKeyEvent>
+#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
+#include <QScreen>
+#include <QWindow>
+#endif
+
+ScreenCapture::ScreenCapture(QMainWindow *appWindow, QWidget *parent) :
     QDialog(parent)
 {
 
+#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
+    // fetch the QScreen on which NixNote2 is currently running:
+    const auto desktopWidget = QApplication::desktop();
+    int ourScreenNr = desktopWidget->screenNumber(appWindow);
+    QScreen *ourScreen = qApp->screens().at(ourScreenNr);
+
+    // move our fullscreen window to the top-left of our current screen
+    scOrigin = ourScreen->geometry().topLeft();
+    move(scOrigin);
+    // also be certain the fullscreen window is on that screen.
+    if (auto window = windowHandle()) {
+        window->setScreen(ourScreen);
+    }
+#endif
+
     setWindowFlags(Qt::FramelessWindowHint | Qt::WindowStaysOnTopHint );
     setWindowState(Qt::WindowFullScreen);
+#ifdef __APPLE__
+    setWindowOpacity(0.25);
+#endif
     setCursor(Qt::CrossCursor);
 
+#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
+    // get the geometry of the entire desktop spanning all screens
+    const auto desktopGeo = ourScreen->virtualGeometry();
+    sizeDesktop = desktopGeo.size();
+    desktopOrigin = desktopGeo.topLeft();
+    // size our fullscreen window to the virtual desktop size. In theory we
+    // should move the top-left to desktopOrigin, but in practice we seem to
+    // be limited to the size of the screen we're on anyway (on Mac at least).
+    resize(sizeDesktop);
+
+    // QPixmap::grabWindow is deprecated in Qt5 so we use QScreen::grabWindow()
+    // and we grab the entire (virtual) desktop.
+    desktopPixmapBkg = ourScreen->grabWindow(desktopWidget->winId(),
+        desktopGeo.x(), desktopGeo.y(), desktopGeo.width(), desktopGeo.height());
+#else
     sizeDesktop = QApplication::desktop()->size();
     resize(sizeDesktop);
 
     desktopPixmapBkg = QPixmap::grabWindow(QApplication::desktop()->winId());
+    move(0, 0);
+    desktopOrigin = scOrigin = QPoint(0,0);
+#endif
     desktopPixmapClr = desktopPixmapBkg;
 
-    move(0, 0);
     drawBackGround();
 }
 
@@ -49,27 +92,41 @@ ScreenCapture::ScreenCapture(QWidget *parent) :
 
 ScreenCapture::~ScreenCapture()
 {
+    setWindowState(Qt::WindowMinimized);
 }
 
 bool ScreenCapture::event(QEvent *event)
 {
-  if (event->type() == QEvent::MouseButtonRelease
-   || event->type() == QEvent::KeyPress)
-  {
-    accept();
-  }
-  if (event->type() == QEvent::MouseButtonPress)
-  {
-    QMouseEvent *mouseEvent = static_cast<QMouseEvent*> (event);
+    switch (event->type()) {
+        case QEvent::MouseButtonRelease:
+            accept();
+            break;
+        case QEvent::KeyPress: {
+            QKeyEvent *qke = static_cast<QKeyEvent*>(event);
+            if (qke->key() == Qt::Key_Escape) {
+                // escape key cancels the grab
+                reject();
+            } else {
+                // any other key terminates the grab
+                // if this happens before a selection was made,
+                // the grab will be of the entire (virtual) desktop
+                accept();
+            }
+            break;
+        }
+        case QEvent::MouseButtonPress: {
+            QMouseEvent *mouseEvent = static_cast<QMouseEvent*> (event);
 
-    if (mouseEvent->button() != Qt::LeftButton)
-      reject();
+            if (mouseEvent->button() != Qt::LeftButton)
+                reject();
 
-    selStartPoint = mouseEvent->pos();
-    selectRect = QRect(selStartPoint, QSize());
-  }
+            selStartPoint = mouseEvent->pos();
+            selectRect = QRect(selStartPoint, QSize());
+            break;
+        }
+    }
 
-  return QDialog::event(event);
+    return QDialog::event(event);
 }
 
 void ScreenCapture::paintEvent(QPaintEvent *event)
@@ -101,7 +158,7 @@ void ScreenCapture::drawBackGround()
     // set painter brush on 85% transparency
     painter.setBrush(QBrush(QColor(0, 0, 0, 85), Qt::SolidPattern));
 
-    // draw rect of desktop size in poainter
+    // draw rect of desktop size in painter
     painter.drawRect(QApplication::desktop()->rect());
 
     QRect txtRect = QApplication::desktop()->screenGeometry(QApplication::desktop()->primaryScreen());
@@ -182,7 +239,16 @@ void ScreenCapture::drawRectSelection(QPainter &painter)
 QPixmap ScreenCapture::getSelection()
 {
     QPixmap sel;
-    sel = desktopPixmapClr.copy(selectRect);
+    QRect selected = selectRect;
+#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
+    // make sure we take the respective origins of the (virtual) desktop "window"
+    // and the fullscreen (ScreenCapture) window into account:
+    QPoint offset = desktopOrigin;
+    offset -= scOrigin;
+    offset *= -1;
+    selected.translate(offset);
+#endif
+    sel = desktopPixmapClr.copy(selected);
     return sel;
 }
 
