diff --git a/src/util/timer.c b/src/util/timer.c
index d388c51b19f2fcfc322ab31c67dad99dcd9f2828..a283b0ec2caa6d86c5ad14007969cb3998b4ca3f 100644
--- a/src/util/timer.c
+++ b/src/util/timer.c
@@ -22,6 +22,33 @@
 
 #include "timer.h"
 
+#ifdef __MACH__
+// lazily borrowed from http://stackoverflow.com/questions/5167269/clock-gettime-alternative-in-mac-os-x
+
+#include <mach/mach_time.h>
+
+#define ORWL_NANO (+1.0e-9)
+#define ORWL_GIGA UINT64_C(1000000000)
+
+static double orwl_timebase = 0.0;
+static uint64_t orwl_timestart = 0;
+
+void clock_gettime(int type, struct timespec *now)
+{
+    if (!orwl_timestart) {
+        mach_timebase_info_data_t tb = { 0 };
+        mach_timebase_info(&tb);
+        orwl_timebase = tb.numer;
+        orwl_timebase /= tb.denom;
+        orwl_timestart = mach_absolute_time();
+    }
+    // not checking here!
+    double diff = (mach_absolute_time() - orwl_timestart) * orwl_timebase;
+    now->tv_sec = diff * ORWL_NANO;
+    now->tv_nsec = diff - (now->tv_sec * ORWL_GIGA);
+}
+#endif
+
 GSList *timeout_list;
 struct timeval next_timeout;
 GHashTable *multi_timeouts;
diff --git a/src/util/timer.h b/src/util/timer.h
index 61901d2d93c370437e394a5a5bab8bbfe01426fb..00fcfef822d91e20a564b7a53c322dc1fef4c232 100644
--- a/src/util/timer.h
+++ b/src/util/timer.h
@@ -22,6 +22,13 @@
 #include <time.h>
 #include <sys/time.h>
 
+#ifdef __MACH__
+#include <mach/mach_time.h>
+
+#define CLOCK_MONOTONIC 0
+void clock_gettime(int type, struct timespec *now);
+#endif
+
 // Single shot timers (i.e. timers with interval_msec == 0) are deleted automatically as soon as they expire,
 // i.e. you do not need to stop them, however it is safe to call stop_timeout for these timers.
 // You can pass the address of the variable storing the pointer to the timer as 'self' in add_timeout, in which

